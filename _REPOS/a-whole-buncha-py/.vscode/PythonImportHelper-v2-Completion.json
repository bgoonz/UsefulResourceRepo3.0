[
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Barrier",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Semaphore",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "local",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "factorial",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "inf",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "inf",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "factorial",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "strftime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "statistics",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "statistics",
        "description": "statistics",
        "detail": "statistics",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "UserString",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "maxsize",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argv",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argv",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argv",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argv",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "maxsize",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Store",
        "importPath": "store",
        "description": "store",
        "isExtraImport": true,
        "detail": "store",
        "documentation": {}
    },
    {
        "label": "cats",
        "importPath": "data_for_store",
        "description": "data_for_store",
        "isExtraImport": true,
        "detail": "data_for_store",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "shuffle",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "system",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "twitter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "twitter",
        "description": "twitter",
        "detail": "twitter",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "glob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "array",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "dot",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pad",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "ravel",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "uint8",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "zeros",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "inf",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "exp",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "dot",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "exp",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "mgrid",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "ravel",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "square",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "uint8",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "zeros",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "array",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "cos",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "cross",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "ndarray",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "radians",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "sin",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ContextManager",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Deque",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "fnmatch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fnmatch",
        "description": "fnmatch",
        "detail": "fnmatch",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "ascii_lowercase",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "ascii_uppercase",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "ascii_letters",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "check_my_environment",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "check_my_environment",
        "description": "check_my_environment",
        "detail": "check_my_environment",
        "documentation": {}
    },
    {
        "label": "FileSystemLoader",
        "importPath": "jinja2",
        "description": "jinja2",
        "isExtraImport": true,
        "detail": "jinja2",
        "documentation": {}
    },
    {
        "label": "Environment",
        "importPath": "jinja2",
        "description": "jinja2",
        "isExtraImport": true,
        "detail": "jinja2",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cmp_to_key",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "ZipFile",
        "importPath": "zipfile",
        "description": "zipfile",
        "isExtraImport": true,
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "writer",
        "importPath": "csv",
        "description": "csv",
        "isExtraImport": true,
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "check_output",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "call",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "run",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "PIPE",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "call",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "call",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "call",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "heapq",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "heapq",
        "description": "heapq",
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "tweepy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tweepy",
        "description": "tweepy",
        "detail": "tweepy",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "html",
        "importPath": "lxml",
        "description": "lxml",
        "isExtraImport": true,
        "detail": "lxml",
        "documentation": {}
    },
    {
        "label": "html",
        "importPath": "lxml",
        "description": "lxml",
        "isExtraImport": true,
        "detail": "lxml",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "load",
        "importPath": "json",
        "description": "json",
        "isExtraImport": true,
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "bs4",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bs4",
        "description": "bs4",
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "groupby",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "accumulate",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "accumulate",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "accumulate",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "groupby",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "permutations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "islice",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "count",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "count",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "count",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "count",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "count",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "permutations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "count",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "count",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "accumulate",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "repeat",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "random_value",
        "importPath": "Fortuna",
        "description": "Fortuna",
        "isExtraImport": true,
        "detail": "Fortuna",
        "documentation": {}
    },
    {
        "label": "distribution_timer",
        "importPath": "MonkeyScope",
        "description": "MonkeyScope",
        "isExtraImport": true,
        "detail": "MonkeyScope",
        "documentation": {}
    },
    {
        "label": "create_newfig",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "create_moving_point",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "create_still_segment",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "run_or_export",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "pygments.style",
        "description": "pygments.style",
        "isExtraImport": true,
        "detail": "pygments.style",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "pygments.style",
        "description": "pygments.style",
        "isExtraImport": true,
        "detail": "pygments.style",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "pygments.style",
        "description": "pygments.style",
        "isExtraImport": true,
        "detail": "pygments.style",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "pygments.style",
        "description": "pygments.style",
        "isExtraImport": true,
        "detail": "pygments.style",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "pygments.style",
        "description": "pygments.style",
        "isExtraImport": true,
        "detail": "pygments.style",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "pygments.style",
        "description": "pygments.style",
        "isExtraImport": true,
        "detail": "pygments.style",
        "documentation": {}
    },
    {
        "label": "Keyword",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Name",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Number",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Operator",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Keyword",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Name",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Number",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Operator",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Whitespace",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Keyword",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Name",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Operator",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Name",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Keyword",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Number",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Whitespace",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Name",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Keyword",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Number",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Keyword",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Operator",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Name",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Number",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Punctuation",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Whitespace",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Keyword",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Name",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Other",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Keyword",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Name",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Number",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Operator",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Whitespace",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Punctuation",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Operator",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Keyword",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Name",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "Number",
        "importPath": "pygments.token",
        "description": "pygments.token",
        "isExtraImport": true,
        "detail": "pygments.token",
        "documentation": {}
    },
    {
        "label": "abc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "abc",
        "description": "abc",
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABCMeta",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABCMeta",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABCMeta",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "PluginBase",
        "importPath": "abc_base",
        "description": "abc_base",
        "isExtraImport": true,
        "detail": "abc_base",
        "documentation": {}
    },
    {
        "label": "PluginBase",
        "importPath": "abc_base",
        "description": "abc_base",
        "isExtraImport": true,
        "detail": "abc_base",
        "documentation": {}
    },
    {
        "label": "PluginBase",
        "importPath": "abc_base",
        "description": "abc_base",
        "isExtraImport": true,
        "detail": "abc_base",
        "documentation": {}
    },
    {
        "label": "PluginBase",
        "importPath": "abc_base",
        "description": "abc_base",
        "isExtraImport": true,
        "detail": "abc_base",
        "documentation": {}
    },
    {
        "label": "abc_subclass",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "abc_subclass",
        "description": "abc_subclass",
        "detail": "abc_subclass",
        "documentation": {}
    },
    {
        "label": "abc_register",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "abc_register",
        "description": "abc_register",
        "detail": "abc_register",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "with_statement",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "SchemeLexer",
        "importPath": "pygments.lexers.lisp",
        "description": "pygments.lexers.lisp",
        "isExtraImport": true,
        "detail": "pygments.lexers.lisp",
        "documentation": {}
    },
    {
        "label": "SchemeLexer",
        "importPath": "pygments.lexers.lisp",
        "description": "pygments.lexers.lisp",
        "isExtraImport": true,
        "detail": "pygments.lexers.lisp",
        "documentation": {}
    },
    {
        "label": "CommonLispLexer",
        "importPath": "pygments.lexers.lisp",
        "description": "pygments.lexers.lisp",
        "isExtraImport": true,
        "detail": "pygments.lexers.lisp",
        "documentation": {}
    },
    {
        "label": "RacketLexer",
        "importPath": "pygments.lexers.lisp",
        "description": "pygments.lexers.lisp",
        "isExtraImport": true,
        "detail": "pygments.lexers.lisp",
        "documentation": {}
    },
    {
        "label": "NewLispLexer",
        "importPath": "pygments.lexers.lisp",
        "description": "pygments.lexers.lisp",
        "isExtraImport": true,
        "detail": "pygments.lexers.lisp",
        "documentation": {}
    },
    {
        "label": "ShenLexer",
        "importPath": "pygments.lexers.lisp",
        "description": "pygments.lexers.lisp",
        "isExtraImport": true,
        "detail": "pygments.lexers.lisp",
        "documentation": {}
    },
    {
        "label": "IokeLexer",
        "importPath": "pygments.lexers.jvm",
        "description": "pygments.lexers.jvm",
        "isExtraImport": true,
        "detail": "pygments.lexers.jvm",
        "documentation": {}
    },
    {
        "label": "ClojureLexer",
        "importPath": "pygments.lexers.jvm",
        "description": "pygments.lexers.jvm",
        "isExtraImport": true,
        "detail": "pygments.lexers.jvm",
        "documentation": {}
    },
    {
        "label": "JavaLexer",
        "importPath": "pygments.lexers.jvm",
        "description": "pygments.lexers.jvm",
        "isExtraImport": true,
        "detail": "pygments.lexers.jvm",
        "documentation": {}
    },
    {
        "label": "ScalaLexer",
        "importPath": "pygments.lexers.jvm",
        "description": "pygments.lexers.jvm",
        "isExtraImport": true,
        "detail": "pygments.lexers.jvm",
        "documentation": {}
    },
    {
        "label": "PythonLexer",
        "importPath": "pygments.lexers.python",
        "description": "pygments.lexers.python",
        "isExtraImport": true,
        "detail": "pygments.lexers.python",
        "documentation": {}
    },
    {
        "label": "PythonConsoleLexer",
        "importPath": "pygments.lexers.python",
        "description": "pygments.lexers.python",
        "isExtraImport": true,
        "detail": "pygments.lexers.python",
        "documentation": {}
    },
    {
        "label": "PythonTracebackLexer",
        "importPath": "pygments.lexers.python",
        "description": "pygments.lexers.python",
        "isExtraImport": true,
        "detail": "pygments.lexers.python",
        "documentation": {}
    },
    {
        "label": "Python3Lexer",
        "importPath": "pygments.lexers.python",
        "description": "pygments.lexers.python",
        "isExtraImport": true,
        "detail": "pygments.lexers.python",
        "documentation": {}
    },
    {
        "label": "Python3TracebackLexer",
        "importPath": "pygments.lexers.python",
        "description": "pygments.lexers.python",
        "isExtraImport": true,
        "detail": "pygments.lexers.python",
        "documentation": {}
    },
    {
        "label": "DgLexer",
        "importPath": "pygments.lexers.python",
        "description": "pygments.lexers.python",
        "isExtraImport": true,
        "detail": "pygments.lexers.python",
        "documentation": {}
    },
    {
        "label": "CythonLexer",
        "importPath": "pygments.lexers.python",
        "description": "pygments.lexers.python",
        "isExtraImport": true,
        "detail": "pygments.lexers.python",
        "documentation": {}
    },
    {
        "label": "RubyLexer",
        "importPath": "pygments.lexers.ruby",
        "description": "pygments.lexers.ruby",
        "isExtraImport": true,
        "detail": "pygments.lexers.ruby",
        "documentation": {}
    },
    {
        "label": "RubyConsoleLexer",
        "importPath": "pygments.lexers.ruby",
        "description": "pygments.lexers.ruby",
        "isExtraImport": true,
        "detail": "pygments.lexers.ruby",
        "documentation": {}
    },
    {
        "label": "FancyLexer",
        "importPath": "pygments.lexers.ruby",
        "description": "pygments.lexers.ruby",
        "isExtraImport": true,
        "detail": "pygments.lexers.ruby",
        "documentation": {}
    },
    {
        "label": "PerlLexer",
        "importPath": "pygments.lexers.perl",
        "description": "pygments.lexers.perl",
        "isExtraImport": true,
        "detail": "pygments.lexers.perl",
        "documentation": {}
    },
    {
        "label": "Perl6Lexer",
        "importPath": "pygments.lexers.perl",
        "description": "pygments.lexers.perl",
        "isExtraImport": true,
        "detail": "pygments.lexers.perl",
        "documentation": {}
    },
    {
        "label": "CrocLexer",
        "importPath": "pygments.lexers.d",
        "description": "pygments.lexers.d",
        "isExtraImport": true,
        "detail": "pygments.lexers.d",
        "documentation": {}
    },
    {
        "label": "MiniDLexer",
        "importPath": "pygments.lexers.d",
        "description": "pygments.lexers.d",
        "isExtraImport": true,
        "detail": "pygments.lexers.d",
        "documentation": {}
    },
    {
        "label": "DLexer",
        "importPath": "pygments.lexers.d",
        "description": "pygments.lexers.d",
        "isExtraImport": true,
        "detail": "pygments.lexers.d",
        "documentation": {}
    },
    {
        "label": "IoLexer",
        "importPath": "pygments.lexers.iolang",
        "description": "pygments.lexers.iolang",
        "isExtraImport": true,
        "detail": "pygments.lexers.iolang",
        "documentation": {}
    },
    {
        "label": "TclLexer",
        "importPath": "pygments.lexers.tcl",
        "description": "pygments.lexers.tcl",
        "isExtraImport": true,
        "detail": "pygments.lexers.tcl",
        "documentation": {}
    },
    {
        "label": "FactorLexer",
        "importPath": "pygments.lexers.factor",
        "description": "pygments.lexers.factor",
        "isExtraImport": true,
        "detail": "pygments.lexers.factor",
        "documentation": {}
    },
    {
        "label": "LuaLexer",
        "importPath": "pygments.lexers.scripting",
        "description": "pygments.lexers.scripting",
        "isExtraImport": true,
        "detail": "pygments.lexers.scripting",
        "documentation": {}
    },
    {
        "label": "MoonScriptLexer",
        "importPath": "pygments.lexers.scripting",
        "description": "pygments.lexers.scripting",
        "isExtraImport": true,
        "detail": "pygments.lexers.scripting",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "web",
        "importPath": "aiohttp",
        "description": "aiohttp",
        "isExtraImport": true,
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "CountryInfo",
        "importPath": "countryinfo",
        "description": "countryinfo",
        "isExtraImport": true,
        "detail": "countryinfo",
        "documentation": {}
    },
    {
        "label": "pprint",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pprint",
        "description": "pprint",
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "web",
        "importPath": "tornado",
        "description": "tornado",
        "isExtraImport": true,
        "detail": "tornado",
        "documentation": {}
    },
    {
        "label": "gen",
        "importPath": "tornado",
        "description": "tornado",
        "isExtraImport": true,
        "detail": "tornado",
        "documentation": {}
    },
    {
        "label": "web",
        "importPath": "tornado",
        "description": "tornado",
        "isExtraImport": true,
        "detail": "tornado",
        "documentation": {}
    },
    {
        "label": "web",
        "importPath": "tornado",
        "description": "tornado",
        "isExtraImport": true,
        "detail": "tornado",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "moviepy.editor",
        "description": "moviepy.editor",
        "isExtraImport": true,
        "detail": "moviepy.editor",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "moviepy.editor",
        "description": "moviepy.editor",
        "isExtraImport": true,
        "detail": "moviepy.editor",
        "documentation": {}
    },
    {
        "label": "appdirs",
        "importPath": "pip._vendor",
        "description": "pip._vendor",
        "isExtraImport": true,
        "detail": "pip._vendor",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "shlex",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shlex",
        "description": "shlex",
        "detail": "shlex",
        "documentation": {}
    },
    {
        "label": "argparse_parent_base",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse_parent_base",
        "description": "argparse_parent_base",
        "detail": "argparse_parent_base",
        "documentation": {}
    },
    {
        "label": "argparse_parent_with_group",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse_parent_with_group",
        "description": "argparse_parent_with_group",
        "detail": "argparse_parent_with_group",
        "documentation": {}
    },
    {
        "label": "configparser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "configparser",
        "description": "configparser",
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "ConfigParser",
        "importPath": "configparser",
        "description": "configparser",
        "isExtraImport": true,
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "ConfigParser",
        "importPath": "configparser",
        "description": "configparser",
        "isExtraImport": true,
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "ConfigParser",
        "importPath": "configparser",
        "description": "configparser",
        "isExtraImport": true,
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "ConfigParser",
        "importPath": "configparser",
        "description": "configparser",
        "isExtraImport": true,
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "ConfigParser",
        "importPath": "configparser",
        "description": "configparser",
        "isExtraImport": true,
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "ExtendedInterpolation",
        "importPath": "configparser",
        "description": "configparser",
        "isExtraImport": true,
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "ConfigParser",
        "importPath": "configparser",
        "description": "configparser",
        "isExtraImport": true,
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "ConfigParser",
        "importPath": "configparser",
        "description": "configparser",
        "isExtraImport": true,
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "ConfigParser",
        "importPath": "configparser",
        "description": "configparser",
        "isExtraImport": true,
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "ConfigParser",
        "importPath": "configparser",
        "description": "configparser",
        "isExtraImport": true,
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "ConfigParser",
        "importPath": "configparser",
        "description": "configparser",
        "isExtraImport": true,
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "ConfigParser",
        "importPath": "configparser",
        "description": "configparser",
        "isExtraImport": true,
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "ConfigParser",
        "importPath": "configparser",
        "description": "configparser",
        "isExtraImport": true,
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "ConfigParser",
        "importPath": "configparser",
        "description": "configparser",
        "isExtraImport": true,
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "ConfigParser",
        "importPath": "configparser",
        "description": "configparser",
        "isExtraImport": true,
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "ConfigParser",
        "importPath": "configparser",
        "description": "configparser",
        "isExtraImport": true,
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "ConfigParser",
        "importPath": "configparser",
        "description": "configparser",
        "isExtraImport": true,
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "ConfigParser",
        "importPath": "configparser",
        "description": "configparser",
        "isExtraImport": true,
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "ConfigParser",
        "importPath": "configparser",
        "description": "configparser",
        "isExtraImport": true,
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "array",
        "description": "array",
        "detail": "array",
        "documentation": {}
    },
    {
        "label": "binascii",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "binascii",
        "description": "binascii",
        "detail": "binascii",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "ArrayLike",
        "importPath": "numpy.typing",
        "description": "numpy.typing",
        "isExtraImport": true,
        "detail": "numpy.typing",
        "documentation": {}
    },
    {
        "label": "pad",
        "importPath": "pygorithm.binary.binary_utils",
        "description": "pygorithm.binary.binary_utils",
        "isExtraImport": true,
        "detail": "pygorithm.binary.binary_utils",
        "documentation": {}
    },
    {
        "label": "to_base2",
        "importPath": "pygorithm.binary.base10",
        "description": "pygorithm.binary.base10",
        "isExtraImport": true,
        "detail": "pygorithm.binary.base10",
        "documentation": {}
    },
    {
        "label": "to_base16",
        "importPath": "pygorithm.binary.base2",
        "description": "pygorithm.binary.base2",
        "isExtraImport": true,
        "detail": "pygorithm.binary.base2",
        "documentation": {}
    },
    {
        "label": "to_ascii",
        "importPath": "pygorithm.binary.base2",
        "description": "pygorithm.binary.base2",
        "isExtraImport": true,
        "detail": "pygorithm.binary.base2",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "BuildEnvironment",
        "importPath": "sphinx.environment",
        "description": "sphinx.environment",
        "isExtraImport": true,
        "detail": "sphinx.environment",
        "documentation": {}
    },
    {
        "label": "BuildEnvironment",
        "importPath": "sphinx.environment",
        "description": "sphinx.environment",
        "isExtraImport": true,
        "detail": "sphinx.environment",
        "documentation": {}
    },
    {
        "label": "AstroidManager",
        "importPath": "astroid.manager",
        "description": "astroid.manager",
        "isExtraImport": true,
        "detail": "astroid.manager",
        "documentation": {}
    },
    {
        "label": "AstroidManager",
        "importPath": "astroid.manager",
        "description": "astroid.manager",
        "isExtraImport": true,
        "detail": "astroid.manager",
        "documentation": {}
    },
    {
        "label": "AstroidManager",
        "importPath": "astroid.manager",
        "description": "astroid.manager",
        "isExtraImport": true,
        "detail": "astroid.manager",
        "documentation": {}
    },
    {
        "label": "AstroidManager",
        "importPath": "astroid.manager",
        "description": "astroid.manager",
        "isExtraImport": true,
        "detail": "astroid.manager",
        "documentation": {}
    },
    {
        "label": "AstroidManager",
        "importPath": "astroid.manager",
        "description": "astroid.manager",
        "isExtraImport": true,
        "detail": "astroid.manager",
        "documentation": {}
    },
    {
        "label": "AstroidManager",
        "importPath": "astroid.manager",
        "description": "astroid.manager",
        "isExtraImport": true,
        "detail": "astroid.manager",
        "documentation": {}
    },
    {
        "label": "AstroidManager",
        "importPath": "astroid.manager",
        "description": "astroid.manager",
        "isExtraImport": true,
        "detail": "astroid.manager",
        "documentation": {}
    },
    {
        "label": "AstroidManager",
        "importPath": "astroid.manager",
        "description": "astroid.manager",
        "isExtraImport": true,
        "detail": "astroid.manager",
        "documentation": {}
    },
    {
        "label": "AstroidManager",
        "importPath": "astroid.manager",
        "description": "astroid.manager",
        "isExtraImport": true,
        "detail": "astroid.manager",
        "documentation": {}
    },
    {
        "label": "zmq",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zmq",
        "description": "zmq",
        "detail": "zmq",
        "documentation": {}
    },
    {
        "label": "Poller",
        "importPath": "zmq.asyncio",
        "description": "zmq.asyncio",
        "isExtraImport": true,
        "detail": "zmq.asyncio",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "warn",
        "importPath": "warnings",
        "description": "warnings",
        "isExtraImport": true,
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "warn",
        "importPath": "warnings",
        "description": "warnings",
        "isExtraImport": true,
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "concurrent.futures",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "ProcessPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "signal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "signal",
        "description": "signal",
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "asyncio.subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio.subprocess",
        "description": "asyncio.subprocess",
        "detail": "asyncio.subprocess",
        "documentation": {}
    },
    {
        "label": "atexit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "atexit",
        "description": "atexit",
        "detail": "atexit",
        "documentation": {}
    },
    {
        "label": "PyPDF2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "PdfFileWriter",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "PdfFileReader",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "pyttsx3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyttsx3",
        "description": "pyttsx3",
        "detail": "pyttsx3",
        "documentation": {}
    },
    {
        "label": "pyautogui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyautogui",
        "description": "pyautogui",
        "detail": "pyautogui",
        "documentation": {}
    },
    {
        "label": "Dispatch",
        "importPath": "win32com.client",
        "description": "win32com.client",
        "isExtraImport": true,
        "detail": "win32com.client",
        "documentation": {}
    },
    {
        "label": "speech_recognition",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "speech_recognition",
        "description": "speech_recognition",
        "detail": "speech_recognition",
        "documentation": {}
    },
    {
        "label": "python_avatars",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "python_avatars",
        "description": "python_avatars",
        "detail": "python_avatars",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "matplotlib_inline.backend_inline",
        "description": "matplotlib_inline.backend_inline",
        "isExtraImport": true,
        "detail": "matplotlib_inline.backend_inline",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "BTNode",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "T",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "src.typehints",
        "description": "src.typehints",
        "isExtraImport": true,
        "detail": "src.typehints",
        "documentation": {}
    },
    {
        "label": "pyglet",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyglet",
        "description": "pyglet",
        "detail": "pyglet",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "textwrap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "textwrap",
        "description": "textwrap",
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "FPDF",
        "importPath": "fpdf",
        "description": "fpdf",
        "isExtraImport": true,
        "detail": "fpdf",
        "documentation": {}
    },
    {
        "label": "distutils.command.bdist_rpm",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "distutils.command.bdist_rpm",
        "description": "distutils.command.bdist_rpm",
        "detail": "distutils.command.bdist_rpm",
        "documentation": {}
    },
    {
        "label": "_utils",
        "importPath": "pip._vendor.tenacity",
        "description": "pip._vendor.tenacity",
        "isExtraImport": true,
        "detail": "pip._vendor.tenacity",
        "documentation": {}
    },
    {
        "label": "bisect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bisect",
        "description": "bisect",
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "bisect",
        "importPath": "bisect",
        "description": "bisect",
        "isExtraImport": true,
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "PIL",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PIL",
        "description": "PIL",
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageGrab",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageGrab",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageFilter",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "Rect",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "Vector2",
        "importPath": "pygame.math",
        "description": "pygame.math",
        "isExtraImport": true,
        "detail": "pygame.math",
        "documentation": {}
    },
    {
        "label": "arguments",
        "importPath": "astroid",
        "description": "astroid",
        "isExtraImport": true,
        "detail": "astroid",
        "documentation": {}
    },
    {
        "label": "inference_tip",
        "importPath": "astroid",
        "description": "astroid",
        "isExtraImport": true,
        "detail": "astroid",
        "documentation": {}
    },
    {
        "label": "nodes",
        "importPath": "astroid",
        "description": "astroid",
        "isExtraImport": true,
        "detail": "astroid",
        "documentation": {}
    },
    {
        "label": "extract_node",
        "importPath": "astroid",
        "description": "astroid",
        "isExtraImport": true,
        "detail": "astroid",
        "documentation": {}
    },
    {
        "label": "UseInferenceDefault",
        "importPath": "astroid.exceptions",
        "description": "astroid.exceptions",
        "isExtraImport": true,
        "detail": "astroid.exceptions",
        "documentation": {}
    },
    {
        "label": "InferenceOverwriteError",
        "importPath": "astroid.exceptions",
        "description": "astroid.exceptions",
        "isExtraImport": true,
        "detail": "astroid.exceptions",
        "documentation": {}
    },
    {
        "label": "ClassDef",
        "importPath": "astroid.scoped_nodes",
        "description": "astroid.scoped_nodes",
        "isExtraImport": true,
        "detail": "astroid.scoped_nodes",
        "documentation": {}
    },
    {
        "label": "ClassDef",
        "importPath": "astroid.scoped_nodes",
        "description": "astroid.scoped_nodes",
        "isExtraImport": true,
        "detail": "astroid.scoped_nodes",
        "documentation": {}
    },
    {
        "label": "register_module_extender",
        "importPath": "astroid.brain.helpers",
        "description": "astroid.brain.helpers",
        "isExtraImport": true,
        "detail": "astroid.brain.helpers",
        "documentation": {}
    },
    {
        "label": "register_module_extender",
        "importPath": "astroid.brain.helpers",
        "description": "astroid.brain.helpers",
        "isExtraImport": true,
        "detail": "astroid.brain.helpers",
        "documentation": {}
    },
    {
        "label": "register_module_extender",
        "importPath": "astroid.brain.helpers",
        "description": "astroid.brain.helpers",
        "isExtraImport": true,
        "detail": "astroid.brain.helpers",
        "documentation": {}
    },
    {
        "label": "register_module_extender",
        "importPath": "astroid.brain.helpers",
        "description": "astroid.brain.helpers",
        "isExtraImport": true,
        "detail": "astroid.brain.helpers",
        "documentation": {}
    },
    {
        "label": "register_module_extender",
        "importPath": "astroid.brain.helpers",
        "description": "astroid.brain.helpers",
        "isExtraImport": true,
        "detail": "astroid.brain.helpers",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "astroid.builder",
        "description": "astroid.builder",
        "isExtraImport": true,
        "detail": "astroid.builder",
        "documentation": {}
    },
    {
        "label": "AstroidBuilder",
        "importPath": "astroid.builder",
        "description": "astroid.builder",
        "isExtraImport": true,
        "detail": "astroid.builder",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "astroid.builder",
        "description": "astroid.builder",
        "isExtraImport": true,
        "detail": "astroid.builder",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "astroid.builder",
        "description": "astroid.builder",
        "isExtraImport": true,
        "detail": "astroid.builder",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "astroid.builder",
        "description": "astroid.builder",
        "isExtraImport": true,
        "detail": "astroid.builder",
        "documentation": {}
    },
    {
        "label": "PY37_PLUS",
        "importPath": "astroid.const",
        "description": "astroid.const",
        "isExtraImport": true,
        "detail": "astroid.const",
        "documentation": {}
    },
    {
        "label": "Const",
        "importPath": "astroid.node_classes",
        "description": "astroid.node_classes",
        "isExtraImport": true,
        "detail": "astroid.node_classes",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "psutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psutil",
        "description": "psutil",
        "detail": "psutil",
        "documentation": {}
    },
    {
        "label": "watcher",
        "importPath": "obs",
        "description": "obs",
        "isExtraImport": true,
        "detail": "obs",
        "documentation": {}
    },
    {
        "label": "enum",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "enum",
        "description": "enum",
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "add_metaclass",
        "importPath": "six",
        "description": "six",
        "isExtraImport": true,
        "detail": "six",
        "documentation": {}
    },
    {
        "label": "add_metaclass",
        "importPath": "six",
        "description": "six",
        "isExtraImport": true,
        "detail": "six",
        "documentation": {}
    },
    {
        "label": "Creator",
        "importPath": "virtualenv.create.creator",
        "description": "virtualenv.create.creator",
        "isExtraImport": true,
        "detail": "virtualenv.create.creator",
        "documentation": {}
    },
    {
        "label": "Describe",
        "importPath": "virtualenv.create.describe",
        "description": "virtualenv.create.describe",
        "isExtraImport": true,
        "detail": "virtualenv.create.describe",
        "documentation": {}
    },
    {
        "label": "bz2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bz2",
        "description": "bz2",
        "detail": "bz2",
        "documentation": {}
    },
    {
        "label": "contextlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contextlib",
        "description": "contextlib",
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "ExitStack",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "redirect_stdout",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "redirect_stderr",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "calendar",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "calendar",
        "description": "calendar",
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "isleap",
        "importPath": "calendar",
        "description": "calendar",
        "isExtraImport": true,
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "filedialog",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "pip._vendor.packaging.version",
        "description": "pip._vendor.packaging.version",
        "isExtraImport": true,
        "detail": "pip._vendor.packaging.version",
        "documentation": {}
    },
    {
        "label": "Link",
        "importPath": "pip._internal.models.link",
        "description": "pip._internal.models.link",
        "isExtraImport": true,
        "detail": "pip._internal.models.link",
        "documentation": {}
    },
    {
        "label": "KeyBasedCompareMixin",
        "importPath": "pip._internal.utils.models",
        "description": "pip._internal.utils.models",
        "isExtraImport": true,
        "detail": "pip._internal.utils.models",
        "documentation": {}
    },
    {
        "label": "TreeBuilder",
        "importPath": "xml.etree.cElementTree",
        "description": "xml.etree.cElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.cElementTree",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "xml.etree.cElementTree",
        "description": "xml.etree.cElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.cElementTree",
        "documentation": {}
    },
    {
        "label": "tostring",
        "importPath": "xml.etree.cElementTree",
        "description": "xml.etree.cElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.cElementTree",
        "documentation": {}
    },
    {
        "label": "iterparse",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "SubElement",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "tostring",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "SubElement",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "SubElement",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "tostring",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "tostring",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "SubElement",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "tostring",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "XML",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "SubElement",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "tostring",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "XML",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "XMLParser",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "iterparse",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "SubElement",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "ElementTree",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "SubElement",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "ElementTree",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "iterparse",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "XML",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "XMLID",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "SubElement",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "tostring",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "where",
        "importPath": "pip._vendor.certifi",
        "description": "pip._vendor.certifi",
        "isExtraImport": true,
        "detail": "pip._vendor.certifi",
        "documentation": {}
    },
    {
        "label": "cgitb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cgitb",
        "description": "cgitb",
        "detail": "cgitb",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "docparams",
        "importPath": "pylint.extensions",
        "description": "pylint.extensions",
        "isExtraImport": true,
        "detail": "pylint.extensions",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "importPath": "linked_list",
        "description": "linked_list",
        "isExtraImport": true,
        "detail": "linked_list",
        "documentation": {}
    },
    {
        "label": "cherrypy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cherrypy",
        "description": "cherrypy",
        "detail": "cherrypy",
        "documentation": {}
    },
    {
        "label": "cups",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cups",
        "description": "cups",
        "detail": "cups",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "traitlets",
        "description": "traitlets",
        "isExtraImport": true,
        "detail": "traitlets",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "traitlets",
        "description": "traitlets",
        "isExtraImport": true,
        "detail": "traitlets",
        "documentation": {}
    },
    {
        "label": "Unicode",
        "importPath": "traitlets",
        "description": "traitlets",
        "isExtraImport": true,
        "detail": "traitlets",
        "documentation": {}
    },
    {
        "label": "Unicode",
        "importPath": "traitlets",
        "description": "traitlets",
        "isExtraImport": true,
        "detail": "traitlets",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "traitlets",
        "description": "traitlets",
        "isExtraImport": true,
        "detail": "traitlets",
        "documentation": {}
    },
    {
        "label": "default",
        "importPath": "traitlets",
        "description": "traitlets",
        "isExtraImport": true,
        "detail": "traitlets",
        "documentation": {}
    },
    {
        "label": "Unicode",
        "importPath": "traitlets",
        "description": "traitlets",
        "isExtraImport": true,
        "detail": "traitlets",
        "documentation": {}
    },
    {
        "label": "HasTraits",
        "importPath": "traitlets",
        "description": "traitlets",
        "isExtraImport": true,
        "detail": "traitlets",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "traitlets",
        "description": "traitlets",
        "isExtraImport": true,
        "detail": "traitlets",
        "documentation": {}
    },
    {
        "label": "application",
        "importPath": "flake8.main",
        "description": "flake8.main",
        "isExtraImport": true,
        "detail": "flake8.main",
        "documentation": {}
    },
    {
        "label": "click",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "click",
        "description": "click",
        "detail": "click",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "click",
        "description": "click",
        "isExtraImport": true,
        "detail": "click",
        "documentation": {}
    },
    {
        "label": "launch",
        "importPath": "pyppeteer",
        "description": "pyppeteer",
        "isExtraImport": true,
        "detail": "pyppeteer",
        "documentation": {}
    },
    {
        "label": "launch",
        "importPath": "pyppeteer",
        "description": "pyppeteer",
        "isExtraImport": true,
        "detail": "pyppeteer",
        "documentation": {}
    },
    {
        "label": "helper",
        "importPath": "pyppeteer",
        "description": "pyppeteer",
        "isExtraImport": true,
        "detail": "pyppeteer",
        "documentation": {}
    },
    {
        "label": "cmd",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cmd",
        "description": "cmd",
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "timeit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "timeit",
        "description": "timeit",
        "detail": "timeit",
        "documentation": {}
    },
    {
        "label": "timeit",
        "importPath": "timeit",
        "description": "timeit",
        "isExtraImport": true,
        "detail": "timeit",
        "documentation": {}
    },
    {
        "label": "codecs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "codecs",
        "description": "codecs",
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "to_hex",
        "importPath": "codecs_to_hex",
        "description": "codecs_to_hex",
        "isExtraImport": true,
        "detail": "codecs_to_hex",
        "documentation": {}
    },
    {
        "label": "to_hex",
        "importPath": "codecs_to_hex",
        "description": "codecs_to_hex",
        "isExtraImport": true,
        "detail": "codecs_to_hex",
        "documentation": {}
    },
    {
        "label": "to_hex",
        "importPath": "codecs_to_hex",
        "description": "codecs_to_hex",
        "isExtraImport": true,
        "detail": "codecs_to_hex",
        "documentation": {}
    },
    {
        "label": "to_hex",
        "importPath": "codecs_to_hex",
        "description": "codecs_to_hex",
        "isExtraImport": true,
        "detail": "codecs_to_hex",
        "documentation": {}
    },
    {
        "label": "to_hex",
        "importPath": "codecs_to_hex",
        "description": "codecs_to_hex",
        "isExtraImport": true,
        "detail": "codecs_to_hex",
        "documentation": {}
    },
    {
        "label": "to_hex",
        "importPath": "codecs_to_hex",
        "description": "codecs_to_hex",
        "isExtraImport": true,
        "detail": "codecs_to_hex",
        "documentation": {}
    },
    {
        "label": "to_hex",
        "importPath": "codecs_to_hex",
        "description": "codecs_to_hex",
        "isExtraImport": true,
        "detail": "codecs_to_hex",
        "documentation": {}
    },
    {
        "label": "to_hex",
        "importPath": "codecs_to_hex",
        "description": "codecs_to_hex",
        "isExtraImport": true,
        "detail": "codecs_to_hex",
        "documentation": {}
    },
    {
        "label": "to_hex",
        "importPath": "codecs_to_hex",
        "description": "codecs_to_hex",
        "isExtraImport": true,
        "detail": "codecs_to_hex",
        "documentation": {}
    },
    {
        "label": "to_hex",
        "importPath": "codecs_to_hex",
        "description": "codecs_to_hex",
        "isExtraImport": true,
        "detail": "codecs_to_hex",
        "documentation": {}
    },
    {
        "label": "unicodedata",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unicodedata",
        "description": "unicodedata",
        "detail": "unicodedata",
        "documentation": {}
    },
    {
        "label": "encoding_map",
        "importPath": "codecs_invertcaps_charmap",
        "description": "codecs_invertcaps_charmap",
        "isExtraImport": true,
        "detail": "codecs_invertcaps_charmap",
        "documentation": {}
    },
    {
        "label": "encodings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "encodings",
        "description": "encodings",
        "detail": "encodings",
        "documentation": {}
    },
    {
        "label": "socketserver",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socketserver",
        "description": "socketserver",
        "detail": "socketserver",
        "documentation": {}
    },
    {
        "label": "ThreadingMixIn",
        "importPath": "socketserver",
        "description": "socketserver",
        "isExtraImport": true,
        "detail": "socketserver",
        "documentation": {}
    },
    {
        "label": "types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "types",
        "description": "types",
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "ModuleType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "PYTEST_COLLECT_MODULE",
        "importPath": "_pytest.deprecated",
        "description": "_pytest.deprecated",
        "isExtraImport": true,
        "detail": "_pytest.deprecated",
        "documentation": {}
    },
    {
        "label": "BaseReporter",
        "importPath": "pylint.reporters.base_reporter",
        "description": "pylint.reporters.base_reporter",
        "isExtraImport": true,
        "detail": "pylint.reporters.base_reporter",
        "documentation": {}
    },
    {
        "label": "BaseReporter",
        "importPath": "pylint.reporters.base_reporter",
        "description": "pylint.reporters.base_reporter",
        "isExtraImport": true,
        "detail": "pylint.reporters.base_reporter",
        "documentation": {}
    },
    {
        "label": "Gtk",
        "importPath": "gi.repository",
        "description": "gi.repository",
        "isExtraImport": true,
        "detail": "gi.repository",
        "documentation": {}
    },
    {
        "label": "Gtk",
        "importPath": "gi.repository",
        "description": "gi.repository",
        "isExtraImport": true,
        "detail": "gi.repository",
        "documentation": {}
    },
    {
        "label": "GLib",
        "importPath": "gi.repository",
        "description": "gi.repository",
        "isExtraImport": true,
        "detail": "gi.repository",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "destroyAllWindows",
        "importPath": "cv2",
        "description": "cv2",
        "isExtraImport": true,
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "imread",
        "importPath": "cv2",
        "description": "cv2",
        "isExtraImport": true,
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "imshow",
        "importPath": "cv2",
        "description": "cv2",
        "isExtraImport": true,
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "waitKey",
        "importPath": "cv2",
        "description": "cv2",
        "isExtraImport": true,
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "COLOR_BGR2GRAY",
        "importPath": "cv2",
        "description": "cv2",
        "isExtraImport": true,
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "cvtColor",
        "importPath": "cv2",
        "description": "cv2",
        "isExtraImport": true,
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "imread",
        "importPath": "cv2",
        "description": "cv2",
        "isExtraImport": true,
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "imshow",
        "importPath": "cv2",
        "description": "cv2",
        "isExtraImport": true,
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "waitKey",
        "importPath": "cv2",
        "description": "cv2",
        "isExtraImport": true,
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "COLOR_BGR2GRAY",
        "importPath": "cv2",
        "description": "cv2",
        "isExtraImport": true,
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "cvtColor",
        "importPath": "cv2",
        "description": "cv2",
        "isExtraImport": true,
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "imread",
        "importPath": "cv2",
        "description": "cv2",
        "isExtraImport": true,
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "imshow",
        "importPath": "cv2",
        "description": "cv2",
        "isExtraImport": true,
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "waitKey",
        "importPath": "cv2",
        "description": "cv2",
        "isExtraImport": true,
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "check_chromium",
        "importPath": "pyppeteer.chromium_downloader",
        "description": "pyppeteer.chromium_downloader",
        "isExtraImport": true,
        "detail": "pyppeteer.chromium_downloader",
        "documentation": {}
    },
    {
        "label": "download_chromium",
        "importPath": "pyppeteer.chromium_downloader",
        "description": "pyppeteer.chromium_downloader",
        "isExtraImport": true,
        "detail": "pyppeteer.chromium_downloader",
        "documentation": {}
    },
    {
        "label": "compileall",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "compileall",
        "description": "compileall",
        "detail": "compileall",
        "documentation": {}
    },
    {
        "label": "CLexer",
        "importPath": "pygments.lexers.c_cpp",
        "description": "pygments.lexers.c_cpp",
        "isExtraImport": true,
        "detail": "pygments.lexers.c_cpp",
        "documentation": {}
    },
    {
        "label": "CppLexer",
        "importPath": "pygments.lexers.c_cpp",
        "description": "pygments.lexers.c_cpp",
        "isExtraImport": true,
        "detail": "pygments.lexers.c_cpp",
        "documentation": {}
    },
    {
        "label": "ObjectiveCLexer",
        "importPath": "pygments.lexers.objective",
        "description": "pygments.lexers.objective",
        "isExtraImport": true,
        "detail": "pygments.lexers.objective",
        "documentation": {}
    },
    {
        "label": "ObjectiveCppLexer",
        "importPath": "pygments.lexers.objective",
        "description": "pygments.lexers.objective",
        "isExtraImport": true,
        "detail": "pygments.lexers.objective",
        "documentation": {}
    },
    {
        "label": "LogosLexer",
        "importPath": "pygments.lexers.objective",
        "description": "pygments.lexers.objective",
        "isExtraImport": true,
        "detail": "pygments.lexers.objective",
        "documentation": {}
    },
    {
        "label": "GoLexer",
        "importPath": "pygments.lexers.go",
        "description": "pygments.lexers.go",
        "isExtraImport": true,
        "detail": "pygments.lexers.go",
        "documentation": {}
    },
    {
        "label": "RustLexer",
        "importPath": "pygments.lexers.rust",
        "description": "pygments.lexers.rust",
        "isExtraImport": true,
        "detail": "pygments.lexers.rust",
        "documentation": {}
    },
    {
        "label": "ECLexer",
        "importPath": "pygments.lexers.c_like",
        "description": "pygments.lexers.c_like",
        "isExtraImport": true,
        "detail": "pygments.lexers.c_like",
        "documentation": {}
    },
    {
        "label": "ValaLexer",
        "importPath": "pygments.lexers.c_like",
        "description": "pygments.lexers.c_like",
        "isExtraImport": true,
        "detail": "pygments.lexers.c_like",
        "documentation": {}
    },
    {
        "label": "CudaLexer",
        "importPath": "pygments.lexers.c_like",
        "description": "pygments.lexers.c_like",
        "isExtraImport": true,
        "detail": "pygments.lexers.c_like",
        "documentation": {}
    },
    {
        "label": "DelphiLexer",
        "importPath": "pygments.lexers.pascal",
        "description": "pygments.lexers.pascal",
        "isExtraImport": true,
        "detail": "pygments.lexers.pascal",
        "documentation": {}
    },
    {
        "label": "Modula2Lexer",
        "importPath": "pygments.lexers.pascal",
        "description": "pygments.lexers.pascal",
        "isExtraImport": true,
        "detail": "pygments.lexers.pascal",
        "documentation": {}
    },
    {
        "label": "AdaLexer",
        "importPath": "pygments.lexers.pascal",
        "description": "pygments.lexers.pascal",
        "isExtraImport": true,
        "detail": "pygments.lexers.pascal",
        "documentation": {}
    },
    {
        "label": "CobolLexer",
        "importPath": "pygments.lexers.business",
        "description": "pygments.lexers.business",
        "isExtraImport": true,
        "detail": "pygments.lexers.business",
        "documentation": {}
    },
    {
        "label": "CobolFreeformatLexer",
        "importPath": "pygments.lexers.business",
        "description": "pygments.lexers.business",
        "isExtraImport": true,
        "detail": "pygments.lexers.business",
        "documentation": {}
    },
    {
        "label": "FortranLexer",
        "importPath": "pygments.lexers.fortran",
        "description": "pygments.lexers.fortran",
        "isExtraImport": true,
        "detail": "pygments.lexers.fortran",
        "documentation": {}
    },
    {
        "label": "PrologLexer",
        "importPath": "pygments.lexers.prolog",
        "description": "pygments.lexers.prolog",
        "isExtraImport": true,
        "detail": "pygments.lexers.prolog",
        "documentation": {}
    },
    {
        "label": "GLShaderLexer",
        "importPath": "pygments.lexers.graphics",
        "description": "pygments.lexers.graphics",
        "isExtraImport": true,
        "detail": "pygments.lexers.graphics",
        "documentation": {}
    },
    {
        "label": "OcamlLexer",
        "importPath": "pygments.lexers.ml",
        "description": "pygments.lexers.ml",
        "isExtraImport": true,
        "detail": "pygments.lexers.ml",
        "documentation": {}
    },
    {
        "label": "SMLLexer",
        "importPath": "pygments.lexers.ml",
        "description": "pygments.lexers.ml",
        "isExtraImport": true,
        "detail": "pygments.lexers.ml",
        "documentation": {}
    },
    {
        "label": "OcamlLexer",
        "importPath": "pygments.lexers.ml",
        "description": "pygments.lexers.ml",
        "isExtraImport": true,
        "detail": "pygments.lexers.ml",
        "documentation": {}
    },
    {
        "label": "OpaLexer",
        "importPath": "pygments.lexers.ml",
        "description": "pygments.lexers.ml",
        "isExtraImport": true,
        "detail": "pygments.lexers.ml",
        "documentation": {}
    },
    {
        "label": "BlitzBasicLexer",
        "importPath": "pygments.lexers.basic",
        "description": "pygments.lexers.basic",
        "isExtraImport": true,
        "detail": "pygments.lexers.basic",
        "documentation": {}
    },
    {
        "label": "BlitzMaxLexer",
        "importPath": "pygments.lexers.basic",
        "description": "pygments.lexers.basic",
        "isExtraImport": true,
        "detail": "pygments.lexers.basic",
        "documentation": {}
    },
    {
        "label": "MonkeyLexer",
        "importPath": "pygments.lexers.basic",
        "description": "pygments.lexers.basic",
        "isExtraImport": true,
        "detail": "pygments.lexers.basic",
        "documentation": {}
    },
    {
        "label": "DylanLexer",
        "importPath": "pygments.lexers.dylan",
        "description": "pygments.lexers.dylan",
        "isExtraImport": true,
        "detail": "pygments.lexers.dylan",
        "documentation": {}
    },
    {
        "label": "DylanLidLexer",
        "importPath": "pygments.lexers.dylan",
        "description": "pygments.lexers.dylan",
        "isExtraImport": true,
        "detail": "pygments.lexers.dylan",
        "documentation": {}
    },
    {
        "label": "DylanConsoleLexer",
        "importPath": "pygments.lexers.dylan",
        "description": "pygments.lexers.dylan",
        "isExtraImport": true,
        "detail": "pygments.lexers.dylan",
        "documentation": {}
    },
    {
        "label": "OocLexer",
        "importPath": "pygments.lexers.ooc",
        "description": "pygments.lexers.ooc",
        "isExtraImport": true,
        "detail": "pygments.lexers.ooc",
        "documentation": {}
    },
    {
        "label": "FelixLexer",
        "importPath": "pygments.lexers.felix",
        "description": "pygments.lexers.felix",
        "isExtraImport": true,
        "detail": "pygments.lexers.felix",
        "documentation": {}
    },
    {
        "label": "NimrodLexer",
        "importPath": "pygments.lexers.nimrod",
        "description": "pygments.lexers.nimrod",
        "isExtraImport": true,
        "detail": "pygments.lexers.nimrod",
        "documentation": {}
    },
    {
        "label": "CrystalLexer",
        "importPath": "pygments.lexers.crystal",
        "description": "pygments.lexers.crystal",
        "isExtraImport": true,
        "detail": "pygments.lexers.crystal",
        "documentation": {}
    },
    {
        "label": "Configurable",
        "importPath": "traitlets.config",
        "description": "traitlets.config",
        "isExtraImport": true,
        "detail": "traitlets.config",
        "documentation": {}
    },
    {
        "label": "cmath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cmath",
        "description": "cmath",
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "OptionsManagerMixIn",
        "importPath": "pylint.config.option_manager_mixin",
        "description": "pylint.config.option_manager_mixin",
        "isExtraImport": true,
        "detail": "pylint.config.option_manager_mixin",
        "documentation": {}
    },
    {
        "label": "OptionsProviderMixIn",
        "importPath": "pylint.config.options_provider_mixin",
        "description": "pylint.config.options_provider_mixin",
        "isExtraImport": true,
        "detail": "pylint.config.options_provider_mixin",
        "documentation": {}
    },
    {
        "label": "builtins",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "builtins",
        "description": "builtins",
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "contextlib_context_managers",
        "description": "contextlib_context_managers",
        "isExtraImport": true,
        "detail": "contextlib_context_managers",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "contextlib_context_managers",
        "description": "contextlib_context_managers",
        "isExtraImport": true,
        "detail": "contextlib_context_managers",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "KeyPressEvent",
        "importPath": "prompt_toolkit.key_binding.key_processor",
        "description": "prompt_toolkit.key_binding.key_processor",
        "isExtraImport": true,
        "detail": "prompt_toolkit.key_binding.key_processor",
        "documentation": {}
    },
    {
        "label": "KeyPressEvent",
        "importPath": "prompt_toolkit.key_binding.key_processor",
        "description": "prompt_toolkit.key_binding.key_processor",
        "isExtraImport": true,
        "detail": "prompt_toolkit.key_binding.key_processor",
        "documentation": {}
    },
    {
        "label": "KeyPressEvent",
        "importPath": "prompt_toolkit.key_binding.key_processor",
        "description": "prompt_toolkit.key_binding.key_processor",
        "isExtraImport": true,
        "detail": "prompt_toolkit.key_binding.key_processor",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "prompt_toolkit.keys",
        "description": "prompt_toolkit.keys",
        "isExtraImport": true,
        "detail": "prompt_toolkit.keys",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "UserAgent",
        "importPath": "fake_useragent",
        "description": "fake_useragent",
        "isExtraImport": true,
        "detail": "fake_useragent",
        "documentation": {}
    },
    {
        "label": "UserAgent",
        "importPath": "fake_useragent",
        "description": "fake_useragent",
        "isExtraImport": true,
        "detail": "fake_useragent",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "dirname",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "basename",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "basename",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "exists",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "join",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "basename",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "join",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "splitext",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "fullapi_hash",
        "importPath": "code_generators.genapi",
        "description": "code_generators.genapi",
        "isExtraImport": true,
        "detail": "code_generators.genapi",
        "documentation": {}
    },
    {
        "label": "full_api",
        "importPath": "code_generators.numpy_api",
        "description": "code_generators.numpy_api",
        "isExtraImport": true,
        "detail": "code_generators.numpy_api",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "Callback",
        "importPath": "dask.callbacks",
        "description": "dask.callbacks",
        "isExtraImport": true,
        "detail": "dask.callbacks",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "locale",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "locale",
        "description": "locale",
        "detail": "locale",
        "documentation": {}
    },
    {
        "label": "Trie",
        "importPath": "datrie",
        "description": "datrie",
        "isExtraImport": true,
        "detail": "datrie",
        "documentation": {}
    },
    {
        "label": "text_type",
        "importPath": "pipenv.patched.notpip._vendor.six",
        "description": "pipenv.patched.notpip._vendor.six",
        "isExtraImport": true,
        "detail": "pipenv.patched.notpip._vendor.six",
        "documentation": {}
    },
    {
        "label": "dbm",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dbm",
        "description": "dbm",
        "detail": "dbm",
        "documentation": {}
    },
    {
        "label": "decimal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "decimal",
        "description": "decimal",
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "queue",
        "description": "queue",
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "PriorityQueue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "prompt_toolkit.document",
        "description": "prompt_toolkit.document",
        "isExtraImport": true,
        "detail": "prompt_toolkit.document",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "operator",
        "description": "operator",
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "__mul__",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "mul",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "ErrorClass",
        "importPath": "nose.plugins.errorclass",
        "description": "nose.plugins.errorclass",
        "isExtraImport": true,
        "detail": "nose.plugins.errorclass",
        "documentation": {}
    },
    {
        "label": "ErrorClassPlugin",
        "importPath": "nose.plugins.errorclass",
        "description": "nose.plugins.errorclass",
        "isExtraImport": true,
        "detail": "nose.plugins.errorclass",
        "documentation": {}
    },
    {
        "label": "newer_group",
        "importPath": "distutils.dep_util",
        "description": "distutils.dep_util",
        "isExtraImport": true,
        "detail": "distutils.dep_util",
        "documentation": {}
    },
    {
        "label": "doctest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "doctest",
        "description": "doctest",
        "detail": "doctest",
        "documentation": {}
    },
    {
        "label": "Poller",
        "importPath": "zmq.green",
        "description": "zmq.green",
        "isExtraImport": true,
        "detail": "zmq.green",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "difflib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "difflib",
        "description": "difflib",
        "detail": "difflib",
        "documentation": {}
    },
    {
        "label": "SequenceMatcher",
        "importPath": "difflib",
        "description": "difflib",
        "isExtraImport": true,
        "detail": "difflib",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "difflib_data",
        "description": "difflib_data",
        "isExtraImport": true,
        "detail": "difflib_data",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "difflib_data",
        "description": "difflib_data",
        "isExtraImport": true,
        "detail": "difflib_data",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "difflib_data",
        "description": "difflib_data",
        "isExtraImport": true,
        "detail": "difflib_data",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "difflib_data",
        "description": "difflib_data",
        "isExtraImport": true,
        "detail": "difflib_data",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "difflib_data",
        "description": "difflib_data",
        "isExtraImport": true,
        "detail": "difflib_data",
        "documentation": {}
    },
    {
        "label": "memoize",
        "importPath": "memoization",
        "description": "memoization",
        "isExtraImport": true,
        "detail": "memoization",
        "documentation": {}
    },
    {
        "label": "memoize",
        "importPath": "memoization",
        "description": "memoization",
        "isExtraImport": true,
        "detail": "memoization",
        "documentation": {}
    },
    {
        "label": "Rational",
        "importPath": "numbers",
        "description": "numbers",
        "isExtraImport": true,
        "detail": "numbers",
        "documentation": {}
    },
    {
        "label": "Rational",
        "importPath": "numbers",
        "description": "numbers",
        "isExtraImport": true,
        "detail": "numbers",
        "documentation": {}
    },
    {
        "label": "Real",
        "importPath": "numbers",
        "description": "numbers",
        "isExtraImport": true,
        "detail": "numbers",
        "documentation": {}
    },
    {
        "label": "Real",
        "importPath": "numbers",
        "description": "numbers",
        "isExtraImport": true,
        "detail": "numbers",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "errno",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "errno",
        "description": "errno",
        "detail": "errno",
        "documentation": {}
    },
    {
        "label": "distutils.errors",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "distutils.errors",
        "description": "distutils.errors",
        "detail": "distutils.errors",
        "documentation": {}
    },
    {
        "label": "DistutilsArgError",
        "importPath": "distutils.errors",
        "description": "distutils.errors",
        "isExtraImport": true,
        "detail": "distutils.errors",
        "documentation": {}
    },
    {
        "label": "DistutilsError",
        "importPath": "distutils.errors",
        "description": "distutils.errors",
        "isExtraImport": true,
        "detail": "distutils.errors",
        "documentation": {}
    },
    {
        "label": "FancyGetopt",
        "importPath": "distutils.fancy_getopt",
        "description": "distutils.fancy_getopt",
        "isExtraImport": true,
        "detail": "distutils.fancy_getopt",
        "documentation": {}
    },
    {
        "label": "distutils.core",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "distutils.core",
        "description": "distutils.core",
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "distutils",
        "description": "distutils",
        "isExtraImport": true,
        "detail": "distutils",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "distutils",
        "description": "distutils",
        "isExtraImport": true,
        "detail": "distutils",
        "documentation": {}
    },
    {
        "label": "dir_util",
        "importPath": "distutils",
        "description": "distutils",
        "isExtraImport": true,
        "detail": "distutils",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "distutils",
        "description": "distutils",
        "isExtraImport": true,
        "detail": "distutils",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "distutils",
        "description": "distutils",
        "isExtraImport": true,
        "detail": "distutils",
        "documentation": {}
    },
    {
        "label": "dis",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dis",
        "description": "dis",
        "detail": "dis",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "importPath": "doubly_linked_list",
        "description": "doubly_linked_list",
        "isExtraImport": true,
        "detail": "doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "doctest_private_tests_external",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "doctest_private_tests_external",
        "description": "doctest_private_tests_external",
        "detail": "doctest_private_tests_external",
        "documentation": {}
    },
    {
        "label": "doctest_simple",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "doctest_simple",
        "description": "doctest_simple",
        "detail": "doctest_simple",
        "documentation": {}
    },
    {
        "label": "readers",
        "importPath": "docutils",
        "description": "docutils",
        "isExtraImport": true,
        "detail": "docutils",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "docutils",
        "description": "docutils",
        "isExtraImport": true,
        "detail": "docutils",
        "documentation": {}
    },
    {
        "label": "transforms",
        "importPath": "docutils",
        "description": "docutils",
        "isExtraImport": true,
        "detail": "docutils",
        "documentation": {}
    },
    {
        "label": "nodes",
        "importPath": "docutils",
        "description": "docutils",
        "isExtraImport": true,
        "detail": "docutils",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "docutils",
        "description": "docutils",
        "isExtraImport": true,
        "detail": "docutils",
        "documentation": {}
    },
    {
        "label": "nodes",
        "importPath": "docutils",
        "description": "docutils",
        "isExtraImport": true,
        "detail": "docutils",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "xml.dom",
        "description": "xml.dom",
        "isExtraImport": true,
        "detail": "xml.dom",
        "documentation": {}
    },
    {
        "label": "minidom",
        "importPath": "xml.dom",
        "description": "xml.dom",
        "isExtraImport": true,
        "detail": "xml.dom",
        "documentation": {}
    },
    {
        "label": "minidom",
        "importPath": "xml.dom",
        "description": "xml.dom",
        "isExtraImport": true,
        "detail": "xml.dom",
        "documentation": {}
    },
    {
        "label": "next_prime",
        "importPath": "number_theory.prime_numbers",
        "description": "number_theory.prime_numbers",
        "isExtraImport": true,
        "detail": "number_theory.prime_numbers",
        "documentation": {}
    },
    {
        "label": "check_prime",
        "importPath": "number_theory.prime_numbers",
        "description": "number_theory.prime_numbers",
        "isExtraImport": true,
        "detail": "number_theory.prime_numbers",
        "documentation": {}
    },
    {
        "label": "jupyter_data_dir",
        "importPath": "jupyter_core.paths",
        "description": "jupyter_core.paths",
        "isExtraImport": true,
        "detail": "jupyter_core.paths",
        "documentation": {}
    },
    {
        "label": "ConfigManager",
        "importPath": "notebook.services.config",
        "description": "notebook.services.config",
        "isExtraImport": true,
        "detail": "notebook.services.config",
        "documentation": {}
    },
    {
        "label": "time,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time.",
        "description": "time.",
        "detail": "time.",
        "documentation": {}
    },
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "pdb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pdb",
        "description": "pdb",
        "detail": "pdb",
        "documentation": {}
    },
    {
        "label": "Process",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "make_server",
        "importPath": "wsgiref.simple_server",
        "description": "wsgiref.simple_server",
        "isExtraImport": true,
        "detail": "wsgiref.simple_server",
        "documentation": {}
    },
    {
        "label": "application",
        "importPath": "hello",
        "description": "hello",
        "isExtraImport": true,
        "detail": "hello",
        "documentation": {}
    },
    {
        "label": "show",
        "importPath": "bokeh.io",
        "description": "bokeh.io",
        "isExtraImport": true,
        "detail": "bokeh.io",
        "documentation": {}
    },
    {
        "label": "output_file",
        "importPath": "bokeh.io",
        "description": "bokeh.io",
        "isExtraImport": true,
        "detail": "bokeh.io",
        "documentation": {}
    },
    {
        "label": "figure",
        "importPath": "bokeh.plotting",
        "description": "bokeh.plotting",
        "isExtraImport": true,
        "detail": "bokeh.plotting",
        "documentation": {}
    },
    {
        "label": "GraphRenderer",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "StaticLayoutProvider",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "Circle",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "LabelSet",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "ColumnDataSource",
        "importPath": "bokeh.models",
        "description": "bokeh.models",
        "isExtraImport": true,
        "detail": "bokeh.models",
        "documentation": {}
    },
    {
        "label": "HTML",
        "importPath": "prompt_toolkit.formatted_text",
        "description": "prompt_toolkit.formatted_text",
        "isExtraImport": true,
        "detail": "prompt_toolkit.formatted_text",
        "documentation": {}
    },
    {
        "label": "KeyBindings",
        "importPath": "prompt_toolkit.key_binding",
        "description": "prompt_toolkit.key_binding",
        "isExtraImport": true,
        "detail": "prompt_toolkit.key_binding",
        "documentation": {}
    },
    {
        "label": "BuildEnvironment",
        "importPath": "pip._internal.build_env",
        "description": "pip._internal.build_env",
        "isExtraImport": true,
        "detail": "pip._internal.build_env",
        "documentation": {}
    },
    {
        "label": "indent_log",
        "importPath": "pip._internal.utils.logging",
        "description": "pip._internal.utils.logging",
        "isExtraImport": true,
        "detail": "pip._internal.utils.logging",
        "documentation": {}
    },
    {
        "label": "make_setuptools_develop_args",
        "importPath": "pip._internal.utils.setuptools_build",
        "description": "pip._internal.utils.setuptools_build",
        "isExtraImport": true,
        "detail": "pip._internal.utils.setuptools_build",
        "documentation": {}
    },
    {
        "label": "call_subprocess",
        "importPath": "pip._internal.utils.subprocess",
        "description": "pip._internal.utils.subprocess",
        "isExtraImport": true,
        "detail": "pip._internal.utils.subprocess",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "Product",
        "description": "Product",
        "isExtraImport": true,
        "detail": "Product",
        "documentation": {}
    },
    {
        "label": "prettify",
        "importPath": "ElementTree_pretty",
        "description": "ElementTree_pretty",
        "isExtraImport": true,
        "detail": "ElementTree_pretty",
        "documentation": {}
    },
    {
        "label": "prettify",
        "importPath": "ElementTree_pretty",
        "description": "ElementTree_pretty",
        "isExtraImport": true,
        "detail": "ElementTree_pretty",
        "documentation": {}
    },
    {
        "label": "prettify",
        "importPath": "ElementTree_pretty",
        "description": "ElementTree_pretty",
        "isExtraImport": true,
        "detail": "ElementTree_pretty",
        "documentation": {}
    },
    {
        "label": "prettify",
        "importPath": "ElementTree_pretty",
        "description": "ElementTree_pretty",
        "isExtraImport": true,
        "detail": "ElementTree_pretty",
        "documentation": {}
    },
    {
        "label": "prettify",
        "importPath": "ElementTree_pretty",
        "description": "ElementTree_pretty",
        "isExtraImport": true,
        "detail": "ElementTree_pretty",
        "documentation": {}
    },
    {
        "label": "ElementTree",
        "importPath": "xml.etree",
        "description": "xml.etree",
        "isExtraImport": true,
        "detail": "xml.etree",
        "documentation": {}
    },
    {
        "label": "ElementTree",
        "importPath": "xml.etree",
        "description": "xml.etree",
        "isExtraImport": true,
        "detail": "xml.etree",
        "documentation": {}
    },
    {
        "label": "ElementTree",
        "importPath": "xml.etree",
        "description": "xml.etree",
        "isExtraImport": true,
        "detail": "xml.etree",
        "documentation": {}
    },
    {
        "label": "ElementTree",
        "importPath": "xml.etree",
        "description": "xml.etree",
        "isExtraImport": true,
        "detail": "xml.etree",
        "documentation": {}
    },
    {
        "label": "ElementTree",
        "importPath": "xml.etree",
        "description": "xml.etree",
        "isExtraImport": true,
        "detail": "xml.etree",
        "documentation": {}
    },
    {
        "label": "ElementTree",
        "importPath": "xml.etree",
        "description": "xml.etree",
        "isExtraImport": true,
        "detail": "xml.etree",
        "documentation": {}
    },
    {
        "label": "ElementTree",
        "importPath": "xml.etree",
        "description": "xml.etree",
        "isExtraImport": true,
        "detail": "xml.etree",
        "documentation": {}
    },
    {
        "label": "ElementTree",
        "importPath": "xml.etree",
        "description": "xml.etree",
        "isExtraImport": true,
        "detail": "xml.etree",
        "documentation": {}
    },
    {
        "label": "ElementTree",
        "importPath": "xml.etree",
        "description": "xml.etree",
        "isExtraImport": true,
        "detail": "xml.etree",
        "documentation": {}
    },
    {
        "label": "email.message",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "email.message",
        "description": "email.message",
        "detail": "email.message",
        "documentation": {}
    },
    {
        "label": "EmailMessage",
        "importPath": "email.message",
        "description": "email.message",
        "isExtraImport": true,
        "detail": "email.message",
        "documentation": {}
    },
    {
        "label": "smtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib",
        "description": "smtplib",
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "BaseChecker",
        "importPath": "pylint.checkers",
        "description": "pylint.checkers",
        "isExtraImport": true,
        "detail": "pylint.checkers",
        "documentation": {}
    },
    {
        "label": "IRawChecker",
        "importPath": "pylint.interfaces",
        "description": "pylint.interfaces",
        "isExtraImport": true,
        "detail": "pylint.interfaces",
        "documentation": {}
    },
    {
        "label": "IReporter",
        "importPath": "pylint.interfaces",
        "description": "pylint.interfaces",
        "isExtraImport": true,
        "detail": "pylint.interfaces",
        "documentation": {}
    },
    {
        "label": "CDPSession",
        "importPath": "pyppeteer.connection",
        "description": "pyppeteer.connection",
        "isExtraImport": true,
        "detail": "pyppeteer.connection",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "item",
        "description": "item",
        "isExtraImport": true,
        "detail": "item",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "item",
        "description": "item",
        "isExtraImport": true,
        "detail": "item",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "pip._internal.cli.main",
        "description": "pip._internal.cli.main",
        "isExtraImport": true,
        "detail": "pip._internal.cli.main",
        "documentation": {}
    },
    {
        "label": "ensure_str",
        "importPath": "virtualenv.util.six",
        "description": "virtualenv.util.six",
        "isExtraImport": true,
        "detail": "virtualenv.util.six",
        "documentation": {}
    },
    {
        "label": "ensure_text",
        "importPath": "virtualenv.util.six",
        "description": "virtualenv.util.six",
        "isExtraImport": true,
        "detail": "virtualenv.util.six",
        "documentation": {}
    },
    {
        "label": "Exporter",
        "importPath": "nbconvert.exporters",
        "description": "nbconvert.exporters",
        "isExtraImport": true,
        "detail": "nbconvert.exporters",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "product",
        "description": "product",
        "isExtraImport": true,
        "detail": "product",
        "documentation": {}
    },
    {
        "label": "all_fibs",
        "importPath": "series",
        "description": "series",
        "isExtraImport": true,
        "detail": "series",
        "documentation": {}
    },
    {
        "label": "sum_of_squares",
        "importPath": "series",
        "description": "series",
        "isExtraImport": true,
        "detail": "series",
        "documentation": {}
    },
    {
        "label": "square_of_sum",
        "importPath": "series",
        "description": "series",
        "isExtraImport": true,
        "detail": "series",
        "documentation": {}
    },
    {
        "label": "factorial",
        "importPath": "series",
        "description": "series",
        "isExtraImport": true,
        "detail": "series",
        "documentation": {}
    },
    {
        "label": "factorial",
        "importPath": "series",
        "description": "series",
        "isExtraImport": true,
        "detail": "series",
        "documentation": {}
    },
    {
        "label": "all_fibs",
        "importPath": "series",
        "description": "series",
        "isExtraImport": true,
        "detail": "series",
        "documentation": {}
    },
    {
        "label": "factorial",
        "importPath": "series",
        "description": "series",
        "isExtraImport": true,
        "detail": "series",
        "documentation": {}
    },
    {
        "label": "is_triangle",
        "importPath": "series",
        "description": "series",
        "isExtraImport": true,
        "detail": "series",
        "documentation": {}
    },
    {
        "label": "pentagonals",
        "importPath": "series",
        "description": "series",
        "isExtraImport": true,
        "detail": "series",
        "documentation": {}
    },
    {
        "label": "pentagonal",
        "importPath": "series",
        "description": "series",
        "isExtraImport": true,
        "detail": "series",
        "documentation": {}
    },
    {
        "label": "is_pentagonal",
        "importPath": "series",
        "description": "series",
        "isExtraImport": true,
        "detail": "series",
        "documentation": {}
    },
    {
        "label": "exagonals",
        "importPath": "series",
        "description": "series",
        "isExtraImport": true,
        "detail": "series",
        "documentation": {}
    },
    {
        "label": "is_exagonal",
        "importPath": "series",
        "description": "series",
        "isExtraImport": true,
        "detail": "series",
        "documentation": {}
    },
    {
        "label": "is_pentagonal",
        "importPath": "series",
        "description": "series",
        "isExtraImport": true,
        "detail": "series",
        "documentation": {}
    },
    {
        "label": "is_triangle",
        "importPath": "series",
        "description": "series",
        "isExtraImport": true,
        "detail": "series",
        "documentation": {}
    },
    {
        "label": "factors",
        "importPath": "factorization",
        "description": "factorization",
        "isExtraImport": true,
        "detail": "factorization",
        "documentation": {}
    },
    {
        "label": "lcm",
        "importPath": "factorization",
        "description": "factorization",
        "isExtraImport": true,
        "detail": "factorization",
        "documentation": {}
    },
    {
        "label": "factors",
        "importPath": "factorization",
        "description": "factorization",
        "isExtraImport": true,
        "detail": "factorization",
        "documentation": {}
    },
    {
        "label": "divisors",
        "importPath": "factorization",
        "description": "factorization",
        "isExtraImport": true,
        "detail": "factorization",
        "documentation": {}
    },
    {
        "label": "divisors",
        "importPath": "factorization",
        "description": "factorization",
        "isExtraImport": true,
        "detail": "factorization",
        "documentation": {}
    },
    {
        "label": "factors",
        "importPath": "factorization",
        "description": "factorization",
        "isExtraImport": true,
        "detail": "factorization",
        "documentation": {}
    },
    {
        "label": "is_palindrome",
        "importPath": "palindromes",
        "description": "palindromes",
        "isExtraImport": true,
        "detail": "palindromes",
        "documentation": {}
    },
    {
        "label": "is_palindrome",
        "importPath": "palindromes",
        "description": "palindromes",
        "isExtraImport": true,
        "detail": "palindromes",
        "documentation": {}
    },
    {
        "label": "nth_prime",
        "importPath": "primality",
        "description": "primality",
        "isExtraImport": true,
        "detail": "primality",
        "documentation": {}
    },
    {
        "label": "all_primes",
        "importPath": "primality",
        "description": "primality",
        "isExtraImport": true,
        "detail": "primality",
        "documentation": {}
    },
    {
        "label": "is_prime",
        "importPath": "primality",
        "description": "primality",
        "isExtraImport": true,
        "detail": "primality",
        "documentation": {}
    },
    {
        "label": "primes_upto",
        "importPath": "primality",
        "description": "primality",
        "isExtraImport": true,
        "detail": "primality",
        "documentation": {}
    },
    {
        "label": "is_prime",
        "importPath": "primality",
        "description": "primality",
        "isExtraImport": true,
        "detail": "primality",
        "documentation": {}
    },
    {
        "label": "primes_upto",
        "importPath": "primality",
        "description": "primality",
        "isExtraImport": true,
        "detail": "primality",
        "documentation": {}
    },
    {
        "label": "is_prime",
        "importPath": "primality",
        "description": "primality",
        "isExtraImport": true,
        "detail": "primality",
        "documentation": {}
    },
    {
        "label": "primes_upto",
        "importPath": "primality",
        "description": "primality",
        "isExtraImport": true,
        "detail": "primality",
        "documentation": {}
    },
    {
        "label": "primes_upto",
        "importPath": "primality",
        "description": "primality",
        "isExtraImport": true,
        "detail": "primality",
        "documentation": {}
    },
    {
        "label": "is_prime",
        "importPath": "primality",
        "description": "primality",
        "isExtraImport": true,
        "detail": "primality",
        "documentation": {}
    },
    {
        "label": "nth_prime",
        "importPath": "primality",
        "description": "primality",
        "isExtraImport": true,
        "detail": "primality",
        "documentation": {}
    },
    {
        "label": "is_prime",
        "importPath": "primality",
        "description": "primality",
        "isExtraImport": true,
        "detail": "primality",
        "documentation": {}
    },
    {
        "label": "primes_upto",
        "importPath": "primality",
        "description": "primality",
        "isExtraImport": true,
        "detail": "primality",
        "documentation": {}
    },
    {
        "label": "primes_upto",
        "importPath": "primality",
        "description": "primality",
        "isExtraImport": true,
        "detail": "primality",
        "documentation": {}
    },
    {
        "label": "is_prime",
        "importPath": "primality",
        "description": "primality",
        "isExtraImport": true,
        "detail": "primality",
        "documentation": {}
    },
    {
        "label": "is_prime",
        "importPath": "primality",
        "description": "primality",
        "isExtraImport": true,
        "detail": "primality",
        "documentation": {}
    },
    {
        "label": "num2words",
        "importPath": "numberwords",
        "description": "numberwords",
        "isExtraImport": true,
        "detail": "numberwords",
        "documentation": {}
    },
    {
        "label": "build_graph_from_triangle",
        "importPath": "graphs",
        "description": "graphs",
        "isExtraImport": true,
        "detail": "graphs",
        "documentation": {}
    },
    {
        "label": "find_max_path",
        "importPath": "graphs",
        "description": "graphs",
        "isExtraImport": true,
        "detail": "graphs",
        "documentation": {}
    },
    {
        "label": "digits",
        "importPath": "digits",
        "description": "digits",
        "isExtraImport": true,
        "detail": "digits",
        "documentation": {}
    },
    {
        "label": "digits",
        "importPath": "digits",
        "description": "digits",
        "isExtraImport": true,
        "detail": "digits",
        "documentation": {}
    },
    {
        "label": "is_pandigital",
        "importPath": "digits",
        "description": "digits",
        "isExtraImport": true,
        "detail": "digits",
        "documentation": {}
    },
    {
        "label": "is_semi_pandigital",
        "importPath": "digits",
        "description": "digits",
        "isExtraImport": true,
        "detail": "digits",
        "documentation": {}
    },
    {
        "label": "digits_downfrom",
        "importPath": "digits",
        "description": "digits",
        "isExtraImport": true,
        "detail": "digits",
        "documentation": {}
    },
    {
        "label": "digits",
        "importPath": "digits",
        "description": "digits",
        "isExtraImport": true,
        "detail": "digits",
        "documentation": {}
    },
    {
        "label": "digit_rotations",
        "importPath": "digits",
        "description": "digits",
        "isExtraImport": true,
        "detail": "digits",
        "documentation": {}
    },
    {
        "label": "is_pandigital",
        "importPath": "digits",
        "description": "digits",
        "isExtraImport": true,
        "detail": "digits",
        "documentation": {}
    },
    {
        "label": "is_semi_pandigital",
        "importPath": "digits",
        "description": "digits",
        "isExtraImport": true,
        "detail": "digits",
        "documentation": {}
    },
    {
        "label": "is_pandigital",
        "importPath": "digits",
        "description": "digits",
        "isExtraImport": true,
        "detail": "digits",
        "documentation": {}
    },
    {
        "label": "digits_upto",
        "importPath": "digits",
        "description": "digits",
        "isExtraImport": true,
        "detail": "digits",
        "documentation": {}
    },
    {
        "label": "last_k_digits",
        "importPath": "digits",
        "description": "digits",
        "isExtraImport": true,
        "detail": "digits",
        "documentation": {}
    },
    {
        "label": "sorted_digits",
        "importPath": "digits",
        "description": "digits",
        "isExtraImport": true,
        "detail": "digits",
        "documentation": {}
    },
    {
        "label": "digits",
        "importPath": "digits",
        "description": "digits",
        "isExtraImport": true,
        "detail": "digits",
        "documentation": {}
    },
    {
        "label": "alphabetical_value",
        "importPath": "words",
        "description": "words",
        "isExtraImport": true,
        "detail": "words",
        "documentation": {}
    },
    {
        "label": "alphabetical_value",
        "importPath": "words",
        "description": "words",
        "isExtraImport": true,
        "detail": "words",
        "documentation": {}
    },
    {
        "label": "spiral_diagonal_numbers_upto",
        "importPath": "spirals",
        "description": "spirals",
        "isExtraImport": true,
        "detail": "spirals",
        "documentation": {}
    },
    {
        "label": "n_diagonal_for_side",
        "importPath": "spirals",
        "description": "spirals",
        "isExtraImport": true,
        "detail": "spirals",
        "documentation": {}
    },
    {
        "label": "spiral_diagonal_numbers",
        "importPath": "spirals",
        "description": "spirals",
        "isExtraImport": true,
        "detail": "spirals",
        "documentation": {}
    },
    {
        "label": "fractions",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fractions",
        "description": "fractions",
        "detail": "fractions",
        "documentation": {}
    },
    {
        "label": "Fraction",
        "importPath": "fractions",
        "description": "fractions",
        "isExtraImport": true,
        "detail": "fractions",
        "documentation": {}
    },
    {
        "label": "Fraction",
        "importPath": "fractions",
        "description": "fractions",
        "isExtraImport": true,
        "detail": "fractions",
        "documentation": {}
    },
    {
        "label": "euler018",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "euler018",
        "description": "euler018",
        "detail": "euler018",
        "documentation": {}
    },
    {
        "label": "HashTable",
        "importPath": "hashtables",
        "description": "hashtables",
        "isExtraImport": true,
        "detail": "hashtables",
        "documentation": {}
    },
    {
        "label": "hash_table_insert",
        "importPath": "hashtables",
        "description": "hashtables",
        "isExtraImport": true,
        "detail": "hashtables",
        "documentation": {}
    },
    {
        "label": "hash_table_remove",
        "importPath": "hashtables",
        "description": "hashtables",
        "isExtraImport": true,
        "detail": "hashtables",
        "documentation": {}
    },
    {
        "label": "hash_table_retrieve",
        "importPath": "hashtables",
        "description": "hashtables",
        "isExtraImport": true,
        "detail": "hashtables",
        "documentation": {}
    },
    {
        "label": "hash_table_resize",
        "importPath": "hashtables",
        "description": "hashtables",
        "isExtraImport": true,
        "detail": "hashtables",
        "documentation": {}
    },
    {
        "label": "HashTable",
        "importPath": "hashtables",
        "description": "hashtables",
        "isExtraImport": true,
        "detail": "hashtables",
        "documentation": {}
    },
    {
        "label": "hash_table_insert",
        "importPath": "hashtables",
        "description": "hashtables",
        "isExtraImport": true,
        "detail": "hashtables",
        "documentation": {}
    },
    {
        "label": "hash_table_remove",
        "importPath": "hashtables",
        "description": "hashtables",
        "isExtraImport": true,
        "detail": "hashtables",
        "documentation": {}
    },
    {
        "label": "hash_table_retrieve",
        "importPath": "hashtables",
        "description": "hashtables",
        "isExtraImport": true,
        "detail": "hashtables",
        "documentation": {}
    },
    {
        "label": "hash_table_resize",
        "importPath": "hashtables",
        "description": "hashtables",
        "isExtraImport": true,
        "detail": "hashtables",
        "documentation": {}
    },
    {
        "label": "get_indices_of_item_weights",
        "importPath": "ex1",
        "description": "ex1",
        "isExtraImport": true,
        "detail": "ex1",
        "documentation": {}
    },
    {
        "label": "Ticket",
        "importPath": "ex2",
        "description": "ex2",
        "isExtraImport": true,
        "detail": "ex2",
        "documentation": {}
    },
    {
        "label": "reconstruct_trip",
        "importPath": "ex2",
        "description": "ex2",
        "isExtraImport": true,
        "detail": "ex2",
        "documentation": {}
    },
    {
        "label": "SkipTest",
        "importPath": "nose.plugins.skip",
        "description": "nose.plugins.skip",
        "isExtraImport": true,
        "detail": "nose.plugins.skip",
        "documentation": {}
    },
    {
        "label": "DeprecatedTest",
        "importPath": "nose.plugins.deprecated",
        "description": "nose.plugins.deprecated",
        "isExtraImport": true,
        "detail": "nose.plugins.deprecated",
        "documentation": {}
    },
    {
        "label": "openpyxl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openpyxl",
        "description": "openpyxl",
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "Workbook",
        "importPath": "openpyxl",
        "description": "openpyxl",
        "isExtraImport": true,
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "get_column_letter",
        "importPath": "openpyxl.utils",
        "description": "openpyxl.utils",
        "isExtraImport": true,
        "detail": "openpyxl.utils",
        "documentation": {}
    },
    {
        "label": "Font",
        "importPath": "openpyxl.styles",
        "description": "openpyxl.styles",
        "isExtraImport": true,
        "detail": "openpyxl.styles",
        "documentation": {}
    },
    {
        "label": "ExecutePreprocessor",
        "importPath": "nbconvert.preprocessors.execute",
        "description": "nbconvert.preprocessors.execute",
        "isExtraImport": true,
        "detail": "nbconvert.preprocessors.execute",
        "documentation": {}
    },
    {
        "label": "HTMLExporter",
        "importPath": "nbconvert.exporters.html",
        "description": "nbconvert.exporters.html",
        "isExtraImport": true,
        "detail": "nbconvert.exporters.html",
        "documentation": {}
    },
    {
        "label": "HTMLExporter",
        "importPath": "nbconvert.exporters.html",
        "description": "nbconvert.exporters.html",
        "isExtraImport": true,
        "detail": "nbconvert.exporters.html",
        "documentation": {}
    },
    {
        "label": "cffi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cffi",
        "description": "cffi",
        "detail": "cffi",
        "documentation": {}
    },
    {
        "label": "FFI",
        "importPath": "cffi",
        "description": "cffi",
        "isExtraImport": true,
        "detail": "cffi",
        "documentation": {}
    },
    {
        "label": "numba",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numba",
        "description": "numba",
        "detail": "numba",
        "documentation": {}
    },
    {
        "label": "PCG64",
        "importPath": "numpy.random",
        "description": "numpy.random",
        "isExtraImport": true,
        "detail": "numpy.random",
        "documentation": {}
    },
    {
        "label": "distutils.extension",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "distutils.extension",
        "description": "distutils.extension",
        "detail": "distutils.extension",
        "documentation": {}
    },
    {
        "label": "tarfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tarfile",
        "description": "tarfile",
        "detail": "tarfile",
        "documentation": {}
    },
    {
        "label": "jiffies",
        "importPath": "numpy.testing",
        "description": "numpy.testing",
        "isExtraImport": true,
        "detail": "numpy.testing",
        "documentation": {}
    },
    {
        "label": "memusage",
        "importPath": "numpy.testing",
        "description": "numpy.testing",
        "isExtraImport": true,
        "detail": "numpy.testing",
        "documentation": {}
    },
    {
        "label": "format_tb",
        "importPath": "traceback",
        "description": "traceback",
        "isExtraImport": true,
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "is_base_exception",
        "importPath": "nose.pyversion",
        "description": "nose.pyversion",
        "isExtraImport": true,
        "detail": "nose.pyversion",
        "documentation": {}
    },
    {
        "label": "exc_to_unicode",
        "importPath": "nose.pyversion",
        "description": "nose.pyversion",
        "isExtraImport": true,
        "detail": "nose.pyversion",
        "documentation": {}
    },
    {
        "label": "force_unicode",
        "importPath": "nose.pyversion",
        "description": "nose.pyversion",
        "isExtraImport": true,
        "detail": "nose.pyversion",
        "documentation": {}
    },
    {
        "label": "Plugin",
        "importPath": "nose.plugins",
        "description": "nose.plugins",
        "isExtraImport": true,
        "detail": "nose.plugins",
        "documentation": {}
    },
    {
        "label": "inspect_traceback",
        "importPath": "nose.inspector",
        "description": "nose.inspector",
        "isExtraImport": true,
        "detail": "nose.inspector",
        "documentation": {}
    },
    {
        "label": "KernelManager",
        "importPath": "jupyter_client.manager",
        "description": "jupyter_client.manager",
        "isExtraImport": true,
        "detail": "jupyter_client.manager",
        "documentation": {}
    },
    {
        "label": "urllib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib",
        "description": "urllib",
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "urllib",
        "description": "urllib",
        "isExtraImport": true,
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "feedparser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "feedparser",
        "description": "feedparser",
        "detail": "feedparser",
        "documentation": {}
    },
    {
        "label": "logging",
        "importPath": "sphinx.util",
        "description": "sphinx.util",
        "isExtraImport": true,
        "detail": "sphinx.util",
        "documentation": {}
    },
    {
        "label": "filecmp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "filecmp",
        "description": "filecmp",
        "detail": "filecmp",
        "documentation": {}
    },
    {
        "label": "fileinput",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fileinput",
        "description": "fileinput",
        "detail": "fileinput",
        "documentation": {}
    },
    {
        "label": "splitext",
        "importPath": "pip._internal.utils.misc",
        "description": "pip._internal.utils.misc",
        "isExtraImport": true,
        "detail": "pip._internal.utils.misc",
        "documentation": {}
    },
    {
        "label": "read_chunks",
        "importPath": "pip._internal.utils.misc",
        "description": "pip._internal.utils.misc",
        "isExtraImport": true,
        "detail": "pip._internal.utils.misc",
        "documentation": {}
    },
    {
        "label": "write_output",
        "importPath": "pip._internal.utils.misc",
        "description": "pip._internal.utils.misc",
        "isExtraImport": true,
        "detail": "pip._internal.utils.misc",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "RawInline",
        "importPath": "pandocfilters",
        "description": "pandocfilters",
        "isExtraImport": true,
        "detail": "pandocfilters",
        "documentation": {}
    },
    {
        "label": "applyJSONFilters",
        "importPath": "pandocfilters",
        "description": "pandocfilters",
        "isExtraImport": true,
        "detail": "pandocfilters",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "pandocfilters",
        "description": "pandocfilters",
        "isExtraImport": true,
        "detail": "pandocfilters",
        "documentation": {}
    },
    {
        "label": "readline",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "readline",
        "description": "readline",
        "detail": "readline",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "importPath": "tree_helpers",
        "description": "tree_helpers",
        "isExtraImport": true,
        "detail": "tree_helpers",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "importPath": "tree_helpers",
        "description": "tree_helpers",
        "isExtraImport": true,
        "detail": "tree_helpers",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "pyppeteer.frame_manager",
        "description": "pyppeteer.frame_manager",
        "isExtraImport": true,
        "detail": "pyppeteer.frame_manager",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "pyppeteer.page",
        "description": "pyppeteer.page",
        "isExtraImport": true,
        "detail": "pyppeteer.page",
        "documentation": {}
    },
    {
        "label": "FTP",
        "importPath": "ftplib",
        "description": "ftplib",
        "isExtraImport": true,
        "detail": "ftplib",
        "documentation": {}
    },
    {
        "label": "FCompiler",
        "importPath": "numpy.distutils.fcompiler",
        "description": "numpy.distutils.fcompiler",
        "isExtraImport": true,
        "detail": "numpy.distutils.fcompiler",
        "documentation": {}
    },
    {
        "label": "FCompiler",
        "importPath": "numpy.distutils.fcompiler",
        "description": "numpy.distutils.fcompiler",
        "isExtraImport": true,
        "detail": "numpy.distutils.fcompiler",
        "documentation": {}
    },
    {
        "label": "FCompiler",
        "importPath": "numpy.distutils.fcompiler",
        "description": "numpy.distutils.fcompiler",
        "isExtraImport": true,
        "detail": "numpy.distutils.fcompiler",
        "documentation": {}
    },
    {
        "label": "FCompiler",
        "importPath": "numpy.distutils.fcompiler",
        "description": "numpy.distutils.fcompiler",
        "isExtraImport": true,
        "detail": "numpy.distutils.fcompiler",
        "documentation": {}
    },
    {
        "label": "HaskellLexer",
        "importPath": "pygments.lexers.haskell",
        "description": "pygments.lexers.haskell",
        "isExtraImport": true,
        "detail": "pygments.lexers.haskell",
        "documentation": {}
    },
    {
        "label": "LiterateHaskellLexer",
        "importPath": "pygments.lexers.haskell",
        "description": "pygments.lexers.haskell",
        "isExtraImport": true,
        "detail": "pygments.lexers.haskell",
        "documentation": {}
    },
    {
        "label": "KokaLexer",
        "importPath": "pygments.lexers.haskell",
        "description": "pygments.lexers.haskell",
        "isExtraImport": true,
        "detail": "pygments.lexers.haskell",
        "documentation": {}
    },
    {
        "label": "CoqLexer",
        "importPath": "pygments.lexers.theorem",
        "description": "pygments.lexers.theorem",
        "isExtraImport": true,
        "detail": "pygments.lexers.theorem",
        "documentation": {}
    },
    {
        "label": "ErlangLexer",
        "importPath": "pygments.lexers.erlang",
        "description": "pygments.lexers.erlang",
        "isExtraImport": true,
        "detail": "pygments.lexers.erlang",
        "documentation": {}
    },
    {
        "label": "ErlangShellLexer",
        "importPath": "pygments.lexers.erlang",
        "description": "pygments.lexers.erlang",
        "isExtraImport": true,
        "detail": "pygments.lexers.erlang",
        "documentation": {}
    },
    {
        "label": "ElixirConsoleLexer",
        "importPath": "pygments.lexers.erlang",
        "description": "pygments.lexers.erlang",
        "isExtraImport": true,
        "detail": "pygments.lexers.erlang",
        "documentation": {}
    },
    {
        "label": "ElixirLexer",
        "importPath": "pygments.lexers.erlang",
        "description": "pygments.lexers.erlang",
        "isExtraImport": true,
        "detail": "pygments.lexers.erlang",
        "documentation": {}
    },
    {
        "label": "futures",
        "importPath": "concurrent",
        "description": "concurrent",
        "isExtraImport": true,
        "detail": "concurrent",
        "documentation": {}
    },
    {
        "label": "futures",
        "importPath": "concurrent",
        "description": "concurrent",
        "isExtraImport": true,
        "detail": "concurrent",
        "documentation": {}
    },
    {
        "label": "futures",
        "importPath": "concurrent",
        "description": "concurrent",
        "isExtraImport": true,
        "detail": "concurrent",
        "documentation": {}
    },
    {
        "label": "futures",
        "importPath": "concurrent",
        "description": "concurrent",
        "isExtraImport": true,
        "detail": "concurrent",
        "documentation": {}
    },
    {
        "label": "futures",
        "importPath": "concurrent",
        "description": "concurrent",
        "isExtraImport": true,
        "detail": "concurrent",
        "documentation": {}
    },
    {
        "label": "futures",
        "importPath": "concurrent",
        "description": "concurrent",
        "isExtraImport": true,
        "detail": "concurrent",
        "documentation": {}
    },
    {
        "label": "futures",
        "importPath": "concurrent",
        "description": "concurrent",
        "isExtraImport": true,
        "detail": "concurrent",
        "documentation": {}
    },
    {
        "label": "futures",
        "importPath": "concurrent",
        "description": "concurrent",
        "isExtraImport": true,
        "detail": "concurrent",
        "documentation": {}
    },
    {
        "label": "futures",
        "importPath": "concurrent",
        "description": "concurrent",
        "isExtraImport": true,
        "detail": "concurrent",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "day4",
        "description": "day4",
        "isExtraImport": true,
        "detail": "day4",
        "documentation": {}
    },
    {
        "label": "Room",
        "importPath": "day4",
        "description": "day4",
        "isExtraImport": true,
        "detail": "day4",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "day4",
        "description": "day4",
        "isExtraImport": true,
        "detail": "day4",
        "documentation": {}
    },
    {
        "label": "quad",
        "importPath": "scipy.integrate",
        "description": "scipy.integrate",
        "isExtraImport": true,
        "detail": "scipy.integrate",
        "documentation": {}
    },
    {
        "label": "load_iris",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "load_boston",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "load_iris",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "plot_confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "pairwise_distances_argmin",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "GaussianNB",
        "importPath": "sklearn.naive_bayes",
        "description": "sklearn.naive_bayes",
        "isExtraImport": true,
        "detail": "sklearn.naive_bayes",
        "documentation": {}
    },
    {
        "label": "RegexLexer",
        "importPath": "pygments.lexer",
        "description": "pygments.lexer",
        "isExtraImport": true,
        "detail": "pygments.lexer",
        "documentation": {}
    },
    {
        "label": "bygroups",
        "importPath": "pygments.lexer",
        "description": "pygments.lexer",
        "isExtraImport": true,
        "detail": "pygments.lexer",
        "documentation": {}
    },
    {
        "label": "RegexLexer",
        "importPath": "pygments.lexer",
        "description": "pygments.lexer",
        "isExtraImport": true,
        "detail": "pygments.lexer",
        "documentation": {}
    },
    {
        "label": "bygroups",
        "importPath": "pygments.lexer",
        "description": "pygments.lexer",
        "isExtraImport": true,
        "detail": "pygments.lexer",
        "documentation": {}
    },
    {
        "label": "RegexLexer",
        "importPath": "pygments.lexer",
        "description": "pygments.lexer",
        "isExtraImport": true,
        "detail": "pygments.lexer",
        "documentation": {}
    },
    {
        "label": "gc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gc",
        "description": "gc",
        "detail": "gc",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "QName",
        "importPath": "genshi.core",
        "description": "genshi.core",
        "isExtraImport": true,
        "detail": "genshi.core",
        "documentation": {}
    },
    {
        "label": "Attrs",
        "importPath": "genshi.core",
        "description": "genshi.core",
        "isExtraImport": true,
        "detail": "genshi.core",
        "documentation": {}
    },
    {
        "label": "START",
        "importPath": "genshi.core",
        "description": "genshi.core",
        "isExtraImport": true,
        "detail": "genshi.core",
        "documentation": {}
    },
    {
        "label": "END",
        "importPath": "genshi.core",
        "description": "genshi.core",
        "isExtraImport": true,
        "detail": "genshi.core",
        "documentation": {}
    },
    {
        "label": "TEXT",
        "importPath": "genshi.core",
        "description": "genshi.core",
        "isExtraImport": true,
        "detail": "genshi.core",
        "documentation": {}
    },
    {
        "label": "COMMENT",
        "importPath": "genshi.core",
        "description": "genshi.core",
        "isExtraImport": true,
        "detail": "genshi.core",
        "documentation": {}
    },
    {
        "label": "DOCTYPE",
        "importPath": "genshi.core",
        "description": "genshi.core",
        "isExtraImport": true,
        "detail": "genshi.core",
        "documentation": {}
    },
    {
        "label": "getopt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "getopt",
        "description": "getopt",
        "detail": "getopt",
        "documentation": {}
    },
    {
        "label": "getpass",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "getpass",
        "description": "getpass",
        "detail": "getpass",
        "documentation": {}
    },
    {
        "label": "gettext",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gettext",
        "description": "gettext",
        "detail": "gettext",
        "documentation": {}
    },
    {
        "label": "translation",
        "importPath": "gettext",
        "description": "gettext",
        "isExtraImport": true,
        "detail": "gettext",
        "documentation": {}
    },
    {
        "label": "SYS_VERS_STR",
        "importPath": "pylint.testutils.constants",
        "description": "pylint.testutils.constants",
        "isExtraImport": true,
        "detail": "pylint.testutils.constants",
        "documentation": {}
    },
    {
        "label": "moviepy.video.tools.drawing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "moviepy.video.tools.drawing",
        "description": "moviepy.video.tools.drawing",
        "detail": "moviepy.video.tools.drawing",
        "documentation": {}
    },
    {
        "label": "Github",
        "importPath": "github",
        "description": "github",
        "isExtraImport": true,
        "detail": "github",
        "documentation": {}
    },
    {
        "label": "Github",
        "importPath": "github",
        "description": "github",
        "isExtraImport": true,
        "detail": "github",
        "documentation": {}
    },
    {
        "label": "sphinx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sphinx",
        "description": "sphinx",
        "detail": "sphinx",
        "documentation": {}
    },
    {
        "label": "addnodes",
        "importPath": "sphinx",
        "description": "sphinx",
        "isExtraImport": true,
        "detail": "sphinx",
        "documentation": {}
    },
    {
        "label": "Sphinx",
        "importPath": "sphinx.application",
        "description": "sphinx.application",
        "isExtraImport": true,
        "detail": "sphinx.application",
        "documentation": {}
    },
    {
        "label": "Sphinx",
        "importPath": "sphinx.application",
        "description": "sphinx.application",
        "isExtraImport": true,
        "detail": "sphinx.application",
        "documentation": {}
    },
    {
        "label": "checkers",
        "importPath": "pylint",
        "description": "pylint",
        "isExtraImport": true,
        "detail": "pylint",
        "documentation": {}
    },
    {
        "label": "PyLinter",
        "importPath": "pylint.lint",
        "description": "pylint.lint",
        "isExtraImport": true,
        "detail": "pylint.lint",
        "documentation": {}
    },
    {
        "label": "GenericTestReporter",
        "importPath": "pylint.testutils.reporter_for_tests",
        "description": "pylint.testutils.reporter_for_tests",
        "isExtraImport": true,
        "detail": "pylint.testutils.reporter_for_tests",
        "documentation": {}
    },
    {
        "label": "MIMEMultipart",
        "importPath": "email.mime.multipart",
        "description": "email.mime.multipart",
        "isExtraImport": true,
        "detail": "email.mime.multipart",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "GradientBoostingRegressor",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "grp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "grp",
        "description": "grp",
        "detail": "grp",
        "documentation": {}
    },
    {
        "label": "gzip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gzip",
        "description": "gzip",
        "detail": "gzip",
        "documentation": {}
    },
    {
        "label": "qiskit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "qiskit",
        "description": "qiskit",
        "detail": "qiskit",
        "documentation": {}
    },
    {
        "label": "ast",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ast",
        "description": "ast",
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "checker",
        "importPath": "pyflakes",
        "description": "pyflakes",
        "isExtraImport": true,
        "detail": "pyflakes",
        "documentation": {}
    },
    {
        "label": "Values",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "Values",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "pip._internal.cli.base_command",
        "description": "pip._internal.cli.base_command",
        "isExtraImport": true,
        "detail": "pip._internal.cli.base_command",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "pip._internal.cli.base_command",
        "description": "pip._internal.cli.base_command",
        "isExtraImport": true,
        "detail": "pip._internal.cli.base_command",
        "documentation": {}
    },
    {
        "label": "ERROR",
        "importPath": "pip._internal.cli.status_codes",
        "description": "pip._internal.cli.status_codes",
        "isExtraImport": true,
        "detail": "pip._internal.cli.status_codes",
        "documentation": {}
    },
    {
        "label": "SUCCESS",
        "importPath": "pip._internal.cli.status_codes",
        "description": "pip._internal.cli.status_codes",
        "isExtraImport": true,
        "detail": "pip._internal.cli.status_codes",
        "documentation": {}
    },
    {
        "label": "SUCCESS",
        "importPath": "pip._internal.cli.status_codes",
        "description": "pip._internal.cli.status_codes",
        "isExtraImport": true,
        "detail": "pip._internal.cli.status_codes",
        "documentation": {}
    },
    {
        "label": "FAVORITE_HASH",
        "importPath": "pip._internal.utils.hashes",
        "description": "pip._internal.utils.hashes",
        "isExtraImport": true,
        "detail": "pip._internal.utils.hashes",
        "documentation": {}
    },
    {
        "label": "STRONG_HASHES",
        "importPath": "pip._internal.utils.hashes",
        "description": "pip._internal.utils.hashes",
        "isExtraImport": true,
        "detail": "pip._internal.utils.hashes",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "lorem",
        "importPath": "hashlib_data",
        "description": "hashlib_data",
        "isExtraImport": true,
        "detail": "hashlib_data",
        "documentation": {}
    },
    {
        "label": "lorem",
        "importPath": "hashlib_data",
        "description": "hashlib_data",
        "isExtraImport": true,
        "detail": "hashlib_data",
        "documentation": {}
    },
    {
        "label": "lorem",
        "importPath": "hashlib_data",
        "description": "hashlib_data",
        "isExtraImport": true,
        "detail": "hashlib_data",
        "documentation": {}
    },
    {
        "label": "lorem",
        "importPath": "hashlib_data",
        "description": "hashlib_data",
        "isExtraImport": true,
        "detail": "hashlib_data",
        "documentation": {}
    },
    {
        "label": "data",
        "importPath": "heapq_heapdata",
        "description": "heapq_heapdata",
        "isExtraImport": true,
        "detail": "heapq_heapdata",
        "documentation": {}
    },
    {
        "label": "data",
        "importPath": "heapq_heapdata",
        "description": "heapq_heapdata",
        "isExtraImport": true,
        "detail": "heapq_heapdata",
        "documentation": {}
    },
    {
        "label": "data",
        "importPath": "heapq_heapdata",
        "description": "heapq_heapdata",
        "isExtraImport": true,
        "detail": "heapq_heapdata",
        "documentation": {}
    },
    {
        "label": "data",
        "importPath": "heapq_heapdata",
        "description": "heapq_heapdata",
        "isExtraImport": true,
        "detail": "heapq_heapdata",
        "documentation": {}
    },
    {
        "label": "data",
        "importPath": "heapq_heapdata",
        "description": "heapq_heapdata",
        "isExtraImport": true,
        "detail": "heapq_heapdata",
        "documentation": {}
    },
    {
        "label": "show_tree",
        "importPath": "heapq_showtree",
        "description": "heapq_showtree",
        "isExtraImport": true,
        "detail": "heapq_showtree",
        "documentation": {}
    },
    {
        "label": "show_tree",
        "importPath": "heapq_showtree",
        "description": "heapq_showtree",
        "isExtraImport": true,
        "detail": "heapq_showtree",
        "documentation": {}
    },
    {
        "label": "show_tree",
        "importPath": "heapq_showtree",
        "description": "heapq_showtree",
        "isExtraImport": true,
        "detail": "heapq_showtree",
        "documentation": {}
    },
    {
        "label": "show_tree",
        "importPath": "heapq_showtree",
        "description": "heapq_showtree",
        "isExtraImport": true,
        "detail": "heapq_showtree",
        "documentation": {}
    },
    {
        "label": "tkinter.messagebox",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter.messagebox",
        "description": "tkinter.messagebox",
        "detail": "tkinter.messagebox",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "pip._internal.exceptions",
        "description": "pip._internal.exceptions",
        "isExtraImport": true,
        "detail": "pip._internal.exceptions",
        "documentation": {}
    },
    {
        "label": "jupyter_contrib_nbextensions.nbconvert_support",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jupyter_contrib_nbextensions.nbconvert_support",
        "description": "jupyter_contrib_nbextensions.nbconvert_support",
        "detail": "jupyter_contrib_nbextensions.nbconvert_support",
        "documentation": {}
    },
    {
        "label": "hmac",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hmac",
        "description": "hmac",
        "detail": "hmac",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "colorize",
        "importPath": "colorprint",
        "description": "colorprint",
        "isExtraImport": true,
        "detail": "colorprint",
        "documentation": {}
    },
    {
        "label": "search_wikihow",
        "importPath": "pywikihow",
        "description": "pywikihow",
        "isExtraImport": true,
        "detail": "pywikihow",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "tornado.http1connection",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.http1connection",
        "description": "tornado.http1connection",
        "detail": "tornado.http1connection",
        "documentation": {}
    },
    {
        "label": "HTTP1Connection",
        "importPath": "tornado.http1connection",
        "description": "tornado.http1connection",
        "isExtraImport": true,
        "detail": "tornado.http1connection",
        "documentation": {}
    },
    {
        "label": "tornado.httputil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.httputil",
        "description": "tornado.httputil",
        "detail": "tornado.httputil",
        "documentation": {}
    },
    {
        "label": "HTTPMessageDelegate",
        "importPath": "tornado.httputil",
        "description": "tornado.httputil",
        "isExtraImport": true,
        "detail": "tornado.httputil",
        "documentation": {}
    },
    {
        "label": "tornado.iostream",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.iostream",
        "description": "tornado.iostream",
        "detail": "tornado.iostream",
        "documentation": {}
    },
    {
        "label": "IOStream",
        "importPath": "tornado.iostream",
        "description": "tornado.iostream",
        "isExtraImport": true,
        "detail": "tornado.iostream",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "tornado.locks",
        "description": "tornado.locks",
        "isExtraImport": true,
        "detail": "tornado.locks",
        "documentation": {}
    },
    {
        "label": "tornado.netutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.netutil",
        "description": "tornado.netutil",
        "detail": "tornado.netutil",
        "documentation": {}
    },
    {
        "label": "add_accept_handler",
        "importPath": "tornado.netutil",
        "description": "tornado.netutil",
        "isExtraImport": true,
        "detail": "tornado.netutil",
        "documentation": {}
    },
    {
        "label": "tornado.testing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.testing",
        "description": "tornado.testing",
        "detail": "tornado.testing",
        "documentation": {}
    },
    {
        "label": "AsyncTestCase",
        "importPath": "tornado.testing",
        "description": "tornado.testing",
        "isExtraImport": true,
        "detail": "tornado.testing",
        "documentation": {}
    },
    {
        "label": "bind_unused_port",
        "importPath": "tornado.testing",
        "description": "tornado.testing",
        "isExtraImport": true,
        "detail": "tornado.testing",
        "documentation": {}
    },
    {
        "label": "gen_test",
        "importPath": "tornado.testing",
        "description": "tornado.testing",
        "isExtraImport": true,
        "detail": "tornado.testing",
        "documentation": {}
    },
    {
        "label": "cookies",
        "importPath": "http",
        "description": "http",
        "isExtraImport": true,
        "detail": "http",
        "documentation": {}
    },
    {
        "label": "cookies",
        "importPath": "http",
        "description": "http",
        "isExtraImport": true,
        "detail": "http",
        "documentation": {}
    },
    {
        "label": "cookies",
        "importPath": "http",
        "description": "http",
        "isExtraImport": true,
        "detail": "http",
        "documentation": {}
    },
    {
        "label": "cookies",
        "importPath": "http",
        "description": "http",
        "isExtraImport": true,
        "detail": "http",
        "documentation": {}
    },
    {
        "label": "cookies",
        "importPath": "http",
        "description": "http",
        "isExtraImport": true,
        "detail": "http",
        "documentation": {}
    },
    {
        "label": "BaseHTTPRequestHandler",
        "importPath": "http.server",
        "description": "http.server",
        "isExtraImport": true,
        "detail": "http.server",
        "documentation": {}
    },
    {
        "label": "BaseHTTPRequestHandler",
        "importPath": "http.server",
        "description": "http.server",
        "isExtraImport": true,
        "detail": "http.server",
        "documentation": {}
    },
    {
        "label": "BaseHTTPRequestHandler",
        "importPath": "http.server",
        "description": "http.server",
        "isExtraImport": true,
        "detail": "http.server",
        "documentation": {}
    },
    {
        "label": "BaseHTTPRequestHandler",
        "importPath": "http.server",
        "description": "http.server",
        "isExtraImport": true,
        "detail": "http.server",
        "documentation": {}
    },
    {
        "label": "HTTPServer",
        "importPath": "http.server",
        "description": "http.server",
        "isExtraImport": true,
        "detail": "http.server",
        "documentation": {}
    },
    {
        "label": "BaseHTTPRequestHandler",
        "importPath": "http.server",
        "description": "http.server",
        "isExtraImport": true,
        "detail": "http.server",
        "documentation": {}
    },
    {
        "label": "cgi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cgi",
        "description": "cgi",
        "detail": "cgi",
        "documentation": {}
    },
    {
        "label": "snowballstemmer",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "snowballstemmer",
        "description": "snowballstemmer",
        "detail": "snowballstemmer",
        "documentation": {}
    },
    {
        "label": "SearchLanguage",
        "importPath": "sphinx.search",
        "description": "sphinx.search",
        "isExtraImport": true,
        "detail": "sphinx.search",
        "documentation": {}
    },
    {
        "label": "parse_stop_word",
        "importPath": "sphinx.search",
        "description": "sphinx.search",
        "isExtraImport": true,
        "detail": "sphinx.search",
        "documentation": {}
    },
    {
        "label": "TAGS",
        "importPath": "PIL.ExifTags",
        "description": "PIL.ExifTags",
        "isExtraImport": true,
        "detail": "PIL.ExifTags",
        "documentation": {}
    },
    {
        "label": "imaplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "imaplib",
        "description": "imaplib",
        "detail": "imaplib",
        "documentation": {}
    },
    {
        "label": "imaplib_connect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "imaplib_connect",
        "description": "imaplib_connect",
        "detail": "imaplib_connect",
        "documentation": {}
    },
    {
        "label": "open_connection",
        "importPath": "imaplib_connect",
        "description": "imaplib_connect",
        "isExtraImport": true,
        "detail": "imaplib_connect",
        "documentation": {}
    },
    {
        "label": "open_connection",
        "importPath": "imaplib_connect",
        "description": "imaplib_connect",
        "isExtraImport": true,
        "detail": "imaplib_connect",
        "documentation": {}
    },
    {
        "label": "open_connection",
        "importPath": "imaplib_connect",
        "description": "imaplib_connect",
        "isExtraImport": true,
        "detail": "imaplib_connect",
        "documentation": {}
    },
    {
        "label": "open_connection",
        "importPath": "imaplib_connect",
        "description": "imaplib_connect",
        "isExtraImport": true,
        "detail": "imaplib_connect",
        "documentation": {}
    },
    {
        "label": "open_connection",
        "importPath": "imaplib_connect",
        "description": "imaplib_connect",
        "isExtraImport": true,
        "detail": "imaplib_connect",
        "documentation": {}
    },
    {
        "label": "parse_list_response",
        "importPath": "imaplib_list_parse",
        "description": "imaplib_list_parse",
        "isExtraImport": true,
        "detail": "imaplib_list_parse",
        "documentation": {}
    },
    {
        "label": "parse_list_response",
        "importPath": "imaplib_list_parse",
        "description": "imaplib_list_parse",
        "isExtraImport": true,
        "detail": "imaplib_list_parse",
        "documentation": {}
    },
    {
        "label": "parse_list_response",
        "importPath": "imaplib_list_parse",
        "description": "imaplib_list_parse",
        "isExtraImport": true,
        "detail": "imaplib_list_parse",
        "documentation": {}
    },
    {
        "label": "parse_list_response",
        "importPath": "imaplib_list_parse",
        "description": "imaplib_list_parse",
        "isExtraImport": true,
        "detail": "imaplib_list_parse",
        "documentation": {}
    },
    {
        "label": "parse_list_response",
        "importPath": "imaplib_list_parse",
        "description": "imaplib_list_parse",
        "isExtraImport": true,
        "detail": "imaplib_list_parse",
        "documentation": {}
    },
    {
        "label": "email",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "email",
        "description": "email",
        "detail": "email",
        "documentation": {}
    },
    {
        "label": "email.parser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "email.parser",
        "description": "email.parser",
        "detail": "email.parser",
        "documentation": {}
    },
    {
        "label": "keylogger",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keylogger",
        "description": "keylogger",
        "detail": "keylogger",
        "documentation": {}
    },
    {
        "label": "importlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib",
        "description": "importlib",
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "importlib.machinery",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib.machinery",
        "description": "importlib.machinery",
        "detail": "importlib.machinery",
        "documentation": {}
    },
    {
        "label": "tornado.auth",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.auth",
        "description": "tornado.auth",
        "detail": "tornado.auth",
        "documentation": {}
    },
    {
        "label": "tornado.autoreload",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.autoreload",
        "description": "tornado.autoreload",
        "detail": "tornado.autoreload",
        "documentation": {}
    },
    {
        "label": "tornado.concurrent",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.concurrent",
        "description": "tornado.concurrent",
        "detail": "tornado.concurrent",
        "documentation": {}
    },
    {
        "label": "tornado.escape",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.escape",
        "description": "tornado.escape",
        "detail": "tornado.escape",
        "documentation": {}
    },
    {
        "label": "tornado.gen",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.gen",
        "description": "tornado.gen",
        "detail": "tornado.gen",
        "documentation": {}
    },
    {
        "label": "tornado.httpclient",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.httpclient",
        "description": "tornado.httpclient",
        "detail": "tornado.httpclient",
        "documentation": {}
    },
    {
        "label": "tornado.httpserver",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.httpserver",
        "description": "tornado.httpserver",
        "detail": "tornado.httpserver",
        "documentation": {}
    },
    {
        "label": "tornado.ioloop",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.ioloop",
        "description": "tornado.ioloop",
        "detail": "tornado.ioloop",
        "documentation": {}
    },
    {
        "label": "IOLoop",
        "importPath": "tornado.ioloop",
        "description": "tornado.ioloop",
        "isExtraImport": true,
        "detail": "tornado.ioloop",
        "documentation": {}
    },
    {
        "label": "tornado.locale",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.locale",
        "description": "tornado.locale",
        "detail": "tornado.locale",
        "documentation": {}
    },
    {
        "label": "tornado.log",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.log",
        "description": "tornado.log",
        "detail": "tornado.log",
        "documentation": {}
    },
    {
        "label": "tornado.options",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.options",
        "description": "tornado.options",
        "detail": "tornado.options",
        "documentation": {}
    },
    {
        "label": "tornado.process",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.process",
        "description": "tornado.process",
        "detail": "tornado.process",
        "documentation": {}
    },
    {
        "label": "tornado.simple_httpclient",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.simple_httpclient",
        "description": "tornado.simple_httpclient",
        "detail": "tornado.simple_httpclient",
        "documentation": {}
    },
    {
        "label": "tornado.tcpserver",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.tcpserver",
        "description": "tornado.tcpserver",
        "detail": "tornado.tcpserver",
        "documentation": {}
    },
    {
        "label": "tornado.tcpclient",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.tcpclient",
        "description": "tornado.tcpclient",
        "detail": "tornado.tcpclient",
        "documentation": {}
    },
    {
        "label": "tornado.template",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.template",
        "description": "tornado.template",
        "detail": "tornado.template",
        "documentation": {}
    },
    {
        "label": "tornado.util",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.util",
        "description": "tornado.util",
        "detail": "tornado.util",
        "documentation": {}
    },
    {
        "label": "tornado.web",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.web",
        "description": "tornado.web",
        "detail": "tornado.web",
        "documentation": {}
    },
    {
        "label": "tornado.websocket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.websocket",
        "description": "tornado.websocket",
        "detail": "tornado.websocket",
        "documentation": {}
    },
    {
        "label": "tornado.wsgi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tornado.wsgi",
        "description": "tornado.wsgi",
        "detail": "tornado.wsgi",
        "documentation": {}
    },
    {
        "label": "wrapt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "wrapt",
        "description": "wrapt",
        "detail": "wrapt",
        "documentation": {}
    },
    {
        "label": "NodeNG",
        "importPath": "astroid.nodes",
        "description": "astroid.nodes",
        "isExtraImport": true,
        "detail": "astroid.nodes",
        "documentation": {}
    },
    {
        "label": "gtk,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gtk.",
        "description": "gtk.",
        "detail": "gtk.",
        "documentation": {}
    },
    {
        "label": "stdin_ready",
        "importPath": "pydev_ipython.inputhook",
        "description": "pydev_ipython.inputhook",
        "isExtraImport": true,
        "detail": "pydev_ipython.inputhook",
        "documentation": {}
    },
    {
        "label": "example",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "example",
        "description": "example",
        "detail": "example",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "inspect_getclasstree",
        "description": "inspect_getclasstree",
        "isExtraImport": true,
        "detail": "inspect_getclasstree",
        "documentation": {}
    },
    {
        "label": "Bot",
        "importPath": "instabot",
        "description": "instabot",
        "isExtraImport": true,
        "detail": "instabot",
        "documentation": {}
    },
    {
        "label": "Distribution",
        "importPath": "pip._vendor.pkg_resources",
        "description": "pip._vendor.pkg_resources",
        "isExtraImport": true,
        "detail": "pip._vendor.pkg_resources",
        "documentation": {}
    },
    {
        "label": "AbstractDistribution",
        "importPath": "pip._internal.distributions.base",
        "description": "pip._internal.distributions.base",
        "isExtraImport": true,
        "detail": "pip._internal.distributions.base",
        "documentation": {}
    },
    {
        "label": "PackageFinder",
        "importPath": "pip._internal.index.package_finder",
        "description": "pip._internal.index.package_finder",
        "isExtraImport": true,
        "detail": "pip._internal.index.package_finder",
        "documentation": {}
    },
    {
        "label": "new_compiler",
        "importPath": "distutils.ccompiler",
        "description": "distutils.ccompiler",
        "isExtraImport": true,
        "detail": "distutils.ccompiler",
        "documentation": {}
    },
    {
        "label": "get_cmd",
        "importPath": "numpy.distutils.misc_util",
        "description": "numpy.distutils.misc_util",
        "isExtraImport": true,
        "detail": "numpy.distutils.misc_util",
        "documentation": {}
    },
    {
        "label": "setuptools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "setuptools",
        "description": "setuptools",
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "namespaces",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "unpack_archive",
        "importPath": "setuptools.archive_util",
        "description": "setuptools.archive_util",
        "isExtraImport": true,
        "detail": "setuptools.archive_util",
        "documentation": {}
    },
    {
        "label": "pkg_resources",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pkg_resources",
        "description": "pkg_resources",
        "detail": "pkg_resources",
        "documentation": {}
    },
    {
        "label": "ST_MODE",
        "importPath": "stat",
        "description": "stat",
        "isExtraImport": true,
        "detail": "stat",
        "documentation": {}
    },
    {
        "label": "compiled",
        "importPath": "jedi.inference",
        "description": "jedi.inference",
        "isExtraImport": true,
        "detail": "jedi.inference",
        "documentation": {}
    },
    {
        "label": "ValueSet",
        "importPath": "jedi.inference.base_value",
        "description": "jedi.inference.base_value",
        "isExtraImport": true,
        "detail": "jedi.inference.base_value",
        "documentation": {}
    },
    {
        "label": "ValueSet",
        "importPath": "jedi.inference.base_value",
        "description": "jedi.inference.base_value",
        "isExtraImport": true,
        "detail": "jedi.inference.base_value",
        "documentation": {}
    },
    {
        "label": "NO_VALUES",
        "importPath": "jedi.inference.base_value",
        "description": "jedi.inference.base_value",
        "isExtraImport": true,
        "detail": "jedi.inference.base_value",
        "documentation": {}
    },
    {
        "label": "ParserTreeFilter",
        "importPath": "jedi.inference.filters",
        "description": "jedi.inference.filters",
        "isExtraImport": true,
        "detail": "jedi.inference.filters",
        "documentation": {}
    },
    {
        "label": "MergedFilter",
        "importPath": "jedi.inference.filters",
        "description": "jedi.inference.filters",
        "isExtraImport": true,
        "detail": "jedi.inference.filters",
        "documentation": {}
    },
    {
        "label": "TreeNameDefinition",
        "importPath": "jedi.inference.names",
        "description": "jedi.inference.names",
        "isExtraImport": true,
        "detail": "jedi.inference.names",
        "documentation": {}
    },
    {
        "label": "mixed",
        "importPath": "jedi.inference.compiled",
        "description": "jedi.inference.compiled",
        "isExtraImport": true,
        "detail": "jedi.inference.compiled",
        "documentation": {}
    },
    {
        "label": "create_access_path",
        "importPath": "jedi.inference.compiled.access",
        "description": "jedi.inference.compiled.access",
        "isExtraImport": true,
        "detail": "jedi.inference.compiled.access",
        "documentation": {}
    },
    {
        "label": "ModuleContext",
        "importPath": "jedi.inference.context",
        "description": "jedi.inference.context",
        "isExtraImport": true,
        "detail": "jedi.inference.context",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "build_ll",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "build_ll",
        "importPath": "ll_helpers",
        "description": "ll_helpers",
        "isExtraImport": true,
        "detail": "ll_helpers",
        "documentation": {}
    },
    {
        "label": "ipaddress",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ipaddress",
        "description": "ipaddress",
        "detail": "ipaddress",
        "documentation": {}
    },
    {
        "label": "Magics",
        "importPath": "IPython.core.magic",
        "description": "IPython.core.magic",
        "isExtraImport": true,
        "detail": "IPython.core.magic",
        "documentation": {}
    },
    {
        "label": "line_magic",
        "importPath": "IPython.core.magic",
        "description": "IPython.core.magic",
        "isExtraImport": true,
        "detail": "IPython.core.magic",
        "documentation": {}
    },
    {
        "label": "magics_class",
        "importPath": "IPython.core.magic",
        "description": "IPython.core.magic",
        "isExtraImport": true,
        "detail": "IPython.core.magic",
        "documentation": {}
    },
    {
        "label": "argument",
        "importPath": "IPython.core.magic_arguments",
        "description": "IPython.core.magic_arguments",
        "isExtraImport": true,
        "detail": "IPython.core.magic_arguments",
        "documentation": {}
    },
    {
        "label": "magic_arguments",
        "importPath": "IPython.core.magic_arguments",
        "description": "IPython.core.magic_arguments",
        "isExtraImport": true,
        "detail": "IPython.core.magic_arguments",
        "documentation": {}
    },
    {
        "label": "# type: ignore\n    parse_argstring",
        "importPath": "IPython.core.magic_arguments",
        "description": "IPython.core.magic_arguments",
        "isExtraImport": true,
        "detail": "IPython.core.magic_arguments",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "scrapy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "scrapy",
        "description": "scrapy",
        "detail": "scrapy",
        "documentation": {}
    },
    {
        "label": "register_parallel_backend",
        "importPath": "joblib.parallel",
        "description": "joblib.parallel",
        "isExtraImport": true,
        "detail": "joblib.parallel",
        "documentation": {}
    },
    {
        "label": "pyjokes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyjokes",
        "description": "pyjokes",
        "detail": "pyjokes",
        "documentation": {}
    },
    {
        "label": "jsonschema",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jsonschema",
        "description": "jsonschema",
        "detail": "jsonschema",
        "documentation": {}
    },
    {
        "label": "Draft4Validator",
        "importPath": "jsonschema",
        "description": "jsonschema",
        "isExtraImport": true,
        "detail": "jsonschema",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "jsonschema",
        "description": "jsonschema",
        "isExtraImport": true,
        "detail": "jsonschema",
        "documentation": {}
    },
    {
        "label": "json_myobj",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json_myobj",
        "description": "json_myobj",
        "detail": "json_myobj",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "make_blobs",
        "importPath": "sklearn.datasets.samples_generator",
        "description": "sklearn.datasets.samples_generator",
        "isExtraImport": true,
        "detail": "sklearn.datasets.samples_generator",
        "documentation": {}
    },
    {
        "label": "KMeans",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "base_flags",
        "importPath": "jupyter_core.application",
        "description": "jupyter_core.application",
        "isExtraImport": true,
        "detail": "jupyter_core.application",
        "documentation": {}
    },
    {
        "label": "JupyterApp",
        "importPath": "jupyter_core.application",
        "description": "jupyter_core.application",
        "isExtraImport": true,
        "detail": "jupyter_core.application",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "qtpy",
        "description": "qtpy",
        "isExtraImport": true,
        "detail": "qtpy",
        "documentation": {}
    },
    {
        "label": "pynput.keyboard",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pynput.keyboard",
        "description": "pynput.keyboard",
        "detail": "pynput.keyboard",
        "documentation": {}
    },
    {
        "label": "keyword",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keyword",
        "description": "keyword",
        "detail": "keyword",
        "documentation": {}
    },
    {
        "label": "py",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "py",
        "description": "py",
        "detail": "py",
        "documentation": {}
    },
    {
        "label": "KNeighborsClassifier",
        "importPath": "sklearn.neighbors",
        "description": "sklearn.neighbors",
        "isExtraImport": true,
        "detail": "sklearn.neighbors",
        "documentation": {}
    },
    {
        "label": "datasets",
        "importPath": "sklearn",
        "description": "sklearn",
        "isExtraImport": true,
        "detail": "sklearn",
        "documentation": {}
    },
    {
        "label": "FileContentsManager",
        "importPath": "notebook.services.contents.filemanager",
        "description": "notebook.services.contents.filemanager",
        "isExtraImport": true,
        "detail": "notebook.services.contents.filemanager",
        "documentation": {}
    },
    {
        "label": "nbformat",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nbformat",
        "description": "nbformat",
        "detail": "nbformat",
        "documentation": {}
    },
    {
        "label": "pandoc",
        "importPath": "nbconvert.utils.pandoc",
        "description": "nbconvert.utils.pandoc",
        "isExtraImport": true,
        "detail": "nbconvert.utils.pandoc",
        "documentation": {}
    },
    {
        "label": "tokenize",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tokenize",
        "description": "tokenize",
        "detail": "tokenize",
        "documentation": {}
    },
    {
        "label": "monkeypatch",
        "importPath": "jedi.common",
        "description": "jedi.common",
        "isExtraImport": true,
        "detail": "jedi.common",
        "documentation": {}
    },
    {
        "label": "SuffixArray",
        "importPath": "suffix_array",
        "description": "suffix_array",
        "isExtraImport": true,
        "detail": "suffix_array",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "IPython.lib.lexers",
        "description": "IPython.lib.lexers",
        "isExtraImport": true,
        "detail": "IPython.lib.lexers",
        "documentation": {}
    },
    {
        "label": "Mixin2to3",
        "importPath": "distutils.util",
        "description": "distutils.util",
        "isExtraImport": true,
        "detail": "distutils.util",
        "documentation": {}
    },
    {
        "label": "RefactoringTool",
        "importPath": "lib2to3.refactor",
        "description": "lib2to3.refactor",
        "isExtraImport": true,
        "detail": "lib2to3.refactor",
        "documentation": {}
    },
    {
        "label": "get_fixers_from_package",
        "importPath": "lib2to3.refactor",
        "description": "lib2to3.refactor",
        "isExtraImport": true,
        "detail": "lib2to3.refactor",
        "documentation": {}
    },
    {
        "label": "NumpyVersion",
        "importPath": "numpy.lib",
        "description": "numpy.lib",
        "isExtraImport": true,
        "detail": "numpy.lib",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "linecache",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "linecache",
        "description": "linecache",
        "detail": "linecache",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "linecache_data",
        "description": "linecache_data",
        "isExtraImport": true,
        "detail": "linecache_data",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "linecache_data",
        "description": "linecache_data",
        "isExtraImport": true,
        "detail": "linecache_data",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "linecache_data",
        "description": "linecache_data",
        "isExtraImport": true,
        "detail": "linecache_data",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "docutils.nodes",
        "description": "docutils.nodes",
        "isExtraImport": true,
        "detail": "docutils.nodes",
        "documentation": {}
    },
    {
        "label": "SphinxError",
        "importPath": "sphinx.errors",
        "description": "sphinx.errors",
        "isExtraImport": true,
        "detail": "sphinx.errors",
        "documentation": {}
    },
    {
        "label": "_",
        "importPath": "sphinx.locale",
        "description": "sphinx.locale",
        "isExtraImport": true,
        "detail": "sphinx.locale",
        "documentation": {}
    },
    {
        "label": "Trip",
        "importPath": "Trip",
        "description": "Trip",
        "isExtraImport": true,
        "detail": "Trip",
        "documentation": {}
    },
    {
        "label": "Helper",
        "importPath": "Trip",
        "description": "Trip",
        "isExtraImport": true,
        "detail": "Trip",
        "documentation": {}
    },
    {
        "label": "pygithub3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygithub3",
        "description": "pygithub3",
        "detail": "pygithub3",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "reader",
        "description": "reader",
        "isExtraImport": true,
        "detail": "reader",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "scanner",
        "description": "scanner",
        "isExtraImport": true,
        "detail": "scanner",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "parser",
        "description": "parser",
        "isExtraImport": true,
        "detail": "parser",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "composer",
        "description": "composer",
        "isExtraImport": true,
        "detail": "composer",
        "documentation": {}
    },
    {
        "label": "knapSack01",
        "kind": 2,
        "importPath": "mid-range.0-1_Knapsack",
        "description": "mid-range.0-1_Knapsack",
        "peekOfCode": "def knapSack01(W, wt, profit, n):\n    K = [[0 for x in range(W + 1)] for x in range(n + 1)]\n    # Bottom Up Tabulation\n    for i in range(n + 1):\n        for w in range(W + 1):\n            if i == 0 or w == 0:\n                K[i][w] = 0\n            elif wt[i - 1] <= w:\n                K[i][w] = max(profit[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w])\n            else:",
        "detail": "mid-range.0-1_Knapsack",
        "documentation": {}
    },
    {
        "label": "profit",
        "kind": 5,
        "importPath": "mid-range.0-1_Knapsack",
        "description": "mid-range.0-1_Knapsack",
        "peekOfCode": "profit = [100, 20, 60, 40]\nwt = [3, 2, 4, 1]\nW = 5\nn = len(profit)\nprint(knapSack01(W, wt, profit, n))",
        "detail": "mid-range.0-1_Knapsack",
        "documentation": {}
    },
    {
        "label": "wt",
        "kind": 5,
        "importPath": "mid-range.0-1_Knapsack",
        "description": "mid-range.0-1_Knapsack",
        "peekOfCode": "wt = [3, 2, 4, 1]\nW = 5\nn = len(profit)\nprint(knapSack01(W, wt, profit, n))",
        "detail": "mid-range.0-1_Knapsack",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": "mid-range.0-1_Knapsack",
        "description": "mid-range.0-1_Knapsack",
        "peekOfCode": "W = 5\nn = len(profit)\nprint(knapSack01(W, wt, profit, n))",
        "detail": "mid-range.0-1_Knapsack",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.0-1_Knapsack",
        "description": "mid-range.0-1_Knapsack",
        "peekOfCode": "n = len(profit)\nprint(knapSack01(W, wt, profit, n))",
        "detail": "mid-range.0-1_Knapsack",
        "documentation": {}
    },
    {
        "label": "LDI",
        "kind": 5,
        "importPath": "mid-range.00-masking",
        "description": "mid-range.00-masking",
        "peekOfCode": "LDI = 0b10000010\nbob = LDI >> 6\nbob == 0b00000010\nadd_to_pc = bob + 1\nFETCH\nIR = 0b10000010\nDECODE\nadd_to_pc = (IR >> 6) + 1\nif IR == LDI:\n    # do the ldi thing",
        "detail": "mid-range.00-masking",
        "documentation": {}
    },
    {
        "label": "bob",
        "kind": 5,
        "importPath": "mid-range.00-masking",
        "description": "mid-range.00-masking",
        "peekOfCode": "bob = LDI >> 6\nbob == 0b00000010\nadd_to_pc = bob + 1\nFETCH\nIR = 0b10000010\nDECODE\nadd_to_pc = (IR >> 6) + 1\nif IR == LDI:\n    # do the ldi thing\nelif IR == ADD:",
        "detail": "mid-range.00-masking",
        "documentation": {}
    },
    {
        "label": "add_to_pc",
        "kind": 5,
        "importPath": "mid-range.00-masking",
        "description": "mid-range.00-masking",
        "peekOfCode": "add_to_pc = bob + 1\nFETCH\nIR = 0b10000010\nDECODE\nadd_to_pc = (IR >> 6) + 1\nif IR == LDI:\n    # do the ldi thing\nelif IR == ADD:\n    #do the add thing\ncpu.pc += add_to_pc",
        "detail": "mid-range.00-masking",
        "documentation": {}
    },
    {
        "label": "IR",
        "kind": 5,
        "importPath": "mid-range.00-masking",
        "description": "mid-range.00-masking",
        "peekOfCode": "IR = 0b10000010\nDECODE\nadd_to_pc = (IR >> 6) + 1\nif IR == LDI:\n    # do the ldi thing\nelif IR == ADD:\n    #do the add thing\ncpu.pc += add_to_pc",
        "detail": "mid-range.00-masking",
        "documentation": {}
    },
    {
        "label": "add_to_pc",
        "kind": 5,
        "importPath": "mid-range.00-masking",
        "description": "mid-range.00-masking",
        "peekOfCode": "add_to_pc = (IR >> 6) + 1\nif IR == LDI:\n    # do the ldi thing\nelif IR == ADD:\n    #do the add thing\ncpu.pc += add_to_pc",
        "detail": "mid-range.00-masking",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "mid-range.0001_initial",
        "description": "mid-range.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = []\n    operations = [\n        migrations.CreateModel(\n            name=\"Note\",\n            fields=[\n                (\n                    \"id\",\n                    models.UUIDField(",
        "detail": "mid-range.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "mid-range.0002_auto_20181207_1610",
        "description": "mid-range.0002_auto_20181207_1610",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"notes\", \"0001_initial\")]\n    operations = [\n        migrations.AddField(\n            model_name=\"note\",\n            name=\"created_at\",\n            field=models.DateTimeField(\n                auto_now_add=True, default=django.utils.timezone.now\n            ),\n            preserve_default=False,",
        "detail": "mid-range.0002_auto_20181207_1610",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "mid-range.00thread_lecture",
        "description": "mid-range.00thread_lecture",
        "peekOfCode": "def func():\n    for _ in range(50):\n        # if _ == 45:\n        #   print(\"exiting at 45\")\n        #   return\n        print(\"Me first!\")\nthread = threading.Thread(target=func)\nthread.start()\nfor _ in range(50):\n    print(\"No, me, Pick me!\")",
        "detail": "mid-range.00thread_lecture",
        "documentation": {}
    },
    {
        "label": "sleepy",
        "kind": 2,
        "importPath": "mid-range.00thread_lecture",
        "description": "mid-range.00thread_lecture",
        "peekOfCode": "def sleepy(s):\n    print(f\"Hello, {s}!\")\n    sleep_time = randint(0, 3)\n    print(f\"{s} is sleeping for {sleep_time} seconds\")\n    sleep(sleep_time)  # enters the thread wait state\n    print(f\"Good-bye, {s}!\")\n# thread1 = threading.Thread(target=sleepy, args=(\"Judy\",))\n# thread2 = threading.Thread(target=sleepy, args=(\"Petra\",))\n# thread1 = threading.Thread(target=sleepy, daemon=True, args=(\"Judy\",))\n# thread2 = threading.Thread(target=sleepy, daemon=True, args=(\"Petra\",))",
        "detail": "mid-range.00thread_lecture",
        "documentation": {}
    },
    {
        "label": "thread",
        "kind": 5,
        "importPath": "mid-range.00thread_lecture",
        "description": "mid-range.00thread_lecture",
        "peekOfCode": "thread = threading.Thread(target=func)\nthread.start()\nfor _ in range(50):\n    print(\"No, me, Pick me!\")\n##### Example 2 #####\n# from random import randint\n# from time import sleep\ndef sleepy(s):\n    print(f\"Hello, {s}!\")\n    sleep_time = randint(0, 3)",
        "detail": "mid-range.00thread_lecture",
        "documentation": {}
    },
    {
        "label": "Vec2",
        "kind": 6,
        "importPath": "mid-range.00_classes",
        "description": "mid-range.00_classes",
        "peekOfCode": "class Vec2:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __my_thing__(self, name):\n        print(f\"My name is {name}: ({self.x}, {self.y})\")\n    def call_my_thing(self, name):\n        self.__my_thing__(name)\n# l = []\n# l.__add__()",
        "detail": "mid-range.00_classes",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "mid-range.00_classes",
        "description": "mid-range.00_classes",
        "peekOfCode": "v = Vec2(12, 23)\nv.call_my_thing(\"Bob\")\nv.__my_thing__(\"Dave\")",
        "detail": "mid-range.00_classes",
        "documentation": {}
    },
    {
        "label": "radius",
        "kind": 5,
        "importPath": "mid-range.00_demo",
        "description": "mid-range.00_demo",
        "peekOfCode": "radius = 3\narea = math.pi * radius * radius\nprint(f\"The area of the circle is {area:.3f} ft\\u00b2\")",
        "detail": "mid-range.00_demo",
        "documentation": {}
    },
    {
        "label": "area",
        "kind": 5,
        "importPath": "mid-range.00_demo",
        "description": "mid-range.00_demo",
        "peekOfCode": "area = math.pi * radius * radius\nprint(f\"The area of the circle is {area:.3f} ft\\u00b2\")",
        "detail": "mid-range.00_demo",
        "documentation": {}
    },
    {
        "label": "first_name",
        "kind": 5,
        "importPath": "mid-range.00_intro_printing",
        "description": "mid-range.00_intro_printing",
        "peekOfCode": "first_name = \"Tom\"\n# print(\"Hello CSPT13 and\", first_name)\n# num = 23.87\n# # f strings\n# print(f\"This is a name: ({first_name})\")\nmy_string = \"    this is a string tom    \"\n# print(my_string)\n# print(my_string.strip())\n# print(len(my_string))\n# print(len(my_string.strip()))",
        "detail": "mid-range.00_intro_printing",
        "documentation": {}
    },
    {
        "label": "my_string",
        "kind": 5,
        "importPath": "mid-range.00_intro_printing",
        "description": "mid-range.00_intro_printing",
        "peekOfCode": "my_string = \"    this is a string tom    \"\n# print(my_string)\n# print(my_string.strip())\n# print(len(my_string))\n# print(len(my_string.strip()))\nprint(\n    f\"        Hello CSPT13 and           {len('this is a test')}     {first_name}.......\".strip()\n)\n# print(\"something on a new line\")\n# first_name",
        "detail": "mid-range.00_intro_printing",
        "documentation": {}
    },
    {
        "label": "mult2",
        "kind": 2,
        "importPath": "mid-range.00_intro_ref_val",
        "description": "mid-range.00_intro_ref_val",
        "peekOfCode": "def mult2(x):\n    return x * 2\n# define a doubling function that passes args by reference\ndef mult2_list(l):\n    for i in range(len(l)):\n        l[i] *= 2\n# # try out the functions\na = 12\na = 34\nb = 12",
        "detail": "mid-range.00_intro_ref_val",
        "documentation": {}
    },
    {
        "label": "mult2_list",
        "kind": 2,
        "importPath": "mid-range.00_intro_ref_val",
        "description": "mid-range.00_intro_ref_val",
        "peekOfCode": "def mult2_list(l):\n    for i in range(len(l)):\n        l[i] *= 2\n# # try out the functions\na = 12\na = 34\nb = 12\nnew_number = mult2(a)\nprint(new_number)\nlst = [2, 4, 6, 8]  # mutable",
        "detail": "mid-range.00_intro_ref_val",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.00_intro_ref_val",
        "description": "mid-range.00_intro_ref_val",
        "peekOfCode": "x = 5\ny = 7\na = \"5\"\nb = \"7\"\n\"57\"\nprint(str(x).__add__(y))\n# define a doubling function that passes args by value\n# 2352352 #\n# a = 3\n# b =>>>>  @23423542 # [1, 2, 3]",
        "detail": "mid-range.00_intro_ref_val",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "mid-range.00_intro_ref_val",
        "description": "mid-range.00_intro_ref_val",
        "peekOfCode": "y = 7\na = \"5\"\nb = \"7\"\n\"57\"\nprint(str(x).__add__(y))\n# define a doubling function that passes args by value\n# 2352352 #\n# a = 3\n# b =>>>>  @23423542 # [1, 2, 3]\n# b = 23423542",
        "detail": "mid-range.00_intro_ref_val",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.00_intro_ref_val",
        "description": "mid-range.00_intro_ref_val",
        "peekOfCode": "a = \"5\"\nb = \"7\"\n\"57\"\nprint(str(x).__add__(y))\n# define a doubling function that passes args by value\n# 2352352 #\n# a = 3\n# b =>>>>  @23423542 # [1, 2, 3]\n# b = 23423542\ndef mult2(x):",
        "detail": "mid-range.00_intro_ref_val",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.00_intro_ref_val",
        "description": "mid-range.00_intro_ref_val",
        "peekOfCode": "b = \"7\"\n\"57\"\nprint(str(x).__add__(y))\n# define a doubling function that passes args by value\n# 2352352 #\n# a = 3\n# b =>>>>  @23423542 # [1, 2, 3]\n# b = 23423542\ndef mult2(x):\n    return x * 2",
        "detail": "mid-range.00_intro_ref_val",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.00_intro_ref_val",
        "description": "mid-range.00_intro_ref_val",
        "peekOfCode": "a = 12\na = 34\nb = 12\nnew_number = mult2(a)\nprint(new_number)\nlst = [2, 4, 6, 8]  # mutable\nmult2_list(lst)\nfor num in lst:\n    print(num)",
        "detail": "mid-range.00_intro_ref_val",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.00_intro_ref_val",
        "description": "mid-range.00_intro_ref_val",
        "peekOfCode": "a = 34\nb = 12\nnew_number = mult2(a)\nprint(new_number)\nlst = [2, 4, 6, 8]  # mutable\nmult2_list(lst)\nfor num in lst:\n    print(num)",
        "detail": "mid-range.00_intro_ref_val",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.00_intro_ref_val",
        "description": "mid-range.00_intro_ref_val",
        "peekOfCode": "b = 12\nnew_number = mult2(a)\nprint(new_number)\nlst = [2, 4, 6, 8]  # mutable\nmult2_list(lst)\nfor num in lst:\n    print(num)",
        "detail": "mid-range.00_intro_ref_val",
        "documentation": {}
    },
    {
        "label": "new_number",
        "kind": 5,
        "importPath": "mid-range.00_intro_ref_val",
        "description": "mid-range.00_intro_ref_val",
        "peekOfCode": "new_number = mult2(a)\nprint(new_number)\nlst = [2, 4, 6, 8]  # mutable\nmult2_list(lst)\nfor num in lst:\n    print(num)",
        "detail": "mid-range.00_intro_ref_val",
        "documentation": {}
    },
    {
        "label": "lst",
        "kind": 5,
        "importPath": "mid-range.00_intro_ref_val",
        "description": "mid-range.00_intro_ref_val",
        "peekOfCode": "lst = [2, 4, 6, 8]  # mutable\nmult2_list(lst)\nfor num in lst:\n    print(num)",
        "detail": "mid-range.00_intro_ref_val",
        "documentation": {}
    },
    {
        "label": "LDI",
        "kind": 5,
        "importPath": "mid-range.00_masking",
        "description": "mid-range.00_masking",
        "peekOfCode": "LDI = 0b10000010\nADD = 0b00000000\n# 000000AA\nbob = LDI >> 6\nbob == 0b00000010 => 2\nadd_to_pc = bob + 1\n# FETCH\nIR = 0b10000010\n# DECODE\nadd_to_pc = (IR >> 6) + 1",
        "detail": "mid-range.00_masking",
        "documentation": {}
    },
    {
        "label": "ADD",
        "kind": 5,
        "importPath": "mid-range.00_masking",
        "description": "mid-range.00_masking",
        "peekOfCode": "ADD = 0b00000000\n# 000000AA\nbob = LDI >> 6\nbob == 0b00000010 => 2\nadd_to_pc = bob + 1\n# FETCH\nIR = 0b10000010\n# DECODE\nadd_to_pc = (IR >> 6) + 1\nif IR == LDI:",
        "detail": "mid-range.00_masking",
        "documentation": {}
    },
    {
        "label": "bob",
        "kind": 5,
        "importPath": "mid-range.00_masking",
        "description": "mid-range.00_masking",
        "peekOfCode": "bob = LDI >> 6\nbob == 0b00000010 => 2\nadd_to_pc = bob + 1\n# FETCH\nIR = 0b10000010\n# DECODE\nadd_to_pc = (IR >> 6) + 1\nif IR == LDI:\n    # do the ldi thing\n    pass",
        "detail": "mid-range.00_masking",
        "documentation": {}
    },
    {
        "label": "add_to_pc",
        "kind": 5,
        "importPath": "mid-range.00_masking",
        "description": "mid-range.00_masking",
        "peekOfCode": "add_to_pc = bob + 1\n# FETCH\nIR = 0b10000010\n# DECODE\nadd_to_pc = (IR >> 6) + 1\nif IR == LDI:\n    # do the ldi thing\n    pass\nelif IR == ADD:\n    #do the add thing",
        "detail": "mid-range.00_masking",
        "documentation": {}
    },
    {
        "label": "IR",
        "kind": 5,
        "importPath": "mid-range.00_masking",
        "description": "mid-range.00_masking",
        "peekOfCode": "IR = 0b10000010\n# DECODE\nadd_to_pc = (IR >> 6) + 1\nif IR == LDI:\n    # do the ldi thing\n    pass\nelif IR == ADD:\n    #do the add thing\n    pass\ncpu.pc += add_to_pc",
        "detail": "mid-range.00_masking",
        "documentation": {}
    },
    {
        "label": "add_to_pc",
        "kind": 5,
        "importPath": "mid-range.00_masking",
        "description": "mid-range.00_masking",
        "peekOfCode": "add_to_pc = (IR >> 6) + 1\nif IR == LDI:\n    # do the ldi thing\n    pass\nelif IR == ADD:\n    #do the add thing\n    pass\ncpu.pc += add_to_pc",
        "detail": "mid-range.00_masking",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.01-basics",
        "description": "mid-range.01-basics",
        "peekOfCode": "a = None\nprint(a)",
        "detail": "mid-range.01-basics",
        "documentation": {}
    },
    {
        "label": "sumZero",
        "kind": 2,
        "importPath": "mid-range.01-FindUniqueIntegers",
        "description": "mid-range.01-FindUniqueIntegers",
        "peekOfCode": "def sumZero(self, n: int):\n    \"\"\"\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    # time complexity: O(1); create one range of digits\n    # space complexity:  O(1); one unit of space\n    # What's going on here?  Let's say n = 5.\n    # Return a range of numbers which starts at 1-5, ends at 5, steps every 2\n    # So that means it starts at -4, ends at 5, steps every 2",
        "detail": "mid-range.01-FindUniqueIntegers",
        "documentation": {}
    },
    {
        "label": "empty",
        "kind": 5,
        "importPath": "mid-range.01-lists-intro",
        "description": "mid-range.01-lists-intro",
        "peekOfCode": "empty = []\nprint(empty)\nfriends = [\"Sammy\", \"Jo\", \"Will\", \"Sara\", \"James\", \"Mike\"]\nprint(friends)\nprint(friends[0])\n# print(friends[15])\nprint(friends[-1])\nprint(friends[1:-1])\nprint(friends[-1:])\nprint(friends[1::2])",
        "detail": "mid-range.01-lists-intro",
        "documentation": {}
    },
    {
        "label": "friends",
        "kind": 5,
        "importPath": "mid-range.01-lists-intro",
        "description": "mid-range.01-lists-intro",
        "peekOfCode": "friends = [\"Sammy\", \"Jo\", \"Will\", \"Sara\", \"James\", \"Mike\"]\nprint(friends)\nprint(friends[0])\n# print(friends[15])\nprint(friends[-1])\nprint(friends[1:-1])\nprint(friends[-1:])\nprint(friends[1::2])\nprint(friends[::2])\n# print(list_name[inclusive_start:exclusive_end:step_value])",
        "detail": "mid-range.01-lists-intro",
        "documentation": {}
    },
    {
        "label": "ValueHolder",
        "kind": 6,
        "importPath": "mid-range.01locks",
        "description": "mid-range.01locks",
        "peekOfCode": "class ValueHolder:\n    def __init__(self):\n        self._value = 0\n        self._lock = threading.Lock()\n    def increment(self):\n        # BEGIN CRITICAL SECTION\n        with self._lock:\n            v = self._value\n            v = v + 1\n            sleep(0.1)",
        "detail": "mid-range.01locks",
        "documentation": {}
    },
    {
        "label": "vh",
        "kind": 5,
        "importPath": "mid-range.01locks",
        "description": "mid-range.01locks",
        "peekOfCode": "vh = ValueHolder()\nthread1 = threading.Thread(target=vh.increment, daemon=True)\nthread2 = threading.Thread(target=vh.increment, daemon=True)\nthread1.start()\nthread2.start()\nprint(\"Threads all started.\")\nthread1.join()\nthread2.join()\nprint(vh.value)\nprint(\"Done with this.\")",
        "detail": "mid-range.01locks",
        "documentation": {}
    },
    {
        "label": "thread1",
        "kind": 5,
        "importPath": "mid-range.01locks",
        "description": "mid-range.01locks",
        "peekOfCode": "thread1 = threading.Thread(target=vh.increment, daemon=True)\nthread2 = threading.Thread(target=vh.increment, daemon=True)\nthread1.start()\nthread2.start()\nprint(\"Threads all started.\")\nthread1.join()\nthread2.join()\nprint(vh.value)\nprint(\"Done with this.\")",
        "detail": "mid-range.01locks",
        "documentation": {}
    },
    {
        "label": "thread2",
        "kind": 5,
        "importPath": "mid-range.01locks",
        "description": "mid-range.01locks",
        "peekOfCode": "thread2 = threading.Thread(target=vh.increment, daemon=True)\nthread1.start()\nthread2.start()\nprint(\"Threads all started.\")\nthread1.join()\nthread2.join()\nprint(vh.value)\nprint(\"Done with this.\")",
        "detail": "mid-range.01locks",
        "documentation": {}
    },
    {
        "label": "person_is_seller",
        "kind": 2,
        "importPath": "mid-range.01_breadth-first_search",
        "description": "mid-range.01_breadth-first_search",
        "peekOfCode": "def person_is_seller(name):\n    return name[-1] == \"m\"\ngraph = {}\ngraph[\"you\"] = [\"alice\", \"bob\", \"claire\"]\ngraph[\"bob\"] = [\"anuj\", \"peggy\"]\ngraph[\"alice\"] = [\"peggy\"]\ngraph[\"claire\"] = [\"thom\", \"jonny\"]\ngraph[\"anuj\"] = []\ngraph[\"peggy\"] = []\ngraph[\"thom\"] = []",
        "detail": "mid-range.01_breadth-first_search",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "mid-range.01_breadth-first_search",
        "description": "mid-range.01_breadth-first_search",
        "peekOfCode": "def search(name):\n    search_queue = deque()\n    search_queue += graph[name]\n    # This is how you keep track of which people you've searched before.\n    searched = set()\n    while search_queue:\n        person = search_queue.popleft()\n        # Only search this person if you haven't already searched them.\n        if person not in searched:\n            if person_is_seller(person):",
        "detail": "mid-range.01_breadth-first_search",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "mid-range.01_breadth-first_search",
        "description": "mid-range.01_breadth-first_search",
        "peekOfCode": "graph = {}\ngraph[\"you\"] = [\"alice\", \"bob\", \"claire\"]\ngraph[\"bob\"] = [\"anuj\", \"peggy\"]\ngraph[\"alice\"] = [\"peggy\"]\ngraph[\"claire\"] = [\"thom\", \"jonny\"]\ngraph[\"anuj\"] = []\ngraph[\"peggy\"] = []\ngraph[\"thom\"] = []\ngraph[\"jonny\"] = []\ndef search(name):",
        "detail": "mid-range.01_breadth-first_search",
        "documentation": {}
    },
    {
        "label": "graph[\"you\"]",
        "kind": 5,
        "importPath": "mid-range.01_breadth-first_search",
        "description": "mid-range.01_breadth-first_search",
        "peekOfCode": "graph[\"you\"] = [\"alice\", \"bob\", \"claire\"]\ngraph[\"bob\"] = [\"anuj\", \"peggy\"]\ngraph[\"alice\"] = [\"peggy\"]\ngraph[\"claire\"] = [\"thom\", \"jonny\"]\ngraph[\"anuj\"] = []\ngraph[\"peggy\"] = []\ngraph[\"thom\"] = []\ngraph[\"jonny\"] = []\ndef search(name):\n    search_queue = deque()",
        "detail": "mid-range.01_breadth-first_search",
        "documentation": {}
    },
    {
        "label": "graph[\"bob\"]",
        "kind": 5,
        "importPath": "mid-range.01_breadth-first_search",
        "description": "mid-range.01_breadth-first_search",
        "peekOfCode": "graph[\"bob\"] = [\"anuj\", \"peggy\"]\ngraph[\"alice\"] = [\"peggy\"]\ngraph[\"claire\"] = [\"thom\", \"jonny\"]\ngraph[\"anuj\"] = []\ngraph[\"peggy\"] = []\ngraph[\"thom\"] = []\ngraph[\"jonny\"] = []\ndef search(name):\n    search_queue = deque()\n    search_queue += graph[name]",
        "detail": "mid-range.01_breadth-first_search",
        "documentation": {}
    },
    {
        "label": "graph[\"alice\"]",
        "kind": 5,
        "importPath": "mid-range.01_breadth-first_search",
        "description": "mid-range.01_breadth-first_search",
        "peekOfCode": "graph[\"alice\"] = [\"peggy\"]\ngraph[\"claire\"] = [\"thom\", \"jonny\"]\ngraph[\"anuj\"] = []\ngraph[\"peggy\"] = []\ngraph[\"thom\"] = []\ngraph[\"jonny\"] = []\ndef search(name):\n    search_queue = deque()\n    search_queue += graph[name]\n    # This is how you keep track of which people you've searched before.",
        "detail": "mid-range.01_breadth-first_search",
        "documentation": {}
    },
    {
        "label": "graph[\"claire\"]",
        "kind": 5,
        "importPath": "mid-range.01_breadth-first_search",
        "description": "mid-range.01_breadth-first_search",
        "peekOfCode": "graph[\"claire\"] = [\"thom\", \"jonny\"]\ngraph[\"anuj\"] = []\ngraph[\"peggy\"] = []\ngraph[\"thom\"] = []\ngraph[\"jonny\"] = []\ndef search(name):\n    search_queue = deque()\n    search_queue += graph[name]\n    # This is how you keep track of which people you've searched before.\n    searched = set()",
        "detail": "mid-range.01_breadth-first_search",
        "documentation": {}
    },
    {
        "label": "graph[\"anuj\"]",
        "kind": 5,
        "importPath": "mid-range.01_breadth-first_search",
        "description": "mid-range.01_breadth-first_search",
        "peekOfCode": "graph[\"anuj\"] = []\ngraph[\"peggy\"] = []\ngraph[\"thom\"] = []\ngraph[\"jonny\"] = []\ndef search(name):\n    search_queue = deque()\n    search_queue += graph[name]\n    # This is how you keep track of which people you've searched before.\n    searched = set()\n    while search_queue:",
        "detail": "mid-range.01_breadth-first_search",
        "documentation": {}
    },
    {
        "label": "graph[\"peggy\"]",
        "kind": 5,
        "importPath": "mid-range.01_breadth-first_search",
        "description": "mid-range.01_breadth-first_search",
        "peekOfCode": "graph[\"peggy\"] = []\ngraph[\"thom\"] = []\ngraph[\"jonny\"] = []\ndef search(name):\n    search_queue = deque()\n    search_queue += graph[name]\n    # This is how you keep track of which people you've searched before.\n    searched = set()\n    while search_queue:\n        person = search_queue.popleft()",
        "detail": "mid-range.01_breadth-first_search",
        "documentation": {}
    },
    {
        "label": "graph[\"thom\"]",
        "kind": 5,
        "importPath": "mid-range.01_breadth-first_search",
        "description": "mid-range.01_breadth-first_search",
        "peekOfCode": "graph[\"thom\"] = []\ngraph[\"jonny\"] = []\ndef search(name):\n    search_queue = deque()\n    search_queue += graph[name]\n    # This is how you keep track of which people you've searched before.\n    searched = set()\n    while search_queue:\n        person = search_queue.popleft()\n        # Only search this person if you haven't already searched them.",
        "detail": "mid-range.01_breadth-first_search",
        "documentation": {}
    },
    {
        "label": "graph[\"jonny\"]",
        "kind": 5,
        "importPath": "mid-range.01_breadth-first_search",
        "description": "mid-range.01_breadth-first_search",
        "peekOfCode": "graph[\"jonny\"] = []\ndef search(name):\n    search_queue = deque()\n    search_queue += graph[name]\n    # This is how you keep track of which people you've searched before.\n    searched = set()\n    while search_queue:\n        person = search_queue.popleft()\n        # Only search this person if you haven't already searched them.\n        if person not in searched:",
        "detail": "mid-range.01_breadth-first_search",
        "documentation": {}
    },
    {
        "label": "countdown",
        "kind": 2,
        "importPath": "mid-range.01_countdown",
        "description": "mid-range.01_countdown",
        "peekOfCode": "def countdown(i):\n    # base case\n    if i <= 0:\n        return 0\n    # recursive case\n    else:\n        print(i)\n        return countdown(i - 1)\ncountdown(5)",
        "detail": "mid-range.01_countdown",
        "documentation": {}
    },
    {
        "label": "my_store",
        "kind": 5,
        "importPath": "mid-range.01_my_shop",
        "description": "mid-range.01_my_shop",
        "peekOfCode": "my_store = Store(\n    \"Bobs Emporium\", [cats[\"legs\"], cats[\"fruit\"], cats[\"special\"], cats[\"bats\"]]\n)\nprint(my_store)\n# print(repr(my_store))\nselection = 0\nwhile selection != len(my_store.categories) + 1:\n    selection = input(\"Please select the number of a department. \")\n    try:\n        selection = int(selection)",
        "detail": "mid-range.01_my_shop",
        "documentation": {}
    },
    {
        "label": "selection",
        "kind": 5,
        "importPath": "mid-range.01_my_shop",
        "description": "mid-range.01_my_shop",
        "peekOfCode": "selection = 0\nwhile selection != len(my_store.categories) + 1:\n    selection = input(\"Please select the number of a department. \")\n    try:\n        selection = int(selection)\n        if selection == len(my_store.categories) + 1:\n            print(f\"Thanks for shopping at {my_store.name}\")\n        elif selection > 0 and selection <= len(my_store.categories):\n            print(my_store.categories[selection - 1])\n        else:",
        "detail": "mid-range.01_my_shop",
        "documentation": {}
    },
    {
        "label": "findSmallest",
        "kind": 2,
        "importPath": "mid-range.01_selection_sort",
        "description": "mid-range.01_selection_sort",
        "peekOfCode": "def findSmallest(arr):\n    # Stores the smallest value\n    smallest = arr[0]\n    # Stores the index of the smallest value\n    smallest_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] < smallest:\n            smallest_index = i\n            smallest = arr[i]\n    return smallest_index",
        "detail": "mid-range.01_selection_sort",
        "documentation": {}
    },
    {
        "label": "selectionSort",
        "kind": 2,
        "importPath": "mid-range.01_selection_sort",
        "description": "mid-range.01_selection_sort",
        "peekOfCode": "def selectionSort(arr):\n    newArr = []\n    for i in range(len(arr)):\n        # Finds the smallest element in the array and adds it to the new array\n        smallest = findSmallest(arr)\n        newArr.append(arr.pop(smallest))\n    return newArr\nprint(selectionSort([5, 3, 6, 2, 10]))",
        "detail": "mid-range.01_selection_sort",
        "documentation": {}
    },
    {
        "label": "states_needed",
        "kind": 5,
        "importPath": "mid-range.01_set_covering",
        "description": "mid-range.01_set_covering",
        "peekOfCode": "states_needed = set([\"mt\", \"wa\", \"or\", \"id\", \"nv\", \"ut\", \"ca\", \"az\"])\nstations = {}\nstations[\"kone\"] = set([\"id\", \"nv\", \"ut\"])\nstations[\"ktwo\"] = set([\"wa\", \"id\", \"mt\"])\nstations[\"kthree\"] = set([\"or\", \"nv\", \"ca\"])\nstations[\"kfour\"] = set([\"nv\", \"ut\"])\nstations[\"kfive\"] = set([\"ca\", \"az\"])\nfinal_stations = set()\nwhile states_needed:\n    best_station = None",
        "detail": "mid-range.01_set_covering",
        "documentation": {}
    },
    {
        "label": "stations",
        "kind": 5,
        "importPath": "mid-range.01_set_covering",
        "description": "mid-range.01_set_covering",
        "peekOfCode": "stations = {}\nstations[\"kone\"] = set([\"id\", \"nv\", \"ut\"])\nstations[\"ktwo\"] = set([\"wa\", \"id\", \"mt\"])\nstations[\"kthree\"] = set([\"or\", \"nv\", \"ca\"])\nstations[\"kfour\"] = set([\"nv\", \"ut\"])\nstations[\"kfive\"] = set([\"ca\", \"az\"])\nfinal_stations = set()\nwhile states_needed:\n    best_station = None\n    states_covered = set()",
        "detail": "mid-range.01_set_covering",
        "documentation": {}
    },
    {
        "label": "stations[\"kone\"]",
        "kind": 5,
        "importPath": "mid-range.01_set_covering",
        "description": "mid-range.01_set_covering",
        "peekOfCode": "stations[\"kone\"] = set([\"id\", \"nv\", \"ut\"])\nstations[\"ktwo\"] = set([\"wa\", \"id\", \"mt\"])\nstations[\"kthree\"] = set([\"or\", \"nv\", \"ca\"])\nstations[\"kfour\"] = set([\"nv\", \"ut\"])\nstations[\"kfive\"] = set([\"ca\", \"az\"])\nfinal_stations = set()\nwhile states_needed:\n    best_station = None\n    states_covered = set()\n    for station, states_for_station in stations.items():",
        "detail": "mid-range.01_set_covering",
        "documentation": {}
    },
    {
        "label": "stations[\"ktwo\"]",
        "kind": 5,
        "importPath": "mid-range.01_set_covering",
        "description": "mid-range.01_set_covering",
        "peekOfCode": "stations[\"ktwo\"] = set([\"wa\", \"id\", \"mt\"])\nstations[\"kthree\"] = set([\"or\", \"nv\", \"ca\"])\nstations[\"kfour\"] = set([\"nv\", \"ut\"])\nstations[\"kfive\"] = set([\"ca\", \"az\"])\nfinal_stations = set()\nwhile states_needed:\n    best_station = None\n    states_covered = set()\n    for station, states_for_station in stations.items():\n        covered = states_needed & states_for_station",
        "detail": "mid-range.01_set_covering",
        "documentation": {}
    },
    {
        "label": "stations[\"kthree\"]",
        "kind": 5,
        "importPath": "mid-range.01_set_covering",
        "description": "mid-range.01_set_covering",
        "peekOfCode": "stations[\"kthree\"] = set([\"or\", \"nv\", \"ca\"])\nstations[\"kfour\"] = set([\"nv\", \"ut\"])\nstations[\"kfive\"] = set([\"ca\", \"az\"])\nfinal_stations = set()\nwhile states_needed:\n    best_station = None\n    states_covered = set()\n    for station, states_for_station in stations.items():\n        covered = states_needed & states_for_station\n        if len(covered) > len(states_covered):",
        "detail": "mid-range.01_set_covering",
        "documentation": {}
    },
    {
        "label": "stations[\"kfour\"]",
        "kind": 5,
        "importPath": "mid-range.01_set_covering",
        "description": "mid-range.01_set_covering",
        "peekOfCode": "stations[\"kfour\"] = set([\"nv\", \"ut\"])\nstations[\"kfive\"] = set([\"ca\", \"az\"])\nfinal_stations = set()\nwhile states_needed:\n    best_station = None\n    states_covered = set()\n    for station, states_for_station in stations.items():\n        covered = states_needed & states_for_station\n        if len(covered) > len(states_covered):\n            best_station = station",
        "detail": "mid-range.01_set_covering",
        "documentation": {}
    },
    {
        "label": "stations[\"kfive\"]",
        "kind": 5,
        "importPath": "mid-range.01_set_covering",
        "description": "mid-range.01_set_covering",
        "peekOfCode": "stations[\"kfive\"] = set([\"ca\", \"az\"])\nfinal_stations = set()\nwhile states_needed:\n    best_station = None\n    states_covered = set()\n    for station, states_for_station in stations.items():\n        covered = states_needed & states_for_station\n        if len(covered) > len(states_covered):\n            best_station = station\n            states_covered = covered",
        "detail": "mid-range.01_set_covering",
        "documentation": {}
    },
    {
        "label": "final_stations",
        "kind": 5,
        "importPath": "mid-range.01_set_covering",
        "description": "mid-range.01_set_covering",
        "peekOfCode": "final_stations = set()\nwhile states_needed:\n    best_station = None\n    states_covered = set()\n    for station, states_for_station in stations.items():\n        covered = states_needed & states_for_station\n        if len(covered) > len(states_covered):\n            best_station = station\n            states_covered = covered\n    states_needed -= states_covered",
        "detail": "mid-range.01_set_covering",
        "documentation": {}
    },
    {
        "label": "sum_to_n",
        "kind": 2,
        "importPath": "mid-range.01_summation",
        "description": "mid-range.01_summation",
        "peekOfCode": "def sum_to_n(n):\n    # Record start time\n    start = time.time()\n    # Execute code\n    total = 0\n    for num in range(n + 1):\n        total += num\n    # Record end time\n    end = time.time()\n    # Return total and time",
        "detail": "mid-range.01_summation",
        "documentation": {}
    },
    {
        "label": "arithmetic_sum",
        "kind": 2,
        "importPath": "mid-range.01_summation",
        "description": "mid-range.01_summation",
        "peekOfCode": "def arithmetic_sum(n):\n    start = time.time()\n    total = n * (n + 1) // 2\n    end = time.time()\n    # Return total and time\n    return total, end - start\noutput_template = \"{}({}) = {:10d} ({:8.7f} seconds)\"\n# for i in range(1, 5):\n#     print(output_template.format('sum_to_n', i * 1000000, *sum_to_n(i * 1000000)))\n# print('-'*80)",
        "detail": "mid-range.01_summation",
        "documentation": {}
    },
    {
        "label": "output_template",
        "kind": 5,
        "importPath": "mid-range.01_summation",
        "description": "mid-range.01_summation",
        "peekOfCode": "output_template = \"{}({}) = {:10d} ({:8.7f} seconds)\"\n# for i in range(1, 5):\n#     print(output_template.format('sum_to_n', i * 1000000, *sum_to_n(i * 1000000)))\n# print('-'*80)\nfor i in range(1, 5):\n    print(\n        output_template.format(\n            \"arithmetic_sum\", i * 1000000, *arithmetic_sum(i * 1000000)\n        )\n    )",
        "detail": "mid-range.01_summation",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "mid-range.01_thread_intro",
        "description": "mid-range.01_thread_intro",
        "peekOfCode": "def func():\n    for _ in range(100):\n        print(\"In the thread.\")\nthread = threading.Thread(target=func)\nthread.start()\nfor _ in range(100):\n    print(\"In the main program.\")",
        "detail": "mid-range.01_thread_intro",
        "documentation": {}
    },
    {
        "label": "thread",
        "kind": 5,
        "importPath": "mid-range.01_thread_intro",
        "description": "mid-range.01_thread_intro",
        "peekOfCode": "thread = threading.Thread(target=func)\nthread.start()\nfor _ in range(100):\n    print(\"In the main program.\")",
        "detail": "mid-range.01_thread_intro",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.02-arithmetic",
        "description": "mid-range.02-arithmetic",
        "peekOfCode": "x = 25  # integer\ny = 17.0  # float\n# print(x)\n# print(y)\n# print(x + y)\n# print(x - y)\n# print(x * y)\n# print(x / y)\n# print(x // y) # integer division\n# print(x % y) # modulo",
        "detail": "mid-range.02-arithmetic",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "mid-range.02-arithmetic",
        "description": "mid-range.02-arithmetic",
        "peekOfCode": "y = 17.0  # float\n# print(x)\n# print(y)\n# print(x + y)\n# print(x - y)\n# print(x * y)\n# print(x / y)\n# print(x // y) # integer division\n# print(x % y) # modulo\n# print(f'The result is {int(x // y)} remainder {int(x % y)}')",
        "detail": "mid-range.02-arithmetic",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "mid-range.02-lists-mutability-and-sorting",
        "description": "mid-range.02-lists-mutability-and-sorting",
        "peekOfCode": "colors = [\"red\", \"orange\", \"blue\", \"pink\"]\nalphabetical = sorted(colors)\nprint(colors)\nprint(alphabetical)\nalphabetical = sorted(colors, reverse=True)\nprint(alphabetical)\nreverseColors = reversed(colors)\nreverseAlpha = reversed(alphabetical)\nprint(reverseColors)\nprint(reverseAlpha)",
        "detail": "mid-range.02-lists-mutability-and-sorting",
        "documentation": {}
    },
    {
        "label": "alphabetical",
        "kind": 5,
        "importPath": "mid-range.02-lists-mutability-and-sorting",
        "description": "mid-range.02-lists-mutability-and-sorting",
        "peekOfCode": "alphabetical = sorted(colors)\nprint(colors)\nprint(alphabetical)\nalphabetical = sorted(colors, reverse=True)\nprint(alphabetical)\nreverseColors = reversed(colors)\nreverseAlpha = reversed(alphabetical)\nprint(reverseColors)\nprint(reverseAlpha)\nprint(list(reverseColors))",
        "detail": "mid-range.02-lists-mutability-and-sorting",
        "documentation": {}
    },
    {
        "label": "alphabetical",
        "kind": 5,
        "importPath": "mid-range.02-lists-mutability-and-sorting",
        "description": "mid-range.02-lists-mutability-and-sorting",
        "peekOfCode": "alphabetical = sorted(colors, reverse=True)\nprint(alphabetical)\nreverseColors = reversed(colors)\nreverseAlpha = reversed(alphabetical)\nprint(reverseColors)\nprint(reverseAlpha)\nprint(list(reverseColors))\nprint(list(reverseAlpha))",
        "detail": "mid-range.02-lists-mutability-and-sorting",
        "documentation": {}
    },
    {
        "label": "reverseColors",
        "kind": 5,
        "importPath": "mid-range.02-lists-mutability-and-sorting",
        "description": "mid-range.02-lists-mutability-and-sorting",
        "peekOfCode": "reverseColors = reversed(colors)\nreverseAlpha = reversed(alphabetical)\nprint(reverseColors)\nprint(reverseAlpha)\nprint(list(reverseColors))\nprint(list(reverseAlpha))",
        "detail": "mid-range.02-lists-mutability-and-sorting",
        "documentation": {}
    },
    {
        "label": "reverseAlpha",
        "kind": 5,
        "importPath": "mid-range.02-lists-mutability-and-sorting",
        "description": "mid-range.02-lists-mutability-and-sorting",
        "peekOfCode": "reverseAlpha = reversed(alphabetical)\nprint(reverseColors)\nprint(reverseAlpha)\nprint(list(reverseColors))\nprint(list(reverseAlpha))",
        "detail": "mid-range.02-lists-mutability-and-sorting",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "mid-range.02deadlock",
        "description": "mid-range.02deadlock",
        "peekOfCode": "def func1():\n    with lock1:\n        sleep(0.1)\n        with lock2:\n            print(\"func1\")\ndef func2():\n    with lock2:\n        sleep(0.1)\n        with lock1:\n            print(\"func2\")",
        "detail": "mid-range.02deadlock",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "mid-range.02deadlock",
        "description": "mid-range.02deadlock",
        "peekOfCode": "def func2():\n    with lock2:\n        sleep(0.1)\n        with lock1:\n            print(\"func2\")\nthread1 = threading.Thread(target=func1)\nthread2 = threading.Thread(target=func2)\nthread1.start()\nthread2.start()\n# Avoid this situation by using shared locks in the same order!!!",
        "detail": "mid-range.02deadlock",
        "documentation": {}
    },
    {
        "label": "lock1",
        "kind": 5,
        "importPath": "mid-range.02deadlock",
        "description": "mid-range.02deadlock",
        "peekOfCode": "lock1 = threading.Lock()\nlock2 = threading.Lock()\ndef func1():\n    with lock1:\n        sleep(0.1)\n        with lock2:\n            print(\"func1\")\ndef func2():\n    with lock2:\n        sleep(0.1)",
        "detail": "mid-range.02deadlock",
        "documentation": {}
    },
    {
        "label": "lock2",
        "kind": 5,
        "importPath": "mid-range.02deadlock",
        "description": "mid-range.02deadlock",
        "peekOfCode": "lock2 = threading.Lock()\ndef func1():\n    with lock1:\n        sleep(0.1)\n        with lock2:\n            print(\"func1\")\ndef func2():\n    with lock2:\n        sleep(0.1)\n        with lock1:",
        "detail": "mid-range.02deadlock",
        "documentation": {}
    },
    {
        "label": "thread1",
        "kind": 5,
        "importPath": "mid-range.02deadlock",
        "description": "mid-range.02deadlock",
        "peekOfCode": "thread1 = threading.Thread(target=func1)\nthread2 = threading.Thread(target=func2)\nthread1.start()\nthread2.start()\n# Avoid this situation by using shared locks in the same order!!!",
        "detail": "mid-range.02deadlock",
        "documentation": {}
    },
    {
        "label": "thread2",
        "kind": 5,
        "importPath": "mid-range.02deadlock",
        "description": "mid-range.02deadlock",
        "peekOfCode": "thread2 = threading.Thread(target=func2)\nthread1.start()\nthread2.start()\n# Avoid this situation by using shared locks in the same order!!!",
        "detail": "mid-range.02deadlock",
        "documentation": {}
    },
    {
        "label": "do_something",
        "kind": 2,
        "importPath": "mid-range.02_big_o",
        "description": "mid-range.02_big_o",
        "peekOfCode": "def do_something(n):\n    a = 5\n    b = 6\n    c = 10\n    for i in range(n):\n        for j in range(n):\n            x = i * i\n            y = j * j\n            z = i * j\n    for k in range(n):",
        "detail": "mid-range.02_big_o",
        "documentation": {}
    },
    {
        "label": "check_voter",
        "kind": 2,
        "importPath": "mid-range.02_check_voter",
        "description": "mid-range.02_check_voter",
        "peekOfCode": "def check_voter(name):\n    if voted.get(name):\n        print(\"kick them out!\")\n    else:\n        voted[name] = True\n        print(\"let them vote!\")\ncheck_voter(\"tom\")\ncheck_voter(\"mike\")\ncheck_voter(\"mike\")",
        "detail": "mid-range.02_check_voter",
        "documentation": {}
    },
    {
        "label": "voted",
        "kind": 5,
        "importPath": "mid-range.02_check_voter",
        "description": "mid-range.02_check_voter",
        "peekOfCode": "voted = {}\ndef check_voter(name):\n    if voted.get(name):\n        print(\"kick them out!\")\n    else:\n        voted[name] = True\n        print(\"let them vote!\")\ncheck_voter(\"tom\")\ncheck_voter(\"mike\")\ncheck_voter(\"mike\")",
        "detail": "mid-range.02_check_voter",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.02_datatypes",
        "description": "mid-range.02_datatypes",
        "peekOfCode": "x = 5\ny = \"7\"\n# Write a print statement that combines x + y into the integer value 12\nprint(x + int(y))\n# Write a print statement that combines x + y into the string value 57\nprint(str(x) + y)",
        "detail": "mid-range.02_datatypes",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "mid-range.02_datatypes",
        "description": "mid-range.02_datatypes",
        "peekOfCode": "y = \"7\"\n# Write a print statement that combines x + y into the integer value 12\nprint(x + int(y))\n# Write a print statement that combines x + y into the string value 57\nprint(str(x) + y)",
        "detail": "mid-range.02_datatypes",
        "documentation": {}
    },
    {
        "label": "Deque",
        "kind": 6,
        "importPath": "mid-range.02_deque_implementation",
        "description": "mid-range.02_deque_implementation",
        "peekOfCode": "class Deque(object):\n    def __init__(self):\n        self._items = []\n    def is_empty(self):\n        return self._items == []\n    def add_front(self, item):\n        self._items.append(item)\n    def add_rear(self, item):\n        self._items.insert(0, item)\n    def remove_front(self):",
        "detail": "mid-range.02_deque_implementation",
        "documentation": {}
    },
    {
        "label": "deque",
        "kind": 5,
        "importPath": "mid-range.02_deque_implementation",
        "description": "mid-range.02_deque_implementation",
        "peekOfCode": "deque = Deque()\ndeque.add_front(\"John\")\ndeque.add_front(\"Mike\")\ndeque.add_front(\"Slim\")\ndeque.add_rear(\"Joe\")\ndeque.add_rear(\"Harry\")\ndeque.add_rear(\"Harrison\")\nprint(deque.size)\nprint(deque.remove_front())\nprint(deque.remove_front())",
        "detail": "mid-range.02_deque_implementation",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "mid-range.02_find_all_links",
        "description": "mid-range.02_find_all_links",
        "peekOfCode": "url = input(\"Enter a URL (include `http://`): \")\n# connect to the url\nwebsite = requests.get(url)\n# read html\nhtml = website.text\n# use re.findall to grab all the links\nlinks = re.findall('\"((http|ftp)s?://.*?)\"', html)\n# output links\nfor link in links:\n    print(link[0])",
        "detail": "mid-range.02_find_all_links",
        "documentation": {}
    },
    {
        "label": "website",
        "kind": 5,
        "importPath": "mid-range.02_find_all_links",
        "description": "mid-range.02_find_all_links",
        "peekOfCode": "website = requests.get(url)\n# read html\nhtml = website.text\n# use re.findall to grab all the links\nlinks = re.findall('\"((http|ftp)s?://.*?)\"', html)\n# output links\nfor link in links:\n    print(link[0])",
        "detail": "mid-range.02_find_all_links",
        "documentation": {}
    },
    {
        "label": "html",
        "kind": 5,
        "importPath": "mid-range.02_find_all_links",
        "description": "mid-range.02_find_all_links",
        "peekOfCode": "html = website.text\n# use re.findall to grab all the links\nlinks = re.findall('\"((http|ftp)s?://.*?)\"', html)\n# output links\nfor link in links:\n    print(link[0])",
        "detail": "mid-range.02_find_all_links",
        "documentation": {}
    },
    {
        "label": "links",
        "kind": 5,
        "importPath": "mid-range.02_find_all_links",
        "description": "mid-range.02_find_all_links",
        "peekOfCode": "links = re.findall('\"((http|ftp)s?://.*?)\"', html)\n# output links\nfor link in links:\n    print(link[0])",
        "detail": "mid-range.02_find_all_links",
        "documentation": {}
    },
    {
        "label": "greet2",
        "kind": 2,
        "importPath": "mid-range.02_greet",
        "description": "mid-range.02_greet",
        "peekOfCode": "def greet2(name):\n    print(\"how are you, \", name, \"?\")\ndef bye():\n    print(\"ok bye!\")\ndef greet(name):\n    print(\"hello, \", name, \"!\")\n    greet2(name)\n    print(\"getting ready to say bye...\")\n    bye()\ngreet(\"adit\")",
        "detail": "mid-range.02_greet",
        "documentation": {}
    },
    {
        "label": "bye",
        "kind": 2,
        "importPath": "mid-range.02_greet",
        "description": "mid-range.02_greet",
        "peekOfCode": "def bye():\n    print(\"ok bye!\")\ndef greet(name):\n    print(\"hello, \", name, \"!\")\n    greet2(name)\n    print(\"getting ready to say bye...\")\n    bye()\ngreet(\"adit\")",
        "detail": "mid-range.02_greet",
        "documentation": {}
    },
    {
        "label": "greet",
        "kind": 2,
        "importPath": "mid-range.02_greet",
        "description": "mid-range.02_greet",
        "peekOfCode": "def greet(name):\n    print(\"hello, \", name, \"!\")\n    greet2(name)\n    print(\"getting ready to say bye...\")\n    bye()\ngreet(\"adit\")",
        "detail": "mid-range.02_greet",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "mid-range.02_guessing_game",
        "description": "mid-range.02_guessing_game",
        "peekOfCode": "number = 45\nplaying = True\n# REPL\nwhile playing:  # LOOP\n    user_guess = int(input(\" Guess the number I am thinking of >>> \"))  # READ\n    # EVAL\n    if number == user_guess:\n        print(\"You Win!\")  # PRINT\n        playing = False\n    else:",
        "detail": "mid-range.02_guessing_game",
        "documentation": {}
    },
    {
        "label": "playing",
        "kind": 5,
        "importPath": "mid-range.02_guessing_game",
        "description": "mid-range.02_guessing_game",
        "peekOfCode": "playing = True\n# REPL\nwhile playing:  # LOOP\n    user_guess = int(input(\" Guess the number I am thinking of >>> \"))  # READ\n    # EVAL\n    if number == user_guess:\n        print(\"You Win!\")  # PRINT\n        playing = False\n    else:\n        print(\"Not correct, guess again!\")",
        "detail": "mid-range.02_guessing_game",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "mid-range.02_queue_implementation",
        "description": "mid-range.02_queue_implementation",
        "peekOfCode": "class Queue(object):\n    def __init__(self):\n        self._items = []\n    def is_empty(self):\n        return self._items == []\n    def enqueue(self, item):\n        self._items.insert(0, item)\n    def dequeue(self):\n        return self._items.pop()\n    def size(self):",
        "detail": "mid-range.02_queue_implementation",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "mid-range.02_repl_guessing_game",
        "description": "mid-range.02_repl_guessing_game",
        "peekOfCode": "value = random.randint(1, 100)\nguess = None\nwhile value != guess:\n    guess = input(\"Guess a number between 1 and 100! \")\n    guess = int(guess)\n    if value == guess:\n        print(\"Great guess. You Win!\")\n    else:\n        print(\"Not correct. Guess again!\")",
        "detail": "mid-range.02_repl_guessing_game",
        "documentation": {}
    },
    {
        "label": "guess",
        "kind": 5,
        "importPath": "mid-range.02_repl_guessing_game",
        "description": "mid-range.02_repl_guessing_game",
        "peekOfCode": "guess = None\nwhile value != guess:\n    guess = input(\"Guess a number between 1 and 100! \")\n    guess = int(guess)\n    if value == guess:\n        print(\"Great guess. You Win!\")\n    else:\n        print(\"Not correct. Guess again!\")",
        "detail": "mid-range.02_repl_guessing_game",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "mid-range.02_thread_with_sleep",
        "description": "mid-range.02_thread_with_sleep",
        "peekOfCode": "def func(s):\n    print(f\"Hello, {s}!\")\n    sleep_time = randint(0, 3)\n    print(f\"Sleeping for {sleep_time} seconds\")\n    sleep(sleep_time)\n    print(f\"Good-bye, {s}!\")\nthread1 = threading.Thread(target=func, args=(\"Judy\",))\nthread2 = threading.Thread(target=func, args=(\"Petra\",))\nthread1.start()\nthread2.start()",
        "detail": "mid-range.02_thread_with_sleep",
        "documentation": {}
    },
    {
        "label": "thread1",
        "kind": 5,
        "importPath": "mid-range.02_thread_with_sleep",
        "description": "mid-range.02_thread_with_sleep",
        "peekOfCode": "thread1 = threading.Thread(target=func, args=(\"Judy\",))\nthread2 = threading.Thread(target=func, args=(\"Petra\",))\nthread1.start()\nthread2.start()\nprint(\"Threads all started.\")",
        "detail": "mid-range.02_thread_with_sleep",
        "documentation": {}
    },
    {
        "label": "thread2",
        "kind": 5,
        "importPath": "mid-range.02_thread_with_sleep",
        "description": "mid-range.02_thread_with_sleep",
        "peekOfCode": "thread2 = threading.Thread(target=func, args=(\"Petra\",))\nthread1.start()\nthread2.start()\nprint(\"Threads all started.\")",
        "detail": "mid-range.02_thread_with_sleep",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "mid-range.03-input-and-format",
        "description": "mid-range.03-input-and-format",
        "peekOfCode": "name = input(\"What is your name?\\n\")\nprint(\"Hi, \" + name + \".\")\nprint(\"Hi, %s.\" % name)\nprint(\"Hi, {fname} {lname}.\".format(lname=\"Doe\", fname=\"John\"))\nprint(f\"Hi, {name}.\")",
        "detail": "mid-range.03-input-and-format",
        "documentation": {}
    },
    {
        "label": "scores",
        "kind": 5,
        "importPath": "mid-range.03-lists-math",
        "description": "mid-range.03-lists-math",
        "peekOfCode": "scores = [159, 210, 188, 76]\nprint(scores)\nteamScore = sum(scores)\nprint(teamScore)\nhighestScore = max(scores)\nprint(highestScore)\nlowestScore = min(scores)\nprint(lowestScore)\naverageScores = sum(scores) / len(scores)\nprint(averageScores)",
        "detail": "mid-range.03-lists-math",
        "documentation": {}
    },
    {
        "label": "teamScore",
        "kind": 5,
        "importPath": "mid-range.03-lists-math",
        "description": "mid-range.03-lists-math",
        "peekOfCode": "teamScore = sum(scores)\nprint(teamScore)\nhighestScore = max(scores)\nprint(highestScore)\nlowestScore = min(scores)\nprint(lowestScore)\naverageScores = sum(scores) / len(scores)\nprint(averageScores)\nrankedScores = sorted(scores, reverse=True)\nprint(rankedScores)",
        "detail": "mid-range.03-lists-math",
        "documentation": {}
    },
    {
        "label": "highestScore",
        "kind": 5,
        "importPath": "mid-range.03-lists-math",
        "description": "mid-range.03-lists-math",
        "peekOfCode": "highestScore = max(scores)\nprint(highestScore)\nlowestScore = min(scores)\nprint(lowestScore)\naverageScores = sum(scores) / len(scores)\nprint(averageScores)\nrankedScores = sorted(scores, reverse=True)\nprint(rankedScores)",
        "detail": "mid-range.03-lists-math",
        "documentation": {}
    },
    {
        "label": "lowestScore",
        "kind": 5,
        "importPath": "mid-range.03-lists-math",
        "description": "mid-range.03-lists-math",
        "peekOfCode": "lowestScore = min(scores)\nprint(lowestScore)\naverageScores = sum(scores) / len(scores)\nprint(averageScores)\nrankedScores = sorted(scores, reverse=True)\nprint(rankedScores)",
        "detail": "mid-range.03-lists-math",
        "documentation": {}
    },
    {
        "label": "averageScores",
        "kind": 5,
        "importPath": "mid-range.03-lists-math",
        "description": "mid-range.03-lists-math",
        "peekOfCode": "averageScores = sum(scores) / len(scores)\nprint(averageScores)\nrankedScores = sorted(scores, reverse=True)\nprint(rankedScores)",
        "detail": "mid-range.03-lists-math",
        "documentation": {}
    },
    {
        "label": "rankedScores",
        "kind": 5,
        "importPath": "mid-range.03-lists-math",
        "description": "mid-range.03-lists-math",
        "peekOfCode": "rankedScores = sorted(scores, reverse=True)\nprint(rankedScores)",
        "detail": "mid-range.03-lists-math",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.03",
        "description": "mid-range.03",
        "peekOfCode": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        mapSet = {}\n        start, result = 0, 0\n        for end in range(len(s)):\n            if s[end] in mapSet:",
        "detail": "mid-range.03",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "mid-range.03_daemon_threads",
        "description": "mid-range.03_daemon_threads",
        "peekOfCode": "def func(s):\n    print(f\"Hello, {s}!\")\n    sleep_time = randint(0, 3)\n    print(f\"Sleeping for {sleep_time} seconds\")\n    sleep(sleep_time)\n    print(f\"Good-bye, {s}!\")\nthread1 = threading.Thread(target=func, args=(\"Judy\",), daemon=True)\nthread2 = threading.Thread(target=func, args=(\"Petra\",), daemon=True)\nthread1.start()\nthread2.start()",
        "detail": "mid-range.03_daemon_threads",
        "documentation": {}
    },
    {
        "label": "thread1",
        "kind": 5,
        "importPath": "mid-range.03_daemon_threads",
        "description": "mid-range.03_daemon_threads",
        "peekOfCode": "thread1 = threading.Thread(target=func, args=(\"Judy\",), daemon=True)\nthread2 = threading.Thread(target=func, args=(\"Petra\",), daemon=True)\nthread1.start()\nthread2.start()\nprint(\"Threads all started.\")\nsleep(1)\nprint(\"Done with this.\")",
        "detail": "mid-range.03_daemon_threads",
        "documentation": {}
    },
    {
        "label": "thread2",
        "kind": 5,
        "importPath": "mid-range.03_daemon_threads",
        "description": "mid-range.03_daemon_threads",
        "peekOfCode": "thread2 = threading.Thread(target=func, args=(\"Petra\",), daemon=True)\nthread1.start()\nthread2.start()\nprint(\"Threads all started.\")\nsleep(1)\nprint(\"Done with this.\")",
        "detail": "mid-range.03_daemon_threads",
        "documentation": {}
    },
    {
        "label": "is_palindrome",
        "kind": 2,
        "importPath": "mid-range.03_palindrome",
        "description": "mid-range.03_palindrome",
        "peekOfCode": "def is_palindrome(characters):\n    char_queue = deque(characters)\n    while len(char_queue) > 1:\n        first = char_queue.popleft()\n        last = char_queue.pop()\n        if first != last:\n            return False\n    return True\nprint(is_palindrome(\"lsdkjfskf\"))  # => False\nprint(is_palindrome(\"radar\"))  # => True",
        "detail": "mid-range.03_palindrome",
        "documentation": {}
    },
    {
        "label": "TWITTER_CONSUMER_KEY",
        "kind": 5,
        "importPath": "mid-range.03_simple_twitter_manager",
        "description": "mid-range.03_simple_twitter_manager",
        "peekOfCode": "TWITTER_CONSUMER_KEY = \"XXX\"\nTWITTER_CONSUMER_SECRET = \"XXX\"\nTWITTER_ACCESS_TOKEN_KEY = \"XXX\"\nTWITTER_ACCESS_TOKEN_SECRET = \"XXX\"\ntwitter_api = twitter.Api(\n    consumer_key=TWITTER_CONSUMER_KEY,\n    consumer_secret=TWITTER_CONSUMER_SECRET,\n    access_token_key=TWITTER_ACCESS_TOKEN_KEY,\n    access_token_secret=TWITTER_ACCESS_TOKEN_SECRET,\n)",
        "detail": "mid-range.03_simple_twitter_manager",
        "documentation": {}
    },
    {
        "label": "TWITTER_CONSUMER_SECRET",
        "kind": 5,
        "importPath": "mid-range.03_simple_twitter_manager",
        "description": "mid-range.03_simple_twitter_manager",
        "peekOfCode": "TWITTER_CONSUMER_SECRET = \"XXX\"\nTWITTER_ACCESS_TOKEN_KEY = \"XXX\"\nTWITTER_ACCESS_TOKEN_SECRET = \"XXX\"\ntwitter_api = twitter.Api(\n    consumer_key=TWITTER_CONSUMER_KEY,\n    consumer_secret=TWITTER_CONSUMER_SECRET,\n    access_token_key=TWITTER_ACCESS_TOKEN_KEY,\n    access_token_secret=TWITTER_ACCESS_TOKEN_SECRET,\n)\nif __name__ == \"__main__\":",
        "detail": "mid-range.03_simple_twitter_manager",
        "documentation": {}
    },
    {
        "label": "TWITTER_ACCESS_TOKEN_KEY",
        "kind": 5,
        "importPath": "mid-range.03_simple_twitter_manager",
        "description": "mid-range.03_simple_twitter_manager",
        "peekOfCode": "TWITTER_ACCESS_TOKEN_KEY = \"XXX\"\nTWITTER_ACCESS_TOKEN_SECRET = \"XXX\"\ntwitter_api = twitter.Api(\n    consumer_key=TWITTER_CONSUMER_KEY,\n    consumer_secret=TWITTER_CONSUMER_SECRET,\n    access_token_key=TWITTER_ACCESS_TOKEN_KEY,\n    access_token_secret=TWITTER_ACCESS_TOKEN_SECRET,\n)\nif __name__ == \"__main__\":\n    follower_ids = twitter_api.GetFollowerIDs()",
        "detail": "mid-range.03_simple_twitter_manager",
        "documentation": {}
    },
    {
        "label": "TWITTER_ACCESS_TOKEN_SECRET",
        "kind": 5,
        "importPath": "mid-range.03_simple_twitter_manager",
        "description": "mid-range.03_simple_twitter_manager",
        "peekOfCode": "TWITTER_ACCESS_TOKEN_SECRET = \"XXX\"\ntwitter_api = twitter.Api(\n    consumer_key=TWITTER_CONSUMER_KEY,\n    consumer_secret=TWITTER_CONSUMER_SECRET,\n    access_token_key=TWITTER_ACCESS_TOKEN_KEY,\n    access_token_secret=TWITTER_ACCESS_TOKEN_SECRET,\n)\nif __name__ == \"__main__\":\n    follower_ids = twitter_api.GetFollowerIDs()\n    following_ids = twitter_api.GetFriendIDs()",
        "detail": "mid-range.03_simple_twitter_manager",
        "documentation": {}
    },
    {
        "label": "twitter_api",
        "kind": 5,
        "importPath": "mid-range.03_simple_twitter_manager",
        "description": "mid-range.03_simple_twitter_manager",
        "peekOfCode": "twitter_api = twitter.Api(\n    consumer_key=TWITTER_CONSUMER_KEY,\n    consumer_secret=TWITTER_CONSUMER_SECRET,\n    access_token_key=TWITTER_ACCESS_TOKEN_KEY,\n    access_token_secret=TWITTER_ACCESS_TOKEN_SECRET,\n)\nif __name__ == \"__main__\":\n    follower_ids = twitter_api.GetFollowerIDs()\n    following_ids = twitter_api.GetFriendIDs()\n    zombie_follows = [",
        "detail": "mid-range.03_simple_twitter_manager",
        "documentation": {}
    },
    {
        "label": "adjacentElementsProduct",
        "kind": 2,
        "importPath": "mid-range.04 - adjacentElementsProduct",
        "description": "mid-range.04 - adjacentElementsProduct",
        "peekOfCode": "def adjacentElementsProduct(inputArray):\n    max = inputArray[0] * inputArray[1]\n    for i in range(len(inputArray) - 1):\n        if inputArray[i] * inputArray[i + 1] > max:\n            max = inputArray[i] * inputArray[i + 1]\n    return max",
        "detail": "mid-range.04 - adjacentElementsProduct",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.04-ducktyping",
        "description": "mid-range.04-ducktyping",
        "peekOfCode": "a = False\ntry:\n    print(len(a))\nexcept:\n    print(f\"{a} has no length\")",
        "detail": "mid-range.04-ducktyping",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.04b-complex-try-blocks",
        "description": "mid-range.04b-complex-try-blocks",
        "peekOfCode": "a = \"False\"\nb = 6\nc = 2\ntry:\n    print(len(a))\n    print(b / c)\n    print(a[47])\nexcept TypeError:\n    print(f\"{a} has no length\")\nexcept ZeroDivisionError as err:",
        "detail": "mid-range.04b-complex-try-blocks",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.04b-complex-try-blocks",
        "description": "mid-range.04b-complex-try-blocks",
        "peekOfCode": "b = 6\nc = 2\ntry:\n    print(len(a))\n    print(b / c)\n    print(a[47])\nexcept TypeError:\n    print(f\"{a} has no length\")\nexcept ZeroDivisionError as err:\n    print(f\"Cannot divide by zero! Error: {err}\")",
        "detail": "mid-range.04b-complex-try-blocks",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.04b-complex-try-blocks",
        "description": "mid-range.04b-complex-try-blocks",
        "peekOfCode": "c = 2\ntry:\n    print(len(a))\n    print(b / c)\n    print(a[47])\nexcept TypeError:\n    print(f\"{a} has no length\")\nexcept ZeroDivisionError as err:\n    print(f\"Cannot divide by zero! Error: {err}\")\nexcept:",
        "detail": "mid-range.04b-complex-try-blocks",
        "documentation": {}
    },
    {
        "label": "adjacentElementsProduct",
        "kind": 2,
        "importPath": "mid-range.04_-_adjacentElementsProduct",
        "description": "mid-range.04_-_adjacentElementsProduct",
        "peekOfCode": "def adjacentElementsProduct(inputArray):\n    max = inputArray[0] * inputArray[1]\n    for i in range(len(inputArray) - 1):\n        if inputArray[i] * inputArray[i + 1] > max:\n            max = inputArray[i] * inputArray[i + 1]\n    return max",
        "detail": "mid-range.04_-_adjacentElementsProduct",
        "documentation": {}
    },
    {
        "label": "balancedBinaryTree",
        "kind": 2,
        "importPath": "mid-range.04_balancedBinaryTree",
        "description": "mid-range.04_balancedBinaryTree",
        "peekOfCode": "def balancedBinaryTree(root):",
        "detail": "mid-range.04_balancedBinaryTree",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "mid-range.04_joining_daemon_threads",
        "description": "mid-range.04_joining_daemon_threads",
        "peekOfCode": "def func(s):\n    print(f\"Hello, {s}!\")\n    sleep_time = randint(0, 3)\n    print(f\"Sleeping for {sleep_time} seconds\")\n    sleep(sleep_time)\n    print(f\"Good-bye, {s}!\")\nthread1 = threading.Thread(target=func, args=(\"Judy\",), daemon=True)\nthread2 = threading.Thread(target=func, args=(\"Petra\",), daemon=True)\nthread1.start()\nthread2.start()",
        "detail": "mid-range.04_joining_daemon_threads",
        "documentation": {}
    },
    {
        "label": "thread1",
        "kind": 5,
        "importPath": "mid-range.04_joining_daemon_threads",
        "description": "mid-range.04_joining_daemon_threads",
        "peekOfCode": "thread1 = threading.Thread(target=func, args=(\"Judy\",), daemon=True)\nthread2 = threading.Thread(target=func, args=(\"Petra\",), daemon=True)\nthread1.start()\nthread2.start()\nprint(\"Threads all started.\")\nthread1.join()\nthread2.join()\nprint(\"Done with this.\")",
        "detail": "mid-range.04_joining_daemon_threads",
        "documentation": {}
    },
    {
        "label": "thread2",
        "kind": 5,
        "importPath": "mid-range.04_joining_daemon_threads",
        "description": "mid-range.04_joining_daemon_threads",
        "peekOfCode": "thread2 = threading.Thread(target=func, args=(\"Petra\",), daemon=True)\nthread1.start()\nthread2.start()\nprint(\"Threads all started.\")\nthread1.join()\nthread2.join()\nprint(\"Done with this.\")",
        "detail": "mid-range.04_joining_daemon_threads",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.04_printing",
        "description": "mid-range.04_printing",
        "peekOfCode": "x = 10\ny = 2.24552\nz = \"I like turtles!\"\n# Using the printf operator (%), print the following feeding in the values of x,\n# y, and z:\n# x is 10, y is 2.25, z is \"I like turtles!\"\nprint('x is %d, y is %.2f, z is \"%s\"' % (x, y, z))\n# Use the 'format' string method to print the same thing\nprint('x is {}, y is {:.2f}, z is \"{}\"'.format(x, y, z))\n# Finally, print the same thing using an f-string",
        "detail": "mid-range.04_printing",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "mid-range.04_printing",
        "description": "mid-range.04_printing",
        "peekOfCode": "y = 2.24552\nz = \"I like turtles!\"\n# Using the printf operator (%), print the following feeding in the values of x,\n# y, and z:\n# x is 10, y is 2.25, z is \"I like turtles!\"\nprint('x is %d, y is %.2f, z is \"%s\"' % (x, y, z))\n# Use the 'format' string method to print the same thing\nprint('x is {}, y is {:.2f}, z is \"{}\"'.format(x, y, z))\n# Finally, print the same thing using an f-string\nprint(f\"x is {x}, y is {y:.2f}, z is {z}\")",
        "detail": "mid-range.04_printing",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "mid-range.04_printing",
        "description": "mid-range.04_printing",
        "peekOfCode": "z = \"I like turtles!\"\n# Using the printf operator (%), print the following feeding in the values of x,\n# y, and z:\n# x is 10, y is 2.25, z is \"I like turtles!\"\nprint('x is %d, y is %.2f, z is \"%s\"' % (x, y, z))\n# Use the 'format' string method to print the same thing\nprint('x is {}, y is {:.2f}, z is \"{}\"'.format(x, y, z))\n# Finally, print the same thing using an f-string\nprint(f\"x is {x}, y is {y:.2f}, z is {z}\")",
        "detail": "mid-range.04_printing",
        "documentation": {}
    },
    {
        "label": "max_",
        "kind": 2,
        "importPath": "mid-range.04_recursive_max",
        "description": "mid-range.04_recursive_max",
        "peekOfCode": "def max_(lst):\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        sub_max = max_(lst[1:])\n        return lst[0] if lst[0] > sub_max else sub_max",
        "detail": "mid-range.04_recursive_max",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.05-string-arithmetic",
        "description": "mid-range.05-string-arithmetic",
        "peekOfCode": "a = \"a\"\nb = \"b\"\nan = \"an\"\nprint(b + an)\nprint(b + a * 7)\nprint(b + an * 2 + a)\nprint(\"$1\" + \",000\" * 3)",
        "detail": "mid-range.05-string-arithmetic",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.05-string-arithmetic",
        "description": "mid-range.05-string-arithmetic",
        "peekOfCode": "b = \"b\"\nan = \"an\"\nprint(b + an)\nprint(b + a * 7)\nprint(b + an * 2 + a)\nprint(\"$1\" + \",000\" * 3)",
        "detail": "mid-range.05-string-arithmetic",
        "documentation": {}
    },
    {
        "label": "an",
        "kind": 5,
        "importPath": "mid-range.05-string-arithmetic",
        "description": "mid-range.05-string-arithmetic",
        "peekOfCode": "an = \"an\"\nprint(b + an)\nprint(b + a * 7)\nprint(b + an * 2 + a)\nprint(\"$1\" + \",000\" * 3)",
        "detail": "mid-range.05-string-arithmetic",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.05-tuples-single-item",
        "description": "mid-range.05-tuples-single-item",
        "peekOfCode": "a = 1, 2, 3\nb = (\"a\", \"b\", \"c\")\nempty = ()\nprint(empty)\nsingle = (1,)\nprint(single)\nsingle = (\"a\",)\nprint(single)",
        "detail": "mid-range.05-tuples-single-item",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.05-tuples-single-item",
        "description": "mid-range.05-tuples-single-item",
        "peekOfCode": "b = (\"a\", \"b\", \"c\")\nempty = ()\nprint(empty)\nsingle = (1,)\nprint(single)\nsingle = (\"a\",)\nprint(single)",
        "detail": "mid-range.05-tuples-single-item",
        "documentation": {}
    },
    {
        "label": "empty",
        "kind": 5,
        "importPath": "mid-range.05-tuples-single-item",
        "description": "mid-range.05-tuples-single-item",
        "peekOfCode": "empty = ()\nprint(empty)\nsingle = (1,)\nprint(single)\nsingle = (\"a\",)\nprint(single)",
        "detail": "mid-range.05-tuples-single-item",
        "documentation": {}
    },
    {
        "label": "single",
        "kind": 5,
        "importPath": "mid-range.05-tuples-single-item",
        "description": "mid-range.05-tuples-single-item",
        "peekOfCode": "single = (1,)\nprint(single)\nsingle = (\"a\",)\nprint(single)",
        "detail": "mid-range.05-tuples-single-item",
        "documentation": {}
    },
    {
        "label": "single",
        "kind": 5,
        "importPath": "mid-range.05-tuples-single-item",
        "description": "mid-range.05-tuples-single-item",
        "peekOfCode": "single = (\"a\",)\nprint(single)",
        "detail": "mid-range.05-tuples-single-item",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "mid-range.05_binary_search_recursive",
        "description": "mid-range.05_binary_search_recursive",
        "peekOfCode": "def binary_search(arr, target):\n    if not arr:\n        return -1\n    if len(arr) == 1 and arr[0] == target:\n        return arr[0]\n    if len(arr) == 1 and arr[0] != target:\n        return -1\n    low = 0\n    high = len(arr) - 1\n    mid = (low + high) // 2",
        "detail": "mid-range.05_binary_search_recursive",
        "documentation": {}
    },
    {
        "label": "ValueHolder",
        "kind": 6,
        "importPath": "mid-range.05_importance_of_locks",
        "description": "mid-range.05_importance_of_locks",
        "peekOfCode": "class ValueHolder:\n    def __init__(self):\n        self._value = 0\n    def increment(self):\n        v = self._value\n        v = v + 1\n        sleep(0.1)\n        self._value = v\n    @property\n    def value(self):",
        "detail": "mid-range.05_importance_of_locks",
        "documentation": {}
    },
    {
        "label": "vh",
        "kind": 5,
        "importPath": "mid-range.05_importance_of_locks",
        "description": "mid-range.05_importance_of_locks",
        "peekOfCode": "vh = ValueHolder()\nthread1 = threading.Thread(target=vh.increment, daemon=True)\nthread2 = threading.Thread(target=vh.increment, daemon=True)\nthread1.start()\nthread2.start()\nprint(\"Threads all started.\")\nthread1.join()\nthread2.join()\nprint(vh.value)\nprint(\"Done with this.\")",
        "detail": "mid-range.05_importance_of_locks",
        "documentation": {}
    },
    {
        "label": "thread1",
        "kind": 5,
        "importPath": "mid-range.05_importance_of_locks",
        "description": "mid-range.05_importance_of_locks",
        "peekOfCode": "thread1 = threading.Thread(target=vh.increment, daemon=True)\nthread2 = threading.Thread(target=vh.increment, daemon=True)\nthread1.start()\nthread2.start()\nprint(\"Threads all started.\")\nthread1.join()\nthread2.join()\nprint(vh.value)\nprint(\"Done with this.\")",
        "detail": "mid-range.05_importance_of_locks",
        "documentation": {}
    },
    {
        "label": "thread2",
        "kind": 5,
        "importPath": "mid-range.05_importance_of_locks",
        "description": "mid-range.05_importance_of_locks",
        "peekOfCode": "thread2 = threading.Thread(target=vh.increment, daemon=True)\nthread1.start()\nthread2.start()\nprint(\"Threads all started.\")\nthread1.join()\nthread2.join()\nprint(vh.value)\nprint(\"Done with this.\")",
        "detail": "mid-range.05_importance_of_locks",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.05_lists",
        "description": "mid-range.05_lists",
        "peekOfCode": "x = [1, 2, 3]\ny = [8, 9, 10]\n# For the following, DO NOT USE AN ASSIGNMENT (=).\n# Change x so that it is [1, 2, 3, 4]\nx.append(4)\nprint(x)\n# Using y, change x so that it is [1, 2, 3, 4, 8, 9, 10]\nx.extend(y)\nprint(x)\n# Change x so that it is [1, 2, 3, 4, 9, 10]",
        "detail": "mid-range.05_lists",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "mid-range.05_lists",
        "description": "mid-range.05_lists",
        "peekOfCode": "y = [8, 9, 10]\n# For the following, DO NOT USE AN ASSIGNMENT (=).\n# Change x so that it is [1, 2, 3, 4]\nx.append(4)\nprint(x)\n# Using y, change x so that it is [1, 2, 3, 4, 8, 9, 10]\nx.extend(y)\nprint(x)\n# Change x so that it is [1, 2, 3, 4, 9, 10]\nx.remove(8)",
        "detail": "mid-range.05_lists",
        "documentation": {}
    },
    {
        "label": "dict_raise_on_duplicates",
        "kind": 2,
        "importPath": "mid-range.05_load_json_without_dupes",
        "description": "mid-range.05_load_json_without_dupes",
        "peekOfCode": "def dict_raise_on_duplicates(ordered_pairs):\n    \"\"\"reject duplicate keys\"\"\"\n    my_dict = dict()\n    for key, values in ordered_pairs:\n        if key in my_dict:\n            raise ValueError(\"Duplicate key: {}\".format(key))\n        else:\n            my_dict[key] = values\n    return my_dict",
        "detail": "mid-range.05_load_json_without_dupes",
        "documentation": {}
    },
    {
        "label": "minimumDepthBinaryTree",
        "kind": 2,
        "importPath": "mid-range.05_minimumDepthBinaryTree",
        "description": "mid-range.05_minimumDepthBinaryTree",
        "peekOfCode": "def minimumDepthBinaryTree(root):\n    if root is None:\n        return 0\n    else:\n        return 1 + min(\n            minimumDepthBinaryTree(root.left), minimumDepthBinaryTree(root.right)\n        )",
        "detail": "mid-range.05_minimumDepthBinaryTree",
        "documentation": {}
    },
    {
        "label": "quicksort",
        "kind": 2,
        "importPath": "mid-range.05_quicksort",
        "description": "mid-range.05_quicksort",
        "peekOfCode": "def quicksort(array):\n    if len(array) < 2:\n        # base case, arrays with 0 or 1 element are already \"sorted\"\n        return array\n    else:\n        # recursive case\n        pivot = array[0]\n        # sub-array of all the elements less than the pivot\n        less = [i for i in array[1:] if i <= pivot]\n        # sub-array of all the elements greater than the pivot",
        "detail": "mid-range.05_quicksort",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "mid-range.06-assignment",
        "description": "mid-range.06-assignment",
        "peekOfCode": "i = 1\n# i++ does not exist in Python, we have to use i += 1\ni += 1\nprint(i)  # > 2\ni += 4\nprint(i)  # > 6\ni **= 2\nprint(i)  # > 36\ni //= 10\nprint(i)  # > 3",
        "detail": "mid-range.06-assignment",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "mid-range.06-assignment",
        "description": "mid-range.06-assignment",
        "peekOfCode": "i = 3\ni **= 10 ** 200\nprint(i)  # runaway process! control+c triggers a KeyboardInterrupt to stop it",
        "detail": "mid-range.06-assignment",
        "documentation": {}
    },
    {
        "label": "lexi_smallest",
        "kind": 2,
        "importPath": "mid-range.06-LexicographicallySmallestString",
        "description": "mid-range.06-LexicographicallySmallestString",
        "peekOfCode": "def lexi_smallest(s):\n    length = len(s)\n    length_one_short = length - 1\n    for x in range(length_one_short):\n        i_one_short = x - 1\n        x_one_long = x + 1\n        if s[x] > s[x_one_long]:\n            return s[:x] + s[x_one_long:]\n    return s[:-1]\n# abcd",
        "detail": "mid-range.06-LexicographicallySmallestString",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "mid-range.06-ranges",
        "description": "mid-range.06-ranges",
        "peekOfCode": "nums = range(10)\nprint(nums)\nprint(list(nums))\ncounters = range(1, 11)\nprint(list(counters))\nfives = range(0, 51, 5)\nprint(list(fives))\ntest = range(51, 5)\nprint(list(test))\nitems = [\"a\", \"b\", \"c\"]",
        "detail": "mid-range.06-ranges",
        "documentation": {}
    },
    {
        "label": "counters",
        "kind": 5,
        "importPath": "mid-range.06-ranges",
        "description": "mid-range.06-ranges",
        "peekOfCode": "counters = range(1, 11)\nprint(list(counters))\nfives = range(0, 51, 5)\nprint(list(fives))\ntest = range(51, 5)\nprint(list(test))\nitems = [\"a\", \"b\", \"c\"]\nfor i in range(len(items)):\n    print(i, items[i])\nfor i in range(1, 10, 2):",
        "detail": "mid-range.06-ranges",
        "documentation": {}
    },
    {
        "label": "fives",
        "kind": 5,
        "importPath": "mid-range.06-ranges",
        "description": "mid-range.06-ranges",
        "peekOfCode": "fives = range(0, 51, 5)\nprint(list(fives))\ntest = range(51, 5)\nprint(list(test))\nitems = [\"a\", \"b\", \"c\"]\nfor i in range(len(items)):\n    print(i, items[i])\nfor i in range(1, 10, 2):\n    print(i)",
        "detail": "mid-range.06-ranges",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "mid-range.06-ranges",
        "description": "mid-range.06-ranges",
        "peekOfCode": "test = range(51, 5)\nprint(list(test))\nitems = [\"a\", \"b\", \"c\"]\nfor i in range(len(items)):\n    print(i, items[i])\nfor i in range(1, 10, 2):\n    print(i)",
        "detail": "mid-range.06-ranges",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "mid-range.06-ranges",
        "description": "mid-range.06-ranges",
        "peekOfCode": "items = [\"a\", \"b\", \"c\"]\nfor i in range(len(items)):\n    print(i, items[i])\nfor i in range(1, 10, 2):\n    print(i)",
        "detail": "mid-range.06-ranges",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.06",
        "description": "mid-range.06",
        "peekOfCode": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        if numRows == 1:\n        \treturn s\n        result = [\"\" for _ in range(numRows)]",
        "detail": "mid-range.06",
        "documentation": {}
    },
    {
        "label": "ValueHolder",
        "kind": 6,
        "importPath": "mid-range.06_creating_locks",
        "description": "mid-range.06_creating_locks",
        "peekOfCode": "class ValueHolder:\n    def __init__(self):\n        self._value = 0\n        self._lock = threading.Lock()\n    # Using Lock.acquire() and Lock.release()\n    def increment(self):\n        self._lock.acquire()\n        # BEGIN CRITICAL SECTION\n        v = self._value\n        v = v + 1",
        "detail": "mid-range.06_creating_locks",
        "documentation": {}
    },
    {
        "label": "vh",
        "kind": 5,
        "importPath": "mid-range.06_creating_locks",
        "description": "mid-range.06_creating_locks",
        "peekOfCode": "vh = ValueHolder()\nthread1 = threading.Thread(target=vh.increment, daemon=True)\nthread2 = threading.Thread(target=vh.increment, daemon=True)\nthread1.start()\nthread2.start()\nprint(\"Threads all started.\")\nthread1.join()\nthread2.join()\nprint(vh.value)\nprint(\"Done with this.\")",
        "detail": "mid-range.06_creating_locks",
        "documentation": {}
    },
    {
        "label": "thread1",
        "kind": 5,
        "importPath": "mid-range.06_creating_locks",
        "description": "mid-range.06_creating_locks",
        "peekOfCode": "thread1 = threading.Thread(target=vh.increment, daemon=True)\nthread2 = threading.Thread(target=vh.increment, daemon=True)\nthread1.start()\nthread2.start()\nprint(\"Threads all started.\")\nthread1.join()\nthread2.join()\nprint(vh.value)\nprint(\"Done with this.\")",
        "detail": "mid-range.06_creating_locks",
        "documentation": {}
    },
    {
        "label": "thread2",
        "kind": 5,
        "importPath": "mid-range.06_creating_locks",
        "description": "mid-range.06_creating_locks",
        "peekOfCode": "thread2 = threading.Thread(target=vh.increment, daemon=True)\nthread1.start()\nthread2.start()\nprint(\"Threads all started.\")\nthread1.join()\nthread2.join()\nprint(vh.value)\nprint(\"Done with this.\")",
        "detail": "mid-range.06_creating_locks",
        "documentation": {}
    },
    {
        "label": "ExecutionTime",
        "kind": 6,
        "importPath": "mid-range.06_execution_time",
        "description": "mid-range.06_execution_time",
        "peekOfCode": "class ExecutionTime:\n    def __init__(self):\n        self.start_time = time.time()\n    def duration(self):\n        return time.time() - self.start_time\n# ---- run code ---- #\ntimer = ExecutionTime()\nsample_list = list()\nmy_list = [random.randint(1, 888898) for num in range(1, 1000000) if num % 2 == 0]\nprint(\"Finished in {} seconds.\".format(timer.duration()))",
        "detail": "mid-range.06_execution_time",
        "documentation": {}
    },
    {
        "label": "timer",
        "kind": 5,
        "importPath": "mid-range.06_execution_time",
        "description": "mid-range.06_execution_time",
        "peekOfCode": "timer = ExecutionTime()\nsample_list = list()\nmy_list = [random.randint(1, 888898) for num in range(1, 1000000) if num % 2 == 0]\nprint(\"Finished in {} seconds.\".format(timer.duration()))",
        "detail": "mid-range.06_execution_time",
        "documentation": {}
    },
    {
        "label": "sample_list",
        "kind": 5,
        "importPath": "mid-range.06_execution_time",
        "description": "mid-range.06_execution_time",
        "peekOfCode": "sample_list = list()\nmy_list = [random.randint(1, 888898) for num in range(1, 1000000) if num % 2 == 0]\nprint(\"Finished in {} seconds.\".format(timer.duration()))",
        "detail": "mid-range.06_execution_time",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "mid-range.06_execution_time",
        "description": "mid-range.06_execution_time",
        "peekOfCode": "my_list = [random.randint(1, 888898) for num in range(1, 1000000) if num % 2 == 0]\nprint(\"Finished in {} seconds.\".format(timer.duration()))",
        "detail": "mid-range.06_execution_time",
        "documentation": {}
    },
    {
        "label": "find_max",
        "kind": 2,
        "importPath": "mid-range.06_find_max",
        "description": "mid-range.06_find_max",
        "peekOfCode": "def find_max(arr):\n    if len(arr) == 2:\n        return arr[0] if arr[0] > arr[1] else arr[1]\n    sub_max = find_max(arr[1:])\n    return arr[0] if arr[0] > sub_max else sub_max",
        "detail": "mid-range.06_find_max",
        "documentation": {}
    },
    {
        "label": "almostIncreasingSequence",
        "kind": 2,
        "importPath": "mid-range.07 - almostIncreasingSequence",
        "description": "mid-range.07 - almostIncreasingSequence",
        "peekOfCode": "def almostIncreasingSequence(sequence):\n    i = 0\n    while i < len(sequence) - 1:\n        if not sequence[i] < sequence[i + 1]:\n            if increasingSequence(\n                sequence[:i] + sequence[i + 1 :]\n            ) or increasingSequence(sequence[: i + 1] + sequence[i + 2 :]):\n                return True\n            else:\n                return False",
        "detail": "mid-range.07 - almostIncreasingSequence",
        "documentation": {}
    },
    {
        "label": "increasingSequence",
        "kind": 2,
        "importPath": "mid-range.07 - almostIncreasingSequence",
        "description": "mid-range.07 - almostIncreasingSequence",
        "peekOfCode": "def increasingSequence(sequence):\n    for i in range(len(sequence) - 1):\n        if not sequence[i] < sequence[i + 1]:\n            return False\n    return True",
        "detail": "mid-range.07 - almostIncreasingSequence",
        "documentation": {}
    },
    {
        "label": "book",
        "kind": 5,
        "importPath": "mid-range.07-dictionaries-intro",
        "description": "mid-range.07-dictionaries-intro",
        "peekOfCode": "book = {\n    \"title\": \"Goodnight Moon\",\n    \"ratings\": 7492,\n    \"stars\": 4.8,\n    \"author\": {\"firstName\": \"Margaret\", \"lastName\": \"Wise Brown\"},\n    \"images\": [\"goodnight1.png\", \"goodnight2.png\"],\n}\nprint(book)\nprint(len(book))\ndel book[\"stars\"]",
        "detail": "mid-range.07-dictionaries-intro",
        "documentation": {}
    },
    {
        "label": "book[\"stars\"]",
        "kind": 5,
        "importPath": "mid-range.07-dictionaries-intro",
        "description": "mid-range.07-dictionaries-intro",
        "peekOfCode": "book[\"stars\"] = 4.8\nprint(book)\nfor i in book:\n    print(i, book[i])",
        "detail": "mid-range.07-dictionaries-intro",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.07-equality",
        "description": "mid-range.07-equality",
        "peekOfCode": "a = 1\nb = 1.0\nc = \"1\"\n# print(a == b)\n# print(a == c)\n# print(b == c)\n# if (a == c):\n#     print(\"match\")\n# elif (a == b):\n#     print(\"a matches b\")",
        "detail": "mid-range.07-equality",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.07-equality",
        "description": "mid-range.07-equality",
        "peekOfCode": "b = 1.0\nc = \"1\"\n# print(a == b)\n# print(a == c)\n# print(b == c)\n# if (a == c):\n#     print(\"match\")\n# elif (a == b):\n#     print(\"a matches b\")\n# else:",
        "detail": "mid-range.07-equality",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.07-equality",
        "description": "mid-range.07-equality",
        "peekOfCode": "c = \"1\"\n# print(a == b)\n# print(a == c)\n# print(b == c)\n# if (a == c):\n#     print(\"match\")\n# elif (a == b):\n#     print(\"a matches b\")\n# else:\n#     print(\"not a match\")",
        "detail": "mid-range.07-equality",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.07-equality",
        "description": "mid-range.07-equality",
        "peekOfCode": "a = []\n# Falsy Values:\n# 0, 0.0, 0j (complex number)\n# ''\n# False\n# None\n# []\n# ()\n# {}\n# set()",
        "detail": "mid-range.07-equality",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "mid-range.07c-while-loops",
        "description": "mid-range.07c-while-loops",
        "peekOfCode": "i = 0\nwhile i < 5:\n    print(f\"{i+1}. Hello, world.\")\n    i += 1\n# The 'continue' keyword goes to the next loop\n# The 'break' keyword exits out of the loop completely\ni = 0\nwhile True:\n    print(f\"{i+1}. Hello, world.\")\n    if i < 4:",
        "detail": "mid-range.07c-while-loops",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "mid-range.07c-while-loops",
        "description": "mid-range.07c-while-loops",
        "peekOfCode": "i = 0\nwhile True:\n    print(f\"{i+1}. Hello, world.\")\n    if i < 4:\n        i += 1\n        continue\n    print(\"You've printed 5 times. Goodbye.\")\n    break",
        "detail": "mid-range.07c-while-loops",
        "documentation": {}
    },
    {
        "label": "almostIncreasingSequence",
        "kind": 2,
        "importPath": "mid-range.07_-_almostIncreasingSequence",
        "description": "mid-range.07_-_almostIncreasingSequence",
        "peekOfCode": "def almostIncreasingSequence(sequence):\n    i = 0\n    while i < len(sequence) - 1:\n        if not sequence[i] < sequence[i + 1]:\n            if increasingSequence(\n                sequence[:i] + sequence[i + 1 :]\n            ) or increasingSequence(sequence[: i + 1] + sequence[i + 2 :]):\n                return True\n            else:\n                return False",
        "detail": "mid-range.07_-_almostIncreasingSequence",
        "documentation": {}
    },
    {
        "label": "increasingSequence",
        "kind": 2,
        "importPath": "mid-range.07_-_almostIncreasingSequence",
        "description": "mid-range.07_-_almostIncreasingSequence",
        "peekOfCode": "def increasingSequence(sequence):\n    for i in range(len(sequence) - 1):\n        if not sequence[i] < sequence[i + 1]:\n            return False\n    return True",
        "detail": "mid-range.07_-_almostIncreasingSequence",
        "documentation": {}
    },
    {
        "label": "timeit",
        "kind": 2,
        "importPath": "mid-range.07_benchmark_permissions_loading_django",
        "description": "mid-range.07_benchmark_permissions_loading_django",
        "peekOfCode": "def timeit(method):\n    def timed(*args, **kw):\n        ts = time.time()\n        result = method(*args, **kw)\n        te = time.time()\n        all_times.append(te - ts)\n        print(all_times)\n        print(numpy.mean(all_times))\n        return result\n    return timed",
        "detail": "mid-range.07_benchmark_permissions_loading_django",
        "documentation": {}
    },
    {
        "label": "create_new_db",
        "kind": 2,
        "importPath": "mid-range.07_benchmark_permissions_loading_django",
        "description": "mid-range.07_benchmark_permissions_loading_django",
        "peekOfCode": "def create_new_db():\n    os.system(\"mysqladmin -u root drop DATABASE_NAME -f\")\n    os.system(\"mysqladmin -u root create DATABASE_NAME -f\")\n    os.system(\"./manage.py syncdb\")\n    os.system(\"./manage.py migrate\")\n@timeit\ndef load_new_perms():\n    os.system(\"./manage.py LOAD_PERMS_COMMAND\")\nif __name__ == \"__main__\":\n    n = 0",
        "detail": "mid-range.07_benchmark_permissions_loading_django",
        "documentation": {}
    },
    {
        "label": "load_new_perms",
        "kind": 2,
        "importPath": "mid-range.07_benchmark_permissions_loading_django",
        "description": "mid-range.07_benchmark_permissions_loading_django",
        "peekOfCode": "def load_new_perms():\n    os.system(\"./manage.py LOAD_PERMS_COMMAND\")\nif __name__ == \"__main__\":\n    n = 0\n    all_times = list()\n    while n < 10:\n        create_new_db()\n        load_new_perms()\n        n += 1",
        "detail": "mid-range.07_benchmark_permissions_loading_django",
        "documentation": {}
    },
    {
        "label": "binaryTreeInOrderTraversal",
        "kind": 2,
        "importPath": "mid-range.07_binaryTreeInOrderTraversal",
        "description": "mid-range.07_binaryTreeInOrderTraversal",
        "peekOfCode": "def binaryTreeInOrderTraversal(root):\n    # define some helper function that we will use inside our traversal code\n    def inorder_helper(root, res):\n        # go to till you find the leaf\n        if root is None:\n            return\n        inorder_helper(root.left, res)\n        res.append(root.value)\n        inorder_helper(root.right, res)\n    # store our result",
        "detail": "mid-range.07_binaryTreeInOrderTraversal",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "mid-range.07_deadlocks",
        "description": "mid-range.07_deadlocks",
        "peekOfCode": "def func1():\n    with lock1:\n        # sleep(0.1)\n        with lock2:\n            print(\"func1\")\ndef func2():\n    with lock2:\n        # sleep(0.1)\n        with lock1:\n            print(\"func2\")",
        "detail": "mid-range.07_deadlocks",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "mid-range.07_deadlocks",
        "description": "mid-range.07_deadlocks",
        "peekOfCode": "def func2():\n    with lock2:\n        # sleep(0.1)\n        with lock1:\n            print(\"func2\")\nthread1 = threading.Thread(target=func1)\nthread2 = threading.Thread(target=func2)\nthread1.start()\nthread2.start()",
        "detail": "mid-range.07_deadlocks",
        "documentation": {}
    },
    {
        "label": "lock1",
        "kind": 5,
        "importPath": "mid-range.07_deadlocks",
        "description": "mid-range.07_deadlocks",
        "peekOfCode": "lock1 = threading.Lock()\nlock2 = threading.Lock()\ndef func1():\n    with lock1:\n        # sleep(0.1)\n        with lock2:\n            print(\"func1\")\ndef func2():\n    with lock2:\n        # sleep(0.1)",
        "detail": "mid-range.07_deadlocks",
        "documentation": {}
    },
    {
        "label": "lock2",
        "kind": 5,
        "importPath": "mid-range.07_deadlocks",
        "description": "mid-range.07_deadlocks",
        "peekOfCode": "lock2 = threading.Lock()\ndef func1():\n    with lock1:\n        # sleep(0.1)\n        with lock2:\n            print(\"func1\")\ndef func2():\n    with lock2:\n        # sleep(0.1)\n        with lock1:",
        "detail": "mid-range.07_deadlocks",
        "documentation": {}
    },
    {
        "label": "thread1",
        "kind": 5,
        "importPath": "mid-range.07_deadlocks",
        "description": "mid-range.07_deadlocks",
        "peekOfCode": "thread1 = threading.Thread(target=func1)\nthread2 = threading.Thread(target=func2)\nthread1.start()\nthread2.start()",
        "detail": "mid-range.07_deadlocks",
        "documentation": {}
    },
    {
        "label": "thread2",
        "kind": 5,
        "importPath": "mid-range.07_deadlocks",
        "description": "mid-range.07_deadlocks",
        "peekOfCode": "thread2 = threading.Thread(target=func2)\nthread1.start()\nthread2.start()",
        "detail": "mid-range.07_deadlocks",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.07_slices",
        "description": "mid-range.07_slices",
        "peekOfCode": "a = [2, 4, 1, 7, 9, 6]\n# Output the second element: 4:\nprint(a[1])\n# Output the second-to-last element: 9\nprint(a[-2])\n# Output the last three elements in the array: [7, 9, 6]\nprint(a[-3:])\n# Output the two middle elements in the array: [1, 7]\nprint(a[2:4])\n# Output every element except the first one: [4, 1, 7, 9, 6]",
        "detail": "mid-range.07_slices",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.07_slices",
        "description": "mid-range.07_slices",
        "peekOfCode": "s = \"Hello, world!\"\n# Output just the 8th-12th characters: \"world\"\nprint(s[7:12])",
        "detail": "mid-range.07_slices",
        "documentation": {}
    },
    {
        "label": "matrixElementsSum",
        "kind": 2,
        "importPath": "mid-range.08 - matrixElementsSum",
        "description": "mid-range.08 - matrixElementsSum",
        "peekOfCode": "def matrixElementsSum(matrix):\n    if len(matrix) > 1:\n        for row in range(1, len(matrix)):\n            for room in range(len(matrix[row])):\n                if matrix[row - 1][room] == 0:\n                    matrix[row][room] = 0\n    sum = 0\n    for row in matrix:\n        for room in row:\n            sum += room",
        "detail": "mid-range.08 - matrixElementsSum",
        "documentation": {}
    },
    {
        "label": "pond",
        "kind": 5,
        "importPath": "mid-range.08-dictionaries-more-ways",
        "description": "mid-range.08-dictionaries-more-ways",
        "peekOfCode": "pond = dict(depth=10, area=\"210 square feet\", fish=[\"Mary\", \"Bob\", \"Billy\"])\nprint(pond)\nalligator = dict(\n    [\n        (\"lifespan\", 50),\n        (\"length\", 3.4),\n        (\"lengthUnits\", \"m\"),\n        (\"species\", [\"American Alligator\", \"Chinese Alligator\"]),\n        (\n            \"funFact\",",
        "detail": "mid-range.08-dictionaries-more-ways",
        "documentation": {}
    },
    {
        "label": "alligator",
        "kind": 5,
        "importPath": "mid-range.08-dictionaries-more-ways",
        "description": "mid-range.08-dictionaries-more-ways",
        "peekOfCode": "alligator = dict(\n    [\n        (\"lifespan\", 50),\n        (\"length\", 3.4),\n        (\"lengthUnits\", \"m\"),\n        (\"species\", [\"American Alligator\", \"Chinese Alligator\"]),\n        (\n            \"funFact\",\n            \"As an alligator's teeth are worn down, they are replaced. \"\n            + \"An alligator can go through 3,000 teeth in a lifetime.\",",
        "detail": "mid-range.08-dictionaries-more-ways",
        "documentation": {}
    },
    {
        "label": "keys",
        "kind": 5,
        "importPath": "mid-range.08-dictionaries-more-ways",
        "description": "mid-range.08-dictionaries-more-ways",
        "peekOfCode": "keys = [\"name\", \"home runs\", \"strikeouts\", \"rbi\"]\nvalues = [\"Babe Ruth\", 7214, 1330, 2214]\nplayer = dict(zip(keys, values))\nprint(player)\nprint(dir(player))",
        "detail": "mid-range.08-dictionaries-more-ways",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "mid-range.08-dictionaries-more-ways",
        "description": "mid-range.08-dictionaries-more-ways",
        "peekOfCode": "values = [\"Babe Ruth\", 7214, 1330, 2214]\nplayer = dict(zip(keys, values))\nprint(player)\nprint(dir(player))",
        "detail": "mid-range.08-dictionaries-more-ways",
        "documentation": {}
    },
    {
        "label": "player",
        "kind": 5,
        "importPath": "mid-range.08-dictionaries-more-ways",
        "description": "mid-range.08-dictionaries-more-ways",
        "peekOfCode": "player = dict(zip(keys, values))\nprint(player)\nprint(dir(player))",
        "detail": "mid-range.08-dictionaries-more-ways",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.08-identity",
        "description": "mid-range.08-identity",
        "peekOfCode": "a = 1\nb = 1.0\nc = \"1\"\nprint(a == b)\nprint(a is b)\nprint(c == \"1\")\nprint(c is \"1\")\nprint(b == 1)\nprint(b is 1)\nprint(b == 1 and isinstance(b, int))",
        "detail": "mid-range.08-identity",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.08-identity",
        "description": "mid-range.08-identity",
        "peekOfCode": "b = 1.0\nc = \"1\"\nprint(a == b)\nprint(a is b)\nprint(c == \"1\")\nprint(c is \"1\")\nprint(b == 1)\nprint(b is 1)\nprint(b == 1 and isinstance(b, int))\nprint(a == 1 and isinstance(a, int))",
        "detail": "mid-range.08-identity",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.08-identity",
        "description": "mid-range.08-identity",
        "peekOfCode": "c = \"1\"\nprint(a == b)\nprint(a is b)\nprint(c == \"1\")\nprint(c is \"1\")\nprint(b == 1)\nprint(b is 1)\nprint(b == 1 and isinstance(b, int))\nprint(a == 1 and isinstance(a, int))\n# d = 100000000000000000000000000000000",
        "detail": "mid-range.08-identity",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.08-identity",
        "description": "mid-range.08-identity",
        "peekOfCode": "d = float(10)\ne = float(10)\nprint(id(d))\nprint(id(e))\nprint(d == e)\nprint(d is e)\nb = int(b)\nprint(b)\nprint(b == 1 and isinstance(b, int))\nprint(a)",
        "detail": "mid-range.08-identity",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "mid-range.08-identity",
        "description": "mid-range.08-identity",
        "peekOfCode": "e = float(10)\nprint(id(d))\nprint(id(e))\nprint(d == e)\nprint(d is e)\nb = int(b)\nprint(b)\nprint(b == 1 and isinstance(b, int))\nprint(a)\nprint(float(a))",
        "detail": "mid-range.08-identity",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.08-identity",
        "description": "mid-range.08-identity",
        "peekOfCode": "b = int(b)\nprint(b)\nprint(b == 1 and isinstance(b, int))\nprint(a)\nprint(float(a))\nprint(str(a))\nprint(str(a) is c)\nprint(str(a) == c)",
        "detail": "mid-range.08-identity",
        "documentation": {}
    },
    {
        "label": "matrixElementsSum",
        "kind": 2,
        "importPath": "mid-range.08_-_matrixElementsSum",
        "description": "mid-range.08_-_matrixElementsSum",
        "peekOfCode": "def matrixElementsSum(matrix):\n    if len(matrix) > 1:\n        for row in range(1, len(matrix)):\n            for room in range(len(matrix[row])):\n                if matrix[row - 1][room] == 0:\n                    matrix[row][room] = 0\n    sum = 0\n    for row in matrix:\n        for room in row:\n            sum += room",
        "detail": "mid-range.08_-_matrixElementsSum",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "mid-range.08_basic_email_web_crawler",
        "description": "mid-range.08_basic_email_web_crawler",
        "peekOfCode": "url = input(\"Enter a URL (include `http://`): \")\n# connect to the url\nwebsite = requests.get(url)\n# read html\nhtml = website.text\n# use re.findall to grab all the links\nlinks = re.findall('\"((http|ftp)s?://.*?)\"', html)\nemails = re.findall(\"([\\w\\.,]+@[\\w\\.,]+\\.\\w+)\", html)\n# print the number of links in the list\nprint(\"\\nFound {} links\".format(len(links)))",
        "detail": "mid-range.08_basic_email_web_crawler",
        "documentation": {}
    },
    {
        "label": "website",
        "kind": 5,
        "importPath": "mid-range.08_basic_email_web_crawler",
        "description": "mid-range.08_basic_email_web_crawler",
        "peekOfCode": "website = requests.get(url)\n# read html\nhtml = website.text\n# use re.findall to grab all the links\nlinks = re.findall('\"((http|ftp)s?://.*?)\"', html)\nemails = re.findall(\"([\\w\\.,]+@[\\w\\.,]+\\.\\w+)\", html)\n# print the number of links in the list\nprint(\"\\nFound {} links\".format(len(links)))\nfor email in emails:\n    print(email)",
        "detail": "mid-range.08_basic_email_web_crawler",
        "documentation": {}
    },
    {
        "label": "html",
        "kind": 5,
        "importPath": "mid-range.08_basic_email_web_crawler",
        "description": "mid-range.08_basic_email_web_crawler",
        "peekOfCode": "html = website.text\n# use re.findall to grab all the links\nlinks = re.findall('\"((http|ftp)s?://.*?)\"', html)\nemails = re.findall(\"([\\w\\.,]+@[\\w\\.,]+\\.\\w+)\", html)\n# print the number of links in the list\nprint(\"\\nFound {} links\".format(len(links)))\nfor email in emails:\n    print(email)",
        "detail": "mid-range.08_basic_email_web_crawler",
        "documentation": {}
    },
    {
        "label": "links",
        "kind": 5,
        "importPath": "mid-range.08_basic_email_web_crawler",
        "description": "mid-range.08_basic_email_web_crawler",
        "peekOfCode": "links = re.findall('\"((http|ftp)s?://.*?)\"', html)\nemails = re.findall(\"([\\w\\.,]+@[\\w\\.,]+\\.\\w+)\", html)\n# print the number of links in the list\nprint(\"\\nFound {} links\".format(len(links)))\nfor email in emails:\n    print(email)",
        "detail": "mid-range.08_basic_email_web_crawler",
        "documentation": {}
    },
    {
        "label": "emails",
        "kind": 5,
        "importPath": "mid-range.08_basic_email_web_crawler",
        "description": "mid-range.08_basic_email_web_crawler",
        "peekOfCode": "emails = re.findall(\"([\\w\\.,]+@[\\w\\.,]+\\.\\w+)\", html)\n# print the number of links in the list\nprint(\"\\nFound {} links\".format(len(links)))\nfor email in emails:\n    print(email)",
        "detail": "mid-range.08_basic_email_web_crawler",
        "documentation": {}
    },
    {
        "label": "allLongestStrings",
        "kind": 2,
        "importPath": "mid-range.09 - allLongestStrings",
        "description": "mid-range.09 - allLongestStrings",
        "peekOfCode": "def allLongestStrings(inputArray):\n    length = max([len(word) for word in inputArray])\n    result = [word for word in inputArray if len(word) == length]\n    return result",
        "detail": "mid-range.09 - allLongestStrings",
        "documentation": {}
    },
    {
        "label": "print_powers_of",
        "kind": 2,
        "importPath": "mid-range.09-functions",
        "description": "mid-range.09-functions",
        "peekOfCode": "def print_powers_of(base, exp=1):\n    i = 1\n    while i <= exp:\n        print(base ** i)\n        i += 1\n# We are not hoisting the function declaration, we need to invoke after declared\nprint_powers_of(15)\nprint_powers_of(exp=6, base=7)\nprint_powers_of(2, 5)\nprint_powers_of(3, 5)",
        "detail": "mid-range.09-functions",
        "documentation": {}
    },
    {
        "label": "xor",
        "kind": 5,
        "importPath": "mid-range.09-functions",
        "description": "mid-range.09-functions",
        "peekOfCode": "xor = lambda left, right: left != right\nprint(xor(True, True))  # > False\nprint(xor(True, False))  # > True\nprint(xor(False, True))  # > True\nprint(xor(False, False))  # > False\ndef print_powers_of(base, exp=1):\n    i = 1\n    while i <= exp:\n        print(base ** i)\n        i += 1",
        "detail": "mid-range.09-functions",
        "documentation": {}
    },
    {
        "label": "basket",
        "kind": 5,
        "importPath": "mid-range.09-sets-intro",
        "description": "mid-range.09-sets-intro",
        "peekOfCode": "basket = [\"apple\", \"banana\", \"apple\", \"orange\", \"pear\", \"apple\", \"banana\"]\nprint(basket)\nprint(set(basket))",
        "detail": "mid-range.09-sets-intro",
        "documentation": {}
    },
    {
        "label": "allLongestStrings",
        "kind": 2,
        "importPath": "mid-range.09_-_allLongestStrings",
        "description": "mid-range.09_-_allLongestStrings",
        "peekOfCode": "def allLongestStrings(inputArray):\n    length = max([len(word) for word in inputArray])\n    result = [word for word in inputArray if len(word) == length]\n    return result",
        "detail": "mid-range.09_-_allLongestStrings",
        "documentation": {}
    },
    {
        "label": "crawl",
        "kind": 2,
        "importPath": "mid-range.09_basic_link_web_crawler",
        "description": "mid-range.09_basic_link_web_crawler",
        "peekOfCode": "def crawl(url):\n    req = requests.get(url)\n    # Check if successful\n    if req.status_code != 200:\n        return []\n    # Find links\n    links = link_re.findall(req.text)\n    print(\"\\nFound {} links\".format(len(links)))\n    # Search links for emails\n    for link in links:",
        "detail": "mid-range.09_basic_link_web_crawler",
        "documentation": {}
    },
    {
        "label": "link_re",
        "kind": 5,
        "importPath": "mid-range.09_basic_link_web_crawler",
        "description": "mid-range.09_basic_link_web_crawler",
        "peekOfCode": "link_re = re.compile(r'href=\"(.*?)\"')\ndef crawl(url):\n    req = requests.get(url)\n    # Check if successful\n    if req.status_code != 200:\n        return []\n    # Find links\n    links = link_re.findall(req.text)\n    print(\"\\nFound {} links\".format(len(links)))\n    # Search links for emails",
        "detail": "mid-range.09_basic_link_web_crawler",
        "documentation": {}
    },
    {
        "label": "build_lookup_table",
        "kind": 2,
        "importPath": "mid-range.1-lookup",
        "description": "mid-range.1-lookup",
        "peekOfCode": "def build_lookup_table():\n    # expensive to do the first build\n    global inv_sqrt\n    for i in range(1, 1000001):\n        inv_sqrt[i] = 1 / math.sqrt(i)\nprint(inv_sqrt)\nbuild_lookup_table()\nprint(inv_sqrt)\n# Fast to just look up the answer\nprint(inv_sqrt[3])",
        "detail": "mid-range.1-lookup",
        "documentation": {}
    },
    {
        "label": "inv_sqrt",
        "kind": 5,
        "importPath": "mid-range.1-lookup",
        "description": "mid-range.1-lookup",
        "peekOfCode": "inv_sqrt = {}\ndef build_lookup_table():\n    # expensive to do the first build\n    global inv_sqrt\n    for i in range(1, 1000001):\n        inv_sqrt[i] = 1 / math.sqrt(i)\nprint(inv_sqrt)\nbuild_lookup_table()\nprint(inv_sqrt)\n# Fast to just look up the answer",
        "detail": "mid-range.1-lookup",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1",
        "description": "mid-range.1",
        "peekOfCode": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        record = {}\n        for i in range(len(nums)):\n            if nums[i] in record:",
        "detail": "mid-range.1",
        "documentation": {}
    },
    {
        "label": "commonCharacterCount",
        "kind": 2,
        "importPath": "mid-range.10 - commonCharacterCount",
        "description": "mid-range.10 - commonCharacterCount",
        "peekOfCode": "def commonCharacterCount(s1, s2):\n    count = 0\n    word2 = list(s2)\n    for letter in s1:\n        if letter in word2:\n            word2.remove(letter)\n            count += 1\n    return count",
        "detail": "mid-range.10 - commonCharacterCount",
        "documentation": {}
    },
    {
        "label": "k_days_later",
        "kind": 2,
        "importPath": "mid-range.10-DayOfWeekThatIsKDaysLater",
        "description": "mid-range.10-DayOfWeekThatIsKDaysLater",
        "peekOfCode": "def k_days_later(s, k):\n    days_of_week = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n    remainder = k % 7\n    s_index = days_of_week.index(s)\n    move_forward = remainder + s_index\n    if move_forward < 7:\n        return days_of_week[move_forward]\n    else:\n        correct_day_index = move_forward - 7\n        return days_of_week[correct_day_index]",
        "detail": "mid-range.10-DayOfWeekThatIsKDaysLater",
        "documentation": {}
    },
    {
        "label": "greeting_maker",
        "kind": 2,
        "importPath": "mid-range.10-functions-returning-functions",
        "description": "mid-range.10-functions-returning-functions",
        "peekOfCode": "def greeting_maker(salutation):\n    print(salutation)\n    def greeting(name):\n        return f\"{salutation} {name}\"\n    return greeting\n# print(salutation) # Error, salutation is not defined at this scope\nhello = greeting_maker(\"Hello\")\nhiya = greeting_maker(\"Hiya\")\nprint(hello(\"Monica\"))\nprint(hello(\"Raja\"))",
        "detail": "mid-range.10-functions-returning-functions",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 5,
        "importPath": "mid-range.10-functions-returning-functions",
        "description": "mid-range.10-functions-returning-functions",
        "peekOfCode": "hello = greeting_maker(\"Hello\")\nhiya = greeting_maker(\"Hiya\")\nprint(hello(\"Monica\"))\nprint(hello(\"Raja\"))\nprint(hiya(\"Raul\"))\nprint(hiya(\"Tariq\"))",
        "detail": "mid-range.10-functions-returning-functions",
        "documentation": {}
    },
    {
        "label": "hiya",
        "kind": 5,
        "importPath": "mid-range.10-functions-returning-functions",
        "description": "mid-range.10-functions-returning-functions",
        "peekOfCode": "hiya = greeting_maker(\"Hiya\")\nprint(hello(\"Monica\"))\nprint(hello(\"Raja\"))\nprint(hiya(\"Raul\"))\nprint(hiya(\"Tariq\"))",
        "detail": "mid-range.10-functions-returning-functions",
        "documentation": {}
    },
    {
        "label": "purchasingEmails",
        "kind": 5,
        "importPath": "mid-range.10-sets-usage",
        "description": "mid-range.10-sets-usage",
        "peekOfCode": "purchasingEmails = (\"bob@gmail.com\", \"sam@yahoo.com\", \"riley@rileymail.org\")\nhelpEmails = (\"jo@josbilling.com\", \"bob@gmail.com\", \"sam@yahoo.com\")\nprint(\"Users making a purchase and also calling help desk\")\nprint(set(purchasingEmails) & set(helpEmails))",
        "detail": "mid-range.10-sets-usage",
        "documentation": {}
    },
    {
        "label": "helpEmails",
        "kind": 5,
        "importPath": "mid-range.10-sets-usage",
        "description": "mid-range.10-sets-usage",
        "peekOfCode": "helpEmails = (\"jo@josbilling.com\", \"bob@gmail.com\", \"sam@yahoo.com\")\nprint(\"Users making a purchase and also calling help desk\")\nprint(set(purchasingEmails) & set(helpEmails))",
        "detail": "mid-range.10-sets-usage",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.100",
        "description": "mid-range.100",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode",
        "detail": "mid-range.100",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.100",
        "description": "mid-range.100",
        "peekOfCode": "class Solution:\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if not p or not q:\n            return p == q\n        if p.val != q.val:",
        "detail": "mid-range.100",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1002",
        "description": "mid-range.1002",
        "peekOfCode": "class Solution(object):\n    def commonChars(self, A):\n        \"\"\"\n        :type A: List[str]\n        :rtype: List[str]\n        \"\"\"\n        char_map = {}\n        for char in A[0]:\n            if char in char_map:\n                char_map[char] += 1",
        "detail": "mid-range.1002",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1004",
        "description": "mid-range.1004",
        "peekOfCode": "class Solution:\n    def longestOnes(self, A: List[int], K: int) -> int:\n        i = 0\n        for j in range(len(A)):\n            K -= 1 - A[j]\n            if K < 0:\n                K += 1 - A[i]\n                i += 1\n        return j - i + 1",
        "detail": "mid-range.1004",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1005",
        "description": "mid-range.1005",
        "peekOfCode": "class Solution(object):\n    def largestSumAfterKNegations(self, A, K):\n        \"\"\"\n        :type A: List[int]\n        :type K: int\n        :rtype: int\n        \"\"\"\n        A.sort()\n        index = 0\n        while K > 0:",
        "detail": "mid-range.1005",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1008",
        "description": "mid-range.1008",
        "peekOfCode": "class Solution(object):\n    def bstFromPreorder(self, preorder):\n        \"\"\"\n        :type preorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        root = TreeNode(preorder[0])\n        stack = [root]\n        for index in range(1, len(preorder)):\n            new_node = TreeNode(preorder[index])",
        "detail": "mid-range.1008",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1009",
        "description": "mid-range.1009",
        "peekOfCode": "class Solution:\n    def bitwiseComplement(self, N: int) -> int:\n        X = 1\n        while N > X:\n            X = X * 2 + 1\n        return X - N",
        "detail": "mid-range.1009",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1013",
        "description": "mid-range.1013",
        "peekOfCode": "class Solution(object):\n    def canThreePartsEqualSum(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: bool\n        \"\"\"\n        total_sum = 0\n        for val in A:\n            total_sum += val\n        if(total_sum%3 != 0):",
        "detail": "mid-range.1013",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1014",
        "description": "mid-range.1014",
        "peekOfCode": "class Solution(object):\n    def maxScoreSightseeingPair(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        prev_best, result = 0, 0\n        for index in range(0, len(A)):\n            result = max(result, A[index] - index + prev_best)\n            prev_best = max(prev_best, A[index] + index)",
        "detail": "mid-range.1014",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1015",
        "description": "mid-range.1015",
        "peekOfCode": "class Solution(object):\n    def smallestRepunitDivByK(self, K):\n        \"\"\"\n        :type K: int\n        :rtype: int\n        \"\"\"\n        length, value = 0, 0\n        for no_one in range(100000):\n            value = (10 * value + 1) % K\n            length += 1",
        "detail": "mid-range.1015",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1016",
        "description": "mid-range.1016",
        "peekOfCode": "class Solution(object):\n    def queryString(self, S, N):\n        \"\"\"\n        :type S: str\n        :type N: int\n        :rtype: bool\n        \"\"\"\n        for num in range(1, N + 1):\n            binary_str = \"\"\n            while num != 0:",
        "detail": "mid-range.1016",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1017",
        "description": "mid-range.1017",
        "peekOfCode": "class Solution(object):\n    def baseNeg2(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: str\n        \"\"\"\n        if N == 0:\n            digits = [\"0\"]\n        else:\n            digits = []",
        "detail": "mid-range.1017",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1018",
        "description": "mid-range.1018",
        "peekOfCode": "class Solution(object):\n    def prefixesDivBy5(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: List[bool]\n        \"\"\"\n        result = []\n        if not A:\n            return []\n        str_bin = \"\"",
        "detail": "mid-range.1018",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1021",
        "description": "mid-range.1021",
        "peekOfCode": "class Solution:\n    def removeOuterParentheses(self, S: str) -> str:\n        stack, result = [], \"\"\n        for i in range(len(S)):\n            if S[i] == \"(\":\n                stack.append(i)\n            elif S[i] == \")\":\n                if len(stack) == 1:\n                    result += S[stack.pop() + 1 : i]\n                else:",
        "detail": "mid-range.1021",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1022",
        "description": "mid-range.1022",
        "peekOfCode": "class Solution:\n    def sumRootToLeaf(self, root: TreeNode) -> int:\n        def dfs(node, val):\n            if not node:\n                return 0\n            val = val * 2 + node.val\n            if not node.left and not node.right:\n                return val\n            return dfs(node.left, val) + dfs(node.right, val)\n        return dfs(root, 0)",
        "detail": "mid-range.1022",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1025",
        "description": "mid-range.1025",
        "peekOfCode": "class Solution(object):\n    def divisorGame(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: bool\n        \"\"\"\n        if N == 0:\n            return False\n        move = 0\n        while N > 1:",
        "detail": "mid-range.1025",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1026",
        "description": "mid-range.1026",
        "peekOfCode": "class Solution:\n    def maxAncestorDiff(self, root: TreeNode) -> int:\n        def dfs(node, min_val, max_val):\n            if not node:\n                return max_val - min_val\n            max_val = max(node.val, max_val)\n            min_val = min(node.val, min_val)\n            return max(\n                dfs(node.left, min_val, max_val), dfs(node.right, min_val, max_val)\n            )",
        "detail": "mid-range.1026",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1027",
        "description": "mid-range.1027",
        "peekOfCode": "class Solution(object):\n    def longestArithSeqLength(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        from collections import defaultdict\n        dp = defaultdict(int)\n        # print dp\n        for index_i in range(len(A)):",
        "detail": "mid-range.1027",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1029",
        "description": "mid-range.1029",
        "peekOfCode": "class Solution(object):\n    def twoCitySchedCost(self, costs):\n        \"\"\"\n        :type costs: List[List[int]]\n        :rtype: int\n        \"\"\"\n        result = 0\n        costs = sorted(costs, key=lambda x: x[0] - x[1])\n        for index in range(len(costs)):\n            if index < len(costs) // 2:",
        "detail": "mid-range.1029",
        "documentation": {}
    },
    {
        "label": "TrieNode",
        "kind": 6,
        "importPath": "mid-range.1032",
        "description": "mid-range.1032",
        "peekOfCode": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_word = False\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def add(self, word):\n        node = self.root\n        for c in word:",
        "detail": "mid-range.1032",
        "documentation": {}
    },
    {
        "label": "Trie",
        "kind": 6,
        "importPath": "mid-range.1032",
        "description": "mid-range.1032",
        "peekOfCode": "class Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def add(self, word):\n        node = self.root\n        for c in word:\n            node = node.children.setdefault(c, TrieNode())\n        node.is_word = True\nfrom collections import deque\nclass StreamChecker:",
        "detail": "mid-range.1032",
        "documentation": {}
    },
    {
        "label": "StreamChecker",
        "kind": 6,
        "importPath": "mid-range.1032",
        "description": "mid-range.1032",
        "peekOfCode": "class StreamChecker:\n    def __init__(self, words: List[str]):\n        self.trie = Trie()\n        self.q = deque()\n        for word in words:\n            self.trie.add(word[::-1])\n    def query(self, letter: str) -> bool:\n        node = self.trie.root\n        self.q.appendleft(letter)\n        for c in self.q:",
        "detail": "mid-range.1032",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1037",
        "description": "mid-range.1037",
        "peekOfCode": "class Solution(object):\n    def isBoomerang(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        x1, x2, x3, y1, y2, y3 = (\n            points[0][0],\n            points[1][0],\n            points[2][0],",
        "detail": "mid-range.1037",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.104",
        "description": "mid-range.104",
        "peekOfCode": "class Solution:\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))",
        "detail": "mid-range.104",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1041",
        "description": "mid-range.1041",
        "peekOfCode": "class Solution:\n    def isRobotBounded(self, instructions: str) -> bool:\n        x, y, dx, dy = 0, 0, 0, 1\n        for instruction in instructions:\n            if instruction == \"G\":\n                x += dx\n                y += dy\n            elif instruction == \"L\":\n                dx, dy = -dy, dx\n            elif instruction == \"R\":",
        "detail": "mid-range.1041",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1043",
        "description": "mid-range.1043",
        "peekOfCode": "class Solution(object):\n    def maxSumAfterPartitioning(self, A, K):\n        \"\"\"\n        :type A: List[int]\n        :type K: int\n        :rtype: int\n        \"\"\"\n        if not A:\n            return 0\n        N = len(A)",
        "detail": "mid-range.1043",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1047",
        "description": "mid-range.1047",
        "peekOfCode": "class Solution:\n    def removeDuplicates(self, S: str) -> str:\n        if len(S) < 2:\n            return S\n        i = 0\n        result = [\"\"] * len(S)\n        for j in range(len(S)):\n            result[i] = S[j]\n            if i > 0 and result[i - 1] == result[i]:\n                i -= 2",
        "detail": "mid-range.1047",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.105",
        "description": "mid-range.105",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n# time: O(nlogn)\n# space: O(n)\nclass Solution:\n    def buildTree(self, preorder, inorder):\n        \"\"\"",
        "detail": "mid-range.105",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.105",
        "description": "mid-range.105",
        "peekOfCode": "class Solution:\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        inorderDict = {num: i for i, num in enumerate(inorder)}\n        pre = iter(preorder)\n        def helper(start, end):",
        "detail": "mid-range.105",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1051",
        "description": "mid-range.1051",
        "peekOfCode": "class Solution(object):\n    def heightChecker(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        result = 0\n        for new_h, hei in zip(heights, sorted(heights)):\n            if new_h != hei:\n                result += 1",
        "detail": "mid-range.1051",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1053",
        "description": "mid-range.1053",
        "peekOfCode": "class Solution(object):\n    def prevPermOpt1(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: List[int]\n        \"\"\"\n        left, right = len(A) - 2, len(A) - 1\n        for left in range(len(A) - 2, -1, -1):\n            if A[left] > A[left + 1]:\n                break",
        "detail": "mid-range.1053",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1054",
        "description": "mid-range.1054",
        "peekOfCode": "class Solution(object):\n    def rearrangeBarcodes(self, barcodes):\n        \"\"\"\n        :type barcodes: List[int]\n        :rtype: List[int]\n        \"\"\"\n        import heapq\n        di = collections.Counter(barcodes)\n        pq = [(-value, key) for key, value in di.items()]\n        heapq.heapify(pq)",
        "detail": "mid-range.1054",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1059",
        "description": "mid-range.1059",
        "peekOfCode": "class Solution:\n    def leadsToDestination(\n        self, n: int, edges: List[List[int]], source: int, destination: int\n    ) -> bool:\n        neighbors, visited = defaultdict(set), set()\n        for edge in edges:\n            start, end = edge[0], edge[1]\n            neighbors[start].add(end)\n        def dfs(node):\n            if node == destination and len(neighbors[node]) == 0:",
        "detail": "mid-range.1059",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.106",
        "description": "mid-range.106",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]",
        "detail": "mid-range.106",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.106",
        "description": "mid-range.106",
        "peekOfCode": "class Solution:\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        inorderDict = {num: i for i, num in enumerate(inorder)}\n        def helper(start, end):\n            if start > end:",
        "detail": "mid-range.106",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1060",
        "description": "mid-range.1060",
        "peekOfCode": "class Solution:\n    def missingElement(self, nums: List[int], k: int) -> int:\n        missing = nums[-1] - nums[0] - len(nums) + 1\n        if missing < k:\n            return nums[-1] + k - missing\n        left, right = 0, len(nums) - 1\n        while left + 1 < right:\n            mid = left + (right - left) // 2\n            missing = nums[mid] - nums[left] - (mid - left)\n            if missing < k:",
        "detail": "mid-range.1060",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1064",
        "description": "mid-range.1064",
        "peekOfCode": "class Solution(object):\n    def fixedPoint(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        if not A:\n            return -1\n        for index, num in enumerate(A):\n            if num == index:",
        "detail": "mid-range.1064",
        "documentation": {}
    },
    {
        "label": "A[0]",
        "kind": 5,
        "importPath": "mid-range.1064",
        "description": "mid-range.1064",
        "peekOfCode": "A[0] = 0, thus the output is 0.\nExample 3:\nInput: [-10,-5,3,4,7,9]\nOutput: -1\nExplanation: \nThere is no such i that A[i] = i, thus the output is -1.\n\"\"\"\nclass Solution(object):\n    def fixedPoint(self, A):\n        \"\"\"",
        "detail": "mid-range.1064",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.107",
        "description": "mid-range.107",
        "peekOfCode": "class Solution:\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        if not root:\n            return []\n        queue, res = deque([(root, 1)]), []\n        while queue:",
        "detail": "mid-range.107",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1071",
        "description": "mid-range.1071",
        "peekOfCode": "class Solution(object):\n    def gcdOfStrings(self, str1, str2):\n        \"\"\"\n        :type str1: str\n        :type str2: str\n        :rtype: str\n        \"\"\"\n        if len(str1) > len(str2):\n            str1, str2 = str2, str1\n        l_str1 = len(str1)",
        "detail": "mid-range.1071",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1079",
        "description": "mid-range.1079",
        "peekOfCode": "class Solution(object):\n    def numTilePossibilities(self, tiles):\n        \"\"\"\n        :type tiles: str\n        :rtype: int\n        \"\"\"\n        if not tiles:\n            return 0\n        import collections\n        unique = set(tiles)",
        "detail": "mid-range.1079",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.108",
        "description": "mid-range.108",
        "peekOfCode": "class Solution:\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\n        return self.dfs(0, len(nums) - 1, nums)\n    def dfs(self, low, high, nums):\n        if low > high:\n            return None\n        m = low + (high - low) // 2\n        root = TreeNode(nums[m])\n        root.left = self.dfs(low, m - 1, nums)\n        root.right = self.dfs(m + 1, high, nums)",
        "detail": "mid-range.108",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1081",
        "description": "mid-range.1081",
        "peekOfCode": "class Solution(object):\n    def smallestSubsequence(self, text):\n        \"\"\"\n        :type text: str\n        :rtype: str\n        \"\"\"\n        if not text:\n            return \"\"\n        import collections\n        freq_map = collections.Counter(text)",
        "detail": "mid-range.1081",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1085",
        "description": "mid-range.1085",
        "peekOfCode": "class Solution(object):\n    def sumOfDigits(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        if not A:\n            return 0\n        mini = min(A)\n        result = 0",
        "detail": "mid-range.1085",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1089",
        "description": "mid-range.1089",
        "peekOfCode": "class Solution(object):\n    def duplicateZeros(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: None Do not return anything, modify arr in-place instead.\n        \"\"\"\n        arr_copy = arr[:]\n        index, n = 0, len(arr_copy)\n        for elem in arr_copy:\n            arr[index] = elem",
        "detail": "mid-range.1089",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.109",
        "description": "mid-range.109",
        "peekOfCode": "class Solution:\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: TreeNode\n        \"\"\"\n        return self.dfs(head, None)\n    def dfs(self, head, tail):\n        if head == tail:\n            return None",
        "detail": "mid-range.109",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1094",
        "description": "mid-range.1094",
        "peekOfCode": "class Solution:\n    def carPooling(self, trips: List[List[int]], capacity: int) -> bool:\n        space = 0\n        for s, c in sorted(\n            x for trip in trips for x in [(trip[1], trip[0]), (trip[2], -trip[0])]\n        ):\n            space += c\n            if space > capacity:\n                return False\n        return True",
        "detail": "mid-range.1094",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1099",
        "description": "mid-range.1099",
        "peekOfCode": "class Solution:\n    def twoSumLessThanK(self, A: List[int], K: int) -> int:\n        A.sort()\n        result = -1\n        l, r = 0, len(A) - 1\n        while l < r:\n            if A[l] + A[r] < K:\n                result = max(result, A[l] + A[r])\n                l += 1\n            else:",
        "detail": "mid-range.1099",
        "documentation": {}
    },
    {
        "label": "commonCharacterCount",
        "kind": 2,
        "importPath": "mid-range.10_-_commonCharacterCount",
        "description": "mid-range.10_-_commonCharacterCount",
        "peekOfCode": "def commonCharacterCount(s1, s2):\n    count = 0\n    word2 = list(s2)\n    for letter in s1:\n        if letter in word2:\n            word2.remove(letter)\n            count += 1\n    return count",
        "detail": "mid-range.10_-_commonCharacterCount",
        "documentation": {}
    },
    {
        "label": "get_file_names",
        "kind": 2,
        "importPath": "mid-range.10_find_files_recursively",
        "description": "mid-range.10_find_files_recursively",
        "peekOfCode": "def get_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                # matches.append(os.path.join(root, filename))  # full path\n                matches.append(os.path.join(filename))  # just file name\n        if matches:\n            print(\"Found {} files:\".format(len(matches)))\n            output_files(matches)",
        "detail": "mid-range.10_find_files_recursively",
        "documentation": {}
    },
    {
        "label": "output_files",
        "kind": 2,
        "importPath": "mid-range.10_find_files_recursively",
        "description": "mid-range.10_find_files_recursively",
        "peekOfCode": "def output_files(list_of_files):\n    for filename in list_of_files:\n        print(filename)\nif __name__ == \"__main__\":\n    get_file_names(PATH, PATTERN)",
        "detail": "mid-range.10_find_files_recursively",
        "documentation": {}
    },
    {
        "label": "PATH",
        "kind": 5,
        "importPath": "mid-range.10_find_files_recursively",
        "description": "mid-range.10_find_files_recursively",
        "peekOfCode": "PATH = \"./\"\nPATTERN = \"*.md\"\ndef get_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                # matches.append(os.path.join(root, filename))  # full path\n                matches.append(os.path.join(filename))  # just file name\n        if matches:",
        "detail": "mid-range.10_find_files_recursively",
        "documentation": {}
    },
    {
        "label": "PATTERN",
        "kind": 5,
        "importPath": "mid-range.10_find_files_recursively",
        "description": "mid-range.10_find_files_recursively",
        "peekOfCode": "PATTERN = \"*.md\"\ndef get_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                # matches.append(os.path.join(root, filename))  # full path\n                matches.append(os.path.join(filename))  # just file name\n        if matches:\n            print(\"Found {} files:\".format(len(matches)))",
        "detail": "mid-range.10_find_files_recursively",
        "documentation": {}
    },
    {
        "label": "is_even",
        "kind": 2,
        "importPath": "mid-range.10_functions",
        "description": "mid-range.10_functions",
        "peekOfCode": "def is_even(n):\n    return n % 2 == 0\n# Read a number from the keyboard\nnum = input(\"Enter a number: \")\nnum = int(num)\n# Print out \"Even!\" if the number is even. Otherwise print \"Odd\"\nif is_even(num):\n    print(\"Even!\")\nelse:\n    print(\"Odd\")",
        "detail": "mid-range.10_functions",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "mid-range.10_functions",
        "description": "mid-range.10_functions",
        "peekOfCode": "num = input(\"Enter a number: \")\nnum = int(num)\n# Print out \"Even!\" if the number is even. Otherwise print \"Odd\"\nif is_even(num):\n    print(\"Even!\")\nelse:\n    print(\"Odd\")",
        "detail": "mid-range.10_functions",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "mid-range.10_functions",
        "description": "mid-range.10_functions",
        "peekOfCode": "num = int(num)\n# Print out \"Even!\" if the number is even. Otherwise print \"Odd\"\nif is_even(num):\n    print(\"Even!\")\nelse:\n    print(\"Odd\")",
        "detail": "mid-range.10_functions",
        "documentation": {}
    },
    {
        "label": "fib",
        "kind": 2,
        "importPath": "mid-range.10_recursion",
        "description": "mid-range.10_recursion",
        "peekOfCode": "def fib(n):\n    if n < 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\nprint(fib(n))",
        "detail": "mid-range.10_recursion",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.10_recursion",
        "description": "mid-range.10_recursion",
        "peekOfCode": "n = 40\n# use space in a linear format\n# while n != 0: # O(n)\n#     print(n)\n#     n -= 1\n# def rec_while(n): # O(n)\n#     # base case\n#     if n == 0:\n#         return\n#     # logic that we want to do",
        "detail": "mid-range.10_recursion",
        "documentation": {}
    },
    {
        "label": "isLucky",
        "kind": 2,
        "importPath": "mid-range.11 - isLucky",
        "description": "mid-range.11 - isLucky",
        "peekOfCode": "def isLucky(n):\n    string = str(n)\n    top = [int(x) for x in string[: len(string) // 2]]\n    bottom = [int(x) for x in string[len(string) // 2 :]]\n    return sum(top) == sum(bottom)",
        "detail": "mid-range.11 - isLucky",
        "documentation": {}
    },
    {
        "label": "posts",
        "kind": 5,
        "importPath": "mid-range.11-combining-structures",
        "description": "mid-range.11-combining-structures",
        "peekOfCode": "posts = [\n    {\"title\": \"All About Lists\", \"tags\": (\"fun\", \"informative\", \"lists\")},\n    {\"title\": \"Tuple Trouble\", \"tags\": (\"fun\", \"tuples\")},\n    {\"title\": \"Sparkling Sets\", \"tags\": (\"informative\", \"numbers\")},\n]\nallTags = []\nfor i in range(len(posts)):\n    print(posts[i][\"tags\"])\n    allTags.extend(posts[i][\"tags\"])\nprint(allTags)",
        "detail": "mid-range.11-combining-structures",
        "documentation": {}
    },
    {
        "label": "allTags",
        "kind": 5,
        "importPath": "mid-range.11-combining-structures",
        "description": "mid-range.11-combining-structures",
        "peekOfCode": "allTags = []\nfor i in range(len(posts)):\n    print(posts[i][\"tags\"])\n    allTags.extend(posts[i][\"tags\"])\nprint(allTags)\nallTags = list(set(allTags))\nallTags.sort()\nprint(allTags)",
        "detail": "mid-range.11-combining-structures",
        "documentation": {}
    },
    {
        "label": "allTags",
        "kind": 5,
        "importPath": "mid-range.11-combining-structures",
        "description": "mid-range.11-combining-structures",
        "peekOfCode": "allTags = list(set(allTags))\nallTags.sort()\nprint(allTags)",
        "detail": "mid-range.11-combining-structures",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.11",
        "description": "mid-range.11",
        "peekOfCode": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        left, right, maxArea = 0, len(height) - 1, 0\n        while left < right:\n            maxArea = max(maxArea, min(height[left], height[right]) * (right - left))\n            if height[left] < height[right]:",
        "detail": "mid-range.11",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.110",
        "description": "mid-range.110",
        "peekOfCode": "class Solution:\n    def isBalanced(self, root: TreeNode) -> bool:\n        return self.dfs(root) != -1\n    def dfs(self, node):\n        if not node:\n            return 0\n        left = self.dfs(node.left)\n        right = self.dfs(node.right)\n        if left == -1 or right == -1 or abs(left - right) > 1:\n            return -1",
        "detail": "mid-range.110",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1103",
        "description": "mid-range.1103",
        "peekOfCode": "class Solution:\n    def distributeCandies(self, candies: int, num_people: int) -> List[int]:\n        result = [0] * num_people\n        give = 0\n        given_candies = 0\n        while given_candies < candies:\n            result[give % num_people] += min(candies - given_candies, give + 1)\n            give += 1\n            given_candies += give\n        return result",
        "detail": "mid-range.1103",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1109",
        "description": "mid-range.1109",
        "peekOfCode": "class Solution:\n    def corpFlightBookings(self, bookings: List[List[int]], n: int) -> List[int]:\n        result = [0] * n\n        for i, j, v in bookings:\n            result[i - 1] += v\n            if j < n:\n                result[j] += -v\n        for i in range(1, n):\n            result[i] += result[i - 1]\n        return result",
        "detail": "mid-range.1109",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.111",
        "description": "mid-range.111",
        "peekOfCode": "class Solution(object):\n    def minDepth(self, root):\n        if not root:\n            return 0\n        depth = float(\"inf\")\n        stack = [(root, 1)]\n        while stack:\n            node, level = stack.pop()\n            if node:\n                if not node.left and not node.right:",
        "detail": "mid-range.111",
        "documentation": {}
    },
    {
        "label": "H2O",
        "kind": 6,
        "importPath": "mid-range.1117",
        "description": "mid-range.1117",
        "peekOfCode": "class H2O:\n    def __init__(self):\n        self.b = Barrier(3)\n        self.h = Semaphore(2)\n        self.o = Semaphore(1)\n    def hydrogen(self, releaseHydrogen: \"Callable[[], None]\") -> None:\n        with self.h:\n            self.b.wait()\n            # releaseHydrogen() outputs \"H\". Do not change or remove this line.\n            releaseHydrogen()",
        "detail": "mid-range.1117",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.112",
        "description": "mid-range.112",
        "peekOfCode": "class Solution:\n    def hasPathSum(self, root, sum):\n        \"\"\"\n        :type root: TreeNode\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return False\n        if not root.left and not root.right and root.val == sum:",
        "detail": "mid-range.112",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1123",
        "description": "mid-range.1123",
        "peekOfCode": "class Solution:\n    def lcaDeepestLeaves(self, root: TreeNode) -> TreeNode:\n        def dfs(node):\n            if not node:\n                return 0, None\n            h1, lca1 = dfs(node.left)\n            h2, lca2 = dfs(node.right)\n            if h1 > h2:\n                return h1 + 1, lca1\n            if h2 > h1:",
        "detail": "mid-range.1123",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.113",
        "description": "mid-range.113",
        "peekOfCode": "class Solution:\n    def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]:\n        result = []\n        self.dfs(root, sum, [], result)\n        return result\n    def dfs(self, node, sum, path, result):\n        if not node:\n            return\n        if not node.left and not node.right and node.val == sum:\n            result.append(path + [node.val])",
        "detail": "mid-range.113",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.114",
        "description": "mid-range.114",
        "peekOfCode": "class Solution:\n    def flatten(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: void Do not return anything, modify root in-place instead.\n        \"\"\"\n        while root:\n            if not root.right:\n                root.left, root.right = root.right, root.left\n            elif root.left:",
        "detail": "mid-range.114",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.115",
        "description": "mid-range.115",
        "peekOfCode": "class Solution:\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        m, n = len(s), len(t)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):",
        "detail": "mid-range.115",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1153",
        "description": "mid-range.1153",
        "peekOfCode": "class Solution:\n    def canConvert(self, str1: str, str2: str) -> bool:\n        if str1 == str2:\n            return True\n        d = {}\n        for i in range(len(str1)):\n            c1, c2 = str1[i], str2[i]\n            if c1 in d and d[c1] != c2:\n                return False\n            d[c1] = c2",
        "detail": "mid-range.1153",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "mid-range.116",
        "description": "mid-range.116",
        "peekOfCode": "class Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n\"\"\"\nclass Solution:\n    def connect(self, root: \"Node\") -> \"Node\":\n        if not root:",
        "detail": "mid-range.116",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.116",
        "description": "mid-range.116",
        "peekOfCode": "class Solution:\n    def connect(self, root: \"Node\") -> \"Node\":\n        if not root:\n            return None\n        dummy = root\n        queue = [root]\n        while queue:\n            node = queue.pop()\n            if node.right:\n                if node.next:",
        "detail": "mid-range.116",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "mid-range.117",
        "description": "mid-range.117",
        "peekOfCode": "class Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n\"\"\"\nclass Solution:\n    def connect(self, root: \"Node\") -> \"Node\":\n        if not root:",
        "detail": "mid-range.117",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.117",
        "description": "mid-range.117",
        "peekOfCode": "class Solution:\n    def connect(self, root: \"Node\") -> \"Node\":\n        if not root:\n            return None\n        result = curr = root\n        head = root\n        while head:\n            curr = head\n            head = None\n            prev = None",
        "detail": "mid-range.117",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.118",
        "description": "mid-range.118",
        "peekOfCode": "class Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        s0 = [1]\n        result = [s0]\n        for i in range(1, numRows):\n            s = [x + y for x, y in zip([0] + s0, s0 + [0])]",
        "detail": "mid-range.118",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1189",
        "description": "mid-range.1189",
        "peekOfCode": "class Solution(object):\n    def maxNumberOfBalloons(self, text):\n        \"\"\"\n        :type text: str\n        :rtype: int\n        \"\"\"\n        if not text:\n            return 0\n        import collections\n        cnt = collections.Counter(text)",
        "detail": "mid-range.1189",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.119",
        "description": "mid-range.119",
        "peekOfCode": "class Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0:\n            return [1]\n        s = [1]\n        for i in range(1, rowIndex + 1):\n            s = [sum(x) for x in zip([0] + s, s + [0])]\n        return s",
        "detail": "mid-range.119",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1190",
        "description": "mid-range.1190",
        "peekOfCode": "class Solution:\n    def reverseParentheses(self, s: str) -> str:\n        s = list(s)\n        stack = []\n        result = \"\"\n        for i in range(len(s)):\n            if s[i] == \"(\":\n                stack.append(i)\n            elif s[i] == \")\":\n                prev = stack.pop()",
        "detail": "mid-range.1190",
        "documentation": {}
    },
    {
        "label": "teller",
        "kind": 5,
        "importPath": "mid-range.11b-stackqueue",
        "description": "mid-range.11b-stackqueue",
        "peekOfCode": "teller = []\nteller.append(\"Greet Customer\")\nprint(teller)\nteller.pop()\nprint(teller)\nteller.append(\"Process Deposit\")\nprint(teller)\nteller.append(\"Phone Ringing\")\nprint(teller)\nteller.pop()",
        "detail": "mid-range.11b-stackqueue",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "mid-range.11VoteOrNot",
        "description": "mid-range.11VoteOrNot",
        "peekOfCode": "age = int(input(\"Enter the age of the person: \"))\nif age >= 18:\n    print(\"Person can vote\")\nelse:\n    print(\"Person cannot vote\")",
        "detail": "mid-range.11VoteOrNot",
        "documentation": {}
    },
    {
        "label": "isLucky",
        "kind": 2,
        "importPath": "mid-range.11_-_isLucky",
        "description": "mid-range.11_-_isLucky",
        "peekOfCode": "def isLucky(n):\n    string = str(n)\n    top = [int(x) for x in string[: len(string) // 2]]\n    bottom = [int(x) for x in string[len(string) // 2 :]]\n    return sum(top) == sum(bottom)",
        "detail": "mid-range.11_-_isLucky",
        "documentation": {}
    },
    {
        "label": "sortByHeight",
        "kind": 2,
        "importPath": "mid-range.12 - sortByHeight",
        "description": "mid-range.12 - sortByHeight",
        "peekOfCode": "def sortByHeight(a):\n    treePositions = [x for x in range(len(a)) if a[x] == -1]\n    people = sorted([x for x in a if x != -1])\n    for tree in treePositions:\n        people.insert(tree, -1)\n    return people",
        "detail": "mid-range.12 - sortByHeight",
        "documentation": {}
    },
    {
        "label": "titles1",
        "kind": 5,
        "importPath": "mid-range.12-built-ins-all-any",
        "description": "mid-range.12-built-ins-all-any",
        "peekOfCode": "titles1 = [\"Mr\", \"Mrs\", \"Ms\"]\ntitles2 = [\"Mr\", \"Mrs\", \"Ms\", \"\"]\ntitles3 = []\nprint(all(titles1), titles1)\nprint(all(titles2), titles2)\nprint(all(titles3), titles3)\nprint(\"any() - looking for any item to be true\")\nfeedback1 = [\"\", \"\", \"\", \"\"]\nfeedback2 = [\"So much fun!\", \"\", \"\", \"\"]\nfeedback3 = []",
        "detail": "mid-range.12-built-ins-all-any",
        "documentation": {}
    },
    {
        "label": "titles2",
        "kind": 5,
        "importPath": "mid-range.12-built-ins-all-any",
        "description": "mid-range.12-built-ins-all-any",
        "peekOfCode": "titles2 = [\"Mr\", \"Mrs\", \"Ms\", \"\"]\ntitles3 = []\nprint(all(titles1), titles1)\nprint(all(titles2), titles2)\nprint(all(titles3), titles3)\nprint(\"any() - looking for any item to be true\")\nfeedback1 = [\"\", \"\", \"\", \"\"]\nfeedback2 = [\"So much fun!\", \"\", \"\", \"\"]\nfeedback3 = []\nprint(any(feedback1), feedback1)",
        "detail": "mid-range.12-built-ins-all-any",
        "documentation": {}
    },
    {
        "label": "titles3",
        "kind": 5,
        "importPath": "mid-range.12-built-ins-all-any",
        "description": "mid-range.12-built-ins-all-any",
        "peekOfCode": "titles3 = []\nprint(all(titles1), titles1)\nprint(all(titles2), titles2)\nprint(all(titles3), titles3)\nprint(\"any() - looking for any item to be true\")\nfeedback1 = [\"\", \"\", \"\", \"\"]\nfeedback2 = [\"So much fun!\", \"\", \"\", \"\"]\nfeedback3 = []\nprint(any(feedback1), feedback1)\nprint(any(feedback2), feedback2)",
        "detail": "mid-range.12-built-ins-all-any",
        "documentation": {}
    },
    {
        "label": "feedback1",
        "kind": 5,
        "importPath": "mid-range.12-built-ins-all-any",
        "description": "mid-range.12-built-ins-all-any",
        "peekOfCode": "feedback1 = [\"\", \"\", \"\", \"\"]\nfeedback2 = [\"So much fun!\", \"\", \"\", \"\"]\nfeedback3 = []\nprint(any(feedback1), feedback1)\nprint(any(feedback2), feedback2)\nprint(any(feedback3), feedback3)",
        "detail": "mid-range.12-built-ins-all-any",
        "documentation": {}
    },
    {
        "label": "feedback2",
        "kind": 5,
        "importPath": "mid-range.12-built-ins-all-any",
        "description": "mid-range.12-built-ins-all-any",
        "peekOfCode": "feedback2 = [\"So much fun!\", \"\", \"\", \"\"]\nfeedback3 = []\nprint(any(feedback1), feedback1)\nprint(any(feedback2), feedback2)\nprint(any(feedback3), feedback3)",
        "detail": "mid-range.12-built-ins-all-any",
        "documentation": {}
    },
    {
        "label": "feedback3",
        "kind": 5,
        "importPath": "mid-range.12-built-ins-all-any",
        "description": "mid-range.12-built-ins-all-any",
        "peekOfCode": "feedback3 = []\nprint(any(feedback1), feedback1)\nprint(any(feedback2), feedback2)\nprint(any(feedback3), feedback3)",
        "detail": "mid-range.12-built-ins-all-any",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.120",
        "description": "mid-range.120",
        "peekOfCode": "class Solution:\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        dp = [0] * (len(triangle) + 1)\n        for row in triangle[::-1]:\n            for j in range(len(row)):\n                dp[j] = min(dp[j], dp[j + 1]) + row[j]",
        "detail": "mid-range.120",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1200",
        "description": "mid-range.1200",
        "peekOfCode": "class Solution(object):\n    def minimumAbsDifference(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        if not arr:\n            return []\n        arr.sort()\n        mindiff = arr[1] - arr[0]",
        "detail": "mid-range.1200",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.121",
        "description": "mid-range.121",
        "peekOfCode": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        if not prices or len(prices) < 2:\n            return 0\n        ret = 0\n        buy = prices[0]\n        for price in prices[1:]:\n            buy = min(price, buy)\n            ret = max(ret, price - buy)\n        return ret",
        "detail": "mid-range.121",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1216",
        "description": "mid-range.1216",
        "peekOfCode": "class Solution:\n    def isValidPalindrome(self, s: str, k: int) -> bool:\n        prev, n = [0], len(s)\n        for i in range(n):\n            prev.append(prev[i] + 1)\n        s2 = s[::-1]\n        for i in range(n):\n            curr = [i + 1]\n            for j in range(n):\n                if s[i] == s2[j]:",
        "detail": "mid-range.1216",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.122",
        "description": "mid-range.122",
        "peekOfCode": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        return sum(max(prices[i + 1] - prices[i], 0) for i in range(len(prices) - 1))",
        "detail": "mid-range.122",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.123",
        "description": "mid-range.123",
        "peekOfCode": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        buy1, buy2 = float(\"-inf\"), float(\"-inf\")\n        sell1, sell2 = 0, 0\n        for price in prices:\n            buy1 = max(buy1, -price)\n            sell1 = max(sell1, buy1 + price)\n            buy2 = max(buy2, sell1 - price)\n            sell2 = max(sell2, buy2 + price)\n        return sell2",
        "detail": "mid-range.123",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.124",
        "description": "mid-range.124",
        "peekOfCode": "class Solution:\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        self.res = root.val\n        self.dfs(root)\n        return self.res\n    def dfs(self, node):",
        "detail": "mid-range.124",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1240",
        "description": "mid-range.1240",
        "peekOfCode": "class Solution:\n    def tilingRectangle(self, n: int, m: int) -> int:\n        self.result = n * m\n        def dfs(heights, moves):\n            if moves > self.result:\n                return\n            if all(h == n for h in heights):\n                self.result = min(self.result, moves)\n                return\n            min_height = min(heights)",
        "detail": "mid-range.1240",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1249",
        "description": "mid-range.1249",
        "peekOfCode": "class Solution:\n    def minRemoveToMakeValid(self, s: str) -> str:\n        stack = []\n        removal = set()\n        for i in range(len(s)):\n            if s[i] == \"(\":\n                stack.append(i)\n            elif s[i] == \")\":\n                if not stack:\n                    removal.add(i)",
        "detail": "mid-range.1249",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.125",
        "description": "mid-range.125",
        "peekOfCode": "class Solution:\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        ss = \"\".join(c.lower() for c in s if c.isalnum())\n        return ss[::-1] == ss",
        "detail": "mid-range.125",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.127",
        "description": "mid-range.127",
        "peekOfCode": "class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        wordList = set(wordList)\n        if not wordList or endWord not in wordList:\n            return 0\n        wordList.discard(beginWord)\n        q1, q2 = {beginWord}, {endWord}\n        step = 1\n        while q1 and q2:\n            temp = set()",
        "detail": "mid-range.127",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.128",
        "description": "mid-range.128",
        "peekOfCode": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        result = 0\n        nums = set(nums)\n        for num in nums:\n            if num - 1 not in nums:",
        "detail": "mid-range.128",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1281",
        "description": "mid-range.1281",
        "peekOfCode": "class Solution(object):\n    def subtractProductAndSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        from functools import reduce\n        from operator import mul\n        digits = [int(x) for x in str(n)]\n        return reduce(mul, digits) - sum(digits)",
        "detail": "mid-range.1281",
        "documentation": {}
    },
    {
        "label": "Result",
        "kind": 5,
        "importPath": "mid-range.1281",
        "description": "mid-range.1281",
        "peekOfCode": "Result = 24 - 9 = 15\nExample 2:\nInput: n = 4421\nOutput: 21\nExplanation: \nProduct of digits = 4 * 4 * 2 * 1 = 32 \nSum of digits = 4 + 4 + 2 + 1 = 11 \nResult = 32 - 11 = 21\n\"\"\"\nclass Solution(object):",
        "detail": "mid-range.1281",
        "documentation": {}
    },
    {
        "label": "Result",
        "kind": 5,
        "importPath": "mid-range.1281",
        "description": "mid-range.1281",
        "peekOfCode": "Result = 32 - 11 = 21\n\"\"\"\nclass Solution(object):\n    def subtractProductAndSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        from functools import reduce\n        from operator import mul",
        "detail": "mid-range.1281",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1282",
        "description": "mid-range.1282",
        "peekOfCode": "class Solution(object):\n    def groupThePeople(self, groupSizes):\n        \"\"\"\n        :type groupSizes: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        count = collections.defaultdict(list)\n        for i, size in enumerate(groupSizes):\n            count[size].append(i)\n        result = []",
        "detail": "mid-range.1282",
        "documentation": {}
    },
    {
        "label": "CombinationIterator",
        "kind": 6,
        "importPath": "mid-range.1286",
        "description": "mid-range.1286",
        "peekOfCode": "class CombinationIterator:\n    def __init__(self, characters: str, combinationLength: int):\n        self.characters = characters\n        self.combinationLength = combinationLength\n        self.combinations = self.getCombinations()\n    def next(self) -> str:\n        return self.combinations.pop()\n    def hasNext(self) -> bool:\n        return self.combinations\n    def getCombinations(self):",
        "detail": "mid-range.1286",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1288",
        "description": "mid-range.1288",
        "peekOfCode": "class Solution:\n    def removeCoveredIntervals(self, intervals: List[List[int]]) -> int:\n        intervals.sort(key=lambda x: (x[0], -x[1]))\n        result = right = 0\n        for interval in intervals:\n            result += interval[1] > right\n            right = max(right, interval[1])\n        return result",
        "detail": "mid-range.1288",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.129",
        "description": "mid-range.129",
        "peekOfCode": "class Solution:\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        return self.getSum(root, 0)\n    def getSum(self, node, s):\n        if not node:\n            return 0",
        "detail": "mid-range.129",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1290",
        "description": "mid-range.1290",
        "peekOfCode": "class Solution(object):\n    def getDecimalValue(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: int\n        \"\"\"\n        result = \"\"\n        if not head:\n            return 0\n        while head:",
        "detail": "mid-range.1290",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1291",
        "description": "mid-range.1291",
        "peekOfCode": "class Solution:\n    def sequentialDigits(self, low: int, high: int) -> List[int]:\n        def generate(digit):\n            n = 0\n            while n < high and digit < 10:\n                n = n * 10 + digit\n                if low <= n <= high:\n                    yield n\n                digit += 1\n        return sorted(num for digit in range(1, 10) for num in generate(digit))",
        "detail": "mid-range.1291",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1295",
        "description": "mid-range.1295",
        "peekOfCode": "class Solution(object):\n    def findNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        return len([num for num in nums if len(str(num)) % 2 == 0])",
        "detail": "mid-range.1295",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1296",
        "description": "mid-range.1296",
        "peekOfCode": "class Solution(object):\n    def isPossibleDivide(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        from collections import Counter\n        count_map = Counter(nums)\n        for num in sorted(count_map.keys()):",
        "detail": "mid-range.1296",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.12DisplayTenNumbers",
        "description": "mid-range.12DisplayTenNumbers",
        "peekOfCode": "a = 1\nwhile a <= 10:\n    print(a)\n    a = a + 1",
        "detail": "mid-range.12DisplayTenNumbers",
        "documentation": {}
    },
    {
        "label": "sortByHeight",
        "kind": 2,
        "importPath": "mid-range.12_-_sortByHeight",
        "description": "mid-range.12_-_sortByHeight",
        "peekOfCode": "def sortByHeight(a):\n    treePositions = [x for x in range(len(a)) if a[x] == -1]\n    people = sorted([x for x in a if x != -1])\n    for tree in treePositions:\n        people.insert(tree, -1)\n    return people",
        "detail": "mid-range.12_-_sortByHeight",
        "documentation": {}
    },
    {
        "label": "changeX",
        "kind": 2,
        "importPath": "mid-range.12_scopes",
        "description": "mid-range.12_scopes",
        "peekOfCode": "def changeX():\n    # tell Python to use x in the global scope\n    global x\n    x = 99\nchangeX()\n# This prints 12. What do we have to modify in changeX() to get it to print 99?\nprint(x)\n# This nested function has a similar problem.\ndef outer():\n    y = 120",
        "detail": "mid-range.12_scopes",
        "documentation": {}
    },
    {
        "label": "outer",
        "kind": 2,
        "importPath": "mid-range.12_scopes",
        "description": "mid-range.12_scopes",
        "peekOfCode": "def outer():\n    y = 120\n    def inner():\n        # tell Python to use y from the containing scope\n        nonlocal y\n        y = 999\n    inner()\n    # This prints 120. What do we have to change in inner() to get it to print\n    # 999? Google \"python nested function scope\".\n    print(y)",
        "detail": "mid-range.12_scopes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.12_scopes",
        "description": "mid-range.12_scopes",
        "peekOfCode": "x = 12\ndef changeX():\n    # tell Python to use x in the global scope\n    global x\n    x = 99\nchangeX()\n# This prints 12. What do we have to modify in changeX() to get it to print 99?\nprint(x)\n# This nested function has a similar problem.\ndef outer():",
        "detail": "mid-range.12_scopes",
        "documentation": {}
    },
    {
        "label": "reverseParentheses",
        "kind": 2,
        "importPath": "mid-range.13 - reverseParentheses",
        "description": "mid-range.13 - reverseParentheses",
        "peekOfCode": "def reverseParentheses(s):\n    while \"(\" in s:\n        match = re.search(\"\\([^()]*\\)\", s)\n        match_string = match.group(0)[1 : len(match.group(0)) - 1]\n        reversed_match_string = match_string[::-1]\n        s = s[: match.start()] + reversed_match_string + s[match.end() :]\n    return s",
        "detail": "mid-range.13 - reverseParentheses",
        "documentation": {}
    },
    {
        "label": "isA",
        "kind": 2,
        "importPath": "mid-range.13-built-ins-filter-map-zip",
        "description": "mid-range.13-built-ins-filter-map-zip",
        "peekOfCode": "def isA(num):\n    return num >= 90\naScores = filter(isA, scores)\nprint(aScores)\nprint(list(aScores))\ndef getGrade(num):\n    if num >= 90:\n        return \"A\"\n    elif num < 90 and num >= 80:\n        return \"B\"",
        "detail": "mid-range.13-built-ins-filter-map-zip",
        "documentation": {}
    },
    {
        "label": "getGrade",
        "kind": 2,
        "importPath": "mid-range.13-built-ins-filter-map-zip",
        "description": "mid-range.13-built-ins-filter-map-zip",
        "peekOfCode": "def getGrade(num):\n    if num >= 90:\n        return \"A\"\n    elif num < 90 and num >= 80:\n        return \"B\"\n    elif num < 80 and num >= 70:\n        return \"C\"\n    elif num < 70 and num >= 60:\n        return \"D\"\n    else:",
        "detail": "mid-range.13-built-ins-filter-map-zip",
        "documentation": {}
    },
    {
        "label": "scores",
        "kind": 5,
        "importPath": "mid-range.13-built-ins-filter-map-zip",
        "description": "mid-range.13-built-ins-filter-map-zip",
        "peekOfCode": "scores = [90, 86, 75, 91, 62, 99, 88, 90]\nprint(scores)\ndef isA(num):\n    return num >= 90\naScores = filter(isA, scores)\nprint(aScores)\nprint(list(aScores))\ndef getGrade(num):\n    if num >= 90:\n        return \"A\"",
        "detail": "mid-range.13-built-ins-filter-map-zip",
        "documentation": {}
    },
    {
        "label": "aScores",
        "kind": 5,
        "importPath": "mid-range.13-built-ins-filter-map-zip",
        "description": "mid-range.13-built-ins-filter-map-zip",
        "peekOfCode": "aScores = filter(isA, scores)\nprint(aScores)\nprint(list(aScores))\ndef getGrade(num):\n    if num >= 90:\n        return \"A\"\n    elif num < 90 and num >= 80:\n        return \"B\"\n    elif num < 80 and num >= 70:\n        return \"C\"",
        "detail": "mid-range.13-built-ins-filter-map-zip",
        "documentation": {}
    },
    {
        "label": "grades",
        "kind": 5,
        "importPath": "mid-range.13-built-ins-filter-map-zip",
        "description": "mid-range.13-built-ins-filter-map-zip",
        "peekOfCode": "grades = list(map(getGrade, scores))\nprint(grades)\nprint(\"ZIPPED GRADES AND SCORES\")\ncombined = list(zip(scores, grades))\nprint(combined)",
        "detail": "mid-range.13-built-ins-filter-map-zip",
        "documentation": {}
    },
    {
        "label": "combined",
        "kind": 5,
        "importPath": "mid-range.13-built-ins-filter-map-zip",
        "description": "mid-range.13-built-ins-filter-map-zip",
        "peekOfCode": "combined = list(zip(scores, grades))\nprint(combined)",
        "detail": "mid-range.13-built-ins-filter-map-zip",
        "documentation": {}
    },
    {
        "label": "bottles",
        "kind": 2,
        "importPath": "mid-range.13-MilkBottles",
        "description": "mid-range.13-MilkBottles",
        "peekOfCode": "def bottles(n):\n    bottles_to_drink = int((3 * n - 1) / 2)\n    return bottles_to_drink\nprint(bottles(18))",
        "detail": "mid-range.13-MilkBottles",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.13",
        "description": "mid-range.13",
        "peekOfCode": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        maps = {\"I\": 1, \"V\": 5, \"X\": 10, \"L\": 50, \"C\": 100, \"D\": 500, \"M\": 1000}\n        result = 0\n        for i in range(len(s)):\n            if i >= 1 and maps[s[i - 1]] < maps[s[i]]:",
        "detail": "mid-range.13",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1305",
        "description": "mid-range.1305",
        "peekOfCode": "class Solution:\n    def getAllElements(self, root1: TreeNode, root2: TreeNode) -> List[int]:\n        result = []\n        curr1, curr2 = root1, root2\n        stack1, stack2 = [], []\n        while stack1 or stack2 or curr1 or curr2:\n            while curr1:\n                stack1.append(curr1)\n                curr1 = curr1.left\n            while curr2:",
        "detail": "mid-range.1305",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.131",
        "description": "mid-range.131",
        "peekOfCode": "class Solution:\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        res = []\n        self.dfs(res, [], s)\n        return res\n    def dfs(self, res, path, s):",
        "detail": "mid-range.131",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.132",
        "description": "mid-range.132",
        "peekOfCode": "class Solution:\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s or len(s) == 0:\n            return 0\n        n = len(s)\n        dp = list(range(n))",
        "detail": "mid-range.132",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "mid-range.133",
        "description": "mid-range.133",
        "peekOfCode": "class Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n\"\"\"\nfrom collections import deque\nclass Solution:\n    def cloneGraph(self, node: \"Node\") -> \"Node\":\n        if not node:\n            return None",
        "detail": "mid-range.133",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.133",
        "description": "mid-range.133",
        "peekOfCode": "class Solution:\n    def cloneGraph(self, node: \"Node\") -> \"Node\":\n        if not node:\n            return None\n        visited = {node: Node(node.val)}\n        queue = deque([node])\n        while queue:\n            curr = queue.popleft()\n            for n in curr.neighbors:\n                if n not in visited:",
        "detail": "mid-range.133",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.134",
        "description": "mid-range.134",
        "peekOfCode": "class Solution:\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        start, total, tank = 0, 0, 0\n        for i in range(len(gas)):\n            curr = gas[i] - cost[i]",
        "detail": "mid-range.134",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.135",
        "description": "mid-range.135",
        "peekOfCode": "class Solution:\n    # time: O(n)\n    # space: O(n)\n    # def candy(self, ratings):\n    #     \"\"\"\n    #     :type ratings: List[int]\n    #     :rtype: int\n    #     \"\"\"\n    #     res = [1]*len(ratings)\n    #     for i in range(1, len(ratings)):",
        "detail": "mid-range.135",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1370",
        "description": "mid-range.1370",
        "peekOfCode": "class Solution:\n    def sortString(self, s: str) -> str:\n        result, counter = \"\", Counter(s)\n        letters = string.ascii_lowercase\n        while len(result) < len(s):\n            for ss in [letters, letters[::-1]]:\n                for c in ss:\n                    if counter[c] > 0:\n                        counter[c] -= 1\n                        result += c",
        "detail": "mid-range.1370",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1376",
        "description": "mid-range.1376",
        "peekOfCode": "class Solution:\n    def numOfMinutes(\n        self, n: int, headID: int, manager: List[int], informTime: List[int]\n    ) -> int:\n        children = {i: [] for i in range(n)}\n        for child, parent in enumerate(manager):\n            if parent >= 0:\n                children[parent].append(child)\n        def dfs(i):\n            return max([dfs(child) for child in children[i]], default=0) + informTime[i]",
        "detail": "mid-range.1376",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "mid-range.138",
        "description": "mid-range.138",
        "peekOfCode": "class Node:\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n        self.val = int(x)\n        self.next = next\n        self.random = random\n\"\"\"\nfrom collections import defaultdict\nclass Solution:\n    def copyRandomList(self, head: \"Node\") -> \"Node\":\n        d = defaultdict(lambda: Node(0, None, None))",
        "detail": "mid-range.138",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.138",
        "description": "mid-range.138",
        "peekOfCode": "class Solution:\n    def copyRandomList(self, head: \"Node\") -> \"Node\":\n        d = defaultdict(lambda: Node(0, None, None))\n        d[None] = None\n        curr = head\n        while curr:\n            d[curr].val = curr.val\n            d[curr].next = d[curr.next]\n            d[curr].random = d[curr.random]\n            curr = curr.next",
        "detail": "mid-range.138",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.139",
        "description": "mid-range.139",
        "peekOfCode": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        wordDict = set(wordDict)\n        return self.dfs(s, wordDict, {})\n    def dfs(self, s, wordDict, cache):\n        if s in cache:\n            return cache[s]\n        if s in wordDict:\n            return True\n        for i in range(1, len(s)):",
        "detail": "mid-range.139",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.139",
        "description": "mid-range.139",
        "peekOfCode": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        wordDict = set(wordDict)\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        for j in range(1, len(s) + 1):\n            for i in range(j):\n                word = s[i:j]\n                if word in wordDict and dp[i]:\n                    dp[j] = True",
        "detail": "mid-range.139",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "mid-range.13FibonacciSeries",
        "description": "mid-range.13FibonacciSeries",
        "peekOfCode": "number = int(input(\"Enter the number: \"))\n# declaring initial values\nf1 = 0\nf2 = 1\n# initializing count\ncount = 0\n# applying condition for fibonacci\nif number <= 0:\n    print(\"Enter a valid +ve number: \")\nelif number == 1:",
        "detail": "mid-range.13FibonacciSeries",
        "documentation": {}
    },
    {
        "label": "f1",
        "kind": 5,
        "importPath": "mid-range.13FibonacciSeries",
        "description": "mid-range.13FibonacciSeries",
        "peekOfCode": "f1 = 0\nf2 = 1\n# initializing count\ncount = 0\n# applying condition for fibonacci\nif number <= 0:\n    print(\"Enter a valid +ve number: \")\nelif number == 1:\n    print(\"FIbonacci series for 1 number is: \", number)\nelse:",
        "detail": "mid-range.13FibonacciSeries",
        "documentation": {}
    },
    {
        "label": "f2",
        "kind": 5,
        "importPath": "mid-range.13FibonacciSeries",
        "description": "mid-range.13FibonacciSeries",
        "peekOfCode": "f2 = 1\n# initializing count\ncount = 0\n# applying condition for fibonacci\nif number <= 0:\n    print(\"Enter a valid +ve number: \")\nelif number == 1:\n    print(\"FIbonacci series for 1 number is: \", number)\nelse:\n    print(\"The fibonacci series for the number entered is: \")",
        "detail": "mid-range.13FibonacciSeries",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "mid-range.13FibonacciSeries",
        "description": "mid-range.13FibonacciSeries",
        "peekOfCode": "count = 0\n# applying condition for fibonacci\nif number <= 0:\n    print(\"Enter a valid +ve number: \")\nelif number == 1:\n    print(\"FIbonacci series for 1 number is: \", number)\nelse:\n    print(\"The fibonacci series for the number entered is: \")\n    while count < number:\n        print(f1, end=\" , \")",
        "detail": "mid-range.13FibonacciSeries",
        "documentation": {}
    },
    {
        "label": "reverseParentheses",
        "kind": 2,
        "importPath": "mid-range.13_-_reverseParentheses",
        "description": "mid-range.13_-_reverseParentheses",
        "peekOfCode": "def reverseParentheses(s):\n    while \"(\" in s:\n        match = re.search(\"\\([^()]*\\)\", s)\n        match_string = match.group(0)[1 : len(match.group(0)) - 1]\n        reversed_match_string = match_string[::-1]\n        s = s[: match.start()] + reversed_match_string + s[match.end() :]\n    return s",
        "detail": "mid-range.13_-_reverseParentheses",
        "documentation": {}
    },
    {
        "label": "fp",
        "kind": 5,
        "importPath": "mid-range.13_file_io",
        "description": "mid-range.13_file_io",
        "peekOfCode": "fp = open(\"bar.txt\", \"w\")\n# %%\nfp.write(\n    \"\"\"Line 1\n            Line 2\n            Line 3\"\"\"\n)",
        "detail": "mid-range.13_file_io",
        "documentation": {}
    },
    {
        "label": "random_name_generator",
        "kind": 2,
        "importPath": "mid-range.13_random_name_generator",
        "description": "mid-range.13_random_name_generator",
        "peekOfCode": "def random_name_generator(first, second, x):\n    \"\"\"\n        Generates random names.\n        Arguments:\n         - list of first names\n         - list of last names\n         - number of random names\n    \"\"\"\n    names = []\n    for i in range(x):",
        "detail": "mid-range.13_random_name_generator",
        "documentation": {}
    },
    {
        "label": "first_names",
        "kind": 5,
        "importPath": "mid-range.13_random_name_generator",
        "description": "mid-range.13_random_name_generator",
        "peekOfCode": "first_names = [\"Drew\", \"Mike\", \"Landon\", \"Jeremy\", \"Tyler\", \"Tom\", \"Avery\"]\nlast_names = [\"Smith\", \"Jones\", \"Brighton\", \"Taylor\"]\nnames = random_name_generator(first_names, last_names, 5)\nprint(\"\\n\".join(names))",
        "detail": "mid-range.13_random_name_generator",
        "documentation": {}
    },
    {
        "label": "last_names",
        "kind": 5,
        "importPath": "mid-range.13_random_name_generator",
        "description": "mid-range.13_random_name_generator",
        "peekOfCode": "last_names = [\"Smith\", \"Jones\", \"Brighton\", \"Taylor\"]\nnames = random_name_generator(first_names, last_names, 5)\nprint(\"\\n\".join(names))",
        "detail": "mid-range.13_random_name_generator",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "mid-range.13_random_name_generator",
        "description": "mid-range.13_random_name_generator",
        "peekOfCode": "names = random_name_generator(first_names, last_names, 5)\nprint(\"\\n\".join(names))",
        "detail": "mid-range.13_random_name_generator",
        "documentation": {}
    },
    {
        "label": "sorter",
        "kind": 2,
        "importPath": "mid-range.14-built-ins-custom-sort",
        "description": "mid-range.14-built-ins-custom-sort",
        "peekOfCode": "def sorter(user):\n    return user[\"displayName\"].lower()\nusers.sort(key=sorter)\nprint(users)\nreverseUsers = sorted(users, key=sorter, reverse=True)\nprint(reverseUsers)",
        "detail": "mid-range.14-built-ins-custom-sort",
        "documentation": {}
    },
    {
        "label": "users",
        "kind": 5,
        "importPath": "mid-range.14-built-ins-custom-sort",
        "description": "mid-range.14-built-ins-custom-sort",
        "peekOfCode": "users = [\n    {\"id\": 12323, \"displayName\": \"Joe Smith\", \"email\": \"joe.smith@here.com\"},\n    {\"id\": 22312, \"displayName\": \"Bob Smith\", \"email\": \"bob.smith@here.com\"},\n    {\"id\": 37373, \"displayName\": \"angel chen\", \"email\": \"angel.chen@here.com\"},\n]\nprint(users)\ndef sorter(user):\n    return user[\"displayName\"].lower()\nusers.sort(key=sorter)\nprint(users)",
        "detail": "mid-range.14-built-ins-custom-sort",
        "documentation": {}
    },
    {
        "label": "reverseUsers",
        "kind": 5,
        "importPath": "mid-range.14-built-ins-custom-sort",
        "description": "mid-range.14-built-ins-custom-sort",
        "peekOfCode": "reverseUsers = sorted(users, key=sorter, reverse=True)\nprint(reverseUsers)",
        "detail": "mid-range.14-built-ins-custom-sort",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.14",
        "description": "mid-range.14",
        "peekOfCode": "class Solution(object):\n    def longestCommonPrefix(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if not strs:\n            return \"\"\n        end_index = 0\n        for group in zip(*strs):",
        "detail": "mid-range.14",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.140",
        "description": "mid-range.140",
        "peekOfCode": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        return self.dfs(s, set(wordDict), dict())\n    def dfs(self, s, wordDict, cache):\n        if s in cache:\n            return cache[s]\n        if len(s) == 0:\n            return [\"\"]\n        result = []\n        for i in range(1, len(s) + 1):",
        "detail": "mid-range.140",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.141",
        "description": "mid-range.141",
        "peekOfCode": "class Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head:\n            return False\n        slow, fast = head, head\n        while fast and fast.next:",
        "detail": "mid-range.141",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.142",
        "description": "mid-range.142",
        "peekOfCode": "class Solution(object):\n    def detectCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        slow, fast = head, head.next\n        while fast and fast.next:",
        "detail": "mid-range.142",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1428",
        "description": "mid-range.1428",
        "peekOfCode": "class Solution:\n    def leftMostColumnWithOne(self, binaryMatrix: \"BinaryMatrix\") -> int:\n        m, n = binaryMatrix.dimensions()\n        result = n\n        for i in range(m):\n            left, right = 0, result\n            while left < right:\n                mid = left + (right - left) // 2\n                if binaryMatrix.get(i, mid) == 1:\n                    right = mid",
        "detail": "mid-range.1428",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.143",
        "description": "mid-range.143",
        "peekOfCode": "class Solution:\n    def reorderList(self, head: ListNode) -> None:\n        \"\"\"\n        Do not return anything, modify head in-place instead.\n        \"\"\"\n        if not head:\n            return\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next",
        "detail": "mid-range.143",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.144",
        "description": "mid-range.144",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]",
        "detail": "mid-range.144",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.144",
        "description": "mid-range.144",
        "peekOfCode": "class Solution:\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        if root:\n            return (\n                [root.val]\n                + self.preorderTraversal(root.left)",
        "detail": "mid-range.144",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.145",
        "description": "mid-range.145",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]",
        "detail": "mid-range.145",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.145",
        "description": "mid-range.145",
        "peekOfCode": "class Solution:\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        if root:\n            return (\n                self.postorderTraversal(root.left)\n                + self.postorderTraversal(root.right)",
        "detail": "mid-range.145",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.147",
        "description": "mid-range.147",
        "peekOfCode": "class Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        sortedList = head\n        head = head.next",
        "detail": "mid-range.147",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.149",
        "description": "mid-range.149",
        "peekOfCode": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        n = len(points)\n        if n <= 2:\n            return n\n        result = 0\n        for i in range(n):\n            curmax = 0\n            overlap = 0\n            d = dict()",
        "detail": "mid-range.149",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "mid-range.14EvenNum",
        "description": "mid-range.14EvenNum",
        "peekOfCode": "i = 1\nwhile i <= 10:\n    if i % 2 == 0:\n        print(i)\n    i = i + 1",
        "detail": "mid-range.14EvenNum",
        "documentation": {}
    },
    {
        "label": "addBorder",
        "kind": 2,
        "importPath": "mid-range.15 - addBorder",
        "description": "mid-range.15 - addBorder",
        "peekOfCode": "def addBorder(picture):\n    picture = [\"*\" + string + \"*\" for string in picture]\n    picture = [(\"*\" * len(picture[0]))] + picture + [(\"*\" * len(picture[0]))]\n    return picture",
        "detail": "mid-range.15 - addBorder",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.15",
        "description": "mid-range.15",
        "peekOfCode": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        nums.sort()\n        result = []\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:",
        "detail": "mid-range.15",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.150",
        "description": "mid-range.150",
        "peekOfCode": "class Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        stack = []\n        for token in tokens:\n            if token not in {\"+\", \"-\", \"*\", \"/\"}:\n                stack.append(int(token))\n            else:\n                r, l = stack.pop(), stack.pop()\n                if token == \"+\":\n                    stack.append(l + r)",
        "detail": "mid-range.150",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.151",
        "description": "mid-range.151",
        "peekOfCode": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ss = \" \".join(s.split()[::-1])\n        return ss",
        "detail": "mid-range.151",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.152",
        "description": "mid-range.152",
        "peekOfCode": "class Solution:\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        result = big = small = nums[0]\n        for num in nums[1:]:",
        "detail": "mid-range.152",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.153",
        "description": "mid-range.153",
        "peekOfCode": "class Solution:\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n        l, r = 0, len(nums) - 1\n        while l < r:",
        "detail": "mid-range.153",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.154",
        "description": "mid-range.154",
        "peekOfCode": "class Solution:\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n        l, r = 0, len(nums) - 1\n        while l < r:",
        "detail": "mid-range.154",
        "documentation": {}
    },
    {
        "label": "MinStack",
        "kind": 6,
        "importPath": "mid-range.155",
        "description": "mid-range.155",
        "peekOfCode": "class MinStack:\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        self.stack = []\n    def push(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: void",
        "detail": "mid-range.155",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1557",
        "description": "mid-range.1557",
        "peekOfCode": "class Solution:\n    def findSmallestSetOfVertices(self, n: int, edges: List[List[int]]) -> List[int]:\n        values = [0] * n\n        for edge in edges:\n            values[edge[1]] += 1\n        return [x for x in range(n) if values[x] == 0]",
        "detail": "mid-range.1557",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.157",
        "description": "mid-range.157",
        "peekOfCode": "class Solution:\n    def read(self, buf, n):\n        \"\"\"\n        :type buf: Destination buffer (List[str])\n        :type n: Number of characters to read (int)\n        :rtype: The number of actual characters read (int)\n        \"\"\"\n        i = 0\n        while i < n:\n            buf4 = [\" \"] * 4",
        "detail": "mid-range.157",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "mid-range.157",
        "description": "mid-range.157",
        "peekOfCode": "file = File(\"abcdefghijk\") # File is \"abcdefghijk\", initially file pointer (fp) points to 'a'\nbuf4 = [' '] * 4 # Create buffer with enough space to store characters\nread4(buf4) # read4 returns 4. Now buf = ['a','b','c','d'], fp points to 'e'\nread4(buf4) # read4 returns 4. Now buf = ['e','f','g','h'], fp points to 'i'\nread4(buf4) # read4 returns 3. Now buf = ['i','j','k',...], fp points to end of file\n\"\"\"\nclass Solution:\n    def read(self, buf, n):\n        \"\"\"\n        :type buf: Destination buffer (List[str])",
        "detail": "mid-range.157",
        "documentation": {}
    },
    {
        "label": "buf4",
        "kind": 5,
        "importPath": "mid-range.157",
        "description": "mid-range.157",
        "peekOfCode": "buf4 = [' '] * 4 # Create buffer with enough space to store characters\nread4(buf4) # read4 returns 4. Now buf = ['a','b','c','d'], fp points to 'e'\nread4(buf4) # read4 returns 4. Now buf = ['e','f','g','h'], fp points to 'i'\nread4(buf4) # read4 returns 3. Now buf = ['i','j','k',...], fp points to end of file\n\"\"\"\nclass Solution:\n    def read(self, buf, n):\n        \"\"\"\n        :type buf: Destination buffer (List[str])\n        :type n: Number of characters to read (int)",
        "detail": "mid-range.157",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.158",
        "description": "mid-range.158",
        "peekOfCode": "class Solution:\n    def __init__(self):\n        self.q = deque()\n    def read(self, buf: List[str], n: int) -> int:\n        i = 0\n        while i < n:\n            while self.q and i < n:\n                buf[i] = self.q.popleft()\n                i += 1\n            else:",
        "detail": "mid-range.158",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.159",
        "description": "mid-range.159",
        "peekOfCode": "class Solution:\n    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:\n        d = {}\n        count = 0\n        start, end = 0, 0\n        result = 0\n        while end < len(s):\n            c = s[end]\n            d[c] = d.get(c, 0) + 1\n            if d[c] == 1:",
        "detail": "mid-range.159",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1593",
        "description": "mid-range.1593",
        "peekOfCode": "class Solution:\n    def maxUniqueSplit(self, s: str) -> int:\n        result = []\n        def dfs(path, word):\n            if not word:\n                result.append(path)\n                return\n            for i in range(1, len(word) + 1):\n                prefix, suffix = word[:i], word[i:]\n                if prefix not in path:",
        "detail": "mid-range.1593",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "mid-range.15a-input-validation1",
        "description": "mid-range.15a-input-validation1",
        "peekOfCode": "age = 1\nwhile age:\n    age = input(\"What's your age? \")\n    if age:\n        try:\n            age = int(float(age))\n            print(f\"Cool! You had {age} birthdays.\")\n        except:\n            print(\"Please enter a number\")",
        "detail": "mid-range.15a-input-validation1",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "mid-range.15b-input-validation2",
        "description": "mid-range.15b-input-validation2",
        "peekOfCode": "age = 1\nwhile age:\n    age = input(\"What's your age? \")\n    if age:\n        try:\n            age = int(float(age))\n            if age > 0 and age < 120:\n                print(f\"Cool! You had {age} birthdays.\")\n            else:\n                print(\"Out of range. Please try again.\")",
        "detail": "mid-range.15b-input-validation2",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "mid-range.15OddNum",
        "description": "mid-range.15OddNum",
        "peekOfCode": "i = 1\nwhile i <= 10:\n    if i % 2 != 0:\n        print(i)\n    i = i + 1",
        "detail": "mid-range.15OddNum",
        "documentation": {}
    },
    {
        "label": "addBorder",
        "kind": 2,
        "importPath": "mid-range.15_-_addBorder",
        "description": "mid-range.15_-_addBorder",
        "peekOfCode": "def addBorder(picture):\n    picture = [\"*\" + string + \"*\" for string in picture]\n    picture = [(\"*\" * len(picture[0]))] + picture + [(\"*\" * len(picture[0]))]\n    return picture",
        "detail": "mid-range.15_-_addBorder",
        "documentation": {}
    },
    {
        "label": "Main",
        "kind": 6,
        "importPath": "mid-range.15_check_my_environment",
        "description": "mid-range.15_check_my_environment",
        "peekOfCode": "class Main:\n    def __init__(self, configFile):\n        pass\n    def process(self):\n        print(\"ok\")\nif __name__ == \"__main__\":\n    m = Main(some_script.CONFIGFILE)\n    m.process()\n\"\"\"\nimport os",
        "detail": "mid-range.15_check_my_environment",
        "documentation": {}
    },
    {
        "label": "get_config_file",
        "kind": 2,
        "importPath": "mid-range.15_check_my_environment",
        "description": "mid-range.15_check_my_environment",
        "peekOfCode": "def get_config_file():\n    directory = os.path.dirname(__file__)\n    return {\n        \"development\": \"{}/../config/development.cfg\".format(directory),\n        \"staging\": \"{}/../config/staging.cfg\".format(directory),\n        \"production\": \"{}/../config/production.cfg\".format(directory),\n    }.get(ENVIRONMENT, None)\nCONFIGFILE = get_config_file()\nif CONFIGFILE is None:\n    sys.exit(",
        "detail": "mid-range.15_check_my_environment",
        "documentation": {}
    },
    {
        "label": "ENVIRONMENT",
        "kind": 5,
        "importPath": "mid-range.15_check_my_environment",
        "description": "mid-range.15_check_my_environment",
        "peekOfCode": "ENVIRONMENT = \"development\"\nCONFIGFILE = None\ndef get_config_file():\n    directory = os.path.dirname(__file__)\n    return {\n        \"development\": \"{}/../config/development.cfg\".format(directory),\n        \"staging\": \"{}/../config/staging.cfg\".format(directory),\n        \"production\": \"{}/../config/production.cfg\".format(directory),\n    }.get(ENVIRONMENT, None)\nCONFIGFILE = get_config_file()",
        "detail": "mid-range.15_check_my_environment",
        "documentation": {}
    },
    {
        "label": "CONFIGFILE",
        "kind": 5,
        "importPath": "mid-range.15_check_my_environment",
        "description": "mid-range.15_check_my_environment",
        "peekOfCode": "CONFIGFILE = None\ndef get_config_file():\n    directory = os.path.dirname(__file__)\n    return {\n        \"development\": \"{}/../config/development.cfg\".format(directory),\n        \"staging\": \"{}/../config/staging.cfg\".format(directory),\n        \"production\": \"{}/../config/production.cfg\".format(directory),\n    }.get(ENVIRONMENT, None)\nCONFIGFILE = get_config_file()\nif CONFIGFILE is None:",
        "detail": "mid-range.15_check_my_environment",
        "documentation": {}
    },
    {
        "label": "CONFIGFILE",
        "kind": 5,
        "importPath": "mid-range.15_check_my_environment",
        "description": "mid-range.15_check_my_environment",
        "peekOfCode": "CONFIGFILE = get_config_file()\nif CONFIGFILE is None:\n    sys.exit(\n        \"Configuration error! Unknown environment set. \\\n              Edit config.py and set appropriate environment\"\n    )\nprint(\"Config file: {}\".format(CONFIGFILE))\nif not os.path.exists(CONFIGFILE):\n    sys.exit(\"Configuration error! Config file does not exist\")\nprint(\"Config ok ....\")",
        "detail": "mid-range.15_check_my_environment",
        "documentation": {}
    },
    {
        "label": "areSimilar",
        "kind": 2,
        "importPath": "mid-range.16 - areSimilar",
        "description": "mid-range.16 - areSimilar",
        "peekOfCode": "def areSimilar(a, b):\n    diff = [i for i in range(len(a)) if a[i] != b[i]]\n    if len(diff) == 2:\n        b[diff[0]], b[diff[1]] = b[diff[1]], b[diff[0]]\n    return a == b",
        "detail": "mid-range.16 - areSimilar",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.16",
        "description": "mid-range.16",
        "peekOfCode": "class Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -> int:\n        nums.sort()\n        result = float(\"inf\")\n        for i in range(len(nums) - 2):\n            l, r = i + 1, len(nums) - 1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s == target:\n                    return target",
        "detail": "mid-range.16",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.160",
        "description": "mid-range.160",
        "peekOfCode": "class Solution(object):\n    def getIntersectionNode(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not headA or not headB:\n            return None\n        pa, pb = headA, headB\n        while pa != pb:",
        "detail": "mid-range.160",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.1602",
        "description": "mid-range.1602",
        "peekOfCode": "class Solution:\n    def findNearestRightNode(self, root: TreeNode, u: TreeNode) -> TreeNode:\n        q = [root]\n        while q:\n            new_q = []\n            for i in range(len(q)):\n                if q[i] == u:\n                    return None if i == len(q) - 1 else q[i + 1]\n                if q[i].left:\n                    new_q.append(q[i].left)",
        "detail": "mid-range.1602",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.161",
        "description": "mid-range.161",
        "peekOfCode": "class Solution:\n    def isOneEditDistance(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        if len(s) > len(t):\n            return self.isOneEditDistance(t, s)\n        m, n = len(s), len(t)",
        "detail": "mid-range.161",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.162",
        "description": "mid-range.162",
        "peekOfCode": "class Solution:\n    def findPeakElement(self, nums: List[int]) -> int:\n        l, r = 0, len(nums) - 1\n        while l < r:\n            mid = l + (r - l) // 2\n            high_mid = mid + 1\n            if nums[mid] < nums[high_mid]:\n                l = high_mid\n            else:\n                r = mid",
        "detail": "mid-range.162",
        "documentation": {}
    },
    {
        "label": "Fancy",
        "kind": 6,
        "importPath": "mid-range.1622",
        "description": "mid-range.1622",
        "peekOfCode": "class Fancy:\n    def __init__(self):\n        self.A = []\n        self.add = [0]\n        self.mul = [1]\n    def append(self, val: int) -> None:\n        self.A.append(val)\n        self.add.append(self.add[-1])\n        self.mul.append(self.mul[-1])\n    def addAll(self, inc: int) -> None:",
        "detail": "mid-range.1622",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.163",
        "description": "mid-range.163",
        "peekOfCode": "class Solution:\n    def findMissingRanges(self, nums: List[int], lower: int, upper: int) -> List[str]:\n        nums = [lower - 1] + nums + [upper + 1]\n        res = []\n        for i in range(len(nums) - 1):\n            if nums[i + 1] - nums[i] == 2:\n                res.append(str(nums[i] + 1))\n            elif nums[i + 1] - nums[i] > 2:\n                res.append(str(nums[i] + 1) + \"->\" + str(nums[i + 1] - 1))\n        return res",
        "detail": "mid-range.163",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.165",
        "description": "mid-range.165",
        "peekOfCode": "class Solution:\n    def compareVersion(self, version1: str, version2: str) -> int:\n        l1 = [int(s) for s in version1.split(\".\")]\n        l2 = [int(s) for s in version2.split(\".\")]\n        len1, len2 = len(l1), len(l2)\n        if len1 > len2:\n            l2 += [0] * (len1 - len2)\n        elif len1 < len2:\n            l1 += [0] * (len2 - len1)\n        return (l1 > l2) - (l1 < l2)",
        "detail": "mid-range.165",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.167",
        "description": "mid-range.167",
        "peekOfCode": "class Solution:\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        l, r = 0, len(numbers) - 1\n        while l < r:\n            s = numbers[l] + numbers[r]",
        "detail": "mid-range.167",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.168",
        "description": "mid-range.168",
        "peekOfCode": "class Solution:\n    def convertToTitle(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        result, start = \"\", ord(\"A\")\n        while n > 0:\n            result, n = chr((n - 1) % 26 + start) + result, (n - 1) // 26\n        return result",
        "detail": "mid-range.168",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "mid-range.16AllFactors",
        "description": "mid-range.16AllFactors",
        "peekOfCode": "number = int(input(\"Enter the number\"))\nfor i in range(1, number + 1):\n    if number % i == 0:\n        print(i)",
        "detail": "mid-range.16AllFactors",
        "documentation": {}
    },
    {
        "label": "areSimilar",
        "kind": 2,
        "importPath": "mid-range.16_-_areSimilar",
        "description": "mid-range.16_-_areSimilar",
        "peekOfCode": "def areSimilar(a, b):\n    diff = [i for i in range(len(a)) if a[i] != b[i]]\n    if len(diff) == 2:\n        b[diff[0]], b[diff[1]] = b[diff[1]], b[diff[0]]\n    return a == b",
        "detail": "mid-range.16_-_areSimilar",
        "documentation": {}
    },
    {
        "label": "render_from_template",
        "kind": 2,
        "importPath": "mid-range.16_jinja_quick_load",
        "description": "mid-range.16_jinja_quick_load",
        "peekOfCode": "def render_from_template(directory, template_name, **kwargs):\n    loader = FileSystemLoader(directory)\n    env = Environment(loader=loader)\n    template = env.get_template(template_name)\n    return template.render(**kwargs)",
        "detail": "mid-range.16_jinja_quick_load",
        "documentation": {}
    },
    {
        "label": "arrayChange",
        "kind": 2,
        "importPath": "mid-range.17 - arrayChange",
        "description": "mid-range.17 - arrayChange",
        "peekOfCode": "def arrayChange(inputArray):\n    first = inputArray[0]\n    count = 0\n    for i in inputArray[1:]:\n        if i <= first:\n            count += first - i + 1\n            first = first + 1\n        else:\n            first = i\n    return count",
        "detail": "mid-range.17 - arrayChange",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.17",
        "description": "mid-range.17",
        "peekOfCode": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        phoneMap = { '2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7' : 'pqrs', '8': 'tuv', '9':'wxyz'}\n        number = str(digits)\n        if number == \"\":\n        \treturn []",
        "detail": "mid-range.17",
        "documentation": {}
    },
    {
        "label": "TwoSum",
        "kind": 6,
        "importPath": "mid-range.170",
        "description": "mid-range.170",
        "peekOfCode": "class TwoSum:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.d = {}\n    def add(self, number: int) -> None:\n        \"\"\"\n        Add the number to an internal data structure..\n        \"\"\"",
        "detail": "mid-range.170",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.171",
        "description": "mid-range.171",
        "peekOfCode": "class Solution:\n    def titleToNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        result, start = 0, ord(\"A\")\n        for c in s:\n            result = result * 26 + (ord(c) - start) + 1\n        return result",
        "detail": "mid-range.171",
        "documentation": {}
    },
    {
        "label": "BSTIterator",
        "kind": 6,
        "importPath": "mid-range.173",
        "description": "mid-range.173",
        "peekOfCode": "class BSTIterator:\n    def __init__(self, root: TreeNode):\n        self.result = []\n        def dfs(root):\n            if not root:\n                return\n            if root.right:\n                dfs(root.right)\n            self.result.append(root.val)\n            if root.left:",
        "detail": "mid-range.173",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.179",
        "description": "mid-range.179",
        "peekOfCode": "class Solution:\n    def largestNumber(self, nums: List[int]) -> str:\n        nums = list(map(str, nums))\n        comp = lambda x, y: -1 if x + y > y + x else 1 if x + y < y + x else 0\n        return str(int(\"\".join(sorted(nums, key=cmp_to_key(comp)))))",
        "detail": "mid-range.179",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "mid-range.17CountAllFactors",
        "description": "mid-range.17CountAllFactors",
        "peekOfCode": "number = int(input(\"Enter the number: \"))\ncountOfFactors = 0\nfor i in range(1, number + 1):\n    if number % i == 0:\n        countOfFactors += 1\nprint(countOfFactors)",
        "detail": "mid-range.17CountAllFactors",
        "documentation": {}
    },
    {
        "label": "countOfFactors",
        "kind": 5,
        "importPath": "mid-range.17CountAllFactors",
        "description": "mid-range.17CountAllFactors",
        "peekOfCode": "countOfFactors = 0\nfor i in range(1, number + 1):\n    if number % i == 0:\n        countOfFactors += 1\nprint(countOfFactors)",
        "detail": "mid-range.17CountAllFactors",
        "documentation": {}
    },
    {
        "label": "arrayChange",
        "kind": 2,
        "importPath": "mid-range.17_-_arrayChange",
        "description": "mid-range.17_-_arrayChange",
        "peekOfCode": "def arrayChange(inputArray):\n    count = 0\n    for i in range(1, len(inputArray)):\n        if inputArray[i - 1] >= inputArray[i]:\n            difference = inputArray[i - 1] - inputArray[i]\n            inputArray[i] += difference + 1\n            count += difference + 1\n    return count",
        "detail": "mid-range.17_-_arrayChange",
        "documentation": {}
    },
    {
        "label": "palindromeRearranging",
        "kind": 2,
        "importPath": "mid-range.18 - palindromeRearranging",
        "description": "mid-range.18 - palindromeRearranging",
        "peekOfCode": "def palindromeRearranging(inputString):\n    odd_count = 0\n    char_set = set(inputString)\n    for i in char_set:\n        char_count = inputString.count(i)\n        if char_count % 2 != 0:\n            odd_count += 1\n    if odd_count <= 1:\n        return True\n    return False",
        "detail": "mid-range.18 - palindromeRearranging",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.18",
        "description": "mid-range.18",
        "peekOfCode": "class Solution:\n    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:\n        nums.sort()\n        result = []\n        for i in range(len(nums) - 3):\n            if i > 0 and nums[i - 1] == nums[i]:\n                continue\n            for j in range(i + 1, len(nums) - 2):\n                if j > i + 1 and nums[j - 1] == nums[j]:\n                    continue",
        "detail": "mid-range.18",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.186",
        "description": "mid-range.186",
        "peekOfCode": "class Solution(object):\n    def reverseWords(self, str):\n        \"\"\"\n        :type str: List[str]\n        :rtype: void Do not return anything, modify str in-place instead.\n        \"\"\"\n        self.reverse(str, 0, len(str) - 1)\n        start, end = 0, -1\n        for i in range(len(str)):\n            if str[i] == \" \":",
        "detail": "mid-range.186",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.188",
        "description": "mid-range.188",
        "peekOfCode": "class Solution:\n    def maxProfit(self, k: int, prices: List[int]) -> int:\n        n = len(prices)\n        if n < 2:\n            return 0\n        if n // 2 <= k:\n            return self.quickSolve(prices)\n        dp = [[0 for _ in range(n + 1)] for _ in range(k + 1)]\n        for i in range(1, k + 1):\n            buy = float(\"-inf\")",
        "detail": "mid-range.188",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.189",
        "description": "mid-range.189",
        "peekOfCode": "class Solution:\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        if not nums:\n            return\n        n = len(nums)",
        "detail": "mid-range.189",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "mid-range.18SumOfAllFactors",
        "description": "mid-range.18SumOfAllFactors",
        "peekOfCode": "number = int(input(\"Enter the number\"))\nsum = 0\nfor i in range(1, number + 1):\n    if number % i == 0:\n        # incrementing sum with factors\n        sum = sum + i\nprint(sum)",
        "detail": "mid-range.18SumOfAllFactors",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 5,
        "importPath": "mid-range.18SumOfAllFactors",
        "description": "mid-range.18SumOfAllFactors",
        "peekOfCode": "sum = 0\nfor i in range(1, number + 1):\n    if number % i == 0:\n        # incrementing sum with factors\n        sum = sum + i\nprint(sum)",
        "detail": "mid-range.18SumOfAllFactors",
        "documentation": {}
    },
    {
        "label": "palindromeRearranging",
        "kind": 2,
        "importPath": "mid-range.18_-_palindromeRearranging",
        "description": "mid-range.18_-_palindromeRearranging",
        "peekOfCode": "def palindromeRearranging(inputString):\n    inputList = sorted(inputString)\n    foundMiddle = False\n    while len(inputList) > 1:\n        if inputList[0] == inputList[1]:\n            del inputList[1]\n        elif not foundMiddle:\n            foundMiddle = True\n        else:\n            return False",
        "detail": "mid-range.18_-_palindromeRearranging",
        "documentation": {}
    },
    {
        "label": "zipdir",
        "kind": 2,
        "importPath": "mid-range.18_zipper",
        "description": "mid-range.18_zipper",
        "peekOfCode": "def zipdir(path, zip):\n    for root, dirs, files in os.walk(path):\n        for file in files:\n            zip.write(os.path.join(root, file))\nif __name__ == \"__main__\":\n    zipfile = ZipFile(file_name, \"w\")\n    zipdir(dir_name, zipfile)\n    zipfile.close()",
        "detail": "mid-range.18_zipper",
        "documentation": {}
    },
    {
        "label": "today",
        "kind": 5,
        "importPath": "mid-range.18_zipper",
        "description": "mid-range.18_zipper",
        "peekOfCode": "today = datetime.now()\nfile_name = \"zipper_\" + today.strftime(\"%Y.%m.%dh%H%M\") + \".zip\"\ndir_name = \"tmp/\"  # update path\ndef zipdir(path, zip):\n    for root, dirs, files in os.walk(path):\n        for file in files:\n            zip.write(os.path.join(root, file))\nif __name__ == \"__main__\":\n    zipfile = ZipFile(file_name, \"w\")\n    zipdir(dir_name, zipfile)",
        "detail": "mid-range.18_zipper",
        "documentation": {}
    },
    {
        "label": "file_name",
        "kind": 5,
        "importPath": "mid-range.18_zipper",
        "description": "mid-range.18_zipper",
        "peekOfCode": "file_name = \"zipper_\" + today.strftime(\"%Y.%m.%dh%H%M\") + \".zip\"\ndir_name = \"tmp/\"  # update path\ndef zipdir(path, zip):\n    for root, dirs, files in os.walk(path):\n        for file in files:\n            zip.write(os.path.join(root, file))\nif __name__ == \"__main__\":\n    zipfile = ZipFile(file_name, \"w\")\n    zipdir(dir_name, zipfile)\n    zipfile.close()",
        "detail": "mid-range.18_zipper",
        "documentation": {}
    },
    {
        "label": "dir_name",
        "kind": 5,
        "importPath": "mid-range.18_zipper",
        "description": "mid-range.18_zipper",
        "peekOfCode": "dir_name = \"tmp/\"  # update path\ndef zipdir(path, zip):\n    for root, dirs, files in os.walk(path):\n        for file in files:\n            zip.write(os.path.join(root, file))\nif __name__ == \"__main__\":\n    zipfile = ZipFile(file_name, \"w\")\n    zipdir(dir_name, zipfile)\n    zipfile.close()",
        "detail": "mid-range.18_zipper",
        "documentation": {}
    },
    {
        "label": "areEquallyStrong",
        "kind": 2,
        "importPath": "mid-range.19 - areEquallyStrong",
        "description": "mid-range.19 - areEquallyStrong",
        "peekOfCode": "def areEquallyStrong(yourLeft, yourRight, friendsLeft, friendsRight):\n    sameHands = yourLeft == friendsLeft and yourRight == friendsRight\n    differentHands = yourLeft == friendsRight and yourRight == friendsLeft\n    return sameHands or differentHands",
        "detail": "mid-range.19 - areEquallyStrong",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.19",
        "description": "mid-range.19",
        "peekOfCode": "class Solution:\n    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:\n        dummy = p = ListNode(0)\n        dummy.next = head\n        fast, slow = head, dummy\n        for i in range(n):\n            if fast:\n                fast = fast.next\n            else:\n                break",
        "detail": "mid-range.19",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.190",
        "description": "mid-range.190",
        "peekOfCode": "class Solution:\n    # @param n, an integer\n    # @return an integer\n    def reverseBits(self, n):\n        res = 0\n        for i in range(32):\n            res += n & 1\n            n = n >> 1\n            if i != 31:\n                res = res << 1",
        "detail": "mid-range.190",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.191",
        "description": "mid-range.191",
        "peekOfCode": "class Solution(object):\n    def hammingWeight(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        bits = 0\n        mask = 1\n        for i in range(32):\n            if (n & mask) != 0:",
        "detail": "mid-range.191",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.198",
        "description": "mid-range.198",
        "peekOfCode": "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        s1, s2 = 0, 0\n        for num in nums:\n            s1, s2 = s2, max(s1 + num, s2)\n        return s2",
        "detail": "mid-range.198",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.199",
        "description": "mid-range.199",
        "peekOfCode": "class Solution(object):\n    def rightSideView(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        if not root:\n            return []\n        stack, node_depth = [(root, 0)], {}\n        while stack:",
        "detail": "mid-range.199",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "mid-range.19PrintDigits",
        "description": "mid-range.19PrintDigits",
        "peekOfCode": "number = input(\"Enter the number: \")\n# iterating for individual values\nif int(number) < 0:\n    print(\"Please enter a valid positive number: \")\nelse:\n    for i in range(0, len(number)):\n        print(number[i])\n        i += 1",
        "detail": "mid-range.19PrintDigits",
        "documentation": {}
    },
    {
        "label": "areEquallyStrong",
        "kind": 2,
        "importPath": "mid-range.19_-_areEquallyStrong",
        "description": "mid-range.19_-_areEquallyStrong",
        "peekOfCode": "def areEquallyStrong(yourLeft, yourRight, friendsLeft, friendsRight):\n    sameHands = yourLeft == friendsLeft and yourRight == friendsRight\n    differentHands = yourLeft == friendsRight and yourRight == friendsLeft\n    return sameHands or differentHands",
        "detail": "mid-range.19_-_areEquallyStrong",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "mid-range.19_tsv-to-csv",
        "description": "mid-range.19_tsv-to-csv",
        "peekOfCode": "def convert(input, out):\n    if os.path.exists(out):\n        raise ValueError(\"Output file already exists\")\n    reader = csv.reader(open(input, \"rU\"), dialect=csv.excel_tab)\n    writer = csv.writer(open(out, \"wb+\"), dialect=\"excel\")\n    for row in reader:\n        writer.writerow(row)\nif __name__ == \"__main__\":\n    convert(sys.argv[1], sys.argv[2])",
        "detail": "mid-range.19_tsv-to-csv",
        "documentation": {}
    },
    {
        "label": "swapTwoNumbers",
        "kind": 2,
        "importPath": "mid-range.1SwapNumbers",
        "description": "mid-range.1SwapNumbers",
        "peekOfCode": "def swapTwoNumbers(x, y):\n    temp = x\n    x = y\n    y = temp\n    print(\"Swapped value of x is : {}\".format(x))\n    print(\"Swapped value of y is : {}\".format(y))\nswapTwoNumbers(2, 3)\nswapTwoNumbers(4, 3)",
        "detail": "mid-range.1SwapNumbers",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.2-sorter",
        "description": "mid-range.2-sorter",
        "peekOfCode": "d = {\"foo\": 120, \"bar\": 17, \"qux\": 2}\n# Sorting a dictionary doesn't make sense\n#\n# But you can sort a list based on the dictionary\n#\n# First get the list of items from the dict with .items()\n#\n# This returns an iterator, so we cast it to a list.\n#\n# [('bar', 17), ('foo', 12), ('qux', 2)]",
        "detail": "mid-range.2-sorter",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "mid-range.2-sorter",
        "description": "mid-range.2-sorter",
        "peekOfCode": "items = list(d.items())\nprint(f\"unsorted: {items}\")\n# Sort ascending by key\nitems.sort()\nprint(f\"Sort ascending by key: {items}\")\n# Sort descending by key\nitems.sort(reverse=True)\nprint(f\"Sort descending by key: {items}\")\n# Sort ascending by value\n# lambda is an anonymous function. e is the argument representing the",
        "detail": "mid-range.2-sorter",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "mid-range.2",
        "description": "mid-range.2",
        "peekOfCode": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode",
        "detail": "mid-range.2",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.2",
        "description": "mid-range.2",
        "peekOfCode": "class Solution:\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        dummy = current = ListNode(0)\n        carry = 0\n        while l1 or l2 or carry:",
        "detail": "mid-range.2",
        "documentation": {}
    },
    {
        "label": "arrayMaximalAdjacentDifference",
        "kind": 2,
        "importPath": "mid-range.20 - arrayMaximalAdjacentDifference",
        "description": "mid-range.20 - arrayMaximalAdjacentDifference",
        "peekOfCode": "def arrayMaximalAdjacentDifference(inputArray):\n    return max(\n        (abs(inputArray[i + 1] - inputArray[i]) for i in range(0, len(inputArray) - 1))\n    )",
        "detail": "mid-range.20 - arrayMaximalAdjacentDifference",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.20",
        "description": "mid-range.20",
        "peekOfCode": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        maps = {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n        stack = []\n        for c in s:\n            if c in maps:",
        "detail": "mid-range.20",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.200",
        "description": "mid-range.200",
        "peekOfCode": "class Solution(object):\n    def numIslands(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: int\n        \"\"\"\n        if not grid:\n            return 0\n        count = 0\n        for row in range(len(grid)):",
        "detail": "mid-range.200",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "mid-range.20201112_161509_create_packages_table",
        "description": "mid-range.20201112_161509_create_packages_table",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"packages\",\n        sa.Column(\"id\", sa.Integer(), nullable=False),\n        sa.Column(\"sender\", sa.String(length=255), nullable=True),\n        sa.Column(\"recipient\", sa.String(length=255), nullable=True),\n        sa.Column(\"origin\", sa.String(length=255), nullable=True),\n        sa.Column(\"destination\", sa.String(length=255), nullable=True),\n        sa.Column(\"location\", sa.String(length=255), nullable=True),",
        "detail": "mid-range.20201112_161509_create_packages_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "mid-range.20201112_161509_create_packages_table",
        "description": "mid-range.20201112_161509_create_packages_table",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table(\"packages\")\n    # ### end Alembic commands ###",
        "detail": "mid-range.20201112_161509_create_packages_table",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "mid-range.20201112_161509_create_packages_table",
        "description": "mid-range.20201112_161509_create_packages_table",
        "peekOfCode": "revision = \"dc7c6da5f860\"\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"packages\",\n        sa.Column(\"id\", sa.Integer(), nullable=False),\n        sa.Column(\"sender\", sa.String(length=255), nullable=True),",
        "detail": "mid-range.20201112_161509_create_packages_table",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "mid-range.20201112_161509_create_packages_table",
        "description": "mid-range.20201112_161509_create_packages_table",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"packages\",\n        sa.Column(\"id\", sa.Integer(), nullable=False),\n        sa.Column(\"sender\", sa.String(length=255), nullable=True),\n        sa.Column(\"recipient\", sa.String(length=255), nullable=True),",
        "detail": "mid-range.20201112_161509_create_packages_table",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "mid-range.20201112_161509_create_packages_table",
        "description": "mid-range.20201112_161509_create_packages_table",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"packages\",\n        sa.Column(\"id\", sa.Integer(), nullable=False),\n        sa.Column(\"sender\", sa.String(length=255), nullable=True),\n        sa.Column(\"recipient\", sa.String(length=255), nullable=True),\n        sa.Column(\"origin\", sa.String(length=255), nullable=True),",
        "detail": "mid-range.20201112_161509_create_packages_table",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "mid-range.20201112_161509_create_packages_table",
        "description": "mid-range.20201112_161509_create_packages_table",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"packages\",\n        sa.Column(\"id\", sa.Integer(), nullable=False),\n        sa.Column(\"sender\", sa.String(length=255), nullable=True),\n        sa.Column(\"recipient\", sa.String(length=255), nullable=True),\n        sa.Column(\"origin\", sa.String(length=255), nullable=True),\n        sa.Column(\"destination\", sa.String(length=255), nullable=True),",
        "detail": "mid-range.20201112_161509_create_packages_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "mid-range.20201120_150602_create_users_table",
        "description": "mid-range.20201120_150602_create_users_table",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"users\",\n        sa.Column(\"id\", sa.Integer(), nullable=False),\n        sa.Column(\"username\", sa.String(length=40), nullable=False),\n        sa.Column(\"email\", sa.String(length=255), nullable=False),\n        sa.Column(\"hashed_password\", sa.String(length=255), nullable=False),\n        sa.PrimaryKeyConstraint(\"id\"),\n        sa.UniqueConstraint(\"email\"),",
        "detail": "mid-range.20201120_150602_create_users_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "mid-range.20201120_150602_create_users_table",
        "description": "mid-range.20201120_150602_create_users_table",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table(\"users\")\n    # ### end Alembic commands ###",
        "detail": "mid-range.20201120_150602_create_users_table",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "mid-range.20201120_150602_create_users_table",
        "description": "mid-range.20201120_150602_create_users_table",
        "peekOfCode": "revision = \"ffdc0a98111c\"\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"users\",\n        sa.Column(\"id\", sa.Integer(), nullable=False),\n        sa.Column(\"username\", sa.String(length=40), nullable=False),",
        "detail": "mid-range.20201120_150602_create_users_table",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "mid-range.20201120_150602_create_users_table",
        "description": "mid-range.20201120_150602_create_users_table",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"users\",\n        sa.Column(\"id\", sa.Integer(), nullable=False),\n        sa.Column(\"username\", sa.String(length=40), nullable=False),\n        sa.Column(\"email\", sa.String(length=255), nullable=False),",
        "detail": "mid-range.20201120_150602_create_users_table",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "mid-range.20201120_150602_create_users_table",
        "description": "mid-range.20201120_150602_create_users_table",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"users\",\n        sa.Column(\"id\", sa.Integer(), nullable=False),\n        sa.Column(\"username\", sa.String(length=40), nullable=False),\n        sa.Column(\"email\", sa.String(length=255), nullable=False),\n        sa.Column(\"hashed_password\", sa.String(length=255), nullable=False),",
        "detail": "mid-range.20201120_150602_create_users_table",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "mid-range.20201120_150602_create_users_table",
        "description": "mid-range.20201120_150602_create_users_table",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"users\",\n        sa.Column(\"id\", sa.Integer(), nullable=False),\n        sa.Column(\"username\", sa.String(length=40), nullable=False),\n        sa.Column(\"email\", sa.String(length=255), nullable=False),\n        sa.Column(\"hashed_password\", sa.String(length=255), nullable=False),\n        sa.PrimaryKeyConstraint(\"id\"),",
        "detail": "mid-range.20201120_150602_create_users_table",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.203",
        "description": "mid-range.203",
        "peekOfCode": "class Solution(object):\n    def countPrimes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 2:\n            return 0\n        A = [0] * (n + 1)\n        count = 0",
        "detail": "mid-range.203",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.204",
        "description": "mid-range.204",
        "peekOfCode": "class Solution(object):\n    def countPrimes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 2:\n            return 0\n        prime = [True] * n\n        prime[:2] = [False, False]",
        "detail": "mid-range.204",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.205",
        "description": "mid-range.205",
        "peekOfCode": "class Solution:\n    def isIsomorphic(self, s: str, t: str) -> bool:\n        def convert(ss):\n            d = {}\n            return [d.setdefault(c, len(d)) for c in ss]\n        return convert(s) == convert(t)",
        "detail": "mid-range.205",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.206",
        "description": "mid-range.206",
        "peekOfCode": "class Solution:\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        prev = None\n        while head:\n            head.next, prev, head = prev, head, head.next\n        return prev",
        "detail": "mid-range.206",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.209",
        "description": "mid-range.209",
        "peekOfCode": "class Solution:\n    def minSubArrayLen(self, s, nums):\n        \"\"\"\n        :type s: int\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        total = l = 0\n        result = len(nums) + 1\n        for r in range(len(nums)):",
        "detail": "mid-range.209",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "mid-range.20CountNumDigits",
        "description": "mid-range.20CountNumDigits",
        "peekOfCode": "number = input(\"Enter a Number: \")\ncount = 0\nif int(number) < 0:\n    print(\"Please enter a valid positive number\")\nelse:\n    for i in range(0, len(number)):\n        count += 1\n        i += 1\n    print(\"The number of digits is:\", count)",
        "detail": "mid-range.20CountNumDigits",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "mid-range.20CountNumDigits",
        "description": "mid-range.20CountNumDigits",
        "peekOfCode": "count = 0\nif int(number) < 0:\n    print(\"Please enter a valid positive number\")\nelse:\n    for i in range(0, len(number)):\n        count += 1\n        i += 1\n    print(\"The number of digits is:\", count)",
        "detail": "mid-range.20CountNumDigits",
        "documentation": {}
    },
    {
        "label": "arrayMaximalAdjacentDifference",
        "kind": 2,
        "importPath": "mid-range.20_-_arrayMaximalAdjacentDifference",
        "description": "mid-range.20_-_arrayMaximalAdjacentDifference",
        "peekOfCode": "def arrayMaximalAdjacentDifference(inputArray):\n    diffs = []\n    for i in range(len(inputArray) - 1):\n        diffs.append(abs(inputArray[i] - inputArray[i + 1]))\n    return max(diffs)",
        "detail": "mid-range.20_-_arrayMaximalAdjacentDifference",
        "documentation": {}
    },
    {
        "label": "file_name",
        "kind": 5,
        "importPath": "mid-range.20_restore_file_from_git",
        "description": "mid-range.20_restore_file_from_git",
        "peekOfCode": "file_name = str(input(\"Enter the file name: \"))\ncommit = check_output([\"git\", \"rev-list\", \"-n\", \"1\", \"HEAD\", \"--\", file_name])\nprint(str(commit).rstrip())\ncall([\"git\", \"checkout\", str(commit).rstrip() + \"~1\", file_name])\n\"\"\"\nAfter entering a filename, this script searches your Git history for that file.\nIf the file exists, then it will restore it.\n\"\"\"",
        "detail": "mid-range.20_restore_file_from_git",
        "documentation": {}
    },
    {
        "label": "commit",
        "kind": 5,
        "importPath": "mid-range.20_restore_file_from_git",
        "description": "mid-range.20_restore_file_from_git",
        "peekOfCode": "commit = check_output([\"git\", \"rev-list\", \"-n\", \"1\", \"HEAD\", \"--\", file_name])\nprint(str(commit).rstrip())\ncall([\"git\", \"checkout\", str(commit).rstrip() + \"~1\", file_name])\n\"\"\"\nAfter entering a filename, this script searches your Git history for that file.\nIf the file exists, then it will restore it.\n\"\"\"",
        "detail": "mid-range.20_restore_file_from_git",
        "documentation": {}
    },
    {
        "label": "isIPv4Address",
        "kind": 2,
        "importPath": "mid-range.21 - isIPv4Address",
        "description": "mid-range.21 - isIPv4Address",
        "peekOfCode": "def isIPv4Address(inputString):\n    strings = [string for string in inputString.split(\".\")]\n    for string in strings:\n        if not string.isdecimal():\n            return False\n    nums = [int(num) for num in strings]\n    return max(nums) <= 255 and min(nums) >= 0 and len(nums) == 4",
        "detail": "mid-range.21 - isIPv4Address",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "mid-range.21",
        "description": "mid-range.21",
        "peekOfCode": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = curr = ListNode(0)\n        while l1 and l2:\n            if l1.val <= l2.val:\n                curr.next = l1",
        "detail": "mid-range.21",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.21",
        "description": "mid-range.21",
        "peekOfCode": "class Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        dummy = curr = ListNode(0)\n        while l1 and l2:\n            if l1.val <= l2.val:\n                curr.next = l1\n                l1 = l1.next\n            else:\n                curr.next = l2\n                l2 = l2.next",
        "detail": "mid-range.21",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.215",
        "description": "mid-range.215",
        "peekOfCode": "class Solution(object):\n    def findKthLargest(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        heap = []\n        import heapq\n        for num in nums:",
        "detail": "mid-range.215",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.215_Kth_Largest_Element_in_an_Array",
        "description": "mid-range.215_Kth_Largest_Element_in_an_Array",
        "peekOfCode": "class Solution(object):\n    def findKthLargest(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        pivot = random.choice(nums)\n        nums1, nums2 = [], []\n        for num in nums:",
        "detail": "mid-range.215_Kth_Largest_Element_in_an_Array",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.216",
        "description": "mid-range.216",
        "peekOfCode": "class Solution:\n    def combinationSum3(self, k: int, n: int) -> List[List[int]]:\n        result = []\n        self.dfs(list(range(1, 10)), k, n, [], result)\n        return result\n    def dfs(self, arr, k, n, path, result):\n        if k < 0 or n < 0:\n            return\n        if k == 0 and n == 0:\n            result.append(path)",
        "detail": "mid-range.216",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.218",
        "description": "mid-range.218",
        "peekOfCode": "class Solution:\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        rectangles = [[l, -h, r] for l, r, h in buildings] + [\n            [r, h, None] for l, r, h in buildings\n        ]\n        rectangles.sort()",
        "detail": "mid-range.218",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "mid-range.21SumOfDigits",
        "description": "mid-range.21SumOfDigits",
        "peekOfCode": "number = input(\"Enter a Number: \")\nsum = 0\nif int(number) < 0:\n    print(\"Please enter a valid positive number\")\nelse:\n    for i in range(0, len(number)):\n        sum += int(number[i])\n        i += 1\n    print(\"The sum of digits is:\", sum)",
        "detail": "mid-range.21SumOfDigits",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 5,
        "importPath": "mid-range.21SumOfDigits",
        "description": "mid-range.21SumOfDigits",
        "peekOfCode": "sum = 0\nif int(number) < 0:\n    print(\"Please enter a valid positive number\")\nelse:\n    for i in range(0, len(number)):\n        sum += int(number[i])\n        i += 1\n    print(\"The sum of digits is:\", sum)",
        "detail": "mid-range.21SumOfDigits",
        "documentation": {}
    },
    {
        "label": "isIPv4Address",
        "kind": 2,
        "importPath": "mid-range.21_-_isIPv4Address",
        "description": "mid-range.21_-_isIPv4Address",
        "peekOfCode": "def isIPv4Address(inputString):\n    strings = [string for string in inputString.split(\".\")]\n    for string in strings:\n        if not string.isdecimal():\n            return False\n    nums = [int(num) for num in strings]\n    return max(nums) <= 255 and min(nums) >= 0 and len(nums) == 4",
        "detail": "mid-range.21_-_isIPv4Address",
        "documentation": {}
    },
    {
        "label": "get_api_handler",
        "kind": 2,
        "importPath": "mid-range.21_twitter_bot",
        "description": "mid-range.21_twitter_bot",
        "peekOfCode": "def get_api_handler(cfg):\n    auth = tweepy.OAuthHandler(cfg[\"consumer_key\"], cfg[\"consumer_secret\"])\n    auth.set_access_token(cfg[\"access_token\"], cfg[\"access_token_secret\"])\n    return tweepy.API(auth)\ndef main():\n    api = get_api_handler(cfg)\n    tweet = \"Hello, world from Tweepy!\"\n    api.update_status(status=tweet)\nif __name__ == \"__main__\":\n    main()",
        "detail": "mid-range.21_twitter_bot",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.21_twitter_bot",
        "description": "mid-range.21_twitter_bot",
        "peekOfCode": "def main():\n    api = get_api_handler(cfg)\n    tweet = \"Hello, world from Tweepy!\"\n    api.update_status(status=tweet)\nif __name__ == \"__main__\":\n    main()",
        "detail": "mid-range.21_twitter_bot",
        "documentation": {}
    },
    {
        "label": "cfg",
        "kind": 5,
        "importPath": "mid-range.21_twitter_bot",
        "description": "mid-range.21_twitter_bot",
        "peekOfCode": "cfg = {\n    \"consumer_key\": \"VALUE\",\n    \"consumer_secret\": \"VALUE\",\n    \"access_token\": \"VALUE\",\n    \"access_token_secret\": \"VALUE\",\n}\ndef get_api_handler(cfg):\n    auth = tweepy.OAuthHandler(cfg[\"consumer_key\"], cfg[\"consumer_secret\"])\n    auth.set_access_token(cfg[\"access_token\"], cfg[\"access_token_secret\"])\n    return tweepy.API(auth)",
        "detail": "mid-range.21_twitter_bot",
        "documentation": {}
    },
    {
        "label": "avoidObstacles",
        "kind": 2,
        "importPath": "mid-range.22 - avoidObstacles",
        "description": "mid-range.22 - avoidObstacles",
        "peekOfCode": "def avoidObstacles(inputArray):\n    for i in range(2, max(inputArray) + 2):\n        if i not in inputArray and all(j % i != 0 for j in inputArray):\n            return i",
        "detail": "mid-range.22 - avoidObstacles",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.22",
        "description": "mid-range.22",
        "peekOfCode": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        result = []\n        def backtracking(S, left, right):\n            if len(S) == 2 * n:\n                result.append(S)",
        "detail": "mid-range.22",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.220",
        "description": "mid-range.220",
        "peekOfCode": "class Solution:\n    def containsNearbyAlmostDuplicate(self, nums: List[int], k: int, t: int) -> bool:\n        if t < 0:\n            return False\n        d = {}\n        w = t + 1\n        for i, num in enumerate(nums):\n            key = num // w\n            if key in d:\n                return True",
        "detail": "mid-range.220",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.221",
        "description": "mid-range.221",
        "peekOfCode": "class Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -> int:\n        if not matrix or not matrix[0]:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        slide = 0\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if matrix[i - 1][j - 1] == \"1\":",
        "detail": "mid-range.221",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.224",
        "description": "mid-range.224",
        "peekOfCode": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        curr, total, sign, i = 0, 0, 1, 0\n        stack = []\n        while i < len(s):\n            if s[i].isdigit():",
        "detail": "mid-range.224",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.226",
        "description": "mid-range.226",
        "peekOfCode": "class Solution:\n    def invertTree(self, root: TreeNode) -> TreeNode:\n        if not root:\n            return root\n        temp = root.right\n        root.right = self.invertTree(root.left)\n        root.left = self.invertTree(temp)\n        return root",
        "detail": "mid-range.226",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.227",
        "description": "mid-range.227",
        "peekOfCode": "class Solution:\n    def calculate(self, s: str) -> int:\n        def compute(num1, num2, op):\n            if op == \"-\":\n                return num2 - num1\n            if op == \"+\":\n                return num1 + num2\n            if op == \"*\":\n                return num1 * num2\n            if op == \"/\":",
        "detail": "mid-range.227",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.229",
        "description": "mid-range.229",
        "peekOfCode": "class Solution:\n    def majorityElement(self, nums: List[int]) -> List[int]:\n        candidate1, candidate2 = 0, 1\n        count1, count2 = 0, 0\n        for num in nums:\n            if candidate1 == num:\n                count1 += 1\n            elif candidate2 == num:\n                count2 += 1\n            elif count1 == 0:",
        "detail": "mid-range.229",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "mid-range.22ReverseOfNum",
        "description": "mid-range.22ReverseOfNum",
        "peekOfCode": "number = input(\"Enter the number: \")\nnum_str = []\n# iterating for individual values\nif int(number) < 0:\n    print(\"Please enter a valid positive number: \")\nelse:\n    for i in range(0, len(number)):\n        num_str.append(number[i])\n        i += 1\nprint(list(reversed(num_str)))",
        "detail": "mid-range.22ReverseOfNum",
        "documentation": {}
    },
    {
        "label": "num_str",
        "kind": 5,
        "importPath": "mid-range.22ReverseOfNum",
        "description": "mid-range.22ReverseOfNum",
        "peekOfCode": "num_str = []\n# iterating for individual values\nif int(number) < 0:\n    print(\"Please enter a valid positive number: \")\nelse:\n    for i in range(0, len(number)):\n        num_str.append(number[i])\n        i += 1\nprint(list(reversed(num_str)))",
        "detail": "mid-range.22ReverseOfNum",
        "documentation": {}
    },
    {
        "label": "avoidObstacles",
        "kind": 2,
        "importPath": "mid-range.22_-_avoidObstacles",
        "description": "mid-range.22_-_avoidObstacles",
        "peekOfCode": "def avoidObstacles(inputArray):\n    for length in range(2, max(inputArray) + 2):\n        done = True\n        jump = length\n        while jump < (max(inputArray) + length):\n            if jump in inputArray:\n                done = False\n                break\n            jump += length\n        if done:",
        "detail": "mid-range.22_-_avoidObstacles",
        "documentation": {}
    },
    {
        "label": "boxBlur",
        "kind": 2,
        "importPath": "mid-range.23 - boxBlur",
        "description": "mid-range.23 - boxBlur",
        "peekOfCode": "def boxBlur(image):\n    def pixels(matrix, i, j):\n        summ = 0\n        for x in range(i - 1, i + 2):\n            for y in range(j - 1, j + 2):\n                summ += matrix[x][y]\n                mean = summ // 9\n        return mean\n    output = []\n    row = len(image)",
        "detail": "mid-range.23 - boxBlur",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.230",
        "description": "mid-range.230",
        "peekOfCode": "class Solution:\n    def kthSmallest(self, root: TreeNode, k: int) -> int:\n        result = []\n        def inorder(node):\n            if not node:\n                return\n            inorder(node.left)\n            result.append(node.val)\n            inorder(node.right)\n        inorder(root)",
        "detail": "mid-range.230",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.234",
        "description": "mid-range.234",
        "peekOfCode": "class Solution:\n    def isPalindrome(self, head: ListNode) -> bool:\n        rev = None\n        slow = fast = head\n        while fast and fast.next:\n            fast = fast.next.next\n            slow.next, rev, slow = rev, slow, slow.next\n        if fast:\n            slow = slow.next\n        while rev and slow and rev.val == slow.val:",
        "detail": "mid-range.234",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.235",
        "description": "mid-range.235",
        "peekOfCode": "class Solution:\n    def lowestCommonAncestor(\n        self, root: \"TreeNode\", p: \"TreeNode\", q: \"TreeNode\"\n    ) -> \"TreeNode\":\n        if p.val < root.val > q.val:\n            return self.lowestCommonAncestor(root.left, p, q)\n        if p.val > root.val < q.val:\n            return self.lowestCommonAncestor(root.right, p, q)\n        return root\n# class Solution:",
        "detail": "mid-range.235",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.236",
        "description": "mid-range.236",
        "peekOfCode": "class Solution:\n    def lowestCommonAncestor(\n        self, root: \"TreeNode\", p: \"TreeNode\", q: \"TreeNode\"\n    ) -> \"TreeNode\":\n        if root in [None, p, q]:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        return root if left and right else left or right",
        "detail": "mid-range.236",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.238",
        "description": "mid-range.238",
        "peekOfCode": "class Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        product = 1\n        result = []\n        for num in nums:\n            result.append(product)\n            product *= num\n        product = 1\n        for i in range(len(nums) - 1, -1, -1):\n            result[i] *= product",
        "detail": "mid-range.238",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.239",
        "description": "mid-range.239",
        "peekOfCode": "class Solution:\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        q = deque()\n        ret = []\n        for i, num in enumerate(nums):",
        "detail": "mid-range.239",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "mid-range.23palindrome",
        "description": "mid-range.23palindrome",
        "peekOfCode": "num = int(input(\"Enter a number: \"))\ntemp = num\nrev_num = 0\nwhile num > 0:\n    digits = num % 10\n    rev_num = rev_num * 10 + digits\n    num = num // 10\nif temp == rev_num:\n    print(\"Entered num is a palindrome\")\nelse:",
        "detail": "mid-range.23palindrome",
        "documentation": {}
    },
    {
        "label": "temp",
        "kind": 5,
        "importPath": "mid-range.23palindrome",
        "description": "mid-range.23palindrome",
        "peekOfCode": "temp = num\nrev_num = 0\nwhile num > 0:\n    digits = num % 10\n    rev_num = rev_num * 10 + digits\n    num = num // 10\nif temp == rev_num:\n    print(\"Entered num is a palindrome\")\nelse:\n    print(\"Entered num is not a palindrome\")",
        "detail": "mid-range.23palindrome",
        "documentation": {}
    },
    {
        "label": "rev_num",
        "kind": 5,
        "importPath": "mid-range.23palindrome",
        "description": "mid-range.23palindrome",
        "peekOfCode": "rev_num = 0\nwhile num > 0:\n    digits = num % 10\n    rev_num = rev_num * 10 + digits\n    num = num // 10\nif temp == rev_num:\n    print(\"Entered num is a palindrome\")\nelse:\n    print(\"Entered num is not a palindrome\")",
        "detail": "mid-range.23palindrome",
        "documentation": {}
    },
    {
        "label": "boxBlur",
        "kind": 2,
        "importPath": "mid-range.23_-_boxBlur",
        "description": "mid-range.23_-_boxBlur",
        "peekOfCode": "def boxBlur(image):\n    outImage = []\n    for row in range(1, len(image) - 1):\n        line = []\n        for pixel in range(1, len(image[row]) - 1):\n            total = (\n                image[row - 1][pixel - 1]\n                + image[row - 1][pixel]\n                + image[row - 1][pixel + 1]\n                + image[row][pixel - 1]",
        "detail": "mid-range.23_-_boxBlur",
        "documentation": {}
    },
    {
        "label": "set",
        "kind": 2,
        "importPath": "mid-range.23_flask_session_test",
        "description": "mid-range.23_flask_session_test",
        "peekOfCode": "def set():\n    session.clear()\n    session[\"works\"] = True\n    return redirect(url_for(\"get\"))\n@app.route(\"/get\")\ndef get():\n    works = session.get(\"works\", False)\n    return str(works)\napp.run(sys.argv[1], use_reloader=False)",
        "detail": "mid-range.23_flask_session_test",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "mid-range.23_flask_session_test",
        "description": "mid-range.23_flask_session_test",
        "peekOfCode": "def get():\n    works = session.get(\"works\", False)\n    return str(works)\napp.run(sys.argv[1], use_reloader=False)",
        "detail": "mid-range.23_flask_session_test",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "mid-range.23_flask_session_test",
        "description": "mid-range.23_flask_session_test",
        "peekOfCode": "app = Flask(__name__)\napp.secret_key = \"secret\"\n@app.route(\"/\")\ndef set():\n    session.clear()\n    session[\"works\"] = True\n    return redirect(url_for(\"get\"))\n@app.route(\"/get\")\ndef get():\n    works = session.get(\"works\", False)",
        "detail": "mid-range.23_flask_session_test",
        "documentation": {}
    },
    {
        "label": "app.secret_key",
        "kind": 5,
        "importPath": "mid-range.23_flask_session_test",
        "description": "mid-range.23_flask_session_test",
        "peekOfCode": "app.secret_key = \"secret\"\n@app.route(\"/\")\ndef set():\n    session.clear()\n    session[\"works\"] = True\n    return redirect(url_for(\"get\"))\n@app.route(\"/get\")\ndef get():\n    works = session.get(\"works\", False)\n    return str(works)",
        "detail": "mid-range.23_flask_session_test",
        "documentation": {}
    },
    {
        "label": "minesweeper",
        "kind": 2,
        "importPath": "mid-range.24 - minesweeper",
        "description": "mid-range.24 - minesweeper",
        "peekOfCode": "def minesweeper(matrix):\n    row = len(matrix)\n    col = len(matrix[0])\n    def neighbouring_squares(i, j):\n        return sum(\n            matrix[x][y]\n            for x in range(i - 1, i + 2)\n            if 0 <= x < row\n            for y in range(j - 1, j + 2)\n            if 0 <= y < col",
        "detail": "mid-range.24 - minesweeper",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "mid-range.24",
        "description": "mid-range.24",
        "peekOfCode": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass Solution:\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"",
        "detail": "mid-range.24",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.24",
        "description": "mid-range.24",
        "peekOfCode": "class Solution:\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        dummy = p = ListNode(0)\n        dummy.next = head\n        while head and head.next:\n            curr = head.next",
        "detail": "mid-range.24",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.240",
        "description": "mid-range.240",
        "peekOfCode": "class Solution:\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        if not matrix or len(matrix) == 0 or not matrix[0]:\n            return False\n        m, n = len(matrix), len(matrix[0])",
        "detail": "mid-range.240",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.243",
        "description": "mid-range.243",
        "peekOfCode": "class Solution:\n    def shortestDistance(self, words, word1, word2):\n        \"\"\"\n        :type words: List[str]\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        idx1, idx2 = len(words), len(words)\n        result = len(words)",
        "detail": "mid-range.243",
        "documentation": {}
    },
    {
        "label": "WordDistance",
        "kind": 6,
        "importPath": "mid-range.244",
        "description": "mid-range.244",
        "peekOfCode": "class WordDistance:\n    def __init__(self, words: List[str]):\n        self.d = defaultdict(list)\n        for i, word in enumerate(words):\n            self.d[word].append(i)\n    def shortest(self, word1: str, word2: str) -> int:\n        loc1 = self.d[word1]\n        loc2 = self.d[word2]\n        result = float(\"inf\")\n        i, j = 0, 0",
        "detail": "mid-range.244",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.246",
        "description": "mid-range.246",
        "peekOfCode": "class Solution(object):\n    def isStrobogrammatic(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: bool\n        \"\"\"\n        mapping = {\"6\": \"9\", \"8\": \"8\", \"1\": \"1\", \"9\": \"6\", \"0\": \"0\"}\n        l, r = 0, len(num) - 1\n        while l <= r:\n            if num[l] not in mapping or num[r] not in mapping:",
        "detail": "mid-range.246",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.249",
        "description": "mid-range.249",
        "peekOfCode": "class Solution:\n    def groupStrings(self, strings: List[str]) -> List[List[str]]:\n        d = {}\n        for s in strings:\n            key = []\n            for i in range(1, len(s)):\n                key.append(str((ord(s[i]) - ord(s[i - 1])) % 26))\n            k = \",\".join(key)\n            d[k] = d.get(k, []) + [s]\n        return list(d.values())",
        "detail": "mid-range.249",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "mid-range.24amstrong",
        "description": "mid-range.24amstrong",
        "peekOfCode": "number = int(input(\"Enter a number: \"))\ntemp = number\nres = 0\nwhile number > 0:\n    digit = number % 10\n    res = res + (digit * digit * digit)\n    number = number // 10\nif res == temp:\n    print(\"Entered number is amstrong!\")\nelse:",
        "detail": "mid-range.24amstrong",
        "documentation": {}
    },
    {
        "label": "temp",
        "kind": 5,
        "importPath": "mid-range.24amstrong",
        "description": "mid-range.24amstrong",
        "peekOfCode": "temp = number\nres = 0\nwhile number > 0:\n    digit = number % 10\n    res = res + (digit * digit * digit)\n    number = number // 10\nif res == temp:\n    print(\"Entered number is amstrong!\")\nelse:\n    print(\"Not a amstrong!\")",
        "detail": "mid-range.24amstrong",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "mid-range.24amstrong",
        "description": "mid-range.24amstrong",
        "peekOfCode": "res = 0\nwhile number > 0:\n    digit = number % 10\n    res = res + (digit * digit * digit)\n    number = number // 10\nif res == temp:\n    print(\"Entered number is amstrong!\")\nelse:\n    print(\"Not a amstrong!\")",
        "detail": "mid-range.24amstrong",
        "documentation": {}
    },
    {
        "label": "minesweeper",
        "kind": 2,
        "importPath": "mid-range.24_-_minesweeper",
        "description": "mid-range.24_-_minesweeper",
        "peekOfCode": "def minesweeper(matrix):\n    TOP = 0\n    BOTTOM = len(matrix) - 1\n    LEFT = 0\n    RIGHT = len(matrix[0]) - 1\n    outMatrix = []\n    for row in range(len(matrix)):\n        outRow = []\n        for cell in range(len(matrix[row])):\n            outRow.append(0)",
        "detail": "mid-range.24_-_minesweeper",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "mid-range.24_sql2csv",
        "description": "mid-range.24_sql2csv",
        "peekOfCode": "conn = sqlite3.connect(sys.argv[1])\ncur = conn.cursor()\ndata = cur.execute(\"SELECT * FROM {0}\".format(sys.argv[2]))\nwith open(\"output.csv\", \"wb\") as f:\n    writer = csv.writer(f)\n    writer.writerows(data)\nconn.close()",
        "detail": "mid-range.24_sql2csv",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "mid-range.24_sql2csv",
        "description": "mid-range.24_sql2csv",
        "peekOfCode": "cur = conn.cursor()\ndata = cur.execute(\"SELECT * FROM {0}\".format(sys.argv[2]))\nwith open(\"output.csv\", \"wb\") as f:\n    writer = csv.writer(f)\n    writer.writerows(data)\nconn.close()",
        "detail": "mid-range.24_sql2csv",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.24_sql2csv",
        "description": "mid-range.24_sql2csv",
        "peekOfCode": "data = cur.execute(\"SELECT * FROM {0}\".format(sys.argv[2]))\nwith open(\"output.csv\", \"wb\") as f:\n    writer = csv.writer(f)\n    writer.writerows(data)\nconn.close()",
        "detail": "mid-range.24_sql2csv",
        "documentation": {}
    },
    {
        "label": "arrayReplace",
        "kind": 2,
        "importPath": "mid-range.25 - arrayReplace",
        "description": "mid-range.25 - arrayReplace",
        "peekOfCode": "def arrayReplace(inputArray, elemToReplace, substitutionElem):\n    return [x if x != elemToReplace else substitutionElem for x in inputArray]",
        "detail": "mid-range.25 - arrayReplace",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.25",
        "description": "mid-range.25",
        "peekOfCode": "class Solution:\n    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:\n        dummy = p = ListNode(0)\n        dummy.next = head\n        l, r = head, head\n        while True:\n            count = 0\n            while r and count < k:\n                r = r.next\n                count += 1",
        "detail": "mid-range.25",
        "documentation": {}
    },
    {
        "label": "Vector2D",
        "kind": 6,
        "importPath": "mid-range.251",
        "description": "mid-range.251",
        "peekOfCode": "class Vector2D(object):\n    def __init__(self, vec2d):\n        \"\"\"\n        Initialize your data structure here.\n        :type vec2d: List[List[int]]\n        \"\"\"\n        self.row = 0\n        self.col = 0\n        self.vec2d = vec2d\n    def next(self):",
        "detail": "mid-range.251",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.252",
        "description": "mid-range.252",
        "peekOfCode": "class Solution:\n    def canAttendMeetings(self, intervals: List[List[int]]) -> bool:\n        intervals = sorted(intervals, key=lambda x: x[1])\n        end = -1\n        for interval in intervals:\n            if interval[0] >= end:\n                end = interval[1]\n                continue\n            return False\n        return True",
        "detail": "mid-range.252",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.253",
        "description": "mid-range.253",
        "peekOfCode": "class Solution:\n    def minMeetingRooms(self, intervals: List[List[int]]) -> int:\n        if not intervals:\n            return 0\n        result, curr = 0, 0\n        for i, val in sorted(\n            x for interval in intervals for x in [(interval[0], 1), (interval[1], -1)]\n        ):\n            curr += val\n            result = max(curr, result)",
        "detail": "mid-range.253",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.256",
        "description": "mid-range.256",
        "peekOfCode": "class Solution:\n    def minCost(self, costs):\n        \"\"\"\n        :type costs: List[List[int]]\n        :rtype: int\n        \"\"\"\n        prev = [0] * 3\n        for cost in costs:\n            prev = [cost[i] + min(prev[:i] + prev[i + 1 :]) for i in range(3)]\n        return min(prev)",
        "detail": "mid-range.256",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.257",
        "description": "mid-range.257",
        "peekOfCode": "class Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        if not root:\n            return []\n        paths = []\n        def dfs(root, curr):",
        "detail": "mid-range.257",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.258",
        "description": "mid-range.258",
        "peekOfCode": "class Solution:\n    def addDigits(self, num: int) -> int:\n        if not num:\n            return 0\n        return (num - 1) % 9 + 1\n        # while num // 10 != 0:\n        #         #     result = 0\n        #         #     while num:\n        #         #         num, remainder = divmod(num, 10)\n        #         #         result += remainder",
        "detail": "mid-range.258",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.259",
        "description": "mid-range.259",
        "peekOfCode": "class Solution:\n    def threeSumSmaller(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        ret = 0\n        for i in range(len(nums)):",
        "detail": "mid-range.259",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "mid-range.25strong",
        "description": "mid-range.25strong",
        "peekOfCode": "number = int(input(\"Enter the number: \"))\n# store in temp variable\ntemp = number\n# initiate result as 0\nres = 0\n# while loop for getting individual digits\nwhile number:\n    i = 1\n    f = 1\n    digit = number % 10",
        "detail": "mid-range.25strong",
        "documentation": {}
    },
    {
        "label": "temp",
        "kind": 5,
        "importPath": "mid-range.25strong",
        "description": "mid-range.25strong",
        "peekOfCode": "temp = number\n# initiate result as 0\nres = 0\n# while loop for getting individual digits\nwhile number:\n    i = 1\n    f = 1\n    digit = number % 10\n    # while loop for factorial\n    while i <= digit:",
        "detail": "mid-range.25strong",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "mid-range.25strong",
        "description": "mid-range.25strong",
        "peekOfCode": "res = 0\n# while loop for getting individual digits\nwhile number:\n    i = 1\n    f = 1\n    digit = number % 10\n    # while loop for factorial\n    while i <= digit:\n        f = f * i\n        i = i + 1",
        "detail": "mid-range.25strong",
        "documentation": {}
    },
    {
        "label": "arrayReplace",
        "kind": 2,
        "importPath": "mid-range.25_-_arrayReplace",
        "description": "mid-range.25_-_arrayReplace",
        "peekOfCode": "def arrayReplace(inputArray, elemToReplace, substitutionElem):\n    return [x if x != elemToReplace else substitutionElem for x in inputArray]",
        "detail": "mid-range.25_-_arrayReplace",
        "documentation": {}
    },
    {
        "label": "evenDigitsOnly",
        "kind": 2,
        "importPath": "mid-range.26 - evenDigitsOnly",
        "description": "mid-range.26 - evenDigitsOnly",
        "peekOfCode": "def evenDigitsOnly(n):\n    return all(\n        (True if digit in (\"0\", \"2\", \"4\", \"6\", \"8\") else False for digit in str(n))\n    )",
        "detail": "mid-range.26 - evenDigitsOnly",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.26",
        "description": "mid-range.26",
        "peekOfCode": "class Solution:\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        idx = 0\n        for n in nums[1:]:",
        "detail": "mid-range.26",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.261",
        "description": "mid-range.261",
        "peekOfCode": "class Solution:\n    def validTree(self, n: int, edges: List[List[int]]) -> bool:\n        roots = list(range(n))\n        count = n\n        def find(node):\n            root = node\n            while roots[root] != root:\n                root = roots[root]\n            while node != root:\n                roots[node], node = root, roots[node]",
        "detail": "mid-range.261",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.265",
        "description": "mid-range.265",
        "peekOfCode": "class Solution:\n    def minCostII(self, costs: List[List[int]]) -> int:\n        if not costs:\n            return 0\n        n, k = len(costs), len(costs[0])\n        for i in range(1, n):\n            min1 = min(costs[i - 1])\n            idx = costs[i - 1].index(min1)\n            min2 = min(costs[i - 1][:idx] + costs[i - 1][idx + 1 :])\n            for j in range(k):",
        "detail": "mid-range.265",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.268",
        "description": "mid-range.268",
        "peekOfCode": "class Solution:\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        return n * (n + 1) // 2 - sum(nums)",
        "detail": "mid-range.268",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "mid-range.26prime",
        "description": "mid-range.26prime",
        "peekOfCode": "number = int(input(\"Enter the number: \"))\n# init an empty array\nf = []\nwhile number > 0:\n    # condition for 0\n    if number == 0:\n        print(\"0 is not a prime \")\n    # condition for 1\n    elif number == 1:\n        print(\"1 is not a prime\")",
        "detail": "mid-range.26prime",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "mid-range.26prime",
        "description": "mid-range.26prime",
        "peekOfCode": "f = []\nwhile number > 0:\n    # condition for 0\n    if number == 0:\n        print(\"0 is not a prime \")\n    # condition for 1\n    elif number == 1:\n        print(\"1 is not a prime\")\n    else:\n        # getting factors",
        "detail": "mid-range.26prime",
        "documentation": {}
    },
    {
        "label": "evenDigitsOnly",
        "kind": 2,
        "importPath": "mid-range.26_-_evenDigitsOnly",
        "description": "mid-range.26_-_evenDigitsOnly",
        "peekOfCode": "def evenDigitsOnly(n):\n    return all(\n        (True if digit in (\"0\", \"2\", \"4\", \"6\", \"8\") else False for digit in str(n))\n    )",
        "detail": "mid-range.26_-_evenDigitsOnly",
        "documentation": {}
    },
    {
        "label": "get_stocks",
        "kind": 2,
        "importPath": "mid-range.26_stock_scraper",
        "description": "mid-range.26_stock_scraper",
        "peekOfCode": "def get_stocks(url):\n    # Make Request\n    page = requests.get(url)\n    # Parse/Scrape\n    tree = html.fromstring(page.text)\n    xpath = '//*[@id=\"mw-content-text\"]/table[1]'\n    rows = tree.xpath(xpath)[0].findall(\"tr\")\n    rows = [(row.getchildren()[0], row.getchildren()[3]) for row in rows[1:]]\n    rows = [(row[0].getchildren()[0].text, row[1].text) for row in rows]\n    industries = defaultdict(list)",
        "detail": "mid-range.26_stock_scraper",
        "documentation": {}
    },
    {
        "label": "output_data",
        "kind": 2,
        "importPath": "mid-range.26_stock_scraper",
        "description": "mid-range.26_stock_scraper",
        "peekOfCode": "def output_data(data_dict):\n    for industry in data_dict:\n        print(\"\\n\" + industry)\n        print(\"-\" * len(industry))\n        for ticker in data_dict[industry]:\n            print(ticker)\nif __name__ == \"__main__\":\n    url = \"http://en.wikipedia.org/wiki/List_of_S%26P_500_companies\"\n    scraped_data = get_stocks(url)\n    output_data(scraped_data)",
        "detail": "mid-range.26_stock_scraper",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.27",
        "description": "mid-range.27",
        "peekOfCode": "class Solution:\n    def removeElement(self, nums: List[int], val: int) -> int:\n        if not nums:\n            return 0\n        idx = 0\n        for n in nums:\n            if n != val:\n                nums[idx] = n\n                idx += 1\n        return idx",
        "detail": "mid-range.27",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.270",
        "description": "mid-range.270",
        "peekOfCode": "class Solution:\n    def closestValue(self, root: TreeNode, target: float) -> int:\n        prev = root.val\n        while root:\n            if abs(prev - target) > abs(root.val - target):\n                prev = root.val\n            if target < root.val:\n                root = root.left\n            else:\n                root = root.right",
        "detail": "mid-range.270",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.274",
        "description": "mid-range.274",
        "peekOfCode": "class Solution:\n    def hIndex(self, citations):\n        \"\"\"\n        :type citations: List[int]\n        :rtype: int\n        \"\"\"\n        # citations.sort()\n        # n = len(citations)\n        # for i in range(n):\n        #     if citations[i] >= n - i:",
        "detail": "mid-range.274",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.275",
        "description": "mid-range.275",
        "peekOfCode": "class Solution:\n    def hIndex(self, citations):\n        \"\"\"\n        :type citations: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(citations)\n        for i in range(n):\n            if citations[i] >= n - i:\n                return n - i",
        "detail": "mid-range.275",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.276",
        "description": "mid-range.276",
        "peekOfCode": "class Solution:\n    def numWays(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return k\n        if n == 2:",
        "detail": "mid-range.276",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.277",
        "description": "mid-range.277",
        "peekOfCode": "class Solution:\n    def findCelebrity(self, n: int) -> int:\n        candidate = 0\n        for i in range(1, n):\n            if knows(candidate, i):\n                candidate = i\n        for i in range(n):\n            if (i != candidate and knows(candidate, i)) or (\n                i != candidate and not knows(i, candidate)\n            ):",
        "detail": "mid-range.277",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.278",
        "description": "mid-range.278",
        "peekOfCode": "class Solution:\n    def firstBadVersion(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        left, right = 1, n\n        while left < right:\n            mid = left + (right - left) // 2\n            if isBadVersion(mid):",
        "detail": "mid-range.278",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.279",
        "description": "mid-range.279",
        "peekOfCode": "class Solution:\n    def numSquares(self, n: int) -> int:\n        if n <= 0:\n            return 0\n        dp = [0]\n        while len(dp) < n + 1:\n            i, m = 1, len(dp)\n            square_count = float(\"inf\")\n            while i * i <= m:\n                square_count = min(square_count, dp[m - i * i] + 1)",
        "detail": "mid-range.279",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "mid-range.27_send_sms",
        "description": "mid-range.27_send_sms",
        "peekOfCode": "message = raw_input(\"Enter a Message: \")\nnumber = raw_input(\"Enter the phone number: \")\npayload = {\"number\": number, \"message\": message}\nr = requests.post(\"http://textbelt.com/text\", data=payload)\nif r.json()[\"success\"]:\n    print(\"Success!\")\nelse:\n    print(\"Error!\")",
        "detail": "mid-range.27_send_sms",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "mid-range.27_send_sms",
        "description": "mid-range.27_send_sms",
        "peekOfCode": "number = raw_input(\"Enter the phone number: \")\npayload = {\"number\": number, \"message\": message}\nr = requests.post(\"http://textbelt.com/text\", data=payload)\nif r.json()[\"success\"]:\n    print(\"Success!\")\nelse:\n    print(\"Error!\")",
        "detail": "mid-range.27_send_sms",
        "documentation": {}
    },
    {
        "label": "payload",
        "kind": 5,
        "importPath": "mid-range.27_send_sms",
        "description": "mid-range.27_send_sms",
        "peekOfCode": "payload = {\"number\": number, \"message\": message}\nr = requests.post(\"http://textbelt.com/text\", data=payload)\nif r.json()[\"success\"]:\n    print(\"Success!\")\nelse:\n    print(\"Error!\")",
        "detail": "mid-range.27_send_sms",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "mid-range.27_send_sms",
        "description": "mid-range.27_send_sms",
        "peekOfCode": "r = requests.post(\"http://textbelt.com/text\", data=payload)\nif r.json()[\"success\"]:\n    print(\"Success!\")\nelse:\n    print(\"Error!\")",
        "detail": "mid-range.27_send_sms",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.28",
        "description": "mid-range.28",
        "peekOfCode": "class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        if haystack == needle or not needle:\n            return 0\n        if not haystack:\n            return -1\n        for i in range(len(haystack) - len(needle) + 1):\n            for j in range(len(needle)):\n                if haystack[i + j] != needle[j]:\n                    break",
        "detail": "mid-range.28",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.281",
        "description": "mid-range.281",
        "peekOfCode": "class Solution(object):\n\tdef __init__(self, v1, v2):\n\t\tself.v1 = v1\n\t\tself.v2 = v2\n\t\tself.index_v1 = 0\n\t\tself.index_v2 = 0\n\tdef next(self):\n\t\tresult = -1\n\t\tif self.index_v1 != len(self.v1) and self.index_v1 <= self.index_v2:\n\t\t\tresult = self.v1[self.index_v1]",
        "detail": "mid-range.281",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "mid-range.281",
        "description": "mid-range.281",
        "peekOfCode": "v1 = [1, 2]\nv2 = [3, 4, 5, 6]\nBy calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1, 3, 2, 4, 5, 6].\n'''\nclass Solution(object):\n\tdef __init__(self, v1, v2):\n\t\tself.v1 = v1\n\t\tself.v2 = v2\n\t\tself.index_v1 = 0\n\t\tself.index_v2 = 0",
        "detail": "mid-range.281",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "mid-range.281",
        "description": "mid-range.281",
        "peekOfCode": "v2 = [3, 4, 5, 6]\nBy calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1, 3, 2, 4, 5, 6].\n'''\nclass Solution(object):\n\tdef __init__(self, v1, v2):\n\t\tself.v1 = v1\n\t\tself.v2 = v2\n\t\tself.index_v1 = 0\n\t\tself.index_v2 = 0\n\tdef next(self):",
        "detail": "mid-range.281",
        "documentation": {}
    },
    {
        "label": "\t\tself.v1",
        "kind": 5,
        "importPath": "mid-range.281",
        "description": "mid-range.281",
        "peekOfCode": "\t\tself.v1 = v1\n\t\tself.v2 = v2\n\t\tself.index_v1 = 0\n\t\tself.index_v2 = 0\n\tdef next(self):\n\t\tresult = -1\n\t\tif self.index_v1 != len(self.v1) and self.index_v1 <= self.index_v2:\n\t\t\tresult = self.v1[self.index_v1]\n\t\t\tself.index_v1 += 1\n\t\telse:",
        "detail": "mid-range.281",
        "documentation": {}
    },
    {
        "label": "\t\tself.v2",
        "kind": 5,
        "importPath": "mid-range.281",
        "description": "mid-range.281",
        "peekOfCode": "\t\tself.v2 = v2\n\t\tself.index_v1 = 0\n\t\tself.index_v2 = 0\n\tdef next(self):\n\t\tresult = -1\n\t\tif self.index_v1 != len(self.v1) and self.index_v1 <= self.index_v2:\n\t\t\tresult = self.v1[self.index_v1]\n\t\t\tself.index_v1 += 1\n\t\telse:\n\t\t\tresult = self.v2[self.index_v2]",
        "detail": "mid-range.281",
        "documentation": {}
    },
    {
        "label": "\t\tself.index_v1",
        "kind": 5,
        "importPath": "mid-range.281",
        "description": "mid-range.281",
        "peekOfCode": "\t\tself.index_v1 = 0\n\t\tself.index_v2 = 0\n\tdef next(self):\n\t\tresult = -1\n\t\tif self.index_v1 != len(self.v1) and self.index_v1 <= self.index_v2:\n\t\t\tresult = self.v1[self.index_v1]\n\t\t\tself.index_v1 += 1\n\t\telse:\n\t\t\tresult = self.v2[self.index_v2]\n\t\t\tself.index_v2 += 1",
        "detail": "mid-range.281",
        "documentation": {}
    },
    {
        "label": "\t\tself.index_v2",
        "kind": 5,
        "importPath": "mid-range.281",
        "description": "mid-range.281",
        "peekOfCode": "\t\tself.index_v2 = 0\n\tdef next(self):\n\t\tresult = -1\n\t\tif self.index_v1 != len(self.v1) and self.index_v1 <= self.index_v2:\n\t\t\tresult = self.v1[self.index_v1]\n\t\t\tself.index_v1 += 1\n\t\telse:\n\t\t\tresult = self.v2[self.index_v2]\n\t\t\tself.index_v2 += 1\n\t\treturn result",
        "detail": "mid-range.281",
        "documentation": {}
    },
    {
        "label": "\t\tresult",
        "kind": 5,
        "importPath": "mid-range.281",
        "description": "mid-range.281",
        "peekOfCode": "\t\tresult = -1\n\t\tif self.index_v1 != len(self.v1) and self.index_v1 <= self.index_v2:\n\t\t\tresult = self.v1[self.index_v1]\n\t\t\tself.index_v1 += 1\n\t\telse:\n\t\t\tresult = self.v2[self.index_v2]\n\t\t\tself.index_v2 += 1\n\t\treturn result\n\tdef hasNext(self):\n\t\treturn self.index_v1 < len(self.v1) or self.index_v2 < len(self.v2)",
        "detail": "mid-range.281",
        "documentation": {}
    },
    {
        "label": "\t\t\tresult",
        "kind": 5,
        "importPath": "mid-range.281",
        "description": "mid-range.281",
        "peekOfCode": "\t\t\tresult = self.v1[self.index_v1]\n\t\t\tself.index_v1 += 1\n\t\telse:\n\t\t\tresult = self.v2[self.index_v2]\n\t\t\tself.index_v2 += 1\n\t\treturn result\n\tdef hasNext(self):\n\t\treturn self.index_v1 < len(self.v1) or self.index_v2 < len(self.v2)\nsolution = Solution([1, 2], [3, 4, 5, 6])\nwhile solution.hasNext():",
        "detail": "mid-range.281",
        "documentation": {}
    },
    {
        "label": "\t\t\tresult",
        "kind": 5,
        "importPath": "mid-range.281",
        "description": "mid-range.281",
        "peekOfCode": "\t\t\tresult = self.v2[self.index_v2]\n\t\t\tself.index_v2 += 1\n\t\treturn result\n\tdef hasNext(self):\n\t\treturn self.index_v1 < len(self.v1) or self.index_v2 < len(self.v2)\nsolution = Solution([1, 2], [3, 4, 5, 6])\nwhile solution.hasNext():\n\tprint solution.next()",
        "detail": "mid-range.281",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 5,
        "importPath": "mid-range.281",
        "description": "mid-range.281",
        "peekOfCode": "solution = Solution([1, 2], [3, 4, 5, 6])\nwhile solution.hasNext():\n\tprint solution.next()",
        "detail": "mid-range.281",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.282",
        "description": "mid-range.282",
        "peekOfCode": "class Solution:\n    def addOperators(self, num: str, target: int) -> List[str]:\n        result = []\n        def backtrack(idx, path, value, prev):\n            if idx == len(num) and value == target:\n                result.append(path)\n                return\n            for i in range(idx + 1, len(num) + 1):\n                s = num[idx:i]\n                n = int(s)",
        "detail": "mid-range.282",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.283",
        "description": "mid-range.283",
        "peekOfCode": "class Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        start, end = 0, 0\n        while end < len(nums):\n            if nums[end] != 0:\n                nums[start] = nums[end]\n                start += 1",
        "detail": "mid-range.283",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.285",
        "description": "mid-range.285",
        "peekOfCode": "class Solution(object):\n    def inorderSuccessor(self, root, p):\n        \"\"\"\n        :type root: TreeNode\n        :type p: TreeNode\n        :rtype: TreeNode\n\t\t\"\"\"\n\t\tif not root or not p:\n\t\t\treturn None\n\t\tif p.right:",
        "detail": "mid-range.285",
        "documentation": {}
    },
    {
        "label": "\t\t\tp",
        "kind": 5,
        "importPath": "mid-range.285",
        "description": "mid-range.285",
        "peekOfCode": "\t\t\tp = p.right\n\t\t\twhile p.left:\n\t\t\t\tp = p.left\n\t\t\treturn p\n\t\tsuccessor = None\n\t\twhile root and root != p:\n\t\t\tif root.val > p.val:\n\t\t\t\tsuccessor = root\n\t\t\t\troot = root.left\n\t\t\telse:",
        "detail": "mid-range.285",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tp",
        "kind": 5,
        "importPath": "mid-range.285",
        "description": "mid-range.285",
        "peekOfCode": "\t\t\t\tp = p.left\n\t\t\treturn p\n\t\tsuccessor = None\n\t\twhile root and root != p:\n\t\t\tif root.val > p.val:\n\t\t\t\tsuccessor = root\n\t\t\t\troot = root.left\n\t\t\telse:\n\t\t\t\troot = root.right\n\t\treturn successor",
        "detail": "mid-range.285",
        "documentation": {}
    },
    {
        "label": "\t\tsuccessor",
        "kind": 5,
        "importPath": "mid-range.285",
        "description": "mid-range.285",
        "peekOfCode": "\t\tsuccessor = None\n\t\twhile root and root != p:\n\t\t\tif root.val > p.val:\n\t\t\t\tsuccessor = root\n\t\t\t\troot = root.left\n\t\t\telse:\n\t\t\t\troot = root.right\n\t\treturn successor",
        "detail": "mid-range.285",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tsuccessor",
        "kind": 5,
        "importPath": "mid-range.285",
        "description": "mid-range.285",
        "peekOfCode": "\t\t\t\tsuccessor = root\n\t\t\t\troot = root.left\n\t\t\telse:\n\t\t\t\troot = root.right\n\t\treturn successor",
        "detail": "mid-range.285",
        "documentation": {}
    },
    {
        "label": "\t\t\t\troot",
        "kind": 5,
        "importPath": "mid-range.285",
        "description": "mid-range.285",
        "peekOfCode": "\t\t\t\troot = root.left\n\t\t\telse:\n\t\t\t\troot = root.right\n\t\treturn successor",
        "detail": "mid-range.285",
        "documentation": {}
    },
    {
        "label": "\t\t\t\troot",
        "kind": 5,
        "importPath": "mid-range.285",
        "description": "mid-range.285",
        "peekOfCode": "\t\t\t\troot = root.right\n\t\treturn successor",
        "detail": "mid-range.285",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.286",
        "description": "mid-range.286",
        "peekOfCode": "class Solution:\n    def wallsAndGates(self, rooms: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify rooms in-place instead.\n        \"\"\"\n        if not rooms or not rooms[0]:\n            return\n        m, n = len(rooms), len(rooms[0])\n        q = deque()\n        for i in range(m):",
        "detail": "mid-range.286",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.287",
        "description": "mid-range.287",
        "peekOfCode": "class Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        result = 0\n        l, r = 1, len(nums) - 1\n        while l <= r:\n            mid = l + (r - l) // 2\n            count = self.getCount(mid, nums)\n            if count > mid:\n                result = mid\n                r = mid - 1",
        "detail": "mid-range.287",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.289",
        "description": "mid-range.289",
        "peekOfCode": "class Solution(object):\n    def gameOfLife(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: void Do not return anything, modify board in-place instead.\n        \"\"\"\n        index = []\n        def around(i, j, board):\n            count = 0\n            for k in range(i - 1, i + 2):",
        "detail": "mid-range.289",
        "documentation": {}
    },
    {
        "label": "alphabeticShift",
        "kind": 2,
        "importPath": "mid-range.28_-_alphabeticShift",
        "description": "mid-range.28_-_alphabeticShift",
        "peekOfCode": "def alphabeticShift(inputString):\n    return \"\".join([chr(ord(x) + 1) if x != \"z\" else \"a\" for x in inputString])",
        "detail": "mid-range.28_-_alphabeticShift",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "mid-range.28_income_tax_calculator",
        "description": "mid-range.28_income_tax_calculator",
        "peekOfCode": "headers = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n    \"Accept\": \"application/json\",\n}\ndata = {\n    \"pay_rate\": \"10000\",\n    \"filing_status\": \"single\",\n    \"pay_periods\": 1,\n    \"state\": \"CO\",\n    \"year\": \"2014\",",
        "detail": "mid-range.28_income_tax_calculator",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.28_income_tax_calculator",
        "description": "mid-range.28_income_tax_calculator",
        "peekOfCode": "data = {\n    \"pay_rate\": \"10000\",\n    \"filing_status\": \"single\",\n    \"pay_periods\": 1,\n    \"state\": \"CO\",\n    \"year\": \"2014\",\n}\nr = requests.post(\"http://taxee.io/api/v1/calculate/2014\", data=data, headers=headers)\nprint(r.text)",
        "detail": "mid-range.28_income_tax_calculator",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "mid-range.28_income_tax_calculator",
        "description": "mid-range.28_income_tax_calculator",
        "peekOfCode": "r = requests.post(\"http://taxee.io/api/v1/calculate/2014\", data=data, headers=headers)\nprint(r.text)",
        "detail": "mid-range.28_income_tax_calculator",
        "documentation": {}
    },
    {
        "label": "chessBoardCellColor",
        "kind": 2,
        "importPath": "mid-range.29 - chessBoardCellColor",
        "description": "mid-range.29 - chessBoardCellColor",
        "peekOfCode": "def chessBoardCellColor(cell1, cell2):\n    cell1_elm = ord(cell1[0]) + int(cell1[1])\n    cell2_elm = ord(cell2[0]) + int(cell2[1])\n    return (cell1_elm + cell2_elm) % 2 == 0",
        "detail": "mid-range.29 - chessBoardCellColor",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.29",
        "description": "mid-range.29",
        "peekOfCode": "class Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        sign = (dividend > 0) == (divisor > 0)\n        dividend, divisor = abs(dividend), abs(divisor)\n        result = 0\n        while dividend >= divisor:\n            temp = 0\n            while dividend >= (divisor << temp + 1):\n                temp += 1\n            result += 1 << temp",
        "detail": "mid-range.29",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.290",
        "description": "mid-range.290",
        "peekOfCode": "class Solution:\n    def wordPattern(self, pattern: str, str: str) -> bool:\n        ss = str.split()\n        return len(set(zip(pattern, ss))) == len(set(pattern)) == len(set(ss)) and len(\n            ss\n        ) == len(pattern)\nclass Solution:\n    def wordPattern(self, pattern: str, str: str) -> bool:\n        def convert(s):\n            m = {}",
        "detail": "mid-range.290",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.290",
        "description": "mid-range.290",
        "peekOfCode": "class Solution:\n    def wordPattern(self, pattern: str, str: str) -> bool:\n        def convert(s):\n            m = {}\n            return [m.setdefault(c, len(m)) for c in s]\n        return convert(pattern) == convert(str.split())",
        "detail": "mid-range.290",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.291",
        "description": "mid-range.291",
        "peekOfCode": "class Solution:\n    def wordPatternMatch(self, pattern: str, str: str) -> bool:\n        visited_pattern = {}\n        visited_str = set()\n        def backtrack(i, j):\n            if i == len(pattern) and j == len(str):\n                return True\n            if i == len(pattern) or j == len(str):\n                return False\n            c = pattern[i]",
        "detail": "mid-range.291",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.296",
        "description": "mid-range.296",
        "peekOfCode": "class Solution:\n    def minTotalDistance(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        l1, l2 = [], []\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    l1.append(i)\n                    l2.append(j)\n        def getMin(l):",
        "detail": "mid-range.296",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "mid-range.297",
        "description": "mid-range.297",
        "peekOfCode": "class Codec:\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        vals = []\n        def preorder(node):\n            if not node:\n                vals.append(\"#\")",
        "detail": "mid-range.297",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.298",
        "description": "mid-range.298",
        "peekOfCode": "class Solution:\n    def longestConsecutive(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        result = 0\n        stack = [(root, 1)]",
        "detail": "mid-range.298",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.299",
        "description": "mid-range.299",
        "peekOfCode": "class Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n        s = {}\n        g = {}\n        bulls, cows = 0, 0\n        for i in range(len(secret)):\n            if secret[i] == guess[i]:\n                bulls += 1\n            else:\n                s[secret[i]] = s.get(secret[i], 0) + 1",
        "detail": "mid-range.299",
        "documentation": {}
    },
    {
        "label": "chessBoardCellColor",
        "kind": 2,
        "importPath": "mid-range.29_-_chessBoardCellColor",
        "description": "mid-range.29_-_chessBoardCellColor",
        "peekOfCode": "def chessBoardCellColor(cell1, cell2):\n    color1 = ((ord(cell1[0]) - ord(\"A\")) + ord(cell1[1]) - ord(\"1\")) % 2 == 0\n    color2 = ((ord(cell2[0]) - ord(\"A\")) + ord(cell2[1]) - ord(\"1\")) % 2 == 0\n    return color1 == color2",
        "detail": "mid-range.29_-_chessBoardCellColor",
        "documentation": {}
    },
    {
        "label": "json_data",
        "kind": 5,
        "importPath": "mid-range.29_json_to_yaml",
        "description": "mid-range.29_json_to_yaml",
        "peekOfCode": "json_data = json.loads(open(sys.argv[1]).read())\n# convert unicode to string\nconverted_json_data = json.dumps(json_data)\n# output yaml\nprint(yaml.dump(yaml.load(converted_json_data), default_flow_style=False))",
        "detail": "mid-range.29_json_to_yaml",
        "documentation": {}
    },
    {
        "label": "converted_json_data",
        "kind": 5,
        "importPath": "mid-range.29_json_to_yaml",
        "description": "mid-range.29_json_to_yaml",
        "peekOfCode": "converted_json_data = json.dumps(json_data)\n# output yaml\nprint(yaml.dump(yaml.load(converted_json_data), default_flow_style=False))",
        "detail": "mid-range.29_json_to_yaml",
        "documentation": {}
    },
    {
        "label": "hourglassSum",
        "kind": 2,
        "importPath": "mid-range.2D-Array-DS",
        "description": "mid-range.2D-Array-DS",
        "peekOfCode": "def hourglassSum(arr):\n    s = -math.inf\n    maxSum = -math.inf\n    for i in range(len(arr) - 2):\n        for j in range(len(arr[0]) - 2):\n            s = (\n                arr[i][j]\n                + arr[i][j + 1]\n                + arr[i][j + 2]\n                + arr[i + 1][j + 1]",
        "detail": "mid-range.2D-Array-DS",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.2StringOrNot",
        "description": "mid-range.2StringOrNot",
        "peekOfCode": "x = input(\"Enter the input which has to be checked: \")\ntry:\n    val = int(x)\n    print(\"Entered value is an Integer\")\nexcept:\n    print(\"Entered value is a String\")",
        "detail": "mid-range.2StringOrNot",
        "documentation": {}
    },
    {
        "label": "to_number",
        "kind": 2,
        "importPath": "mid-range.2_Functions_mGalarnyk",
        "description": "mid-range.2_Functions_mGalarnyk",
        "peekOfCode": "def to_number(string):\n    new_int = int(string)\n    return new_int\ndef add_two(n1,n2):\n    summation = n1 + n2\n    return summation\ndef cube(n): \n    cubed = n**3\n    return cubed\nprint cube(add_two(to_number('6'),to_number('5')))",
        "detail": "mid-range.2_Functions_mGalarnyk",
        "documentation": {}
    },
    {
        "label": "add_two",
        "kind": 2,
        "importPath": "mid-range.2_Functions_mGalarnyk",
        "description": "mid-range.2_Functions_mGalarnyk",
        "peekOfCode": "def add_two(n1,n2):\n    summation = n1 + n2\n    return summation\ndef cube(n): \n    cubed = n**3\n    return cubed\nprint cube(add_two(to_number('6'),to_number('5')))",
        "detail": "mid-range.2_Functions_mGalarnyk",
        "documentation": {}
    },
    {
        "label": "cube",
        "kind": 2,
        "importPath": "mid-range.2_Functions_mGalarnyk",
        "description": "mid-range.2_Functions_mGalarnyk",
        "peekOfCode": "def cube(n): \n    cubed = n**3\n    return cubed\nprint cube(add_two(to_number('6'),to_number('5')))",
        "detail": "mid-range.2_Functions_mGalarnyk",
        "documentation": {}
    },
    {
        "label": "build_index",
        "kind": 2,
        "importPath": "mid-range.3-index",
        "description": "mid-range.3-index",
        "peekOfCode": "def build_index(rec):\n    # build the index from the list\n    idx = {}\n    for r in rec:\n        name, dept = r\n        if dept not in idx:\n            idx[dept] = []\n        idx[dept].append(name)\n    return idx\nidx = build_index(records)",
        "detail": "mid-range.3-index",
        "documentation": {}
    },
    {
        "label": "records",
        "kind": 5,
        "importPath": "mid-range.3-index",
        "description": "mid-range.3-index",
        "peekOfCode": "records = [\n    (\"Alice\", \"Engineering\"),\n    (\"Bob\", \"Sales\"),\n    (\"Carol\", \"Sales\"),\n    (\"Erin\", \"Engineering\"),\n    (\"Dave\", \"Engineering\"),\n    (\"Frank\", \"Engineering\"),\n    (\"Grace\", \"Marketing\"),\n]\ndef build_index(rec):",
        "detail": "mid-range.3-index",
        "documentation": {}
    },
    {
        "label": "idx",
        "kind": 5,
        "importPath": "mid-range.3-index",
        "description": "mid-range.3-index",
        "peekOfCode": "idx = build_index(records)\nprint(idx)\n# print all the departments\nfor i in idx:\n    print(i)\n# print everyone in Engineering:\nidx[\"Engineering\"].sort()\n# ['Alice', 'Erin', 'Dave', 'Frank'].sort()\nprint(f\"Engineering: {idx['Engineering']}\")",
        "detail": "mid-range.3-index",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.3",
        "description": "mid-range.3",
        "peekOfCode": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        start, d = 0, {}\n        result = 0\n        for i, val in enumerate(s):\n            if val in d and d[val] >= start:\n                start = d[val] + 1\n            d[val] = i\n            result = max(result, i - start + 1)\n        return result",
        "detail": "mid-range.3",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.30",
        "description": "mid-range.30",
        "peekOfCode": "class Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        if not s or not words or len(s) == 0 or len(words) == 0:\n            return []\n        m, n = len(words[0]), len(words)\n        result = []\n        d = Counter(words)\n        for start in range(min(m, len(s) - n * m + 1)):\n            new_start = start\n            end = start",
        "detail": "mid-range.30",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.300",
        "description": "mid-range.300",
        "peekOfCode": "class Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        if len(nums) <= 1:\n            return len(nums)\n        tails = [0] * len(nums)\n        result = 0\n        for x in nums:\n            i, j = 0, result",
        "detail": "mid-range.300",
        "documentation": {}
    },
    {
        "label": "NumArray",
        "kind": 6,
        "importPath": "mid-range.303",
        "description": "mid-range.303",
        "peekOfCode": "class NumArray(object):\n    def __init__(self, nums):\n        n = len(nums)\n        self.sum = [0] * (n + 1)\n        for i in range(n):\n            self.sum[i + 1] = self.sum[i] + nums[i]\n    def sumRange(self, i, j):\n        \"\"\"\n        :param i: int\n        :param j: int",
        "detail": "mid-range.303",
        "documentation": {}
    },
    {
        "label": "NumMatrix",
        "kind": 6,
        "importPath": "mid-range.304",
        "description": "mid-range.304",
        "peekOfCode": "class NumMatrix(object):\n    def __init__(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        \"\"\"\n        if not matrix:\n            return\n        rows = len(matrix)\n        cols = len(matrix[0]) if rows > 0 else 0\n        self.sums = [[0 for j in range(cols + 1)] for i in range(rows + 1)]",
        "detail": "mid-range.304",
        "documentation": {}
    },
    {
        "label": "NumArray",
        "kind": 6,
        "importPath": "mid-range.307",
        "description": "mid-range.307",
        "peekOfCode": "class NumArray:\n    def __init__(self, nums: List[int]):\n        self.n = len(nums)\n        self.nums, self.tree = nums, [0] * (self.n + 1)\n        for i in range(self.n):\n            j = i + 1\n            while j <= self.n:\n                self.tree[j] += nums[i]\n                j += j & -j\n    def update(self, i: int, val: int) -> None:",
        "detail": "mid-range.307",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.309",
        "description": "mid-range.309",
        "peekOfCode": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        # three states\n        # s0: not holding any stock but can buy or wait\n        # s1: holding stocks, can sell or wait\n        # s2: not holding any stock due to selling stock that day, enter lockdown period\n        s0, s1, s2 = 0, float(\"-inf\"), 0\n        for price in prices:\n            s1 = max(s1, s0 - price)\n            s0 = max(s0, s2)",
        "detail": "mid-range.309",
        "documentation": {}
    },
    {
        "label": "get_arguments",
        "kind": 2,
        "importPath": "mid-range.30_fullcontact",
        "description": "mid-range.30_fullcontact",
        "peekOfCode": "def get_arguments():\n    if len(sys.argv) is 3:\n        return {\"media\": sys.argv[1], \"user_info\": sys.argv[2]}\n    else:\n        print(\"Specify at least 1 argument\")\n        sys.exit()\ndef call_api(contact):\n    url = BASE_URL + \"?{0}={1}&apiKey={2}\".format(\n        contact[\"media\"], contact[\"user_info\"], API_KEY\n    )",
        "detail": "mid-range.30_fullcontact",
        "documentation": {}
    },
    {
        "label": "call_api",
        "kind": 2,
        "importPath": "mid-range.30_fullcontact",
        "description": "mid-range.30_fullcontact",
        "peekOfCode": "def call_api(contact):\n    url = BASE_URL + \"?{0}={1}&apiKey={2}\".format(\n        contact[\"media\"], contact[\"user_info\"], API_KEY\n    )\n    r = requests.get(url)\n    if r.status_code == 200:\n        return r.text\n    else:\n        return \"Sorry, no results found.\"\n# main",
        "detail": "mid-range.30_fullcontact",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": "mid-range.30_fullcontact",
        "description": "mid-range.30_fullcontact",
        "peekOfCode": "API_KEY = os.environ.get(\"FULLCONTACT_API_KEY\")\nBASE_URL = \"http://api.fullcontact.com/v2/person.json\"\n# helpers\ndef get_arguments():\n    if len(sys.argv) is 3:\n        return {\"media\": sys.argv[1], \"user_info\": sys.argv[2]}\n    else:\n        print(\"Specify at least 1 argument\")\n        sys.exit()\ndef call_api(contact):",
        "detail": "mid-range.30_fullcontact",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "mid-range.30_fullcontact",
        "description": "mid-range.30_fullcontact",
        "peekOfCode": "BASE_URL = \"http://api.fullcontact.com/v2/person.json\"\n# helpers\ndef get_arguments():\n    if len(sys.argv) is 3:\n        return {\"media\": sys.argv[1], \"user_info\": sys.argv[2]}\n    else:\n        print(\"Specify at least 1 argument\")\n        sys.exit()\ndef call_api(contact):\n    url = BASE_URL + \"?{0}={1}&apiKey={2}\".format(",
        "detail": "mid-range.30_fullcontact",
        "documentation": {}
    },
    {
        "label": "depositProfit",
        "kind": 2,
        "importPath": "mid-range.31 - depositProfit",
        "description": "mid-range.31 - depositProfit",
        "peekOfCode": "def depositProfit(deposit, rate, threshold):\n    year = 0\n    while deposit < threshold:\n        deposit *= 1 + (rate / 100)\n        year += 1\n    return year",
        "detail": "mid-range.31 - depositProfit",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.31",
        "description": "mid-range.31",
        "peekOfCode": "class Solution:\n    def nextPermutation(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        n = len(nums)\n        i = n - 1\n        while i > 0:\n            if nums[i - 1] < nums[i]:\n                break",
        "detail": "mid-range.31",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.310",
        "description": "mid-range.310",
        "peekOfCode": "class Solution:\n    def findMinHeightTrees(self, n: int, edges: List[List[int]]) -> List[int]:\n        if n == 1:\n            return [0]\n        link = {i: set() for i in range(n)}\n        for edge in edges:\n            x, y = edge[0], edge[1]\n            link[x].add(y)\n            link[y].add(x)\n        leaves = [k for k, v in link.items() if len(v) == 1]",
        "detail": "mid-range.310",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.311",
        "description": "mid-range.311",
        "peekOfCode": "class Solution:\n    def multiply(self, A: List[List[int]], B: List[List[int]]) -> List[List[int]]:\n        rows, n, cols = len(A), len(A[0]), len(B[0])\n        C = [[0] * cols for _ in range(rows)]\n        for i in range(rows):\n            for j in range(n):\n                if A[i][j] != 0:\n                    for z in range(cols):\n                        if B[j][z] != 0:\n                            C[i][z] += A[i][j] * B[j][z]",
        "detail": "mid-range.311",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.314",
        "description": "mid-range.314",
        "peekOfCode": "class Solution:\n    def verticalOrder(self, root: TreeNode) -> List[List[int]]:\n        if not root:\n            return []\n        d = defaultdict(list)\n        queue = [(root, 0)]\n        while queue:\n            new_queue = []\n            for node, x in queue:\n                d[x].append(node.val)",
        "detail": "mid-range.314",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.316",
        "description": "mid-range.316",
        "peekOfCode": "class Solution:\n    def removeDuplicateLetters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        if not s or len(s) < 2:\n            return s\n        count = [0] * 26\n        for c in s:",
        "detail": "mid-range.316",
        "documentation": {}
    },
    {
        "label": "depositProfit",
        "kind": 2,
        "importPath": "mid-range.31_-_depositProfit",
        "description": "mid-range.31_-_depositProfit",
        "peekOfCode": "def depositProfit(deposit, rate, threshold):\n    year = 0\n    while deposit < threshold:\n        deposit *= 1 + (rate / 100)\n        year += 1\n    return year",
        "detail": "mid-range.31_-_depositProfit",
        "documentation": {}
    },
    {
        "label": "absoluteValuesSumMinimization",
        "kind": 2,
        "importPath": "mid-range.32 - absoluteValuesSumMinimization",
        "description": "mid-range.32 - absoluteValuesSumMinimization",
        "peekOfCode": "def absoluteValuesSumMinimization(a):\n    sums = []\n    for i in range(len(a)):\n        sum = 0\n        for j in range(len(a)):\n            sum += abs(a[i] - a[j])\n        sums.append(sum)\n    return a[sums.index(min(sums))]",
        "detail": "mid-range.32 - absoluteValuesSumMinimization",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.32",
        "description": "mid-range.32",
        "peekOfCode": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        stack, result = [-1], 0\n        for index in range(len(s)):\n            if s[index] == \"(\":\n                stack.append(index)",
        "detail": "mid-range.32",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.322",
        "description": "mid-range.322",
        "peekOfCode": "class Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        dp = [amount + 1] * (amount + 1)\n        dp[0] = 0\n        for i in range(1, amount + 1):\n            for coin in coins:\n                if i - coin < 0:\n                    continue\n                dp[i] = min(dp[i], 1 + dp[i - coin])\n        return -1 if dp[amount] == amount + 1 else dp[amount]",
        "detail": "mid-range.322",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.323",
        "description": "mid-range.323",
        "peekOfCode": "class Solution:\n    def countComponents(self, n: int, edges: List[List[int]]) -> int:\n        count = n\n        roots = list(range(n))\n        def find(node):\n            root = node\n            while roots[root] != root:\n                root = roots[root]\n            while node != root:\n                roots[node], node = root, roots[node]",
        "detail": "mid-range.323",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.325",
        "description": "mid-range.325",
        "peekOfCode": "class Solution:\n    def maxSubArrayLen(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        sum, ret = 0, 0\n        map = {}\n        for i in range(len(nums)):",
        "detail": "mid-range.325",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.326",
        "description": "mid-range.326",
        "peekOfCode": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        if n <= 0:\n            return False\n        import math\n        return (math.log10(n) / math.log10(3)) % 1 == 0",
        "detail": "mid-range.326",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.328",
        "description": "mid-range.328",
        "peekOfCode": "class Solution(object):\n    def oddEvenList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None\n        odd, even = head, head.next\n        evenHead = even",
        "detail": "mid-range.328",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "mid-range.32dpyramid",
        "description": "mid-range.32dpyramid",
        "peekOfCode": "num = 5\nfor i in range(num, 0, -1):\n    for j in range(0, i):\n        print(num, end=\"\")\n    num -= 1\n    print()",
        "detail": "mid-range.32dpyramid",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "mid-range.32epyramid",
        "description": "mid-range.32epyramid",
        "peekOfCode": "num = 5\nfor i in range(num, 0, -1):\n    for j in range(0, i):\n        print(num, end=\"\")\n    num -= 1\n    print()",
        "detail": "mid-range.32epyramid",
        "documentation": {}
    },
    {
        "label": "absoluteValuesSumMinimization",
        "kind": 2,
        "importPath": "mid-range.32_-_absoluteValuesSumMinimization",
        "description": "mid-range.32_-_absoluteValuesSumMinimization",
        "peekOfCode": "def absoluteValuesSumMinimization(a):\n    sums = {}\n    for num in a:\n        total = sum([abs(a[i] - num) for i in range(len(a))])\n        if total in sums:\n            sums[total] = min(num, sums[total])\n        else:\n            sums[total] = num\n        print(sums)\n    return sums[min(sums)]",
        "detail": "mid-range.32_-_absoluteValuesSumMinimization",
        "documentation": {}
    },
    {
        "label": "get_stock_tickers",
        "kind": 2,
        "importPath": "mid-range.32_stock_scraper",
        "description": "mid-range.32_stock_scraper",
        "peekOfCode": "def get_stock_tickers():\n    req = urllib.request.Request(\n        \"http://en.wikipedia.org/wiki/List_of_S%26P_500_companies\"\n    )\n    page = urllib.request.urlopen(req)\n    soup = BeautifulSoup(page, \"html.parser\")\n    table = soup.find(\"table\", {\"class\": \"wikitable sortable\"})\n    tickers = []\n    for row in table.findAll(\"tr\"):\n        col = row.findAll(\"td\")",
        "detail": "mid-range.32_stock_scraper",
        "documentation": {}
    },
    {
        "label": "get_stock_prices",
        "kind": 2,
        "importPath": "mid-range.32_stock_scraper",
        "description": "mid-range.32_stock_scraper",
        "peekOfCode": "def get_stock_prices(ticker_list):\n    for ticker in ticker_list:\n        htmlfile = urllib.request.urlopen(\n            \"http://finance.yahoo.com/q?s={0}\".format(ticker)\n        )\n        htmltext = htmlfile.read()\n        soup = BeautifulSoup(htmltext, \"html.parser\")\n        htmlSelector = \"yfs_l84_{0}\".format(ticker.lower())\n        for price in soup.find_all(id=htmlSelector):\n            print(\"{0} is {1}\".format(ticker, price.text))",
        "detail": "mid-range.32_stock_scraper",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.32_stock_scraper",
        "description": "mid-range.32_stock_scraper",
        "peekOfCode": "def main():\n    all_tickers = get_stock_tickers()\n    get_stock_prices(all_tickers)\nif __name__ == \"__main__\":\n    main()",
        "detail": "mid-range.32_stock_scraper",
        "documentation": {}
    },
    {
        "label": "stringsRearrangement",
        "kind": 2,
        "importPath": "mid-range.33 - stringsRearrangement",
        "description": "mid-range.33 - stringsRearrangement",
        "peekOfCode": "def stringsRearrangement(inputArray):\n    permutations = itertools.permutations(inputArray)\n    for array in permutations:\n        if testArrangement(array):\n            return True\n    return False\ndef testArrangement(array):\n    for i in range(len(array) - 1):\n        if sum([a != b for a, b in zip(array[i], array[i + 1])]) != 1:\n            return False",
        "detail": "mid-range.33 - stringsRearrangement",
        "documentation": {}
    },
    {
        "label": "testArrangement",
        "kind": 2,
        "importPath": "mid-range.33 - stringsRearrangement",
        "description": "mid-range.33 - stringsRearrangement",
        "peekOfCode": "def testArrangement(array):\n    for i in range(len(array) - 1):\n        if sum([a != b for a, b in zip(array[i], array[i + 1])]) != 1:\n            return False\n    return True",
        "detail": "mid-range.33 - stringsRearrangement",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.332",
        "description": "mid-range.332",
        "peekOfCode": "class Solution:\n    def findItinerary(self, tickets: List[List[str]]) -> List[str]:\n        result = []\n        airports = defaultdict(deque)\n        tickets = sorted(tickets, reverse=True)\n        for ticket in tickets:\n            airports[ticket[0]].append(ticket[1])\n        stack, result = [\"JFK\"], []\n        while stack:\n            while airports[stack[-1]]:",
        "detail": "mid-range.332",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.334",
        "description": "mid-range.334",
        "peekOfCode": "class Solution(object):\n    def increasingTriplet(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        first, second = float(\"inf\"), float(\"inf\")\n        for val in nums:\n            if val <= first:\n                first = val",
        "detail": "mid-range.334",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.336",
        "description": "mid-range.336",
        "peekOfCode": "class Solution:\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        lookup = {w: i for i, w in enumerate(words)}\n        result = []\n        for i, w in enumerate(words):\n            for j in range(len(w) + 1):",
        "detail": "mid-range.336",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.337",
        "description": "mid-range.337",
        "peekOfCode": "class Solution:\n    def rob(self, root: TreeNode) -> int:\n        def dfs(node):\n            if not node:\n                return (0, 0)\n            left, right = dfs(node.left), dfs(node.right)\n            s1, s2 = node.val + left[0] + right[0], max(left) + max(right)\n            return (s2, s1)\n        return max(dfs(root))",
        "detail": "mid-range.337",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.338",
        "description": "mid-range.338",
        "peekOfCode": "class Solution:\n    def countBits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n        ret = [0] * (num + 1)\n        for i in range(1, num + 1):\n            ret[i] = ret[i >> 1] + i % 2\n        return ret",
        "detail": "mid-range.338",
        "documentation": {}
    },
    {
        "label": "stringsRearrangement",
        "kind": 2,
        "importPath": "mid-range.33_-_stringsRearrangement",
        "description": "mid-range.33_-_stringsRearrangement",
        "peekOfCode": "def stringsRearrangement(inputArray):\n    permutations = itertools.permutations(inputArray)\n    for array in permutations:\n        if testArrangement(array):\n            return True\n    return False\ndef testArrangement(array):\n    for i in range(len(array) - 1):\n        if sum([a != b for a, b in zip(array[i], array[i + 1])]) != 1:\n            return False",
        "detail": "mid-range.33_-_stringsRearrangement",
        "documentation": {}
    },
    {
        "label": "testArrangement",
        "kind": 2,
        "importPath": "mid-range.33_-_stringsRearrangement",
        "description": "mid-range.33_-_stringsRearrangement",
        "peekOfCode": "def testArrangement(array):\n    for i in range(len(array) - 1):\n        if sum([a != b for a, b in zip(array[i], array[i + 1])]) != 1:\n            return False\n    return True",
        "detail": "mid-range.33_-_stringsRearrangement",
        "documentation": {}
    },
    {
        "label": "extractEachKth",
        "kind": 2,
        "importPath": "mid-range.34 - extractEachKth",
        "description": "mid-range.34 - extractEachKth",
        "peekOfCode": "def extractEachKth(inputArray, k):\n    return [inputArray[x] for x in range(len(inputArray)) if (x + 1) % k != 0]",
        "detail": "mid-range.34 - extractEachKth",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.34",
        "description": "mid-range.34",
        "peekOfCode": "class Solution:\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        if not nums or len(nums) == 0:\n            return [-1, -1]\n        def findGreater(t):",
        "detail": "mid-range.34",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.340",
        "description": "mid-range.340",
        "peekOfCode": "class Solution:\n    def lengthOfLongestSubstringKDistinct(self, s: str, k: int) -> int:\n        count = 0\n        start, end = 0, 0\n        result = 0\n        d = {}\n        while end < len(s):\n            c = s[end]\n            d[c] = d.get(c, 0) + 1\n            if d[c] == 1:",
        "detail": "mid-range.340",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.342",
        "description": "mid-range.342",
        "peekOfCode": "class Solution:\n    def isPowerOfFour(self, num: int) -> bool:\n        return num & (num - 1) == 0 and (num - 1) % 3 == 0",
        "detail": "mid-range.342",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.344",
        "description": "mid-range.344",
        "peekOfCode": "class Solution:\n    def reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        left, right = 0, len(s) - 1\n        while left < right:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1",
        "detail": "mid-range.344",
        "documentation": {}
    },
    {
        "label": "MovingAverage",
        "kind": 6,
        "importPath": "mid-range.346",
        "description": "mid-range.346",
        "peekOfCode": "class MovingAverage:\n    def __init__(self, size: int):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.size = size\n        self.window = deque()\n    def next(self, val: int) -> float:\n        self.window.append(val)\n        if len(self.window) > self.size:",
        "detail": "mid-range.346",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.347",
        "description": "mid-range.347",
        "peekOfCode": "class Solution(object):\n    def topKFrequent(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        counter = defaultdict(list)\n        for key, val in Counter(nums).items():\n            counter[val].append(key)",
        "detail": "mid-range.347",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.349",
        "description": "mid-range.349",
        "peekOfCode": "class Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        result = []\n        nums1 = set(nums1)\n        for num in nums2:\n            if num in nums1 and not num in result:\n                result.append(num)\n        return result",
        "detail": "mid-range.349",
        "documentation": {}
    },
    {
        "label": "extractEachKth",
        "kind": 2,
        "importPath": "mid-range.34_-_extractEachKth",
        "description": "mid-range.34_-_extractEachKth",
        "peekOfCode": "def extractEachKth(inputArray, k):\n    return [inputArray[x] for x in range(len(inputArray)) if (x + 1) % k != 0]",
        "detail": "mid-range.34_-_extractEachKth",
        "documentation": {}
    },
    {
        "label": "get_total_repos",
        "kind": 2,
        "importPath": "mid-range.34_git_all_repos",
        "description": "mid-range.34_git_all_repos",
        "peekOfCode": "def get_total_repos(group, name):\n    repo_urls = []\n    page = 1\n    while True:\n        url = \"https://api.github.com/{0}/{1}/repos?per_page=100&page={2}\"\n        r = requests.get(url.format(group, name, page))\n        if r.status_code == 200:\n            rdata = r.json()\n            for repo in rdata:\n                repo_urls.append(repo[\"clone_url\"])",
        "detail": "mid-range.34_git_all_repos",
        "documentation": {}
    },
    {
        "label": "clone_repos",
        "kind": 2,
        "importPath": "mid-range.34_git_all_repos",
        "description": "mid-range.34_git_all_repos",
        "peekOfCode": "def clone_repos(all_repos):\n    count = 1\n    print(\"Cloning...\")\n    for repo in all_repos:\n        os.system(\"Git clone \" + repo)\n        print(\"Completed repo #{0} of {1}\".format(count, len(all_repos)))\n        count += 1\nif __name__ == \"__main__\":\n    if len(sys.argv) > 2:\n        total = get_total_repos(sys.argv[1], sys.argv[2])",
        "detail": "mid-range.34_git_all_repos",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.35",
        "description": "mid-range.35",
        "peekOfCode": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        if not nums or target < nums[0]:\n            return 0\n        if nums[-1] < target:\n            return len(nums)\n        l, r = 0, len(nums) - 1\n        while l <= r:\n            m = l + (r - l) // 2\n            if nums[m] == target:",
        "detail": "mid-range.35",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.350",
        "description": "mid-range.350",
        "peekOfCode": "class Solution:\n    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        result = []\n        count1 = Counter(nums1)\n        for n in nums2:\n            if n in count1 and count1[n] > 0:\n                count1[n] -= 1\n                result.append(n)\n        return result",
        "detail": "mid-range.350",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.351",
        "description": "mid-range.351",
        "peekOfCode": "class Solution:\n    def numberOfPatterns(self, m: int, n: int) -> int:\n        skip = {\n            (1, 3): 2,\n            (1, 7): 4,\n            (1, 9): 5,\n            (2, 8): 5,\n            (3, 7): 5,\n            (3, 9): 6,\n            (4, 6): 5,",
        "detail": "mid-range.351",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.354",
        "description": "mid-range.354",
        "peekOfCode": "class Solution:\n    def maxEnvelopes(self, envelopes: List[List[int]]) -> int:\n        N = len(envelopes)\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        tail = [0] * N\n        result = 0\n        for e in envelopes:\n            i, j = 0, result\n            while i != j:\n                m = i + (j - i) // 2",
        "detail": "mid-range.354",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.358",
        "description": "mid-range.358",
        "peekOfCode": "class Solution:\n    def rearrangeString(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        if k == 0:\n            return s\n        l = [(-count, c) for c, count in Counter(s).items()]",
        "detail": "mid-range.358",
        "documentation": {}
    },
    {
        "label": "Logger",
        "kind": 6,
        "importPath": "mid-range.359",
        "description": "mid-range.359",
        "peekOfCode": "class Logger:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.logger = {}\n    def shouldPrintMessage(self, timestamp: int, message: str) -> bool:\n        \"\"\"\n        Returns true if the message should be printed in the given timestamp, otherwise returns false.\n        If this method returns false, the message will not be printed.",
        "detail": "mid-range.359",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.36",
        "description": "mid-range.36",
        "peekOfCode": "class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        for row in board:\n            if not self.isValid(row):\n                return False\n        for col in zip(*board):\n            if not self.isValid(col):\n                return False\n        for i in [0, 3, 6]:\n            for j in [0, 3, 6]:",
        "detail": "mid-range.36",
        "documentation": {}
    },
    {
        "label": "HitCounter",
        "kind": 6,
        "importPath": "mid-range.362",
        "description": "mid-range.362",
        "peekOfCode": "class HitCounter:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.counter = [[0, t + 1] for t in range(300)]\n    def hit(self, timestamp: int) -> None:\n        \"\"\"\n        Record a hit.\n        @param timestamp - The current timestamp (in seconds granularity).",
        "detail": "mid-range.362",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.366",
        "description": "mid-range.366",
        "peekOfCode": "class Solution:\n    def findLeaves(self, root: TreeNode) -> List[List[int]]:\n        result = []\n        def dfs(node):\n            if not node:\n                return 0\n            height = max(dfs(node.left), dfs(node.right)) + 1\n            if height > len(result):\n                result.append([])\n            result[height - 1].append(node.val)",
        "detail": "mid-range.366",
        "documentation": {}
    },
    {
        "label": "arrayMaxConsecutiveSum",
        "kind": 2,
        "importPath": "mid-range.37 - arrayMaxConsecutiveSum",
        "description": "mid-range.37 - arrayMaxConsecutiveSum",
        "peekOfCode": "def arrayMaxConsecutiveSum(inputArray, k):\n    sums = [sum(inputArray[:k])]\n    for i in range(1, len(inputArray) - k + 1):\n        sums.append(sums[i - 1] - inputArray[i - 1] + inputArray[i + k - 1])\n    return max(sums)",
        "detail": "mid-range.37 - arrayMaxConsecutiveSum",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.374",
        "description": "mid-range.374",
        "peekOfCode": "class Solution:\n    def guessNumber(self, n: int) -> int:\n        l, r = 1, n\n        while l <= r:\n            m = l + (r - l) // 2\n            g = guess(m)\n            if g == 0:\n                return m\n            elif g == 1:\n                l = m + 1",
        "detail": "mid-range.374",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.377",
        "description": "mid-range.377",
        "peekOfCode": "class Solution:\n    def combinationSum4(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        dp = [0] * (target + 1)",
        "detail": "mid-range.377",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.378",
        "description": "mid-range.378",
        "peekOfCode": "class Solution:\n    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:\n        if not matrix or len(matrix) == 0:\n            return None\n        n = len(matrix)\n        q = [(matrix[0][0], 0, 0)]\n        used = {0}\n        xx, yy = [1, 0], [0, 1]\n        result = None\n        while k > 0:",
        "detail": "mid-range.378",
        "documentation": {}
    },
    {
        "label": "arrayMaxConsecutiveSum",
        "kind": 2,
        "importPath": "mid-range.37_-_arrayMaxConsecutiveSum",
        "description": "mid-range.37_-_arrayMaxConsecutiveSum",
        "peekOfCode": "def arrayMaxConsecutiveSum(inputArray, k):\n    sums = [sum(inputArray[:k])]\n    for i in range(1, len(inputArray) - k + 1):\n        sums.append(sums[i - 1] - inputArray[i - 1] + inputArray[i + k - 1])\n    return max(sums)",
        "detail": "mid-range.37_-_arrayMaxConsecutiveSum",
        "documentation": {}
    },
    {
        "label": "growingPlant",
        "kind": 2,
        "importPath": "mid-range.38 - growingPlant",
        "description": "mid-range.38 - growingPlant",
        "peekOfCode": "def growingPlant(upSpeed, downSpeed, desiredHeight):\n    height = 0\n    days = 1\n    height += upSpeed\n    while height < desiredHeight:\n        days += 1\n        height -= downSpeed\n        height += upSpeed\n    return days",
        "detail": "mid-range.38 - growingPlant",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.387",
        "description": "mid-range.387",
        "peekOfCode": "class Solution:\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        n = len(s)\n        if n == 1:\n            return 0\n        d = collections.Counter(s)",
        "detail": "mid-range.387",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.389",
        "description": "mid-range.389",
        "peekOfCode": "class Solution:\n    def findTheDifference(self, s: str, t: str) -> str:\n        d = Counter(s)\n        for c in t:\n            if c not in d or d[c] == 0:\n                return c\n            d[c] -= 1\n        return -1",
        "detail": "mid-range.389",
        "documentation": {}
    },
    {
        "label": "growingPlant",
        "kind": 2,
        "importPath": "mid-range.38_-_growingPlant",
        "description": "mid-range.38_-_growingPlant",
        "peekOfCode": "def growingPlant(upSpeed, downSpeed, desiredHeight):\n    height = 0\n    days = 1\n    height += upSpeed\n    while height < desiredHeight:\n        days += 1\n        height -= downSpeed\n        height += upSpeed\n    return days",
        "detail": "mid-range.38_-_growingPlant",
        "documentation": {}
    },
    {
        "label": "knapsackLight",
        "kind": 2,
        "importPath": "mid-range.39 - knapsackLight",
        "description": "mid-range.39 - knapsackLight",
        "peekOfCode": "def knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and (weight2 > maxW or value1 >= value2):\n        return value1\n    if weight2 <= maxW and (weight1 > maxW or value2 >= value1):\n        return value2\n    return 0",
        "detail": "mid-range.39 - knapsackLight",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.39",
        "description": "mid-range.39",
        "peekOfCode": "class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        result = []\n        candidates.sort()\n        self.search(candidates, target, [], result)\n        return result\n    def search(self, candidates, target, path, result):\n        if target == 0:\n            result.append(list(path))\n            return",
        "detail": "mid-range.39",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.391",
        "description": "mid-range.391",
        "peekOfCode": "class Solution:\n    def isRectangleCover(self, rectangles: List[List[int]]) -> bool:\n        s, area = set(), 0\n        x1, y1, x2, y2 = float(\"inf\"), float(\"inf\"), float(\"-inf\"), float(\"-inf\")\n        for rectangle in rectangles:\n            s1, s2, s3, s4 = rectangle[0], rectangle[1], rectangle[2], rectangle[3]\n            x1, y1 = min(x1, s1), min(y1, s2)\n            x2, y2 = max(x2, s3), max(y2, s4)\n            area += (s3 - s1) * (s4 - s2)\n            if (s1, s2) in s:",
        "detail": "mid-range.391",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.392",
        "description": "mid-range.392",
        "peekOfCode": "class Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        d = {}\n        for i, c in enumerate(t):\n            d[c] = d.get(c, []) + [i]\n        prev_idx = 0\n        for c in s:\n            if c not in d:\n                return False\n            idx = bisect.bisect_left(d[c], prev_idx)",
        "detail": "mid-range.392",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.395",
        "description": "mid-range.395",
        "peekOfCode": "class Solution(object):\n    def longestSubstring(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        dict = {}\n        for c in s:\n            if c not in dict:",
        "detail": "mid-range.395",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.398",
        "description": "mid-range.398",
        "peekOfCode": "class Solution:\n    def __init__(self, nums: List[int]):\n        self.d = {}\n        for i, v in enumerate(nums):\n            self.d[v] = self.d.get(v, []) + [i]\n    def pick(self, target: int) -> int:\n        n = len(self.d[target])\n        return self.d[target][random.randint(0, n - 1)]\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(nums)",
        "detail": "mid-range.398",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.399",
        "description": "mid-range.399",
        "peekOfCode": "class Solution:\n    def calcEquation(\n        self, equations: List[List[str]], values: List[float], queries: List[List[str]]\n    ) -> List[float]:\n        graph = defaultdict(dict)\n        for link, value in zip(equations, values):\n            graph[link[0]][link[1]] = value\n            graph[link[1]][link[0]] = 1 / value\n        def answerQuery(s, e):\n            if s not in graph or e not in graph:",
        "detail": "mid-range.399",
        "documentation": {}
    },
    {
        "label": "knapsackLight",
        "kind": 2,
        "importPath": "mid-range.39_-_knapsackLight",
        "description": "mid-range.39_-_knapsackLight",
        "peekOfCode": "def knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and (weight2 > maxW or value1 >= value2):\n        return value1\n    if weight2 <= maxW and (weight1 > maxW or value2 >= value1):\n        return value2\n    return 0",
        "detail": "mid-range.39_-_knapsackLight",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.3Sum",
        "description": "mid-range.3Sum",
        "peekOfCode": "class Solution:\n    # @param A : list of integers\n    # @param B : integer\n    # @return an integer\n    def threeSumClosest(self, A, B):\n        A.sort()\n        cs = math.inf\n        for i in range(0, len(A) - 2):\n            j = i + 1\n            k = len(A) - 1",
        "detail": "mid-range.3Sum",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.3SumOfNumbers",
        "description": "mid-range.3SumOfNumbers",
        "peekOfCode": "x = input(\"Enter the first number: \")\ny = input(\"Enter the second number: \")\nresult = float(x) + float(y)\nprint(\"The sum of the two numbers is : {}\".format(result))",
        "detail": "mid-range.3SumOfNumbers",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "mid-range.3SumOfNumbers",
        "description": "mid-range.3SumOfNumbers",
        "peekOfCode": "y = input(\"Enter the second number: \")\nresult = float(x) + float(y)\nprint(\"The sum of the two numbers is : {}\".format(result))",
        "detail": "mid-range.3SumOfNumbers",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "mid-range.3SumOfNumbers",
        "description": "mid-range.3SumOfNumbers",
        "peekOfCode": "result = float(x) + float(y)\nprint(\"The sum of the two numbers is : {}\".format(result))",
        "detail": "mid-range.3SumOfNumbers",
        "documentation": {}
    },
    {
        "label": "insertion_sort",
        "kind": 2,
        "importPath": "mid-range.3_insertion_sort",
        "description": "mid-range.3_insertion_sort",
        "peekOfCode": "def insertion_sort(list_to_sort):\n    # seperate the first element and think of it as sorted\n    # for all other items, starting at second index (1)\n    for i in range(1, len(list_to_sort)):\n        # put the current number in to a temp variable\n        temp = list_to_sort[i]\n        j = i\n        # keep looking left, until we find where it belongs\n        while j > 0 and temp < list_to_sort[j - 1]:\n            # as we look left shift the items to the right as we iterate",
        "detail": "mid-range.3_insertion_sort",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "mid-range.3_insertion_sort",
        "description": "mid-range.3_insertion_sort",
        "peekOfCode": "l = [8, 2, 5, 4, 1, 3]\nprint(l)\n# Implement an insertion sort algorithm\ndef insertion_sort(list_to_sort):\n    # seperate the first element and think of it as sorted\n    # for all other items, starting at second index (1)\n    for i in range(1, len(list_to_sort)):\n        # put the current number in to a temp variable\n        temp = list_to_sort[i]\n        j = i",
        "detail": "mid-range.3_insertion_sort",
        "documentation": {}
    },
    {
        "label": "avg_str",
        "kind": 5,
        "importPath": "mid-range.3_parse_float",
        "description": "mid-range.3_parse_float",
        "peekOfCode": "avg_str = 'Average value read: 0.72903'\nUse the find() method and string slicing\nto extract the potion of the string after\nthe colon character and then use the float()\nfunction to convert the extracted string \ninto a floating point value. Save your code \nin a file named “parse_float.py”.\n\"\"\"\navg_str = \"Average value read: 0.72903\"\nstart_pos = avg_str.find(\":\")",
        "detail": "mid-range.3_parse_float",
        "documentation": {}
    },
    {
        "label": "avg_str",
        "kind": 5,
        "importPath": "mid-range.3_parse_float",
        "description": "mid-range.3_parse_float",
        "peekOfCode": "avg_str = \"Average value read: 0.72903\"\nstart_pos = avg_str.find(\":\")\n# 1 more since start_po is after :\nstart_pos = start_pos + 1\n# taking the number portion of the string\nnumber_portion = avg_str[start_pos:]\n# typecasting number_portion to float\nnumber_portion = float(number_portion)",
        "detail": "mid-range.3_parse_float",
        "documentation": {}
    },
    {
        "label": "start_pos",
        "kind": 5,
        "importPath": "mid-range.3_parse_float",
        "description": "mid-range.3_parse_float",
        "peekOfCode": "start_pos = avg_str.find(\":\")\n# 1 more since start_po is after :\nstart_pos = start_pos + 1\n# taking the number portion of the string\nnumber_portion = avg_str[start_pos:]\n# typecasting number_portion to float\nnumber_portion = float(number_portion)",
        "detail": "mid-range.3_parse_float",
        "documentation": {}
    },
    {
        "label": "start_pos",
        "kind": 5,
        "importPath": "mid-range.3_parse_float",
        "description": "mid-range.3_parse_float",
        "peekOfCode": "start_pos = start_pos + 1\n# taking the number portion of the string\nnumber_portion = avg_str[start_pos:]\n# typecasting number_portion to float\nnumber_portion = float(number_portion)",
        "detail": "mid-range.3_parse_float",
        "documentation": {}
    },
    {
        "label": "number_portion",
        "kind": 5,
        "importPath": "mid-range.3_parse_float",
        "description": "mid-range.3_parse_float",
        "peekOfCode": "number_portion = avg_str[start_pos:]\n# typecasting number_portion to float\nnumber_portion = float(number_portion)",
        "detail": "mid-range.3_parse_float",
        "documentation": {}
    },
    {
        "label": "number_portion",
        "kind": 5,
        "importPath": "mid-range.3_parse_float",
        "description": "mid-range.3_parse_float",
        "peekOfCode": "number_portion = float(number_portion)",
        "detail": "mid-range.3_parse_float",
        "documentation": {}
    },
    {
        "label": "user_input",
        "kind": 5,
        "importPath": "mid-range.3_process_numbers",
        "description": "mid-range.3_process_numbers",
        "peekOfCode": "user_input = ''\ntotal = 0;\ncount = 0;\nmaximum = None;\nminimum = None; \nwhile (user_input != 'done'):\n    user_input = raw_input('Enter a number or enter done\\n');\n    if user_input != 'done':\n        total += float(user_input);\n    if (user_input == 'done'):",
        "detail": "mid-range.3_process_numbers",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "mid-range.3_process_numbers",
        "description": "mid-range.3_process_numbers",
        "peekOfCode": "total = 0;\ncount = 0;\nmaximum = None;\nminimum = None; \nwhile (user_input != 'done'):\n    user_input = raw_input('Enter a number or enter done\\n');\n    if user_input != 'done':\n        total += float(user_input);\n    if (user_input == 'done'):\n        average = total / float(count);",
        "detail": "mid-range.3_process_numbers",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "mid-range.3_process_numbers",
        "description": "mid-range.3_process_numbers",
        "peekOfCode": "count = 0;\nmaximum = None;\nminimum = None; \nwhile (user_input != 'done'):\n    user_input = raw_input('Enter a number or enter done\\n');\n    if user_input != 'done':\n        total += float(user_input);\n    if (user_input == 'done'):\n        average = total / float(count);\n        break; ",
        "detail": "mid-range.3_process_numbers",
        "documentation": {}
    },
    {
        "label": "maximum",
        "kind": 5,
        "importPath": "mid-range.3_process_numbers",
        "description": "mid-range.3_process_numbers",
        "peekOfCode": "maximum = None;\nminimum = None; \nwhile (user_input != 'done'):\n    user_input = raw_input('Enter a number or enter done\\n');\n    if user_input != 'done':\n        total += float(user_input);\n    if (user_input == 'done'):\n        average = total / float(count);\n        break; \n    count += 1",
        "detail": "mid-range.3_process_numbers",
        "documentation": {}
    },
    {
        "label": "minimum",
        "kind": 5,
        "importPath": "mid-range.3_process_numbers",
        "description": "mid-range.3_process_numbers",
        "peekOfCode": "minimum = None; \nwhile (user_input != 'done'):\n    user_input = raw_input('Enter a number or enter done\\n');\n    if user_input != 'done':\n        total += float(user_input);\n    if (user_input == 'done'):\n        average = total / float(count);\n        break; \n    count += 1\n    if maximum is None or user_input > maximum:",
        "detail": "mid-range.3_process_numbers",
        "documentation": {}
    },
    {
        "label": "longestDigitsPrefix",
        "kind": 2,
        "importPath": "mid-range.40 - longestDigitsPrefix",
        "description": "mid-range.40 - longestDigitsPrefix",
        "peekOfCode": "def longestDigitsPrefix(inputString):\n    for char in range(len(inputString)):\n        if not inputString[char].isdigit():\n            return inputString[:char]\n    return inputString",
        "detail": "mid-range.40 - longestDigitsPrefix",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.40",
        "description": "mid-range.40",
        "peekOfCode": "class Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n        result = []\n        candidates.sort()\n        self.search(candidates, target, result, [])\n        return result\n    def search(self, candidates, target, result, path):\n        if target == 0:\n            result.append(path)\n        for i in range(len(candidates)):",
        "detail": "mid-range.40",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.403",
        "description": "mid-range.403",
        "peekOfCode": "class Solution:\n    def canCross(self, stones: List[int]) -> bool:\n        last = stones[-1]\n        visited, stones = set(), set(stones)\n        stack = [(0, 0)]\n        while stack:\n            curr, jump = stack.pop()\n            for j in [jump - 1, jump, jump + 1]:\n                new = curr + j\n                if j > 0 and new in stones and (new, j) not in visited:",
        "detail": "mid-range.403",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.404",
        "description": "mid-range.404",
        "peekOfCode": "class Solution:\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)",
        "detail": "mid-range.404",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.404",
        "description": "mid-range.404",
        "peekOfCode": "class Solution:\n    def sumOfLeftLeaves(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n        q, result = deque([root]), 0\n        while q:\n            curr = q.popleft()\n            if curr.left:\n                if not curr.left.left and not curr.left.right:\n                    result += curr.left.val",
        "detail": "mid-range.404",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.407",
        "description": "mid-range.407",
        "peekOfCode": "class Solution:\n    def trapRainWater(self, heights: \"List[List[int]]\") -> \"int\":\n        if not heights or len(heights[0]) == 0:\n            return 0\n        result, q = 0, []\n        m, n = len(heights), len(heights[0])\n        visited = [[0 for j in range(n)] for i in range(m)]\n        for i in [0, m - 1]:\n            for j in range(n):\n                if not visited[i][j]:",
        "detail": "mid-range.407",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.409",
        "description": "mid-range.409",
        "peekOfCode": "class Solution:\n    def longestPalindrome(self, s: str) -> int:\n        check_even = {}\n        for c in s:\n            if c not in check_even:\n                check_even[c] = 0\n            else:\n                del check_even[c]\n        return len(s) - len(check_even) + 1 if check_even else len(s)",
        "detail": "mid-range.409",
        "documentation": {}
    },
    {
        "label": "longestDigitsPrefix",
        "kind": 2,
        "importPath": "mid-range.40_-_longestDigitsPrefix",
        "description": "mid-range.40_-_longestDigitsPrefix",
        "peekOfCode": "def longestDigitsPrefix(inputString):\n    for char in range(len(inputString)):\n        if not inputString[char].isdigit():\n            return inputString[:char]\n    return inputString",
        "detail": "mid-range.40_-_longestDigitsPrefix",
        "documentation": {}
    },
    {
        "label": "digitDegree",
        "kind": 2,
        "importPath": "mid-range.41 - digitDegree",
        "description": "mid-range.41 - digitDegree",
        "peekOfCode": "def digitDegree(n):\n    degree = 0\n    while 10 <= n:\n        num = str(n)\n        n = sum(int(i) for i in num)\n        degree += 1\n    return degree",
        "detail": "mid-range.41 - digitDegree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.41",
        "description": "mid-range.41",
        "peekOfCode": "class Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        if not nums or len(nums) == 0:\n            return 1\n        for i in range(len(nums)):\n            target = nums[i]\n            while target > 0 and target <= len(nums) and nums[target - 1] != target:\n                nums[target - 1], target = target, nums[target - 1]\n        for i in range(len(nums)):\n            if nums[i] != i + 1:",
        "detail": "mid-range.41",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.412",
        "description": "mid-range.412",
        "peekOfCode": "class Solution:\n    def fizzBuzz(self, n: int) -> List[str]:\n        result = []\n        for i in range(1, n + 1):\n            if i % 3 == 0 and i % 5 == 0:\n                result.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                result.append(\"Fizz\")\n            elif i % 5 == 0:\n                result.append(\"Buzz\")",
        "detail": "mid-range.412",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.413",
        "description": "mid-range.413",
        "peekOfCode": "class Solution:\n    def numberOfArithmeticSlices(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        result, curr = 0, 0\n        for i in range(2, len(A)):\n            if A[i] - A[i - 1] == A[i - 1] - A[i - 2]:\n                curr += 1",
        "detail": "mid-range.413",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.414",
        "description": "mid-range.414",
        "peekOfCode": "class Solution:\n    def thirdMax(self, nums: List[int]) -> int:\n        v = [float(\"-inf\"), float(\"-inf\"), float(\"-inf\")]\n        for num in nums:\n            if not num in v:\n                if num > v[0]:\n                    v = [num, v[0], v[1]]\n                elif num > v[1]:\n                    v = [v[0], num, v[1]]\n                elif num > v[2]:",
        "detail": "mid-range.414",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.415",
        "description": "mid-range.415",
        "peekOfCode": "class Solution:\n    def addStrings(self, num1: str, num2: str) -> str:\n        result = \"\"\n        carry = 0\n        i, j = len(num1) - 1, len(num2) - 1\n        while i >= 0 or j >= 0 or carry:\n            if i >= 0:\n                carry += int(num1[i])\n                i -= 1\n            if j >= 0:",
        "detail": "mid-range.415",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.417",
        "description": "mid-range.417",
        "peekOfCode": "class Solution:\n    def pacificAtlantic(self, matrix: List[List[int]]) -> List[List[int]]:\n        if not matrix or not matrix[0]:\n            return []\n        m, n = len(matrix), len(matrix[0])\n        toPacific = set()\n        toAtlantic = set()\n        directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n        def search(x, y, oceanSet):\n            if (x, y) in oceanSet:",
        "detail": "mid-range.417",
        "documentation": {}
    },
    {
        "label": "digitDegree",
        "kind": 2,
        "importPath": "mid-range.41_-_digitDegree",
        "description": "mid-range.41_-_digitDegree",
        "peekOfCode": "def digitDegree(n):\n    degree = 0\n    while len(str(n)) > 1:\n        n = sum((int(digit) for digit in str(n)))\n        degree += 1\n    return degree",
        "detail": "mid-range.41_-_digitDegree",
        "documentation": {}
    },
    {
        "label": "bishopAndPawn",
        "kind": 2,
        "importPath": "mid-range.42 - bishopAndPawn",
        "description": "mid-range.42 - bishopAndPawn",
        "peekOfCode": "def bishopAndPawn(bishop, pawn):\n    return abs(ord(bishop[0]) - ord(pawn[0])) == abs(ord(bishop[1]) - ord(pawn[1]))",
        "detail": "mid-range.42 - bishopAndPawn",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.42",
        "description": "mid-range.42",
        "peekOfCode": "class Solution:\n    def trap(self, height: \"List[int]\") -> \"int\":\n        result = 0\n        stack = []\n        for i in range(len(height)):\n            while stack and height[i] > height[stack[-1]]:\n                pre = stack.pop()\n                if stack:\n                    h = min(height[stack[-1]], height[i])\n                    result += (h - height[pre]) * (i - 1 - stack[-1])",
        "detail": "mid-range.42",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.420",
        "description": "mid-range.420",
        "peekOfCode": "class Solution:\n    def strongPasswordChecker(self, s: str) -> int:\n        missing_type = 3\n        if any(\"a\" <= c <= \"z\" for c in s):\n            missing_type -= 1\n        if any(\"A\" <= c <= \"Z\" for c in s):\n            missing_type -= 1\n        if any(c.isdigit() for c in s):\n            missing_type -= 1\n        change = 0",
        "detail": "mid-range.420",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.421",
        "description": "mid-range.421",
        "peekOfCode": "class Solution:\n    def findMaximumXOR(self, nums: List[int]) -> int:\n        result = 0\n        for i in range(31, -1, -1):\n            result <<= 1\n            prefixes = {num >> i for num in nums}\n            result += any(result ^ 1 ^ p in prefixes for p in prefixes)\n        return result",
        "detail": "mid-range.421",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.425",
        "description": "mid-range.425",
        "peekOfCode": "class Solution:\n    def wordSquares(self, words: List[str]) -> List[List[str]]:\n        n = len(words[0])\n        prefix = defaultdict(list)\n        for word in words:\n            for i in range(n):\n                prefix[word[: i + 1]].append(word)\n        result = []\n        def dfs(i, path):\n            if i == n:",
        "detail": "mid-range.425",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "mid-range.426",
        "description": "mid-range.426",
        "peekOfCode": "class Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\"\"\"\nclass Solution:\n    def treeToDoublyList(self, root: \"Node\") -> \"Node\":\n        if not root:\n            return root",
        "detail": "mid-range.426",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.426",
        "description": "mid-range.426",
        "peekOfCode": "class Solution:\n    def treeToDoublyList(self, root: \"Node\") -> \"Node\":\n        if not root:\n            return root\n        dummy = head = Node(0)\n        stack, curr, prev = [], root, dummy\n        while stack or curr:\n            while curr:\n                stack.append(curr)\n                curr = curr.left",
        "detail": "mid-range.426",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "mid-range.429",
        "description": "mid-range.429",
        "peekOfCode": "class Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\nclass Solution:\n    def levelOrder(self, root: \"Node\") -> List[List[int]]:\n        if not root:\n            return []\n        result, queue = [], [root]",
        "detail": "mid-range.429",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.429",
        "description": "mid-range.429",
        "peekOfCode": "class Solution:\n    def levelOrder(self, root: \"Node\") -> List[List[int]]:\n        if not root:\n            return []\n        result, queue = [], [root]\n        while queue:\n            new_queue = []\n            level = []\n            for node in queue:\n                if node:",
        "detail": "mid-range.429",
        "documentation": {}
    },
    {
        "label": "bishopAndPawn",
        "kind": 2,
        "importPath": "mid-range.42_-_bishopAndPawn",
        "description": "mid-range.42_-_bishopAndPawn",
        "peekOfCode": "def bishopAndPawn(bishop, pawn):\n    return abs(ord(bishop[0]) - ord(pawn[0])) == abs(ord(bishop[1]) - ord(pawn[1]))",
        "detail": "mid-range.42_-_bishopAndPawn",
        "documentation": {}
    },
    {
        "label": "isBeautifulString",
        "kind": 2,
        "importPath": "mid-range.43 - isBeautifulString",
        "description": "mid-range.43 - isBeautifulString",
        "peekOfCode": "def isBeautifulString(inputString):\n    counter = [inputString.count(i) for i in string.ascii_lowercase]\n    return counter[::-1] == sorted(counter)",
        "detail": "mid-range.43 - isBeautifulString",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.43",
        "description": "mid-range.43",
        "peekOfCode": "class Solution:\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        result = [0] * (len(num1) + len(num2))\n        tail = len(result) - 1\n        for n1 in reversed(num1):",
        "detail": "mid-range.43",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.435",
        "description": "mid-range.435",
        "peekOfCode": "class Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        result = 0\n        end = float(\"-inf\")\n        for interval in sorted(intervals, key=lambda x: x[1]):\n            if interval[0] < end:\n                result += 1\n                continue\n            end = interval[1]\n        return result",
        "detail": "mid-range.435",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.436",
        "description": "mid-range.436",
        "peekOfCode": "class Solution:\n    def findRightInterval(self, intervals: List[List[int]]) -> List[int]:\n        if len(intervals) <= 1:\n            return [-1]\n        L = sorted((interval[0], i) for i, interval in enumerate(intervals))\n        result = []\n        for interval in intervals:\n            idx = bisect.bisect_left(L, (interval[1],))\n            result.append(L[idx][1] if idx < len(L) else -1)\n        return result",
        "detail": "mid-range.436",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.437",
        "description": "mid-range.437",
        "peekOfCode": "class Solution:\n    def pathSum(self, root: TreeNode, sum: int) -> int:\n        self.result = 0\n        cache = {0: 1}\n        def backtrack(node, pathSum):\n            if not node:\n                return\n            pathSum += node.val\n            oldSum = pathSum - sum\n            if oldSum in cache:",
        "detail": "mid-range.437",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.438",
        "description": "mid-range.438",
        "peekOfCode": "class Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        n = len(p)\n        p = Counter(p)\n        count = len(p)\n        start, end = 0, 0\n        result = []\n        while end < len(s):\n            c = s[end]\n            if c in p:",
        "detail": "mid-range.438",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.439",
        "description": "mid-range.439",
        "peekOfCode": "class Solution:\n    def parseTernary(self, expression: str) -> str:\n        stack = []\n        for c in expression[::-1]:\n            if stack and stack[-1] == \"?\":\n                stack.pop()\n                a = stack.pop()\n                stack.pop()\n                b = stack.pop()\n                stack.append(a if c == \"T\" else b)",
        "detail": "mid-range.439",
        "documentation": {}
    },
    {
        "label": "isBeautifulString",
        "kind": 2,
        "importPath": "mid-range.43_-_isBeautifulString",
        "description": "mid-range.43_-_isBeautifulString",
        "peekOfCode": "def isBeautifulString(inputString):\n    for letter in range(ord(\"a\"), ord(\"z\")):\n        if inputString.count(chr(letter)) < inputString.count(chr(letter + 1)):\n            return False\n    return True",
        "detail": "mid-range.43_-_isBeautifulString",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.44",
        "description": "mid-range.44",
        "peekOfCode": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        prev = [True]\n        for i in range(len(p)):\n            prev.append(prev[i] and p[i] == \"*\")",
        "detail": "mid-range.44",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.442",
        "description": "mid-range.442",
        "peekOfCode": "class Solution:\n    def findDuplicates(self, nums: List[int]) -> List[int]:\n        result = []\n        for n in nums:\n            if nums[abs(n) - 1] < 0:\n                result.append(abs(n))\n            else:\n                nums[abs(n) - 1] *= -1\n        return result",
        "detail": "mid-range.442",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.448",
        "description": "mid-range.448",
        "peekOfCode": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if not nums:\n            return []\n        result = []\n        for num in nums:",
        "detail": "mid-range.448",
        "documentation": {}
    },
    {
        "label": "buildPalindrome",
        "kind": 2,
        "importPath": "mid-range.45 - buildPalindrome",
        "description": "mid-range.45 - buildPalindrome",
        "peekOfCode": "def buildPalindrome(st):\n    for i in range(len(st)):\n        sub = st[i : len(st)]\n        if sub[::-1] == sub:\n            missing = st[0:i]\n            return st + missing[::-1]\n    return st",
        "detail": "mid-range.45 - buildPalindrome",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.45",
        "description": "mid-range.45",
        "peekOfCode": "class Solution:\n    def jump(self, nums: List[int]) -> int:\n        if len(nums) <= 1:\n            return 0\n        jumps = 0\n        curr_state, max_state = 0, 0\n        for i, v in enumerate(nums[:-1]):\n            max_state = max(max_state, i + v)\n            if i == curr_state:\n                jumps += 1",
        "detail": "mid-range.45",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.450",
        "description": "mid-range.450",
        "peekOfCode": "class Solution:\n    def deleteNode(self, root: TreeNode, key: int) -> TreeNode:\n        if not root:\n            return root\n        elif root.val > key:\n            root.left = self.deleteNode(root.left, key)\n        elif root.val < key:\n            root.right = self.deleteNode(root.right, key)\n        else:\n            if not root.right:",
        "detail": "mid-range.450",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.452",
        "description": "mid-range.452",
        "peekOfCode": "class Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        if not points:\n            return 0\n        points = sorted(points, key=lambda x: x[1])\n        result = 1\n        end = points[0][1]\n        for point in points[1:]:\n            if point[0] <= end:\n                continue",
        "detail": "mid-range.452",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.454",
        "description": "mid-range.454",
        "peekOfCode": "class Solution:\n    def fourSumCount(self, A, B, C, D):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :type C: List[int]\n        :type D: List[int]\n        :rtype: int\n        \"\"\"\n        ret = 0",
        "detail": "mid-range.454",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.456",
        "description": "mid-range.456",
        "peekOfCode": "class Solution:\n    def find132pattern(self, nums: List[int]) -> bool:\n        stack, third = [], float(\"-inf\")\n        for n in nums[::-1]:\n            if n < third:\n                return True\n            while stack and stack[-1] < n:\n                third = stack.pop()\n            stack.append(n)\n        return False",
        "detail": "mid-range.456",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.459",
        "description": "mid-range.459",
        "peekOfCode": "class Solution:\n    def repeatedSubstringPattern(self, s: str) -> bool:\n        ss = (s + s)[1:-1]\n        return ss.find(s) != -1",
        "detail": "mid-range.459",
        "documentation": {}
    },
    {
        "label": "buildPalindrome",
        "kind": 2,
        "importPath": "mid-range.45_-_buildPalindrome",
        "description": "mid-range.45_-_buildPalindrome",
        "peekOfCode": "def buildPalindrome(st):\n    if st == st[::-1]:  # Check for initial palindrome\n        return st\n    index = 0\n    subStr = st[index:]\n    while subStr != subStr[::-1]:  # while substring is not a palindrome\n        index += 1\n        subStr = st[index:]\n    return st + st[index - 1 :: -1]",
        "detail": "mid-range.45_-_buildPalindrome",
        "documentation": {}
    },
    {
        "label": "electionsWinners",
        "kind": 2,
        "importPath": "mid-range.46 - electionsWinners",
        "description": "mid-range.46 - electionsWinners",
        "peekOfCode": "def electionsWinners(votes, k):\n    winners = 0\n    current_winner = max(votes)\n    for candidate in votes:\n        if k > 0 and candidate + k > current_winner:\n            winners += 1\n        if k == 0 and candidate == current_winner and votes.count(candidate) == 1:\n            winners += 1\n    return winners",
        "detail": "mid-range.46 - electionsWinners",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.46",
        "description": "mid-range.46",
        "peekOfCode": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums]",
        "detail": "mid-range.46",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.461",
        "description": "mid-range.461",
        "peekOfCode": "class Solution:\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        diff = x ^ y\n        result = 0\n        for _ in range(32):",
        "detail": "mid-range.461",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.463",
        "description": "mid-range.463",
        "peekOfCode": "class Solution:\n    def islandPerimeter(self, grid: List[List[int]]) -> int:\n        result = 0\n        m, n = len(grid), len(grid[0])\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    for x, y in [(i + 1, j), (i - 1, j), (i, j - 1), (i, j + 1)]:\n                        if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == 0:\n                            result += 1",
        "detail": "mid-range.463",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.464",
        "description": "mid-range.464",
        "peekOfCode": "class Solution:\n    def canIWin(self, maxChoosableInteger: int, desiredTotal: int) -> bool:\n        if (maxChoosableInteger + 1) * (maxChoosableInteger / 2) < desiredTotal:\n            return False\n        cache = {}\n        def dfs(choices, target):\n            if tuple(choices) in cache:\n                return cache[tuple(choices)]\n            if choices[-1] >= target:\n                return True",
        "detail": "mid-range.464",
        "documentation": {}
    },
    {
        "label": "electionsWinners",
        "kind": 2,
        "importPath": "mid-range.46_-_electionsWinners",
        "description": "mid-range.46_-_electionsWinners",
        "peekOfCode": "def electionsWinners(votes, k):\n    winners = 0\n    current_winner = max(votes)\n    for candidate in votes:\n        if k > 0 and candidate + k > current_winner:\n            winners += 1\n        if k == 0 and candidate == current_winner and votes.count(candidate) == 1:\n            winners += 1\n    return winners",
        "detail": "mid-range.46_-_electionsWinners",
        "documentation": {}
    },
    {
        "label": "electionsWinners",
        "kind": 2,
        "importPath": "mid-range.46_-_electionWinners",
        "description": "mid-range.46_-_electionWinners",
        "peekOfCode": "def electionsWinners(votes, k):\n    max_vote = max(votes)\n    len_vote = len(votes)\n    if k == 0 and votes.count(max_vote) == 1:\n        return 1\n    return len([i for i in range(len_vote) if votes[i] + k > max_vote])",
        "detail": "mid-range.46_-_electionWinners",
        "documentation": {}
    },
    {
        "label": "isMAC48Address",
        "kind": 2,
        "importPath": "mid-range.47 - isMAC48Address",
        "description": "mid-range.47 - isMAC48Address",
        "peekOfCode": "def isMAC48Address(inputString):\n    str_split = inputString.split(\"-\")\n    count = 0\n    if len(inputString) != 17:\n        return False\n    if len(str_split) != 6:\n        return False\n    for i in range(0, 6):\n        if str_split[i] == \"\":\n            return False",
        "detail": "mid-range.47 - isMAC48Address",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.47",
        "description": "mid-range.47",
        "peekOfCode": "class Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        result = []\n        nums.sort()\n        def find(path, A):\n            if len(path) == len(nums):\n                result.append(path)\n                return\n            for i in range(len(A)):\n                if i > 0 and A[i - 1] == A[i]:",
        "detail": "mid-range.47",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.470",
        "description": "mid-range.470",
        "peekOfCode": "class Solution:\n    def rand10(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        rand = 40\n        while rand >= 40:\n            rand = (rand7() - 1) * 7 + rand7() - 1\n        return rand % 10 + 1",
        "detail": "mid-range.470",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.472",
        "description": "mid-range.472",
        "peekOfCode": "class Solution:\n    def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:\n        cache, words = {}, set(words)\n        def dfs(word):\n            if word in cache:\n                return cache[word]\n            for i in range(1, len(word)):\n                prefix, suffix = word[:i], word[i:]\n                if (prefix in words and suffix in words) or (\n                    prefix in words and dfs(suffix)",
        "detail": "mid-range.472",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.473",
        "description": "mid-range.473",
        "peekOfCode": "class Solution:\n    def makesquare(self, nums: List[int]) -> bool:\n        if not nums:\n            return False\n        if sum(nums) % 4 != 0:\n            return False\n        nums = sorted(nums, reverse=True)\n        def dfs(idx, s, target):\n            if idx == len(nums):\n                return True",
        "detail": "mid-range.473",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.477",
        "description": "mid-range.477",
        "peekOfCode": "class Solution:\n    def totalHammingDistance(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        bits = [[0, 0] for _ in range(32)]\n        for x in nums:\n            for i in range(32):\n                bits[i][x % 2] += 1",
        "detail": "mid-range.477",
        "documentation": {}
    },
    {
        "label": "isMAC48Address",
        "kind": 2,
        "importPath": "mid-range.47_-_isMAC48Address",
        "description": "mid-range.47_-_isMAC48Address",
        "peekOfCode": "def isMAC48Address(inputString):\n    hex_chars = (\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",",
        "detail": "mid-range.47_-_isMAC48Address",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.48",
        "description": "mid-range.48",
        "peekOfCode": "class Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        visited = set()\n        n = len(matrix)\n        for i in range(n):\n            for j in range(n):\n                if not visited or (i, j) not in visited:",
        "detail": "mid-range.48",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.482",
        "description": "mid-range.482",
        "peekOfCode": "class Solution:\n    def licenseKeyFormatting(self, S: str, K: int) -> str:\n        ss = \"\".join(S.split(\"-\")).upper()\n        ret = deque()\n        i = len(ss)\n        while i > 0:\n            if i - K <= 0:\n                break\n            ret.appendleft(ss[i - K : i])\n            i -= K",
        "detail": "mid-range.482",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.485",
        "description": "mid-range.485",
        "peekOfCode": "class Solution:\n    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:\n        result = 0\n        start = end = 0\n        while end < len(nums):\n            if nums[end] == 0:\n                result = max(result, end - start)\n                start = end\n                while start < len(nums) and nums[start] != 1:\n                    start += 1",
        "detail": "mid-range.485",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.488",
        "description": "mid-range.488",
        "peekOfCode": "class Solution:\n    def findMinStep(self, board: str, hand: str) -> int:\n        INF = float(\"inf\")\n        def clean(ss):\n            i = 0\n            for j, ball in enumerate(ss):\n                if ball == ss[i]:\n                    continue\n                if j - i >= 3:\n                    return clean(ss[:i] + ss[j:])",
        "detail": "mid-range.488",
        "documentation": {}
    },
    {
        "label": "lineEncoding",
        "kind": 2,
        "importPath": "mid-range.49 - lineEncoding",
        "description": "mid-range.49 - lineEncoding",
        "peekOfCode": "def lineEncoding(s):\n    s2 = \"\"\n    for k, g in groupby(s):\n        l = len(list(g))\n        if l == 1:\n            s2 += k\n        else:\n            s2 += str(l) + k\n    return s2",
        "detail": "mid-range.49 - lineEncoding",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.49",
        "description": "mid-range.49",
        "peekOfCode": "class Solution:\n    def groupAnagrams(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        if not strs:\n            return []\n        d = defaultdict(list)\n        for s in strs:",
        "detail": "mid-range.49",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.490",
        "description": "mid-range.490",
        "peekOfCode": "class Solution:\n    def hasPath(\n        self, maze: List[List[int]], start: List[int], destination: List[int]\n    ) -> bool:\n        visited = set()\n        def dfs(x, y):\n            if x == destination[0] and y == destination[1]:\n                return True\n            for (dx, dy) in [(0, 1), (0, -1), (-1, 0), (1, 0)]:\n                new_x, new_y = x + dx, y + dy",
        "detail": "mid-range.490",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.491",
        "description": "mid-range.491",
        "peekOfCode": "class Solution:\n    def findSubsequences(self, nums: List[int]) -> List[List[int]]:\n        def dfs(idx, path, result):\n            if len(path) > 1:\n                result.append(path)\n            if idx >= len(nums):\n                return\n            visited = set()\n            for i in range(idx, len(nums)):\n                if nums[i] in visited:",
        "detail": "mid-range.491",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.494",
        "description": "mid-range.494",
        "peekOfCode": "class Solution:\n    def findTargetSumWays(self, nums: List[int], S: int) -> int:\n        def dfs(idx, s):\n            if (idx, s) not in cache:\n                result = 0\n                if idx == len(nums):\n                    if s == 0:\n                        result = 1\n                else:\n                    result = dfs(idx + 1, s - nums[idx]) + dfs(idx + 1, s + nums[idx])",
        "detail": "mid-range.494",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.495",
        "description": "mid-range.495",
        "peekOfCode": "class Solution:\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\n        if not timeSeries:\n            return 0\n        result = 0\n        prev = timeSeries[0]\n        for t in timeSeries[1:]:\n            result += min(duration, t - prev)\n            prev = t\n        return result + duration",
        "detail": "mid-range.495",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.497",
        "description": "mid-range.497",
        "peekOfCode": "class Solution:\n    def __init__(self, rects: List[List[int]]):\n        self.rects, self.points, s = rects, [], 0\n        for x1, y1, x2, y2 in self.rects:\n            s += (x2 - x1 + 1) * (y2 - y1 + 1)\n            self.points.append(s)\n    def pick(self) -> List[int]:\n        x1, y1, x2, y2 = self.rects[\n            bisect.bisect_left(self.points, random.randint(1, self.points[-1]))\n        ]",
        "detail": "mid-range.497",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.499",
        "description": "mid-range.499",
        "peekOfCode": "class Solution:\n    def findShortestWay(\n        self, maze: List[List[int]], ball: List[int], hole: List[int]\n    ) -> str:\n        m, n = len(maze), len(maze[0])\n        ball, hole = tuple(ball), tuple(hole)\n        def getNeighbors(loc):\n            for dx, dy, direction in [\n                (-1, 0, \"u\"),\n                (1, 0, \"d\"),",
        "detail": "mid-range.499",
        "documentation": {}
    },
    {
        "label": "lineEncoding",
        "kind": 2,
        "importPath": "mid-range.49_-_lineEncoding",
        "description": "mid-range.49_-_lineEncoding",
        "peekOfCode": "def lineEncoding(s):\n    count = 1\n    output = []\n    for char in range(1, len(s)):\n        if s[char] == s[char - 1]:\n            count += 1\n        else:\n            if count > 1:\n                output.append(str(count) + s[char - 1])\n            else:",
        "detail": "mid-range.49_-_lineEncoding",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.4MaxOfNumbers",
        "description": "mid-range.4MaxOfNumbers",
        "peekOfCode": "x = float(input(\"Enter the first number: \"))\ny = float(input(\"Enter the second number: \"))\nresult = max(x, y)\nprint(\"The max of two numbers entered is {}\".format(result))",
        "detail": "mid-range.4MaxOfNumbers",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "mid-range.4MaxOfNumbers",
        "description": "mid-range.4MaxOfNumbers",
        "peekOfCode": "y = float(input(\"Enter the second number: \"))\nresult = max(x, y)\nprint(\"The max of two numbers entered is {}\".format(result))",
        "detail": "mid-range.4MaxOfNumbers",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "mid-range.4MaxOfNumbers",
        "description": "mid-range.4MaxOfNumbers",
        "peekOfCode": "result = max(x, y)\nprint(\"The max of two numbers entered is {}\".format(result))",
        "detail": "mid-range.4MaxOfNumbers",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.5",
        "description": "mid-range.5",
        "peekOfCode": "class Solution:\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        result = \"\"\n        for i in range(len(s)):\n            odd = self.getPalindrome(i, i, s)\n            if len(result) < len(odd):",
        "detail": "mid-range.5",
        "documentation": {}
    },
    {
        "label": "chessKnight",
        "kind": 2,
        "importPath": "mid-range.50 - chessKnight",
        "description": "mid-range.50 - chessKnight",
        "peekOfCode": "def chessKnight(cell):\n    knight_dir = list(t.permutations([1, 2, -1, -2], 2))\n    knight_dir1 = []\n    valid_moves = 0\n    for i in range(len(knight_dir)):\n        if sum(knight_dir[i]) != 0:\n            knight_dir1.append(knight_dir[i])\n    for x, y in knight_dir1:\n        if (97 <= ord(cell[0]) + x <= 104) and (1 <= int(cell[1]) + y <= 8):\n            valid_moves += 1",
        "detail": "mid-range.50 - chessKnight",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.50",
        "description": "mid-range.50",
        "peekOfCode": "class Solution:\n    def myPow(self, x: float, n: int) -> float:\n        if n == 0:\n            return 1\n        if n < 0:\n            if n == -2147483648:\n                n += 2\n            n = -n\n            x = 1 / x\n        return (",
        "detail": "mid-range.50",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.505",
        "description": "mid-range.505",
        "peekOfCode": "class Solution:\n    def shortestDistance(\n        self, maze: List[List[int]], start: List[int], destination: List[int]\n    ) -> int:\n        m, n = len(maze), len(maze[0])\n        start, destination = tuple(start), tuple(destination)\n        q, visited = [(0, start)], set(start)\n        def getNeighbor(x, y):\n            for direction in [(-1, 0), (1, 0), (0, 1), (0, -1)]:\n                i, j, d = x, y, 0",
        "detail": "mid-range.505",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.509",
        "description": "mid-range.509",
        "peekOfCode": "class Solution:\n    def fib(self, N: int) -> int:\n        if N < 2:\n            return N\n        s1, s2 = 0, 1\n        for _ in range(1, N):\n            s = s1 + s2\n            s1, s2 = s2, s\n        return s2",
        "detail": "mid-range.509",
        "documentation": {}
    },
    {
        "label": "chessKnight",
        "kind": 2,
        "importPath": "mid-range.50_-_chessKnight",
        "description": "mid-range.50_-_chessKnight",
        "peekOfCode": "def chessKnight(cell):\n    moves = 0\n    # Starting at the top left, going counter-clockwise\n    if ord(cell[0]) >= ord(\"b\") and ord(cell[1]) <= ord(\"6\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"c\") and ord(cell[1]) <= ord(\"7\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"c\") and ord(cell[1]) >= ord(\"2\"):\n        moves += 1\n    if ord(cell[0]) >= ord(\"b\") and ord(cell[1]) >= ord(\"3\"):",
        "detail": "mid-range.50_-_chessKnight",
        "documentation": {}
    },
    {
        "label": "deleteDigit",
        "kind": 2,
        "importPath": "mid-range.51 - deleteDigit",
        "description": "mid-range.51 - deleteDigit",
        "peekOfCode": "def deleteDigit(n):\n    num = str(n)\n    result = list(int(\"\".join(num[:i] + num[1 + i :])) for i in range(len(num)))\n    return max(result)",
        "detail": "mid-range.51 - deleteDigit",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.51",
        "description": "mid-range.51",
        "peekOfCode": "class Solution:\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        def dfs(row):\n            if row == n:\n                ret.append([\"\".join(r) for r in chessboard])\n                return",
        "detail": "mid-range.51",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "mid-range.510",
        "description": "mid-range.510",
        "peekOfCode": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n        self.parent = None\n\"\"\"\n# Time: O(log N)\nclass Solution:\n    def inorderSuccessor(self, node: \"Node\") -> \"Node\":",
        "detail": "mid-range.510",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.510",
        "description": "mid-range.510",
        "peekOfCode": "class Solution:\n    def inorderSuccessor(self, node: \"Node\") -> \"Node\":\n        if node.right:\n            node = node.right\n            while node.left:\n                node = node.left\n            return node\n        while node.parent and node.parent.val < node.val:\n            node = node.parent\n        return node.parent",
        "detail": "mid-range.510",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.513",
        "description": "mid-range.513",
        "peekOfCode": "class Solution:\n    def findBottomLeftValue(self, root: TreeNode) -> int:\n        queue = [root]\n        while queue:\n            leftmost = queue[0].val\n            queue = [\n                child for node in queue for child in [node.left, node.right] if child\n            ]\n        return leftmost",
        "detail": "mid-range.513",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.514",
        "description": "mid-range.514",
        "peekOfCode": "class Solution:\n    def findRotateSteps(self, ring: str, key: str) -> int:\n        d = defaultdict(list)\n        for i, c in enumerate(ring):\n            d[c].append(i)\n        def getDistance(i, j):\n            n = abs(j - i)\n            return min(n, len(ring) - n)\n        state = {0: 0}\n        for c in key:",
        "detail": "mid-range.514",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.515",
        "description": "mid-range.515",
        "peekOfCode": "class Solution:\n    def largestValues(self, root: TreeNode) -> List[int]:\n        if not root:\n            return []\n        result = []\n        queue = [root]\n        while queue:\n            result.append(max(node.val for node in queue))\n            queue = [\n                child for node in queue for child in [node.left, node.right] if child",
        "detail": "mid-range.515",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.516",
        "description": "mid-range.516",
        "peekOfCode": "class Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        N = len(s)\n        dp = [[0] * N for _ in range(N)]\n        for i in range(N):\n            for j in range(N):\n                if i == j:\n                    dp[i][j] = 1\n        for d in range(1, N):\n            for i in range(N - d):",
        "detail": "mid-range.516",
        "documentation": {}
    },
    {
        "label": "deleteDigit",
        "kind": 2,
        "importPath": "mid-range.51_-_deleteDigit",
        "description": "mid-range.51_-_deleteDigit",
        "peekOfCode": "def deleteDigit(n):\n    num = str(n)\n    highest = 0\n    for digit in range(len(num)):\n        output = num[:digit] + num[digit + 1 :]\n        if int(output) > int(highest):\n            highest = output\n    return int(highest)",
        "detail": "mid-range.51_-_deleteDigit",
        "documentation": {}
    },
    {
        "label": "longestWord",
        "kind": 2,
        "importPath": "mid-range.52 - longestWord",
        "description": "mid-range.52 - longestWord",
        "peekOfCode": "def longestWord(text):\n    word_split = re.findall(r\"[\\w']+\", text)\n    longest_word = \"\"\n    for word in word_split:\n        if len(word) > len(longest_word) and word.isalpha():\n            longest_word = word\n    return longest_word",
        "detail": "mid-range.52 - longestWord",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.52",
        "description": "mid-range.52",
        "peekOfCode": "class Solution:\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        self.ret = 0\n        self.dfs([-1] * n, 0)\n        return self.ret\n    def dfs(self, b, r):",
        "detail": "mid-range.52",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.520",
        "description": "mid-range.520",
        "peekOfCode": "class Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        if word.isupper() or word.islower():\n            return True\n        return word[0].isupper() and word[1:].islower()",
        "detail": "mid-range.520",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.523",
        "description": "mid-range.523",
        "peekOfCode": "class Solution:\n    def checkSubarraySum(self, nums: List[int], k: int) -> bool:\n        d = {0: -1}\n        total, m = 0, 0\n        for i in range(len(nums)):\n            total += nums[i]\n            if k != 0:\n                m = total % k\n            else:\n                m = total",
        "detail": "mid-range.523",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.526",
        "description": "mid-range.526",
        "peekOfCode": "class Solution:\n    def countArrangement(self, N: int) -> int:\n        def count(i, X):\n            if i == 1:\n                return 1\n            return sum(count(i - 1, X - {x}) for x in X if x % i == 0 or i % x == 0)\n        return count(N, set(i for i in range(1, N + 1)))",
        "detail": "mid-range.526",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.527",
        "description": "mid-range.527",
        "peekOfCode": "class Solution:\n    def wordsAbbreviation(self, dict: List[str]) -> List[str]:\n        def get_prefix(w1, w2):\n            i = 1\n            while i < len(w1) and i < len(w2) and w1[i] == w2[i]:\n                i += 1\n            return i\n        result = [None] * len(dict)\n        groups = defaultdict(list)\n        for idx, word in enumerate(dict):",
        "detail": "mid-range.527",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.528",
        "description": "mid-range.528",
        "peekOfCode": "class Solution:\n    def __init__(self, w: List[int]):\n        self.w = w\n        self.total = sum(w)\n        for i in range(1, len(w)):\n            self.w[i] += self.w[i - 1]\n    def pickIndex(self) -> int:\n        r = random.randint(1, self.total)\n        start, end = 0, len(self.w) - 1\n        while start < end:",
        "detail": "mid-range.528",
        "documentation": {}
    },
    {
        "label": "longestWord",
        "kind": 2,
        "importPath": "mid-range.52_-_longestWord",
        "description": "mid-range.52_-_longestWord",
        "peekOfCode": "def longestWord(text):\n    longest = []\n    word = []\n    for char in text:\n        if ord(\"A\") <= ord(char) <= ord(\"Z\") or ord(\"a\") <= ord(char) <= ord(\"z\"):\n            word.append(char)\n        else:\n            if len(word) > len(longest):\n                longest = word\n            word = []",
        "detail": "mid-range.52_-_longestWord",
        "documentation": {}
    },
    {
        "label": "validTime",
        "kind": 2,
        "importPath": "mid-range.53 - validTime",
        "description": "mid-range.53 - validTime",
        "peekOfCode": "def validTime(time):\n    time_split = time.split(\":\")\n    if 00 <= int(time_split[0]) <= 23 and 00 <= int(time_split[1]) <= 59:\n        return True\n    return False",
        "detail": "mid-range.53 - validTime",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.53",
        "description": "mid-range.53",
        "peekOfCode": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        result, curr_sum = nums[0], nums[0]\n        for num in nums[1:]:\n            curr_sum = max(num, curr_sum + num)\n            result = max(result, curr_sum)\n        return result",
        "detail": "mid-range.53",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.531",
        "description": "mid-range.531",
        "peekOfCode": "class Solution:\n    def findLonelyPixel(self, picture: List[List[str]]) -> int:\n        m, n = len(picture), len(picture[0])\n        blacks = []\n        for i in range(m):\n            for j in range(n):\n                if picture[i][j] == \"B\":\n                    blacks.append((i, j))\n        def dfs(x, y):\n            for i in range(n):",
        "detail": "mid-range.531",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.532",
        "description": "mid-range.532",
        "peekOfCode": "class Solution:\n    def findPairs(self, nums: List[int], k: int) -> int:\n        c = Counter(nums)\n        result = 0\n        for num in c:\n            if k > 0 and num + k in c or (k == 0 and c[num] > 1):\n                result += 1\n        return result",
        "detail": "mid-range.532",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "mid-range.535",
        "description": "mid-range.535",
        "peekOfCode": "class Codec:\n    def __init__(self):\n        self.long2short = {}\n        self.short2long = {}\n    def encode(self, longUrl):\n        \"\"\"Encodes a URL to a shortened URL.\n        :type longUrl: str\n        :rtype: str\n        \"\"\"\n        if longUrl in self.long2short:",
        "detail": "mid-range.535",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.538",
        "description": "mid-range.538",
        "peekOfCode": "class Solution:\n    def convertBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        self.val = 0\n        def visit(node):\n            if node:\n                visit(node.right)",
        "detail": "mid-range.538",
        "documentation": {}
    },
    {
        "label": "validTime",
        "kind": 2,
        "importPath": "mid-range.53_-_validTime",
        "description": "mid-range.53_-_validTime",
        "peekOfCode": "def validTime(time):\n    groups = time.split(\":\")\n    if len(groups) != 2:\n        return False\n    if not (groups[0].isdigit() and groups[1].isdigit()):\n        return False\n    if int(groups[0]) > 23 or int(groups[1]) > 59:\n        return False\n    return True",
        "detail": "mid-range.53_-_validTime",
        "documentation": {}
    },
    {
        "label": "sumUpNumbers",
        "kind": 2,
        "importPath": "mid-range.54 - sumUpNumbers",
        "description": "mid-range.54 - sumUpNumbers",
        "peekOfCode": "def sumUpNumbers(inputString):\n    def getNumbers(str):\n        nums = re.findall(r\"[0-9]+\", str)\n        return nums\n    numbers = getNumbers(inputString)\n    total = 0\n    for i in numbers:\n        total += int(i)\n    return total",
        "detail": "mid-range.54 - sumUpNumbers",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.54",
        "description": "mid-range.54",
        "peekOfCode": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        if not matrix:\n            return []\n        R, C = len(matrix), len(matrix[0])\n        dr = [0, 1, 0, -1]",
        "detail": "mid-range.54",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.541",
        "description": "mid-range.541",
        "peekOfCode": "class Solution(object):\n    def reverseStr(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        if len(s) <= k:\n            return s[::-1]\n        elif len(s) <= 2 * k:",
        "detail": "mid-range.541",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.542",
        "description": "mid-range.542",
        "peekOfCode": "class Solution:\n    def updateMatrix(self, matrix: List[List[int]]) -> List[List[int]]:\n        m, n = len(matrix), len(matrix[0])\n        result = [[-1] * n for _ in range(m)]\n        q = []\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    result[i][j] = 0\n                    q.append((i, j))",
        "detail": "mid-range.542",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.543",
        "description": "mid-range.543",
        "peekOfCode": "class Solution:\n    def diameterOfBinaryTree(self, root: TreeNode) -> int:\n        self.result = 0\n        def getDiameter(node):\n            if not node:\n                return 0\n            left = getDiameter(node.left)\n            right = getDiameter(node.right)\n            self.result = max(self.result, left + right)\n            return 1 + max(left, right)",
        "detail": "mid-range.543",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.544",
        "description": "mid-range.544",
        "peekOfCode": "class Solution:\n    def findContestMatch(self, n: int) -> str:\n        matches = [str(i) for i in range(1, n + 1)]\n        while n > 1:\n            for i in range(0, n // 2):\n                matches[i] = \"(\" + matches[i] + \",\" + matches[n - i - 1] + \")\"\n            n = n // 2\n        return matches[0]",
        "detail": "mid-range.544",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.547",
        "description": "mid-range.547",
        "peekOfCode": "class Solution:\n    def findCircleNum(self, M: List[List[int]]) -> int:\n        N = len(M)\n        roots = list(range(N))\n        result = N\n        def find(node):\n            root = node\n            while roots[root] != root:\n                root = roots[root]\n            while node != root:",
        "detail": "mid-range.547",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.549",
        "description": "mid-range.549",
        "peekOfCode": "class Solution:\n    def longestConsecutive(self, root: TreeNode) -> int:\n        def getLength(node):\n            if not node:\n                return [0, 0]\n            increase, decrease = 1, 1\n            ll = getLength(node.left)\n            rr = getLength(node.right)\n            if node.left:\n                if node.val + 1 == node.left.val:",
        "detail": "mid-range.549",
        "documentation": {}
    },
    {
        "label": "sumUpNumbers",
        "kind": 2,
        "importPath": "mid-range.54_-_sumUpNumbers",
        "description": "mid-range.54_-_sumUpNumbers",
        "peekOfCode": "def sumUpNumbers(inputString):\n    total = 0\n    current_num = []\n    for char in inputString:\n        if char.isdigit():\n            current_num.append(char)\n        else:\n            if len(current_num) > 0:\n                num = int(\"\".join(current_num))\n                total += num",
        "detail": "mid-range.54_-_sumUpNumbers",
        "documentation": {}
    },
    {
        "label": "differentSquares",
        "kind": 2,
        "importPath": "mid-range.55 - differentSquares",
        "description": "mid-range.55 - differentSquares",
        "peekOfCode": "def differentSquares(matrix):\n    squares = set()\n    for row in range(len(matrix) - 1):\n        for cell in range(len(matrix[row]) - 1):\n            square = (\n                (matrix[row][cell], matrix[row][cell + 1]),\n                (matrix[row + 1][cell], matrix[row + 1][cell + 1]),\n            )\n            squares.add(square)\n    return len(squares)",
        "detail": "mid-range.55 - differentSquares",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.55",
        "description": "mid-range.55",
        "peekOfCode": "class Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        if len(nums) < 2:\n            return True\n        currentEnd, currentFarthest = 0, 0\n        for i in range(len(nums) - 1):\n            currentFarthest = max(i + nums[i], currentFarthest)\n            if i == currentEnd:\n                currentEnd = currentFarthest\n            if currentEnd >= len(nums) - 1:",
        "detail": "mid-range.55",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.554",
        "description": "mid-range.554",
        "peekOfCode": "class Solution:\n    def leastBricks(self, wall: List[List[int]]) -> int:\n        row = {}\n        for r in wall:\n            i = 0\n            for brick in r[:-1]:\n                i += brick\n                row[i] = row.get(i, 0) + 1\n        return len(wall) - max(row.values(), default=0)",
        "detail": "mid-range.554",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.557",
        "description": "mid-range.557",
        "peekOfCode": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        result = []\n        for word in s.split():\n            result.append(word[::-1])\n        return \" \".join(result)",
        "detail": "mid-range.557",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "mid-range.559",
        "description": "mid-range.559",
        "peekOfCode": "class Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\nfrom collections import deque\nclass Solution:\n    def maxDepth(self, root: \"Node\") -> int:\n        if not root:\n            return 0",
        "detail": "mid-range.559",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.559",
        "description": "mid-range.559",
        "peekOfCode": "class Solution:\n    def maxDepth(self, root: \"Node\") -> int:\n        if not root:\n            return 0\n        queue = deque([(root, 1)])\n        result = 0\n        while queue:\n            node, depth = queue.popleft()\n            result = max(result, depth)\n            if node.children:",
        "detail": "mid-range.559",
        "documentation": {}
    },
    {
        "label": "differentSquares",
        "kind": 2,
        "importPath": "mid-range.55_-_differentSquares",
        "description": "mid-range.55_-_differentSquares",
        "peekOfCode": "def differentSquares(matrix):\n    squares = set()\n    for row in range(len(matrix) - 1):\n        for cell in range(len(matrix[row]) - 1):\n            square = (\n                (matrix[row][cell], matrix[row][cell + 1]),\n                (matrix[row + 1][cell], matrix[row + 1][cell + 1]),\n            )\n            squares.add(square)\n    return len(squares)",
        "detail": "mid-range.55_-_differentSquares",
        "documentation": {}
    },
    {
        "label": "digitsProduct",
        "kind": 2,
        "importPath": "mid-range.56 - digitsProduct",
        "description": "mid-range.56 - digitsProduct",
        "peekOfCode": "def digitsProduct(product):\n    if product == 0:\n        return 10\n    if product == 1:\n        return 1\n    for i in range(0, 4000):\n        p = 1\n        for j in str(i):\n            p *= int(j)\n        if p == product:",
        "detail": "mid-range.56 - digitsProduct",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.560",
        "description": "mid-range.560",
        "peekOfCode": "class Solution:\n    def subarraySum(self, nums: List[int], k: int) -> int:\n        cache = {0: 1}\n        s, result = 0, 0\n        for num in nums:\n            s += num\n            if s - k in cache:\n                result += cache[s - k]\n            cache[s] = cache.get(s, 0) + 1\n        return result",
        "detail": "mid-range.560",
        "documentation": {}
    },
    {
        "label": "digitsProduct",
        "kind": 2,
        "importPath": "mid-range.56_-_digitsProduct",
        "description": "mid-range.56_-_digitsProduct",
        "peekOfCode": "def digitsProduct(product):\n    # New idea: add product to factors\n    # while max(factors) > 10: split that num into factors\n    if product == 0:\n        return 10\n    factors = [product]\n    while max(factors) > 9:\n        factored = findFactors(max(factors))\n        if factored:\n            factors.remove(max(factors))",
        "detail": "mid-range.56_-_digitsProduct",
        "documentation": {}
    },
    {
        "label": "findFactors",
        "kind": 2,
        "importPath": "mid-range.56_-_digitsProduct",
        "description": "mid-range.56_-_digitsProduct",
        "peekOfCode": "def findFactors(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i, n // i\n    return False",
        "detail": "mid-range.56_-_digitsProduct",
        "documentation": {}
    },
    {
        "label": "fileNaming",
        "kind": 2,
        "importPath": "mid-range.57 - fileNaming",
        "description": "mid-range.57 - fileNaming",
        "peekOfCode": "def fileNaming(names):\n    outnames = []\n    for name in names:\n        if name in outnames:\n            k = 1\n            while \"{}({})\".format(name, k) in outnames:\n                k += 1\n            name = \"{}({})\".format(name, k)\n        outnames.append(name)\n    return outnames",
        "detail": "mid-range.57 - fileNaming",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.57",
        "description": "mid-range.57",
        "peekOfCode": "class Solution:\n    def insert(\n        self, intervals: List[List[int]], newInterval: List[int]\n    ) -> List[List[int]]:\n        if not intervals or len(intervals) == 0:\n            return [newInterval]\n        result, i = [], 0\n        while i < len(intervals) and intervals[i][1] < newInterval[0]:\n            result.append(intervals[i])\n            i += 1",
        "detail": "mid-range.57",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.572",
        "description": "mid-range.572",
        "peekOfCode": "class Solution:\n    def isSubtree(self, s, t):\n        \"\"\"\n        :type s: TreeNode\n        :type t: TreeNode\n        :rtype: bool\n        \"\"\"\n        if not s:\n            return s is t\n        if self.isEqual(s, t):",
        "detail": "mid-range.572",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.576",
        "description": "mid-range.576",
        "peekOfCode": "class Solution:\n    def findPaths(self, m: int, n: int, N: int, i: int, j: int) -> int:\n        M = [[0] * n for _ in range(m)]\n        for _ in range(N):\n            T = [[0] * n for _ in range(m)]\n            for x in range(m):\n                for y in range(n):\n                    up = M[x - 1][y] if x > 0 else 1\n                    down = M[x + 1][y] if x + 1 < m else 1\n                    right = M[x][y + 1] if y + 1 < n else 1",
        "detail": "mid-range.576",
        "documentation": {}
    },
    {
        "label": "fileNaming",
        "kind": 2,
        "importPath": "mid-range.57_-_fileNaming",
        "description": "mid-range.57_-_fileNaming",
        "peekOfCode": "def fileNaming(names):\n    outnames = []\n    for name in names:\n        if name in outnames:\n            k = 1\n            while \"{}({})\".format(name, k) in outnames:\n                k += 1\n            name = \"{}({})\".format(name, k)\n        outnames.append(name)\n    return outnames",
        "detail": "mid-range.57_-_fileNaming",
        "documentation": {}
    },
    {
        "label": "messageFromBinaryCode",
        "kind": 2,
        "importPath": "mid-range.58 - messageFromBinaryCode",
        "description": "mid-range.58 - messageFromBinaryCode",
        "peekOfCode": "def messageFromBinaryCode(code):\n    output = []\n    for i in range(0, len(code), 8):\n        letter = chr(int(code[i : i + 8], 2))\n        output.append(letter)\n    return \"\".join(output)",
        "detail": "mid-range.58 - messageFromBinaryCode",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.58",
        "description": "mid-range.58",
        "peekOfCode": "class Solution:\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        return len(s.strip().split(\" \")[-1])",
        "detail": "mid-range.58",
        "documentation": {}
    },
    {
        "label": "messageFromBinaryCode",
        "kind": 2,
        "importPath": "mid-range.58_-_messageFromBinaryCode",
        "description": "mid-range.58_-_messageFromBinaryCode",
        "peekOfCode": "def messageFromBinaryCode(code):\n    output = []\n    for i in range(0, len(code), 8):\n        letter = chr(int(code[i : i + 8], 2))\n        output.append(letter)\n    return \"\".join(output)",
        "detail": "mid-range.58_-_messageFromBinaryCode",
        "documentation": {}
    },
    {
        "label": "spiralNumbers",
        "kind": 2,
        "importPath": "mid-range.59 - spiralNumbers",
        "description": "mid-range.59 - spiralNumbers",
        "peekOfCode": "def spiralNumbers(n):\n    dims = n\n    elem = 1\n    matrix = [[0] * n for x in range(n)]\n    while 0 < dims:\n        i = n - dims\n        # you can sub i = n - dims ONLY in the first 2 parts\n        # where n - dims is in the starting parameter of the range\n        for j in range(n - dims, dims):\n            matrix[i][j] = elem",
        "detail": "mid-range.59 - spiralNumbers",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.59",
        "description": "mid-range.59",
        "peekOfCode": "class Solution:\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        res = [[0] * n for _ in range(n)]\n        r, c, dr, dc = 0, 0, 0, 1\n        for i in range(1, n * n + 1):\n            res[r][c] = i",
        "detail": "mid-range.59",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.593",
        "description": "mid-range.593",
        "peekOfCode": "class Solution:\n    def validSquare(\n        self, p1: List[int], p2: List[int], p3: List[int], p4: List[int]\n    ) -> bool:\n        counter = Counter()\n        points = [p1, p2, p3, p4]\n        def getDistance(x, y):\n            return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2\n        for i in range(len(points)):\n            for j in range(i + 1, len(points)):",
        "detail": "mid-range.593",
        "documentation": {}
    },
    {
        "label": "spiralNumbers",
        "kind": 2,
        "importPath": "mid-range.59_-_spiralNumbers",
        "description": "mid-range.59_-_spiralNumbers",
        "peekOfCode": "def spiralNumbers(n):\n    LEFT = \"left\"\n    RIGHT = \"right\"\n    UP = \"up\"\n    DOWN = \"down\"\n    direction = RIGHT\n    spiral = [[0 for i in range(n)] for j in range(n)]\n    row = 0\n    cell = 0\n    for num in range(1, (n * n) + 1):",
        "detail": "mid-range.59_-_spiralNumbers",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.5MinOfNumbers",
        "description": "mid-range.5MinOfNumbers",
        "peekOfCode": "x = input(\"Enter the first number\")\ny = input(\"Enter the second number\")\nresult = min(x, y)\nprint(\"The minimum of the two numbers entered is {}\".format(result))",
        "detail": "mid-range.5MinOfNumbers",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "mid-range.5MinOfNumbers",
        "description": "mid-range.5MinOfNumbers",
        "peekOfCode": "y = input(\"Enter the second number\")\nresult = min(x, y)\nprint(\"The minimum of the two numbers entered is {}\".format(result))",
        "detail": "mid-range.5MinOfNumbers",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "mid-range.5MinOfNumbers",
        "description": "mid-range.5MinOfNumbers",
        "peekOfCode": "result = min(x, y)\nprint(\"The minimum of the two numbers entered is {}\".format(result))",
        "detail": "mid-range.5MinOfNumbers",
        "documentation": {}
    },
    {
        "label": "countdown",
        "kind": 2,
        "importPath": "mid-range.5_countdown",
        "description": "mid-range.5_countdown",
        "peekOfCode": "def countdown(n):  # label\n    # condition (base case)\n    if n == 0:\n        return\n    # body\n    print(n)\n    # decrement\n    countdown(n - 1)\n# countdown_i(n)\ncountdown(N)",
        "detail": "mid-range.5_countdown",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "mid-range.5_countdown",
        "description": "mid-range.5_countdown",
        "peekOfCode": "N = 10000\n# def countdown_i(n):\n#     while (n > 0): # condition and label\n#         print(n) # body\n#         n -= 1 # decrement\ndef countdown(n):  # label\n    # condition (base case)\n    if n == 0:\n        return\n    # body",
        "detail": "mid-range.5_countdown",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.6",
        "description": "mid-range.6",
        "peekOfCode": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        if len(s) <= numRows or numRows == 1:\n            return s\n        result = [\"\"] * numRows",
        "detail": "mid-range.6",
        "documentation": {}
    },
    {
        "label": "sudoku",
        "kind": 2,
        "importPath": "mid-range.60 - Sudoku",
        "description": "mid-range.60 - Sudoku",
        "peekOfCode": "def sudoku(grid):\n    match = [i for i in range(1, 10)]\n    for row in grid:\n        if sorted(row) != match:\n            return False\n    for column_index in range(9):\n        column = [grid[row_index][column_index] for row_index in range(9)]\n        if sorted(column) != match:\n            return False\n    for row in range(0, 9, 3):",
        "detail": "mid-range.60 - Sudoku",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.60",
        "description": "mid-range.60",
        "peekOfCode": "class Solution:\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        nums = list(range(1, n + 1))\n        NN = math.factorial(n)\n        k -= 1",
        "detail": "mid-range.60",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.600",
        "description": "mid-range.600",
        "peekOfCode": "class Solution:\n    def findIntegers(self, num: int) -> int:\n        A = bin(num)[2:][::-1]\n        print(A)\n        N = len(A)\n        dp = [[1, 1] for _ in range(N)]\n        result = 0\n        result = 1 if A[0] == \"0\" else 2\n        for i in range(1, N):\n            dp[i][0] = dp[i - 1][1] + dp[i - 1][0]",
        "detail": "mid-range.600",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.605",
        "description": "mid-range.605",
        "peekOfCode": "class Solution:\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:\n        count, next = 0, True\n        for i in range(len(flowerbed) - 1):\n            if flowerbed[i]:\n                next = False\n            elif flowerbed[i] == 0 and next and not flowerbed[i + 1]:\n                count += 1\n                next = False\n            elif flowerbed[i] == 0 and not next:",
        "detail": "mid-range.605",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.606",
        "description": "mid-range.606",
        "peekOfCode": "class Solution:\n    def tree2str(self, t):\n        \"\"\"\n        :type t: TreeNode\n        :rtype: str\n        \"\"\"\n        if not t:\n            return \"\"\n        left = \"({})\".format(self.tree2str(t.left)) if t.left or t.right else \"\"\n        right = \"({})\".format(self.tree2str(t.right)) if t.right else \"\"",
        "detail": "mid-range.606",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.609",
        "description": "mid-range.609",
        "peekOfCode": "class Solution:\n    def findDuplicate(self, paths: List[str]) -> List[List[str]]:\n        d = defaultdict(list)\n        for path in paths:\n            directory, *files = path.split()\n            for file in files:\n                name, content = file.split(\"(\")\n                d[content].append(directory + \"/\" + name)\n        return [v for _, v in d.items() if len(v) > 1]",
        "detail": "mid-range.609",
        "documentation": {}
    },
    {
        "label": "sudoku",
        "kind": 2,
        "importPath": "mid-range.60_-_sudoku",
        "description": "mid-range.60_-_sudoku",
        "peekOfCode": "def sudoku(grid):\n    match = [i for i in range(1, 10)]\n    for row in grid:\n        if sorted(row) != match:\n            return False\n    for column_index in range(9):\n        column = [grid[row_index][column_index] for row_index in range(9)]\n        if sorted(column) != match:\n            return False\n    for row in range(0, 9, 3):",
        "detail": "mid-range.60_-_sudoku",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.61",
        "description": "mid-range.61",
        "peekOfCode": "class Solution:\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return []\n        l = 1",
        "detail": "mid-range.61",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.617",
        "description": "mid-range.617",
        "peekOfCode": "class TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution(object):\n    def mergeTrees(self, t1, t2):\n        \"\"\"\n        :type t1: TreeNode\n        :type t2: TreeNode",
        "detail": "mid-range.617",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.617",
        "description": "mid-range.617",
        "peekOfCode": "class Solution(object):\n    def mergeTrees(self, t1, t2):\n        \"\"\"\n        :type t1: TreeNode\n        :type t2: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        if t1 and t2:\n            t = TreeNode(t1.val + t2.val)\n            t.left = self.mergeTrees(t1.left, t2.left)",
        "detail": "mid-range.617",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.62",
        "description": "mid-range.62",
        "peekOfCode": "class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        dp = [1] * n\n        for row in range(1, m):\n            for j in range(1, n):\n                dp[j] += dp[j - 1]\n        return dp[-1]",
        "detail": "mid-range.62",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.621",
        "description": "mid-range.621",
        "peekOfCode": "class Solution:\n    def leastInterval(self, tasks: List[str], n: int) -> int:\n        if n == 0:\n            return len(tasks)\n        counts = Counter(tasks)\n        max_count = counts.most_common(1)[0][1]\n        addition = 0\n        for k, v in counts.most_common()[1:]:\n            if v == max_count:\n                addition += 1",
        "detail": "mid-range.621",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.624",
        "description": "mid-range.624",
        "peekOfCode": "class Solution:\n    def maxDistance(self, arrays: List[List[int]]) -> int:\n        result = 0\n        m1, m2 = arrays[0][0], arrays[0][-1]\n        for row in arrays[1:]:\n            result = max(result, row[-1] - m1, m2 - row[0])\n            m1 = min(m1, row[0])\n            m2 = max(m2, row[-1])\n        return result",
        "detail": "mid-range.624",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.63",
        "description": "mid-range.63",
        "peekOfCode": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [0] * n\n        dp[0] = 1\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[j] = 0\n                elif j >= 1:",
        "detail": "mid-range.63",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.630",
        "description": "mid-range.630",
        "peekOfCode": "class Solution:\n    def scheduleCourse(self, courses: List[List[int]]) -> int:\n        pq = []\n        start = 0\n        for s, e in sorted(courses, key=lambda x: x[1]):\n            heapq.heappush(pq, -s)\n            start += s\n            while start > e:\n                target = heapq.heappop(pq)\n                start += target",
        "detail": "mid-range.630",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.636",
        "description": "mid-range.636",
        "peekOfCode": "class Solution:\n    def exclusiveTime(self, n: int, logs: List[str]) -> List[int]:\n        result = [0] * n\n        stack = []\n        prev = 0\n        for log in logs:\n            thread, status, time = log.split(\":\")\n            thread, time = int(thread), int(time)\n            if status == \"start\":\n                if stack:",
        "detail": "mid-range.636",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.637",
        "description": "mid-range.637",
        "peekOfCode": "class Solution:\n    def averageOfLevels(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[float]\n        \"\"\"\n        if not root:\n            return []\n        this_level = [root]\n        result = []",
        "detail": "mid-range.637",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.638",
        "description": "mid-range.638",
        "peekOfCode": "class Solution:\n    def shoppingOffers(\n        self, price: List[int], special: List[List[int]], needs: List[int]\n    ) -> int:\n        N = len(needs)\n        def dfs(idx, buy):\n            result = sum(x * y for x, y in zip(price, buy))\n            if any(item < 0 for item in buy):\n                return float(\"inf\")\n            for i in range(idx, len(special)):",
        "detail": "mid-range.638",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.639",
        "description": "mid-range.639",
        "peekOfCode": "class Solution:\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        f0 = 0\n        e0, e1, e2 = 1, 0, 0\n        mod = 10 ** 9 + 7\n        for c in s:",
        "detail": "mid-range.639",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.64",
        "description": "mid-range.64",
        "peekOfCode": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if not grid:\n        \treturn 0\n        row, col = len(grid), len(grid[0])\n        dp = [[0 for _ in range(col)] for _ in range(row)]",
        "detail": "mid-range.64",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.646",
        "description": "mid-range.646",
        "peekOfCode": "class Solution:\n    def findLongestChain(self, pairs):\n        \"\"\"\n        :type pairs: List[List[int]]\n        :rtype: int\n        \"\"\"\n        current, result = float(\"-inf\"), 0\n        for pair in sorted(pairs, key=lambda x: x[1]):\n            if current < pair[0]:\n                current = pair[1]",
        "detail": "mid-range.646",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.647",
        "description": "mid-range.647",
        "peekOfCode": "class Solution:\n    def countSubstrings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        result = 0\n        for i in range(len(s)):\n            result += self.getCount(s, i, i)\n            result += self.getCount(s, i, i + 1)",
        "detail": "mid-range.647",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.648",
        "description": "mid-range.648",
        "peekOfCode": "class Solution:\n    def replaceWords(self, dictionary: List[str], sentence: str) -> str:\n        trie = {}\n        for word in dictionary:\n            t = trie\n            for c in word:\n                t = t.setdefault(c, {})\n            t[\"#\"] = \"#\"\n        def check(w):\n            t = trie",
        "detail": "mid-range.648",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.65",
        "description": "mid-range.65",
        "peekOfCode": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        s = s.strip()\n        try:\n            if isinstance(float(s), float) or isinstance(int(s), int):\n                return True",
        "detail": "mid-range.65",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.651",
        "description": "mid-range.651",
        "peekOfCode": "class Solution:\n    def maxA(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        if N < 7:\n            return N\n        result = [0, 1, 2, 3, 4, 5, 6]\n        for i in range(7, N + 1):",
        "detail": "mid-range.651",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.653",
        "description": "mid-range.653",
        "peekOfCode": "class Solution:\n    def findTarget(self, root: TreeNode, k: int) -> bool:\n        if not root:\n            return False\n        q, nums = deque([root]), set()\n        while q:\n            curr = q.popleft()\n            if k - curr.val in nums:\n                return True\n            nums.add(curr.val)",
        "detail": "mid-range.653",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.654",
        "description": "mid-range.654",
        "peekOfCode": "class Solution:\n    def constructMaximumBinaryTree(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        stack = []\n        for num in nums:\n            curr = TreeNode(num)\n            while stack and stack[-1].val < num:",
        "detail": "mid-range.654",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.66",
        "description": "mid-range.66",
        "peekOfCode": "class Solution:\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        for i in range(len(digits)):\n            digits[~i] += 1\n            if digits[~i] < 10:\n                return digits",
        "detail": "mid-range.66",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.661",
        "description": "mid-range.661",
        "peekOfCode": "class Solution:\n    def imageSmoother(self, M):\n        \"\"\"\n        :type M: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        m = len(M)\n        n = len(M[0]) if m else 0\n        ret = [[0] * n for j in range(m)]\n        for i in range(m):",
        "detail": "mid-range.661",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.67",
        "description": "mid-range.67",
        "peekOfCode": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        i, j, carry = len(a) - 1, len(b) - 1, 0\n        result = \"\"\n        while i >= 0 or j >= 0 or carry:\n            if i >= 0:\n                carry += int(a[i])\n                i -= 1\n            if j >= 0:\n                carry += int(b[j])",
        "detail": "mid-range.67",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.670",
        "description": "mid-range.670",
        "peekOfCode": "class Solution:\n    def maximumSwap(self, num: int) -> int:\n        num = [int(i) for i in str(num)]\n        for i in range(len(num) - 1):\n            m = max(num[i + 1 :])\n            if num[i] < m:\n                target = len(num) - 1\n                for j in range(len(num) - 1, 0, -1):\n                    if num[j] == m:\n                        target = j",
        "detail": "mid-range.670",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.673",
        "description": "mid-range.673",
        "peekOfCode": "class Solution:\n    def findNumberOfLIS(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        length, count = [1] * len(nums), [1] * len(nums)\n        result, maxval = 1, 1",
        "detail": "mid-range.673",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.674",
        "description": "mid-range.674",
        "peekOfCode": "class Solution:\n    def findLengthOfLCIS(self, nums: List[int]) -> int:\n        result, i = 0, 0\n        j = 0\n        while j < len(nums):\n            if nums[j] <= nums[j - 1]:\n                i = j\n            j += 1\n            result = max(result, j - i)\n        return result",
        "detail": "mid-range.674",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.68",
        "description": "mid-range.68",
        "peekOfCode": "class Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:\n        curr, num_of_chars, result = [], 0, []\n        for word in words:\n            # len(curr) represent the number of spaces following total words\n            if len(curr) + num_of_chars + len(word) > maxWidth:\n                for i in range(maxWidth - num_of_chars):\n                    curr[i % (len(curr) - 1 or 1)] += \" \"\n                result.append(\"\".join(curr))\n                curr = []",
        "detail": "mid-range.68",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.680",
        "description": "mid-range.680",
        "peekOfCode": "class Solution:\n    def validPalindrome(self, s: str) -> bool:\n        l, r = 0, len(s) - 1\n        while l < r:\n            if s[l] != s[r]:\n                first, second = s[l:r], s[l + 1 : r + 1]\n                return first == first[::-1] or second == second[::-1]\n            l += 1\n            r -= 1\n        return True",
        "detail": "mid-range.680",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.681",
        "description": "mid-range.681",
        "peekOfCode": "class Solution:\n    def nextClosestTime(self, time):\n        \"\"\"\n        :type time: str\n        :rtype: str\n        \"\"\"\n        return min(\n            (t <= time, t)\n            for i in range(24 * 60)\n            for t in [\"%02d:%02d\" % divmod(i, 60)]",
        "detail": "mid-range.681",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.688",
        "description": "mid-range.688",
        "peekOfCode": "class Solution:\n    def knightProbability(self, N: int, K: int, r: int, c: int) -> float:\n        directions = [\n            (-1, 2),\n            (1, 2),\n            (-1, -2),\n            (1, -2),\n            (2, 1),\n            (-2, 1),\n            (2, -1),",
        "detail": "mid-range.688",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.689",
        "description": "mid-range.689",
        "peekOfCode": "class Solution:\n    def maxSumOfThreeSubarrays(self, nums: List[int], k: int) -> List[int]:\n        w1, w2, w3 = [0], [0, k], [0, k, 2 * k]\n        s1, s2, s3 = sum(nums[:k]), sum(nums[k : 2 * k]), sum(nums[2 * k : 3 * k])\n        ws1, ws2, ws3 = s1, s1 + s2, s1 + s2 + s3\n        idx1, idx2, idx3 = 1, k + 1, 2 * k + 1\n        while idx3 < len(nums) - k + 1:\n            s1 = s1 - nums[idx1 - 1] + nums[idx1 + k - 1]\n            s2 = s2 - nums[idx2 - 1] + nums[idx2 + k - 1]\n            s3 = s3 - nums[idx3 - 1] + nums[idx3 + k - 1]",
        "detail": "mid-range.689",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.69",
        "description": "mid-range.69",
        "peekOfCode": "class Solution:\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        if x == 0:\n            return 0\n        left, right = 1, x\n        while left <= right:",
        "detail": "mid-range.69",
        "documentation": {}
    },
    {
        "label": "Employee",
        "kind": 6,
        "importPath": "mid-range.690",
        "description": "mid-range.690",
        "peekOfCode": "class Employee:\n    def __init__(self, id: int, importance: int, subordinates: List[int]):\n        self.id = id\n        self.importance = importance\n        self.subordinates = subordinates\n\"\"\"\nfrom collections import deque\nclass Solution:\n    def getImportance(self, employees: List[\"Employee\"], id: int) -> int:\n        d = {}",
        "detail": "mid-range.690",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.690",
        "description": "mid-range.690",
        "peekOfCode": "class Solution:\n    def getImportance(self, employees: List[\"Employee\"], id: int) -> int:\n        d = {}\n        for employee in employees:\n            d[employee.id] = [employee.importance, employee.subordinates]\n        queue = deque([id])\n        result = 0\n        while queue:\n            employee_id = queue.popleft()\n            result += d[employee_id][0]",
        "detail": "mid-range.690",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.692",
        "description": "mid-range.692",
        "peekOfCode": "class Solution:\n    def topKFrequent(self, words: List[str], k: int) -> List[str]:\n        q = []\n        for key, val in Counter(words).items():\n            heappush(q, (-val, key))\n        result = []\n        for _ in range(k):\n            result.append(heappop(q)[1])\n        return result",
        "detail": "mid-range.692",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.695",
        "description": "mid-range.695",
        "peekOfCode": "class Solution:\n    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:\n        if not grid or not grid[0]:\n            return 0\n        area = 0\n        m, n = len(grid), len(grid[0])\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    area = max(area, self.dfs(grid, i, j, set()))",
        "detail": "mid-range.695",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.697",
        "description": "mid-range.697",
        "peekOfCode": "class Solution:\n    def findShortestSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        first, last = {}, {}\n        degree = Counter(nums)\n        for i in range(len(nums)):\n            first.setdefault(nums[i], i)",
        "detail": "mid-range.697",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.698",
        "description": "mid-range.698",
        "peekOfCode": "class Solution:\n    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:\n        if sum(nums) % k != 0:\n            return False\n        nums.sort(reverse=True)\n        def dfs(idx, target, s):\n            if idx == len(nums):\n                return True\n            for i in range(k):\n                if s[i] + nums[idx] <= target:",
        "detail": "mid-range.698",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.699",
        "description": "mid-range.699",
        "peekOfCode": "class Solution:\n    def fallingSquares(self, positions: List[List[int]]) -> List[int]:\n        location, height = [0], [0]\n        prev, result = 0, []\n        for i, j in positions:\n            l = bisect.bisect_right(location, i)\n            r = bisect.bisect_left(location, i + j)\n            high = max(height[l - 1 : r] or [0]) + j\n            location[l:r] = [i, i + j]\n            height[l:r] = [high, height[r - 1]]",
        "detail": "mid-range.699",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.6MaxOfThreeNumbers",
        "description": "mid-range.6MaxOfThreeNumbers",
        "peekOfCode": "a = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\nc = int(input(\"Enter the third number: \"))\nresult = max(a, b, c)\nprint(\"Max of the numbers entered is {}\".format(result))",
        "detail": "mid-range.6MaxOfThreeNumbers",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.6MaxOfThreeNumbers",
        "description": "mid-range.6MaxOfThreeNumbers",
        "peekOfCode": "b = int(input(\"Enter the second number: \"))\nc = int(input(\"Enter the third number: \"))\nresult = max(a, b, c)\nprint(\"Max of the numbers entered is {}\".format(result))",
        "detail": "mid-range.6MaxOfThreeNumbers",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.6MaxOfThreeNumbers",
        "description": "mid-range.6MaxOfThreeNumbers",
        "peekOfCode": "c = int(input(\"Enter the third number: \"))\nresult = max(a, b, c)\nprint(\"Max of the numbers entered is {}\".format(result))",
        "detail": "mid-range.6MaxOfThreeNumbers",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "mid-range.6MaxOfThreeNumbers",
        "description": "mid-range.6MaxOfThreeNumbers",
        "peekOfCode": "result = max(a, b, c)\nprint(\"Max of the numbers entered is {}\".format(result))",
        "detail": "mid-range.6MaxOfThreeNumbers",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.7",
        "description": "mid-range.7",
        "peekOfCode": "class Solution:\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        result = 0\n        neg = False\n        if x < 0:\n            neg = True",
        "detail": "mid-range.7",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.70",
        "description": "mid-range.70",
        "peekOfCode": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        if n <= 1:\n            return n\n        s1 = 1\n        s2 = 2\n        for i in range(2, n):\n            s = s1 + s2\n            s1, s2 = s2, s\n        return s2",
        "detail": "mid-range.70",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.701",
        "description": "mid-range.701",
        "peekOfCode": "class Solution:\n    def insertIntoBST(self, root: TreeNode, val: int) -> TreeNode:\n        if not root:\n            return TreeNode(val)\n        if root.val > val:\n            root.left = self.insertIntoBST(root.left, val)\n        if root.val < val:\n            root.right = self.insertIntoBST(root.right, val)\n        return root",
        "detail": "mid-range.701",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "mid-range.708",
        "description": "mid-range.708",
        "peekOfCode": "class Node:\n    def __init__(self, val=None, next=None):\n        self.val = val\n        self.next = next\n\"\"\"\nclass Solution:\n    def insert(self, head: \"Node\", insertVal: int) -> \"Node\":\n        node = Node(insertVal, head)\n        if not head:\n            node.next = node",
        "detail": "mid-range.708",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.708",
        "description": "mid-range.708",
        "peekOfCode": "class Solution:\n    def insert(self, head: \"Node\", insertVal: int) -> \"Node\":\n        node = Node(insertVal, head)\n        if not head:\n            node.next = node\n            return node\n        prev, curr = head, head.next\n        while True:\n            if prev.val <= insertVal <= curr.val:\n                break",
        "detail": "mid-range.708",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.71",
        "description": "mid-range.71",
        "peekOfCode": "class Solution:\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        stack = []\n        for p in path.split(\"/\"):\n            if p == \"..\":\n                if stack:",
        "detail": "mid-range.71",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.712",
        "description": "mid-range.712",
        "peekOfCode": "class Solution:\n    def minimumDeleteSum(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: int\n        \"\"\"\n        l1, l2 = len(s1), len(s2)\n        dp = [[0] * (l2 + 1) for _ in range(l1 + 1)]\n        for i in range(l1):",
        "detail": "mid-range.712",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.713",
        "description": "mid-range.713",
        "peekOfCode": "class Solution:\n    def numSubarrayProductLessThanK(self, nums: List[int], k: int) -> int:\n        if not nums:\n            return 0\n        start, product = 0, 1\n        result = 0\n        for end in range(len(nums)):\n            product *= nums[end]\n            while start <= end and product >= k:\n                product //= nums[start]",
        "detail": "mid-range.713",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.714",
        "description": "mid-range.714",
        "peekOfCode": "class Solution:\n    def maxProfit(self, prices: List[int], fee: int) -> int:\n        sell, buy = 0, float(\"-inf\")\n        for price in prices:\n            sell = max(sell, buy + price - fee)\n            buy = max(buy, sell - price)\n        return sell",
        "detail": "mid-range.714",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.72",
        "description": "mid-range.72",
        "peekOfCode": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        prev = [0]\n        m, n = len(word2), len(word1)\n        for i in range(n):\n            prev.append(prev[i] + 1)\n        for i in range(m):\n            curr = [i + 1]\n            for j in range(n):\n                tmp = prev[j] if word1[j] == word2[i] else prev[j] + 1",
        "detail": "mid-range.72",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.721",
        "description": "mid-range.721",
        "peekOfCode": "class Solution:\n    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]:\n        roots, names = {}, {}\n        for account in accounts:\n            for i in account[1:]:\n                roots[i] = i\n                names[i] = account[0]\n        for account in accounts:\n            r = self.find(account[1], roots)\n            for i in account[2:]:",
        "detail": "mid-range.721",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.723",
        "description": "mid-range.723",
        "peekOfCode": "class Solution:\n    def candyCrush(self, board: List[List[int]]) -> List[List[int]]:\n        while True:\n            crush = set()\n            for i in range(len(board)):\n                for j in range(len(board[0])):\n                    if (\n                        j > 1\n                        and board[i][j]\n                        and board[i][j] == board[i][j - 1] == board[i][j - 2]",
        "detail": "mid-range.723",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.724",
        "description": "mid-range.724",
        "peekOfCode": "class Solution:\n    def pivotIndex(self, nums: List[int]) -> int:\n        left, right = 0, sum(nums)\n        for i in range(len(nums)):\n            right -= nums[i]\n            if left == right:\n                return i\n            left += nums[i]\n        return -1",
        "detail": "mid-range.724",
        "documentation": {}
    },
    {
        "label": "MyCalendar",
        "kind": 6,
        "importPath": "mid-range.729",
        "description": "mid-range.729",
        "peekOfCode": "class MyCalendar:\n    def __init__(self):\n        self.maps = []\n    def book(self, start: int, end: int) -> bool:\n        bisect.insort_left(self.maps, [start, 1])\n        bisect.insort_left(self.maps, [end, -1])\n        count = 0\n        for i, val in self.maps:\n            count += val\n            if count > 1:",
        "detail": "mid-range.729",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.73",
        "description": "mid-range.73",
        "peekOfCode": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: void Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        col0 = 1\n        for row in range(len(matrix)):\n            if matrix[row][0] == 0:\n                col0 = 0",
        "detail": "mid-range.73",
        "documentation": {}
    },
    {
        "label": "MyCalendarTwo",
        "kind": 6,
        "importPath": "mid-range.731",
        "description": "mid-range.731",
        "peekOfCode": "class MyCalendarTwo:\n    def __init__(self):\n        self.maps = []\n    def book(self, start: int, end: int) -> bool:\n        bisect.insort_left(self.maps, [start, 1])\n        bisect.insort_left(self.maps, [end, -1])\n        count = 0\n        for i, val in self.maps:\n            count += val\n            if count > 2:",
        "detail": "mid-range.731",
        "documentation": {}
    },
    {
        "label": "MyCalendarThree",
        "kind": 6,
        "importPath": "mid-range.732",
        "description": "mid-range.732",
        "peekOfCode": "class MyCalendarThree:\n    def __init__(self):\n        self.maps = []\n    def book(self, start: int, end: int) -> int:\n        bisect.insort_left(self.maps, (start, 1))\n        bisect.insort_left(self.maps, (end, -1))\n        result, count = 0, 0\n        for i, v in self.maps:\n            count += v\n            result = max(result, count)",
        "detail": "mid-range.732",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.733",
        "description": "mid-range.733",
        "peekOfCode": "class Solution:\n    def floodFill(\n        self, image: List[List[int]], sr: int, sc: int, newColor: int\n    ) -> List[List[int]]:\n        def dfs(i, j, val):\n            if (\n                i < 0\n                or i >= len(image)\n                or j < 0\n                or j >= len(image[0])",
        "detail": "mid-range.733",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.735",
        "description": "mid-range.735",
        "peekOfCode": "class Solution:\n    def asteroidCollision(self, asteroids: List[int]) -> List[int]:\n        result = []\n        for asteroid in asteroids:\n            if not result or asteroid > 0:\n                result.append(asteroid)\n            else:\n                while result and result[-1] > 0:\n                    if result[-1] > -asteroid:\n                        break",
        "detail": "mid-range.735",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.74",
        "description": "mid-range.74",
        "peekOfCode": "class Solution:\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        if len(matrix) == 0 or len(matrix[0]) == 0:\n            return False\n        m, n = len(matrix), len(matrix[0])",
        "detail": "mid-range.74",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.741",
        "description": "mid-range.741",
        "peekOfCode": "class Solution:\n    def cherryPickup(self, grid: List[List[int]]) -> int:\n        if grid[-1][-1] == -1:\n            return 0\n        N = len(grid)\n        memo = {}\n        def search(x1, y1, x2, y2):\n            if (x1, y1, x2, y2) in memo:\n                return memo[(x1, y1, x2, y2)]\n            if x1 == N or y1 == N or x2 == N or y2 == N:",
        "detail": "mid-range.741",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.743",
        "description": "mid-range.743",
        "peekOfCode": "class Solution:\n    def networkDelayTime(self, times: List[List[int]], N: int, K: int) -> int:\n        time = [0] + [float(\"inf\")] * N\n        nodes = defaultdict(list)\n        for item in times:\n            nodes[item[0]].append((item[1], item[2]))\n        queue = deque([(K, 0)])\n        while queue:\n            node, t = queue.popleft()\n            if t < time[node]:",
        "detail": "mid-range.743",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.746",
        "description": "mid-range.746",
        "peekOfCode": "class Solution:\n    def minCostClimbingStairs(self, cost):\n        \"\"\"\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        if not cost or len(cost) <= 2:\n            return 0\n        result = [0] * (len(cost) + 1)\n        for i in range(2, len(cost) + 1):",
        "detail": "mid-range.746",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.75",
        "description": "mid-range.75",
        "peekOfCode": "class Solution:\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n        i, j = 0, 0\n        for k in range(len(nums)):\n            v = nums[k]\n            nums[k] = 2",
        "detail": "mid-range.75",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.750",
        "description": "mid-range.750",
        "peekOfCode": "class Solution:\n    def countCornerRectangles(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        result = 0\n        if not grid or not grid[0]:\n            return result\n        m, n = len(grid), len(grid[0])",
        "detail": "mid-range.750",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.755",
        "description": "mid-range.755",
        "peekOfCode": "class Solution:\n    def pourWater(self, heights: List[int], V: int, K: int) -> List[int]:\n        for _ in range(V):\n            index = K\n            # move left\n            for i in range(K - 1, -1, -1):\n                if heights[i + 1] > heights[i]:\n                    index = i\n                elif heights[i + 1] < heights[i]:\n                    break",
        "detail": "mid-range.755",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.76",
        "description": "mid-range.76",
        "peekOfCode": "class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        d = Counter(t)\n        start, end = 0, 0\n        result = \"\"\n        count = len(d)\n        while end < len(s):\n            c = s[end]\n            if c in d:\n                d[c] -= 1",
        "detail": "mid-range.76",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.762",
        "description": "mid-range.762",
        "peekOfCode": "class Solution:\n    def countPrimeSetBits(self, L, R):\n        \"\"\"\n        :type L: int\n        :type R: int\n        :rtype: int\n        \"\"\"\n        return sum(\n            map(\n                lambda x: bin(x).count(\"1\") in [2, 3, 5, 7, 11, 13, 17, 19],",
        "detail": "mid-range.762",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.763",
        "description": "mid-range.763",
        "peekOfCode": "class Solution:\n    def partitionLabels(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: List[int]\n        \"\"\"\n        last_index = {c: i for i, c in enumerate(S)}\n        left = right = 0\n        result = []\n        for i in range(0, len(S)):",
        "detail": "mid-range.763",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.763",
        "description": "mid-range.763",
        "peekOfCode": "class Solution:\n    def partitionLabels(self, S: str) -> List[int]:\n        d = set()\n        start, end = 0, 0\n        result = []\n        while end < len(S):\n            if (\n                S[end] not in d\n                and S[end] not in S[end + 1 :]\n                and all(c not in S[end + 1 :] for c in d)",
        "detail": "mid-range.763",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.766",
        "description": "mid-range.766",
        "peekOfCode": "class Solution:\n    def lcaDeepestLeaves(self, root: TreeNode) -> TreeNode:\n        def dfs(node):\n            if not node:\n                return 0, None\n            h1, lca1 = dfs(node.left)\n            h2, lca2 = dfs(node.right)\n            if h1 > h2:\n                return h1 + 1, lca1\n            if h2 > h1:",
        "detail": "mid-range.766",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.767",
        "description": "mid-range.767",
        "peekOfCode": "class Solution:\n    def reorganizeString(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        result = \"\"\n        c = Counter(S)\n        l = []\n        for k, v in c.items():",
        "detail": "mid-range.767",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.77",
        "description": "mid-range.77",
        "peekOfCode": "class Solution:\n    def combine(self, n: int, k: int) -> List[List[int]]:\n        result = []\n        self.dfs(list(range(1, n + 1)), k, [], result)\n        return result\n    def dfs(self, arr, k, path, result):\n        if k < 0:\n            return\n        if k == 0:\n            result.append(path)",
        "detail": "mid-range.77",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.771",
        "description": "mid-range.771",
        "peekOfCode": "class Solution:\n    # def numJewelsInStones(self, J, S):\n    #     \"\"\"\n    #     :type J: str\n    #     :type S: str\n    #     :rtype: int\n    #     \"\"\"\n    #     S = collections.Counter(S)\n    #     J = collections.Counter(J)\n    #     result = 0",
        "detail": "mid-range.771",
        "documentation": {}
    },
    {
        "label": "slidingPuzzle",
        "kind": 2,
        "importPath": "mid-range.773",
        "description": "mid-range.773",
        "peekOfCode": "def slidingPuzzle(self, board: List[List[int]]) -> int:\n    target = \"123450\"\n    board = \"\".join(str(board[i][j]) for i in range(2) for j in range(3))\n    directions = [[1, 3], [0, 2, 4], [1, 5], [0, 4], [1, 3, 5], [2, 4]]\n    visited = {board}\n    queue = deque([(board, 0)])\n    while queue:\n        curr, move = queue.popleft()\n        if curr == target:\n            return move",
        "detail": "mid-range.773",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.777",
        "description": "mid-range.777",
        "peekOfCode": "class Solution:\n    def canTransform(self, start: str, end: str) -> bool:\n        if len(start) != len(end):\n            return False\n        s = [(c, i) for i, c in enumerate(start) if c == \"L\" or c == \"R\"]\n        e = [(c, j) for j, c in enumerate(end) if c == \"L\" or c == \"R\"]\n        if len(s) != len(e):\n            return False\n        for (sc, i), (ec, j) in zip(s, e):\n            if sc != ec:",
        "detail": "mid-range.777",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.78",
        "description": "mid-range.78",
        "peekOfCode": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        result = [[]]\n        for num in nums:\n            for j in range(len(result)):\n                result.append(result[j] + [num])",
        "detail": "mid-range.78",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.785",
        "description": "mid-range.785",
        "peekOfCode": "class Solution:\n    def isBipartite(self, graph: List[List[int]]) -> bool:\n        colors = [0 for _ in range(len(graph))]\n        for i in range(len(graph)):\n            if colors[i] == 0 and not self.dfs(i, colors, 1, graph):\n                return False\n        return True\n    def dfs(self, node, colors, color, graph):\n        if colors[node] != 0:\n            return colors[node] == color",
        "detail": "mid-range.785",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.787",
        "description": "mid-range.787",
        "peekOfCode": "class Solution:\n    def findCheapestPrice(\n        self, n: int, flights: List[List[int]], src: int, dst: int, K: int\n    ) -> int:\n        if not flights:\n            return -1\n        costs = [float(\"inf\")] * n\n        cities = defaultdict(list)\n        for flight in flights:\n            cities[flight[0]].append((flight[1], flight[2]))",
        "detail": "mid-range.787",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.79",
        "description": "mid-range.79",
        "peekOfCode": "class Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if self.dfs(board, i, j, set(), word, 0):\n                    return True\n        return False\n    def dfs(self, board, x, y, visited, word, idx):\n        if idx == len(word):\n            return True",
        "detail": "mid-range.79",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.796",
        "description": "mid-range.796",
        "peekOfCode": "class Solution:\n    def rotateString(self, A: str, B: str) -> bool:\n        return len(A) == len(B) and B in A + A",
        "detail": "mid-range.796",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.7MinOfThreeNumbers",
        "description": "mid-range.7MinOfThreeNumbers",
        "peekOfCode": "a = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\nc = int(input(\"Enter the thrid number: \"))\nresult = min(a, b, c)\nprint(\"Enter minimum of three numbers entered is {}\".format(result))",
        "detail": "mid-range.7MinOfThreeNumbers",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.7MinOfThreeNumbers",
        "description": "mid-range.7MinOfThreeNumbers",
        "peekOfCode": "b = int(input(\"Enter the second number: \"))\nc = int(input(\"Enter the thrid number: \"))\nresult = min(a, b, c)\nprint(\"Enter minimum of three numbers entered is {}\".format(result))",
        "detail": "mid-range.7MinOfThreeNumbers",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.7MinOfThreeNumbers",
        "description": "mid-range.7MinOfThreeNumbers",
        "peekOfCode": "c = int(input(\"Enter the thrid number: \"))\nresult = min(a, b, c)\nprint(\"Enter minimum of three numbers entered is {}\".format(result))",
        "detail": "mid-range.7MinOfThreeNumbers",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "mid-range.7MinOfThreeNumbers",
        "description": "mid-range.7MinOfThreeNumbers",
        "peekOfCode": "result = min(a, b, c)\nprint(\"Enter minimum of three numbers entered is {}\".format(result))",
        "detail": "mid-range.7MinOfThreeNumbers",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.8",
        "description": "mid-range.8",
        "peekOfCode": "class Solution(object):\n    def myAtoi(self, str):\n        \"\"\"\n        :type str: str\n        :rtype: int\n        \"\"\"\n        MAX, MIN = 2147483647, -2147483648\n        if str == \"\":\n            return 0\n        str = str.strip()  # remove white space",
        "detail": "mid-range.8",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.80",
        "description": "mid-range.80",
        "peekOfCode": "class Solution:\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 1",
        "detail": "mid-range.80",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.81",
        "description": "mid-range.81",
        "peekOfCode": "class Solution:\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        if not nums:\n            return False\n        l, r = 0, len(nums) - 1",
        "detail": "mid-range.81",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.811",
        "description": "mid-range.811",
        "peekOfCode": "class Solution:\n    def subdomainVisits(self, cpdomains: List[str]) -> List[str]:\n        d = {}\n        for cpdomain in cpdomains:\n            count, domain = int(cpdomain.split()[0]), cpdomain.split()[1]\n            domains = domain.split(\".\")\n            for i in range(len(domains)):\n                subdomain = \".\".join(domains[i:])\n                d[subdomain] = d.get(subdomain, 0) + count\n        return [str(v) + \" \" + k for k, v in d.items()]",
        "detail": "mid-range.811",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.815",
        "description": "mid-range.815",
        "peekOfCode": "class Solution:\n    def numBusesToDestination(self, routes: List[List[int]], S: int, T: int) -> int:\n        # get the stop-route relations\n        stop_route = defaultdict(set)\n        for i, route in enumerate(routes):\n            for j in route:\n                stop_route[j].add(i)\n        queue = deque([(S, 0)])\n        visited = {S}\n        while queue:",
        "detail": "mid-range.815",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.819",
        "description": "mid-range.819",
        "peekOfCode": "class Solution:\n    def mostCommonWord(self, paragraph: str, banned: List[str]) -> str:\n        banned = set(banned)\n        words = re.findall(r\"\\w+\", paragraph.lower())\n        return Counter(w for w in words if w not in banned).most_common(1)[0][0]",
        "detail": "mid-range.819",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.82",
        "description": "mid-range.82",
        "peekOfCode": "class Solution:\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        dummy = prev = ListNode(0)\n        dummy.next = head\n        while head and head.next:\n            if head.val == head.next.val:",
        "detail": "mid-range.82",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.824",
        "description": "mid-range.824",
        "peekOfCode": "class Solution:\n    def toGoatLatin(self, S: str) -> str:\n        result = []\n        S = S.split()\n        for i in range(len(S)):\n            suffix = \"\".join([\"a\"] * (i + 1))\n            if S[i][0].lower() in {\"a\", \"e\", \"i\", \"o\", \"u\"}:\n                result.append(S[i] + \"ma\" + suffix)\n            else:\n                result.append(S[i][1:] + S[i][0] + \"ma\" + suffix)",
        "detail": "mid-range.824",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.825",
        "description": "mid-range.825",
        "peekOfCode": "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        result = 0\n        ages.sort()\n        for age in ages:\n            idx1 = bisect.bisect(ages, age)\n            idx2 = bisect.bisect(ages, age * 0.5 + 7)\n            result += max(0, idx1 - idx2 - 1)\n        return result",
        "detail": "mid-range.825",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.829",
        "description": "mid-range.829",
        "peekOfCode": "class Solution:\n    ### (x + (m-1) + x)*m/2 = N\n    ### xm + (m^2 - m)2 = N\n    ### xm = N + m/2 - m^2/2\n    def consecutiveNumbersSum(self, N: \"int\") -> \"int\":\n        m = 1\n        ret = 0\n        while True:\n            xm = N + m / 2 - (m * m) / 2\n            if xm <= 0:",
        "detail": "mid-range.829",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.83",
        "description": "mid-range.83",
        "peekOfCode": "class Solution:\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        dummy = prev = ListNode(0)\n        dummy.next = head\n        while head and head.next:\n            if head.val == head.next.val:",
        "detail": "mid-range.83",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.835",
        "description": "mid-range.835",
        "peekOfCode": "class Solution:\n    def largestOverlap(self, A: List[List[int]], B: List[List[int]]) -> int:\n        A = [(x, y) for x in range(len(A)) for y in range(len(A[0])) if A[x][y]]\n        B = [(x, y) for x in range(len(B)) for y in range(len(B[0])) if B[x][y]]\n        count = collections.Counter(\n            (ax - bx, ay - by) for (ax, ay) in A for (bx, by) in B\n        )\n        return max(count.values() or [0])",
        "detail": "mid-range.835",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.84",
        "description": "mid-range.84",
        "peekOfCode": "class Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        heights += [0]\n        stack = [-1]\n        result = 0\n        for i in range(len(heights)):\n            while heights[i] < heights[stack[-1]]:\n                h = heights[stack.pop()]\n                result = max(result, h * (i - stack[-1] - 1))\n            stack.append(i)",
        "detail": "mid-range.84",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.843",
        "description": "mid-range.843",
        "peekOfCode": "class Solution:\n    def findSecretWord(self, wordlist, master):\n        \"\"\"\n        :type wordlist: List[Str]\n        :type master: Master\n        :rtype: None\n        \"\"\"\n        def compPair(x, y):\n            return sum(c1 == c2 for c1, c2 in zip(x, y))\n        def mostOverlapWord():",
        "detail": "mid-range.843",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.846",
        "description": "mid-range.846",
        "peekOfCode": "class Solution:\n    def isNStraightHand(self, hand: List[int], W: int) -> bool:\n        counter = Counter(hand)\n        for num in sorted(counter):\n            if counter[num] > 0:\n                for diff in range(W)[::-1]:\n                    counter[num + diff] -= counter[num]\n                    if counter[num + diff] < 0:\n                        return False\n        return True",
        "detail": "mid-range.846",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.847",
        "description": "mid-range.847",
        "peekOfCode": "class Solution:\n    def shortestPathLength(self, graph: List[List[int]]) -> int:\n        N = len(graph)\n        visited = set()\n        end = (1 << N) - 1\n        queue = deque([(node, 1 << node, 0) for node in range(N)])\n        while queue:\n            node, state, path = queue.popleft()\n            if state == end:\n                return path",
        "detail": "mid-range.847",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.85",
        "description": "mid-range.85",
        "peekOfCode": "class Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        if not matrix or len(matrix[0]) == 0:\n            return 0\n        result, n = 0, len(matrix[0])\n        heights = [0] * (n + 1)\n        for row in matrix:\n            for i in range(n):\n                heights[i] = heights[i] + 1 if row[i] == \"1\" else 0\n            stack = [-1]",
        "detail": "mid-range.85",
        "documentation": {}
    },
    {
        "label": "ExamRoom",
        "kind": 6,
        "importPath": "mid-range.855",
        "description": "mid-range.855",
        "peekOfCode": "class ExamRoom:\n    def __init__(self, N: int):\n        self.N = N\n        self.seats = []\n    def seat(self) -> int:\n        if not self.seats:\n            target = 0\n        else:\n            d, target = self.seats[0], 0\n            for x, y in zip(self.seats, self.seats[1:]):",
        "detail": "mid-range.855",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.86",
        "description": "mid-range.86",
        "peekOfCode": "class Solution:\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        dummy1 = prev = ListNode(0)\n        dummy2 = after = ListNode(0)\n        while head:",
        "detail": "mid-range.86",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.87",
        "description": "mid-range.87",
        "peekOfCode": "class Solution:\n    def __init__(self):\n        self.memo = {}\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        if (s1, s2) in self.memo:",
        "detail": "mid-range.87",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.876",
        "description": "mid-range.876",
        "peekOfCode": "class Solution:\n    def middleNode(self, head: ListNode) -> ListNode:\n        slow = fast = head\n        while fast and fast.next:\n            fast = fast.next.next\n            slow = slow.next\n        return slow",
        "detail": "mid-range.876",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.88",
        "description": "mid-range.88",
        "peekOfCode": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: void Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        while m > 0 and n > 0:",
        "detail": "mid-range.88",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.887",
        "description": "mid-range.887",
        "peekOfCode": "class Solution:\n    def superEggDrop(self, K: int, N: int) -> int:\n        dp = [[0 for _ in range(K + 1)] for _ in range(N + 1)]\n        for i in range(1, N + 1):\n            for k in range(1, K + 1):\n                dp[i][k] = dp[i - 1][k - 1] + dp[i - 1][k] + 1\n            if dp[i][k] >= N:\n                return i\n        return -1",
        "detail": "mid-range.887",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.890",
        "description": "mid-range.890",
        "peekOfCode": "class Solution:\n    def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:\n        result = []\n        for word in words:\n            if len(set(zip(word, pattern))) == len(set(word)) == len(\n                set(pattern)\n            ) and len(word) == len(pattern):\n                result.append(word)\n        return result",
        "detail": "mid-range.890",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.891",
        "description": "mid-range.891",
        "peekOfCode": "class Solution:\n    def superEggDrop(self, K, N):\n        \"\"\"\n        :type K: int\n        :type N: int\n        :rtype: int\n        \"\"\"\n        dp = [[0] * (K + 1) for _ in range(N + 1)]\n        for i in range(1, N + 1):\n            for j in range(1, K + 1):",
        "detail": "mid-range.891",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.896",
        "description": "mid-range.896",
        "peekOfCode": "class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        increase, decrease = False, False\n        for i in range(len(A) - 1):\n            if A[i] < A[i + 1]:\n                increase = True\n            if A[i] > A[i + 1]:\n                decrease = True\n        return True if not (increase & decrease) else False",
        "detail": "mid-range.896",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.8MaxOfFourNumbers",
        "description": "mid-range.8MaxOfFourNumbers",
        "peekOfCode": "a = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\nc = int(input(\"Enter the third number: \"))\nd = int(input(\"Enter the Fourth Number\"))\nresult = max(a, b, c, d)\nprint(\"Max of the numbers entered is {}\".format(result))",
        "detail": "mid-range.8MaxOfFourNumbers",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.8MaxOfFourNumbers",
        "description": "mid-range.8MaxOfFourNumbers",
        "peekOfCode": "b = int(input(\"Enter the second number: \"))\nc = int(input(\"Enter the third number: \"))\nd = int(input(\"Enter the Fourth Number\"))\nresult = max(a, b, c, d)\nprint(\"Max of the numbers entered is {}\".format(result))",
        "detail": "mid-range.8MaxOfFourNumbers",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.8MaxOfFourNumbers",
        "description": "mid-range.8MaxOfFourNumbers",
        "peekOfCode": "c = int(input(\"Enter the third number: \"))\nd = int(input(\"Enter the Fourth Number\"))\nresult = max(a, b, c, d)\nprint(\"Max of the numbers entered is {}\".format(result))",
        "detail": "mid-range.8MaxOfFourNumbers",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.8MaxOfFourNumbers",
        "description": "mid-range.8MaxOfFourNumbers",
        "peekOfCode": "d = int(input(\"Enter the Fourth Number\"))\nresult = max(a, b, c, d)\nprint(\"Max of the numbers entered is {}\".format(result))",
        "detail": "mid-range.8MaxOfFourNumbers",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "mid-range.8MaxOfFourNumbers",
        "description": "mid-range.8MaxOfFourNumbers",
        "peekOfCode": "result = max(a, b, c, d)\nprint(\"Max of the numbers entered is {}\".format(result))",
        "detail": "mid-range.8MaxOfFourNumbers",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.9",
        "description": "mid-range.9",
        "peekOfCode": "class Solution:\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        # O(log_n)\n        if x < 0 or (x != 0 and x % 10 == 0):\n            return False\n        rev = 0",
        "detail": "mid-range.9",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.90",
        "description": "mid-range.90",
        "peekOfCode": "class Solution:\n    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:\n        result = []\n        self.backtrack(sorted(nums), [], result)\n        return result\n    def backtrack(self, nums, path, result):\n        result.append(path)\n        if not nums:\n            return\n        for i in range(len(nums)):",
        "detail": "mid-range.90",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.904",
        "description": "mid-range.904",
        "peekOfCode": "class Solution:\n    def totalFruit(self, tree: List[int]) -> int:\n        count = 0\n        start, d, result = 0, {}, 0\n        for i, t in enumerate(tree):\n            d[t] = d.get(t, 0) + 1\n            if d[t] == 1:\n                count += 1\n            while count > 2:\n                x = tree[start]",
        "detail": "mid-range.904",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.905",
        "description": "mid-range.905",
        "peekOfCode": "class Solution:\n    def sortArrayByParity(self, A: List[int]) -> List[int]:\n        start, end = 0, len(A) - 1\n        while start < end:\n            if A[start] % 2 == 0:\n                start += 1\n            else:\n                if A[end] % 2 == 1:\n                    end -= 1\n                else:",
        "detail": "mid-range.905",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.91",
        "description": "mid-range.91",
        "peekOfCode": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        n = len(s)\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(n):\n            if s[i] > \"0\":\n                dp[i + 1] += dp[i]\n            if i > 0 and \"10\" <= s[i - 1 : i + 1] <= \"26\":\n                dp[i + 1] += dp[i - 1]",
        "detail": "mid-range.91",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.92",
        "description": "mid-range.92",
        "peekOfCode": "class Solution:\n    def reverseBetween(self, head, m, n):\n        \"\"\"\n        :type head: ListNode\n        :type m: int\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        if not head:\n            return None",
        "detail": "mid-range.92",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.924",
        "description": "mid-range.924",
        "peekOfCode": "class Solution:\n    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:\n        def find(node):\n            while node != roots[node]:\n                roots[node] = roots[roots[node]]\n                node = roots[roots[node]]\n            return node\n        def union(x, y):\n            roots[find(x)] = find(y)\n        n = len(graph)",
        "detail": "mid-range.924",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.926",
        "description": "mid-range.926",
        "peekOfCode": "class Solution(object):\n    def minFlipsMonoIncr(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: int\n        \"\"\"\n        ones = [0]\n        for char in S:\n            ones.append(ones[-1] + int(char))\n        # print ones",
        "detail": "mid-range.926",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.929",
        "description": "mid-range.929",
        "peekOfCode": "class Solution:\n    def numUniqueEmails(self, emails: List[str]) -> int:\n        result = set()\n        for email in emails:\n            local, domain = email.split(\"@\")\n            local = local.split(\"+\")[0].replace(\".\", \"\")\n            result.add(local + \"@\" + domain)\n        return len(result)",
        "detail": "mid-range.929",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.93",
        "description": "mid-range.93",
        "peekOfCode": "class Solution:\n    def restoreIpAddresses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        self.dfs(res, s, 0, \"\", 0)\n        return res\n    def dfs(self, res, s, secNum, sec, idx):",
        "detail": "mid-range.93",
        "documentation": {}
    },
    {
        "label": "RecentCounter",
        "kind": 6,
        "importPath": "mid-range.933",
        "description": "mid-range.933",
        "peekOfCode": "class RecentCounter:\n    def __init__(self):\n        self.counter = deque()\n    def ping(self, t: int) -> int:\n        self.counter.append(t)\n        while self.counter[0] < t - 3000:\n            self.counter.popleft()\n        return len(self.counter)\n# Your RecentCounter object will be instantiated and called as such:\n# obj = RecentCounter()",
        "detail": "mid-range.933",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.937",
        "description": "mid-range.937",
        "peekOfCode": "class Solution:\n    def reorderLogFiles(self, logs: List[str]) -> List[str]:\n        digit_log, letter_log = [], []\n        for log in logs:\n            if log.split()[1].isdigit():\n                digit_log.append(log)\n            else:\n                letter_log.append(log)\n        return (\n            sorted(letter_log, key=lambda x: (x.split()[1:], x.split()[0])) + digit_log",
        "detail": "mid-range.937",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.938",
        "description": "mid-range.938",
        "peekOfCode": "class Solution:\n    def rangeSumBST(self, root: TreeNode, L: int, R: int) -> int:\n        if not root:\n            return 0\n        if root.val > R:\n            return self.rangeSumBST(root.left, L, R)\n        elif root.val < L:\n            return self.rangeSumBST(root.right, L, R)\n        else:\n            return (",
        "detail": "mid-range.938",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.94",
        "description": "mid-range.94",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]",
        "detail": "mid-range.94",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.94",
        "description": "mid-range.94",
        "peekOfCode": "class Solution:\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        if not root:\n            return []\n        return (\n            self.inorderTraversal(root.left)",
        "detail": "mid-range.94",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.94",
        "description": "mid-range.94",
        "peekOfCode": "class Solution:\n    def inorderTraversal(self, root: TreeNode) -> List[int]:\n        stack, curr = [], root\n        result = []\n        while stack or curr:\n            while curr:\n                stack.append(curr)\n                curr = curr.left\n            top = stack.pop()\n            result.append(top.val)",
        "detail": "mid-range.94",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.940",
        "description": "mid-range.940",
        "peekOfCode": "class Solution:\n    def distinctSubseqII(self, S: str) -> int:\n        s = [0] * 26\n        for c in S:\n            s[ord(c) - ord(\"a\")] = sum(s) + 1\n        return sum(s) % (10 ** 9 + 7)",
        "detail": "mid-range.940",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.941",
        "description": "mid-range.941",
        "peekOfCode": "class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        if len(A) <= 2 or A[0] > A[1]:\n            return False\n        decrease = False\n        for i in range(2, len(A)):\n            if A[i - 1] > A[i]:\n                decrease = True\n            elif A[i - 1] == A[i] or decrease:\n                return False",
        "detail": "mid-range.941",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.946",
        "description": "mid-range.946",
        "peekOfCode": "class Solution:\n    def validateStackSequences(self, pushed: List[int], popped: List[int]) -> bool:\n        stack = []\n        j = 0\n        for v in pushed:\n            stack.append(v)\n            while stack and j < len(popped) and stack[-1] == popped[j]:\n                stack.pop()\n                j += 1\n        return not stack",
        "detail": "mid-range.946",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.947",
        "description": "mid-range.947",
        "peekOfCode": "class Solution:\n    def removeStones(self, stones: List[List[int]]) -> int:\n        UF = {}\n        def find(x):\n            if x != UF[x]:\n                UF[x] = find(UF[x])\n            return UF[x]\n        def union(x, y):\n            UF.setdefault(x, x)\n            UF.setdefault(y, y)",
        "detail": "mid-range.947",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.949",
        "description": "mid-range.949",
        "peekOfCode": "class Solution:\n    def largestTimeFromDigits(self, A: List[int]) -> str:\n        for time in itertools.permutations(sorted(A, reverse=True)):\n            if time[:2] < (2, 4) and time[2] < 6:\n                return \"%d%d:%d%d\" % time\n        return \"\"",
        "detail": "mid-range.949",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.95",
        "description": "mid-range.95",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\nclass Solution:\n    def generateTrees(self, n: int) -> List[TreeNode]:\n        if n == 0:\n            return []\n        self.trees = {}",
        "detail": "mid-range.95",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.95",
        "description": "mid-range.95",
        "peekOfCode": "class Solution:\n    def generateTrees(self, n: int) -> List[TreeNode]:\n        if n == 0:\n            return []\n        self.trees = {}\n        return self.constructTree(1, n)\n    def constructTree(self, start, end):\n        if (start, end) in self.trees:\n            return self.trees[(start, end)]\n        if start > end:",
        "detail": "mid-range.95",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.953",
        "description": "mid-range.953",
        "peekOfCode": "class Solution:\n    def isAlienSorted(self, words: List[str], order: str) -> bool:\n        d = {c: i for i, c in enumerate(order)}\n        new_words = [[d[c] for c in word] for word in words]\n        return all(x <= y for x, y in zip(new_words, new_words[1:]))",
        "detail": "mid-range.953",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.958",
        "description": "mid-range.958",
        "peekOfCode": "class Solution:\n    def isCompleteTree(self, root: TreeNode) -> bool:\n        queue = deque([root])\n        while queue:\n            curr = queue.popleft()\n            if not curr:\n                if queue and queue[0]:\n                    return False\n                else:\n                    continue",
        "detail": "mid-range.958",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.96",
        "description": "mid-range.96",
        "peekOfCode": "class Solution:\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # DP[n]: number of BST of a sequence with length n\n        dp = [0] * (n + 1)\n        dp[0] = dp[1] = 1\n        for i in range(2, n + 1):",
        "detail": "mid-range.96",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.963",
        "description": "mid-range.963",
        "peekOfCode": "class Solution:\n    def minAreaFreeRect(self, points: List[List[int]]) -> float:\n        area, pointsSet = float(\"inf\"), {(x, y) for x, y in points}\n        n = len(points)\n        for i in range(n):\n            x1, y1 = points[i]\n            for j in range(i + 1, n):\n                x2, y2 = points[j]\n                for k in range(j + 1, n):\n                    x3, y3 = points[k]",
        "detail": "mid-range.963",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.967",
        "description": "mid-range.967",
        "peekOfCode": "class Solution:\n    def numsSameConsecDiff(self, N: int, K: int) -> List[int]:\n        curr = [i for i in range(10)]\n        for i in range(N - 1):\n            curr = {\n                x * 10 + y\n                for x in curr\n                for y in [x % 10 - K, x % 10 + K]\n                if x and 0 <= y < 10\n            }",
        "detail": "mid-range.967",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.969",
        "description": "mid-range.969",
        "peekOfCode": "class Solution:\n    def pancakeSort(self, A: List[int]) -> List[int]:\n        result = []\n        for n in range(len(A), 1, -1):\n            idx = A.index(n)\n            result.extend([idx + 1, n])\n            A = A[idx::-1] + A[idx + 1 :]\n            A = A[n - 1 :: -1] + A[n:]\n        return result",
        "detail": "mid-range.969",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.973",
        "description": "mid-range.973",
        "peekOfCode": "class Solution:\n    def kClosest(self, points: List[List[int]], K: int) -> List[List[int]]:\n        return heapq.nsmallest(K, points, key=lambda x: x[0] * x[0] + x[1] * x[1])",
        "detail": "mid-range.973",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.974",
        "description": "mid-range.974",
        "peekOfCode": "class Solution:\n    def subarraysDivByK(self, A: List[int], K: int) -> int:\n        result, curr, d = 0, 0, {0: 1}\n        for num in A:\n            curr += num\n            result += d.get(curr % K, 0)\n            d[curr % K] = d.get(curr % K, 0) + 1\n        return result",
        "detail": "mid-range.974",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.977",
        "description": "mid-range.977",
        "peekOfCode": "class Solution:\n    def sortedSquares(self, A: List[int]) -> List[int]:\n        result = [None] * len(A)\n        left, right = 0, len(A) - 1\n        i = len(A) - 1\n        while left <= right:\n            if abs(A[left]) > abs(A[right]):\n                result[i] = A[left] * A[left]\n                left += 1\n            else:",
        "detail": "mid-range.977",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.977",
        "description": "mid-range.977",
        "peekOfCode": "class Solution:\n    def sortedSquares(self, A: List[int]) -> List[int]:\n        return sorted(map(lambda x: x * x, A))",
        "detail": "mid-range.977",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.98",
        "description": "mid-range.98",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n# class Solution:\n#     def isValidBST(self, root: TreeNode) -> bool:\n#         return self.isValid(root, float('-inf'), float('inf'))\n#     def isValid(self, root, lower, upper):\n#         if not root: return True",
        "detail": "mid-range.98",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.98",
        "description": "mid-range.98",
        "peekOfCode": "class Solution:\n    def isValidBST(self, root: TreeNode) -> bool:\n        stack, curr, prev = [], root, None\n        while stack or curr:\n            while curr:\n                stack.append(curr)\n                curr = curr.left\n            top = stack.pop()\n            if prev and prev.val >= top.val:\n                return False",
        "detail": "mid-range.98",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.980",
        "description": "mid-range.980",
        "peekOfCode": "class Solution:\n    def uniquePathsIII(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        x, y, empty, end = 0, 0, 1, None\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    empty += 1\n                if grid[i][j] == 1:\n                    x, y = i, j",
        "detail": "mid-range.980",
        "documentation": {}
    },
    {
        "label": "TimeMap",
        "kind": 6,
        "importPath": "mid-range.981",
        "description": "mid-range.981",
        "peekOfCode": "class TimeMap:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.values = defaultdict(list)\n        self.times = defaultdict(list)\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.values[key].append(value)\n        self.times[key].append(timestamp)",
        "detail": "mid-range.981",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.983",
        "description": "mid-range.983",
        "peekOfCode": "class Solution:\n    def mincostTickets(self, days: List[int], costs: List[int]) -> int:\n        cost = 0\n        seven_day = deque()\n        thirty_day = deque()\n        for day in days:\n            while seven_day and seven_day[0][0] + 7 <= day:\n                seven_day.popleft()\n            seven_day.append((day, cost + costs[1]))\n            while thirty_day and thirty_day[0][0] + 30 <= day:",
        "detail": "mid-range.983",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.985",
        "description": "mid-range.985",
        "peekOfCode": "class Solution(object):\n    def sumEvenAfterQueries(self, A, queries):\n        \"\"\"\n        :type A: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        result = 0\n        for val in A:\n            if val % 2 == 0:",
        "detail": "mid-range.985",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.986",
        "description": "mid-range.986",
        "peekOfCode": "class Solution:\n    def intervalIntersection(\n        self, A: List[List[int]], B: List[List[int]]\n    ) -> List[List[int]]:\n        result = []\n        i, j = 0, 0\n        while i < len(A) and j < len(B):\n            A_start, A_end = A[i]\n            B_start, B_end = B[j]\n            if A_end >= B_start and A_start <= B_end:",
        "detail": "mid-range.986",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.987",
        "description": "mid-range.987",
        "peekOfCode": "class Solution:\n    def verticalTraversal(self, root: TreeNode) -> List[List[int]]:\n        d = defaultdict(list)\n        queue = [(root, 0)]\n        while queue:\n            new_queue = []\n            temp_d = defaultdict(list)\n            for node, x in queue:\n                temp_d[x].append(node.val)\n                if node.left:",
        "detail": "mid-range.987",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.988",
        "description": "mid-range.988",
        "peekOfCode": "class Solution(object):\n    def smallestFromLeaf(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        self.result = \"~\"\n        def dfs(node, A):\n            if node:\n                A.append(chr(node.val + ord(\"a\")))",
        "detail": "mid-range.988",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.99",
        "description": "mid-range.99",
        "peekOfCode": "class Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: void Do not return anything, modify root in-place instead.\n        \"\"\"\n        first, second, prev = None, None, None\n        def inorder(root):\n            if root:\n                inorder(root.left)",
        "detail": "mid-range.99",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.991",
        "description": "mid-range.991",
        "peekOfCode": "class Solution(object):\n    def brokenCalc(self, X, Y):\n        \"\"\"\n        :type X: int\n        :type Y: int\n        :rtype: int\n        \"\"\"\n        if X == Y:\n            return 0\n        if X > Y:",
        "detail": "mid-range.991",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.994",
        "description": "mid-range.994",
        "peekOfCode": "class Solution:\n    def orangesRotting(self, grid: List[List[int]]) -> int:\n        rotten = []\n        m, n = len(grid), len(grid[0])\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 2:\n                    rotten.append((i, j))\n        step = -1\n        while rotten:",
        "detail": "mid-range.994",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.995",
        "description": "mid-range.995",
        "peekOfCode": "class Solution:\n    def minKBitFlips(self, a: \"List[int]\", k: \"int\") -> \"int\":\n        from collections import deque\n        q = deque()\n        res = 0\n        for i in range(len(a)):\n            if len(q) % 2 != 0:\n                if a[i] == 1:\n                    res += 1\n                    q.append(i + k - 1)",
        "detail": "mid-range.995",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.9MinOfFourNumbers",
        "description": "mid-range.9MinOfFourNumbers",
        "peekOfCode": "a = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\nc = int(input(\"Enter the thrid number: \"))\nd = int(input(\"Enter the Fourth number: \"))\nresult = min(a, b, c, d)\nprint(\"Enter minimum of three numbers entered is {}\".format(result))",
        "detail": "mid-range.9MinOfFourNumbers",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.9MinOfFourNumbers",
        "description": "mid-range.9MinOfFourNumbers",
        "peekOfCode": "b = int(input(\"Enter the second number: \"))\nc = int(input(\"Enter the thrid number: \"))\nd = int(input(\"Enter the Fourth number: \"))\nresult = min(a, b, c, d)\nprint(\"Enter minimum of three numbers entered is {}\".format(result))",
        "detail": "mid-range.9MinOfFourNumbers",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.9MinOfFourNumbers",
        "description": "mid-range.9MinOfFourNumbers",
        "peekOfCode": "c = int(input(\"Enter the thrid number: \"))\nd = int(input(\"Enter the Fourth number: \"))\nresult = min(a, b, c, d)\nprint(\"Enter minimum of three numbers entered is {}\".format(result))",
        "detail": "mid-range.9MinOfFourNumbers",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.9MinOfFourNumbers",
        "description": "mid-range.9MinOfFourNumbers",
        "peekOfCode": "d = int(input(\"Enter the Fourth number: \"))\nresult = min(a, b, c, d)\nprint(\"Enter minimum of three numbers entered is {}\".format(result))",
        "detail": "mid-range.9MinOfFourNumbers",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "mid-range.9MinOfFourNumbers",
        "description": "mid-range.9MinOfFourNumbers",
        "peekOfCode": "result = min(a, b, c, d)\nprint(\"Enter minimum of three numbers entered is {}\".format(result))",
        "detail": "mid-range.9MinOfFourNumbers",
        "documentation": {}
    },
    {
        "label": "aVeryBigSum",
        "kind": 2,
        "importPath": "mid-range.A-Very-Big-Sum",
        "description": "mid-range.A-Very-Big-Sum",
        "peekOfCode": "def aVeryBigSum(ar):\n    return sum(ar)\nif __name__ == \"__main__\":\n    fptr = open(os.environ[\"OUTPUT_PATH\"], \"w\")\n    ar_count = int(input())\n    ar = list(map(int, input().rstrip().split()))\n    result = aVeryBigSum(ar)\n    fptr.write(str(result) + \"\\n\")\n    fptr.close()",
        "detail": "mid-range.A-Very-Big-Sum",
        "documentation": {}
    },
    {
        "label": "fav_movie",
        "kind": 5,
        "importPath": "mid-range.A01_hello_world",
        "description": "mid-range.A01_hello_world",
        "peekOfCode": "fav_movie = input(\"What is your favorite movie? \")\nprint(f\"Your favorite movie is: {fav_movie}.\")",
        "detail": "mid-range.A01_hello_world",
        "documentation": {}
    },
    {
        "label": "var1",
        "kind": 5,
        "importPath": "mid-range.A02_numbers",
        "description": "mid-range.A02_numbers",
        "peekOfCode": "var1 = 42\nvar2 = 10.5\nvar3 = 4 + 3j\nprint(2 ** 65536)",
        "detail": "mid-range.A02_numbers",
        "documentation": {}
    },
    {
        "label": "var2",
        "kind": 5,
        "importPath": "mid-range.A02_numbers",
        "description": "mid-range.A02_numbers",
        "peekOfCode": "var2 = 10.5\nvar3 = 4 + 3j\nprint(2 ** 65536)",
        "detail": "mid-range.A02_numbers",
        "documentation": {}
    },
    {
        "label": "var3",
        "kind": 5,
        "importPath": "mid-range.A02_numbers",
        "description": "mid-range.A02_numbers",
        "peekOfCode": "var3 = 4 + 3j\nprint(2 ** 65536)",
        "detail": "mid-range.A02_numbers",
        "documentation": {}
    },
    {
        "label": "duck",
        "kind": 5,
        "importPath": "mid-range.A03_text",
        "description": "mid-range.A03_text",
        "peekOfCode": "duck = 4 + 8j\ndog = 100\ntop = \"Spin the top\"\nprint(f\"{dog} {duck}, {top}\")",
        "detail": "mid-range.A03_text",
        "documentation": {}
    },
    {
        "label": "dog",
        "kind": 5,
        "importPath": "mid-range.A03_text",
        "description": "mid-range.A03_text",
        "peekOfCode": "dog = 100\ntop = \"Spin the top\"\nprint(f\"{dog} {duck}, {top}\")",
        "detail": "mid-range.A03_text",
        "documentation": {}
    },
    {
        "label": "top",
        "kind": 5,
        "importPath": "mid-range.A03_text",
        "description": "mid-range.A03_text",
        "peekOfCode": "top = \"Spin the top\"\nprint(f\"{dog} {duck}, {top}\")",
        "detail": "mid-range.A03_text",
        "documentation": {}
    },
    {
        "label": "jumbled_nums",
        "kind": 5,
        "importPath": "mid-range.A04_ordered_array",
        "description": "mid-range.A04_ordered_array",
        "peekOfCode": "jumbled_nums = (8, 4, 2, 9, 7, 3, 6, 4)\nnums_list = list(jumbled_nums)\nnums_list.insert(0, 5)\nnums_list.remove(4)\nnums_list.sort()\nnums_list.insert(0, 1)\nnums_list = tuple(nums_list)\nprint(nums_list)",
        "detail": "mid-range.A04_ordered_array",
        "documentation": {}
    },
    {
        "label": "nums_list",
        "kind": 5,
        "importPath": "mid-range.A04_ordered_array",
        "description": "mid-range.A04_ordered_array",
        "peekOfCode": "nums_list = list(jumbled_nums)\nnums_list.insert(0, 5)\nnums_list.remove(4)\nnums_list.sort()\nnums_list.insert(0, 1)\nnums_list = tuple(nums_list)\nprint(nums_list)",
        "detail": "mid-range.A04_ordered_array",
        "documentation": {}
    },
    {
        "label": "nums_list",
        "kind": 5,
        "importPath": "mid-range.A04_ordered_array",
        "description": "mid-range.A04_ordered_array",
        "peekOfCode": "nums_list = tuple(nums_list)\nprint(nums_list)",
        "detail": "mid-range.A04_ordered_array",
        "documentation": {}
    },
    {
        "label": "set_a",
        "kind": 5,
        "importPath": "mid-range.A05_membership_array",
        "description": "mid-range.A05_membership_array",
        "peekOfCode": "set_a = {1, 2, 3, 4, 5}\nset_b = {4, 5, 6, 7, 8}\n# Answer\nprint(set_a.intersection(set_b))\nprint(set_a.symmetric_difference(set_b))\nprint(set_a.union(set_b))",
        "detail": "mid-range.A05_membership_array",
        "documentation": {}
    },
    {
        "label": "set_b",
        "kind": 5,
        "importPath": "mid-range.A05_membership_array",
        "description": "mid-range.A05_membership_array",
        "peekOfCode": "set_b = {4, 5, 6, 7, 8}\n# Answer\nprint(set_a.intersection(set_b))\nprint(set_a.symmetric_difference(set_b))\nprint(set_a.union(set_b))",
        "detail": "mid-range.A05_membership_array",
        "documentation": {}
    },
    {
        "label": "col",
        "kind": 5,
        "importPath": "mid-range.A06_associative_array",
        "description": "mid-range.A06_associative_array",
        "peekOfCode": "col = {\"key1\": [1, 2, 3], \"key2\": [4, 5, 6], \"key3\": [7, 8, 9]}\nprint(col)",
        "detail": "mid-range.A06_associative_array",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.A07_control_flow",
        "description": "mid-range.A07_control_flow",
        "peekOfCode": "a = 1\nif not a:\n    print(\"a\")\nelif a == 1:\n    print(\"a is 1\")\nelse:\n    print(\"not a\")",
        "detail": "mid-range.A07_control_flow",
        "documentation": {}
    },
    {
        "label": "is_even",
        "kind": 2,
        "importPath": "mid-range.A08_callable_objects",
        "description": "mid-range.A08_callable_objects",
        "peekOfCode": "def is_even(num: int) -> bool:\n    return num % 2 == 0\ndef test_is_even() -> None:\n    for i in range(7):\n        print(is_even(i))\ntest_is_even()",
        "detail": "mid-range.A08_callable_objects",
        "documentation": {}
    },
    {
        "label": "test_is_even",
        "kind": 2,
        "importPath": "mid-range.A08_callable_objects",
        "description": "mid-range.A08_callable_objects",
        "peekOfCode": "def test_is_even() -> None:\n    for i in range(7):\n        print(is_even(i))\ntest_is_even()",
        "detail": "mid-range.A08_callable_objects",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.A09_modules",
        "description": "mid-range.A09_modules",
        "peekOfCode": "arr = (\"Apple\", \"Grapes\", \"Orange\", \"Cherry\", \"Pear\")\ndistribution_timer(random_value, arr)\ndistribution_timer(choice, arr)",
        "detail": "mid-range.A09_modules",
        "documentation": {}
    },
    {
        "label": "Fork",
        "kind": 6,
        "importPath": "mid-range.A10_class_objects",
        "description": "mid-range.A10_class_objects",
        "peekOfCode": "class Fork:\n    c_var = 42\n    def __init__(self):\n        self.i_var = \"forty two\"\n    def __str__(self):\n        return f\"{self.i_var}, {self.c_var}\"\n    def __call__(self):\n        return self.c_var\n    def some_method(self):\n        return True",
        "detail": "mid-range.A10_class_objects",
        "documentation": {}
    },
    {
        "label": "fork",
        "kind": 5,
        "importPath": "mid-range.A10_class_objects",
        "description": "mid-range.A10_class_objects",
        "peekOfCode": "fork = Fork()\nprint(fork())",
        "detail": "mid-range.A10_class_objects",
        "documentation": {}
    },
    {
        "label": "iterable",
        "kind": 5,
        "importPath": "mid-range.A13_iterators",
        "description": "mid-range.A13_iterators",
        "peekOfCode": "iterable = range(100)",
        "detail": "mid-range.A13_iterators",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 2,
        "importPath": "mid-range.a1z26",
        "description": "mid-range.a1z26",
        "peekOfCode": "def encode(plain: str) -> list[int]:\n    \"\"\"\n    >>> encode(\"myname\")\n    [13, 25, 14, 1, 13, 5]\n    \"\"\"\n    return [ord(elem) - 96 for elem in plain]\ndef decode(encoded: list[int]) -> str:\n    \"\"\"\n    >>> decode([13, 25, 14, 1, 13, 5])\n    'myname'",
        "detail": "mid-range.a1z26",
        "documentation": {}
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "mid-range.a1z26",
        "description": "mid-range.a1z26",
        "peekOfCode": "def decode(encoded: list[int]) -> str:\n    \"\"\"\n    >>> decode([13, 25, 14, 1, 13, 5])\n    'myname'\n    \"\"\"\n    return \"\".join(chr(elem + 96) for elem in encoded)\ndef main() -> None:\n    encoded = encode(input(\"-> \").strip().lower())\n    print(\"Encoded: \", encoded)\n    print(\"Decoded:\", decode(encoded))",
        "detail": "mid-range.a1z26",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.a1z26",
        "description": "mid-range.a1z26",
        "peekOfCode": "def main() -> None:\n    encoded = encode(input(\"-> \").strip().lower())\n    print(\"Encoded: \", encoded)\n    print(\"Decoded:\", decode(encoded))\nif __name__ == \"__main__\":\n    main()",
        "detail": "mid-range.a1z26",
        "documentation": {}
    },
    {
        "label": "IInd_func",
        "kind": 2,
        "importPath": "mid-range.Aakanksha",
        "description": "mid-range.Aakanksha",
        "peekOfCode": "def IInd_func():\n    count1 = 0\n    for j in range(5):\n        a = 0\n        count = 0\n        user_pwd = input(\"\")  # password you remember\n        for i in range(len(pwd)):\n            if user_pwd[i] == pwd[a]:  # comparing remembered pwd with fixed pwd\n                a += 1\n                count += 1",
        "detail": "mid-range.Aakanksha",
        "documentation": {}
    },
    {
        "label": "pwd",
        "kind": 5,
        "importPath": "mid-range.Aakanksha",
        "description": "mid-range.Aakanksha",
        "peekOfCode": "pwd = \"AKS2608\"  # any password u want to set\ndef IInd_func():\n    count1 = 0\n    for j in range(5):\n        a = 0\n        count = 0\n        user_pwd = input(\"\")  # password you remember\n        for i in range(len(pwd)):\n            if user_pwd[i] == pwd[a]:  # comparing remembered pwd with fixed pwd\n                a += 1",
        "detail": "mid-range.Aakanksha",
        "documentation": {}
    },
    {
        "label": "setup_fig01",
        "kind": 2,
        "importPath": "mid-range.aa_test_point_line_no_intr",
        "description": "mid-range.aa_test_point_line_no_intr",
        "peekOfCode": "def setup_fig01():\n    fig, ax, renderer = create_newfig(\"aa01\")\n    create_moving_point(fig, ax, renderer, 1, 1, 6, 1)\n    create_still_segment(fig, ax, renderer, (2, 4), (6, 2))\n    return fig, ax, \"aa01_test_point_line_no_intr\"\ndef setup_fig02():\n    fig, ax, renderer = create_newfig(\"aa02\")\n    create_moving_point(fig, ax, renderer, 1, 1, 1, 4)\n    create_still_segment(fig, ax, renderer, (2, 4), (6, 2), \"topright\")\n    return fig, ax, \"aa02_test_point_line_no_intr\"",
        "detail": "mid-range.aa_test_point_line_no_intr",
        "documentation": {}
    },
    {
        "label": "setup_fig02",
        "kind": 2,
        "importPath": "mid-range.aa_test_point_line_no_intr",
        "description": "mid-range.aa_test_point_line_no_intr",
        "peekOfCode": "def setup_fig02():\n    fig, ax, renderer = create_newfig(\"aa02\")\n    create_moving_point(fig, ax, renderer, 1, 1, 1, 4)\n    create_still_segment(fig, ax, renderer, (2, 4), (6, 2), \"topright\")\n    return fig, ax, \"aa02_test_point_line_no_intr\"\ndef setup_fig03():\n    fig, ax, renderer = create_newfig(\"aa03\")\n    create_moving_point(fig, ax, renderer, 4, 1, 1, 4)\n    create_still_segment(fig, ax, renderer, (2, 4), (6, 4), \"topright\")\n    return fig, ax, \"aa03_test_point_line_no_intr\"",
        "detail": "mid-range.aa_test_point_line_no_intr",
        "documentation": {}
    },
    {
        "label": "setup_fig03",
        "kind": 2,
        "importPath": "mid-range.aa_test_point_line_no_intr",
        "description": "mid-range.aa_test_point_line_no_intr",
        "peekOfCode": "def setup_fig03():\n    fig, ax, renderer = create_newfig(\"aa03\")\n    create_moving_point(fig, ax, renderer, 4, 1, 1, 4)\n    create_still_segment(fig, ax, renderer, (2, 4), (6, 4), \"topright\")\n    return fig, ax, \"aa03_test_point_line_no_intr\"\ndef setup_fig04():\n    fig, ax, renderer = create_newfig(\"aa04\")\n    create_moving_point(fig, ax, renderer, 2, 1, 6, 4)\n    create_still_segment(fig, ax, renderer, (1, 2), (5, 4), \"topleft\")\n    return fig, ax, \"aa04_test_point_line_no_intr\"",
        "detail": "mid-range.aa_test_point_line_no_intr",
        "documentation": {}
    },
    {
        "label": "setup_fig04",
        "kind": 2,
        "importPath": "mid-range.aa_test_point_line_no_intr",
        "description": "mid-range.aa_test_point_line_no_intr",
        "peekOfCode": "def setup_fig04():\n    fig, ax, renderer = create_newfig(\"aa04\")\n    create_moving_point(fig, ax, renderer, 2, 1, 6, 4)\n    create_still_segment(fig, ax, renderer, (1, 2), (5, 4), \"topleft\")\n    return fig, ax, \"aa04_test_point_line_no_intr\"\nrun_or_export(setup_fig01, setup_fig02, setup_fig03, setup_fig04)",
        "detail": "mid-range.aa_test_point_line_no_intr",
        "documentation": {}
    },
    {
        "label": "AbapStyle",
        "kind": 6,
        "importPath": "mid-range.abap",
        "description": "mid-range.abap",
        "peekOfCode": "class AbapStyle(Style):\n    default_style = \"\"\n    styles = {\n        Comment: \"italic #888\",\n        Comment.Special: \"#888\",\n        Keyword: \"#00f\",\n        Operator.Word: \"#00f\",\n        Name: \"#000\",\n        Number: \"#3af\",\n        String: \"#5a2\",",
        "detail": "mid-range.abap",
        "documentation": {}
    },
    {
        "label": "abbr",
        "kind": 2,
        "importPath": "mid-range.abbreviation",
        "description": "mid-range.abbreviation",
        "peekOfCode": "def abbr(a, b):\n    n = len(a)\n    m = len(b)\n    dp = [[False for _ in range(m + 1)] for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(n):\n        for j in range(m + 1):\n            if dp[i][j]:\n                if j < m and a[i].upper() == b[j]:\n                    dp[i + 1][j + 1] = True",
        "detail": "mid-range.abbreviation",
        "documentation": {}
    },
    {
        "label": "number1",
        "kind": 5,
        "importPath": "mid-range.abc",
        "description": "mid-range.abc",
        "peekOfCode": "number1 = input(\"First number: \")\nnumber2 = input(\"\\nSecond number: \")\n# Adding two numbers\n# User might also enter float numbers\nsum = float(number1) + float(number2)\n# Display the sum\n# will print value in float\nprint(\"The sum of {0} and {1} is {2}\".format(number1, number2, sum))",
        "detail": "mid-range.abc",
        "documentation": {}
    },
    {
        "label": "number2",
        "kind": 5,
        "importPath": "mid-range.abc",
        "description": "mid-range.abc",
        "peekOfCode": "number2 = input(\"\\nSecond number: \")\n# Adding two numbers\n# User might also enter float numbers\nsum = float(number1) + float(number2)\n# Display the sum\n# will print value in float\nprint(\"The sum of {0} and {1} is {2}\".format(number1, number2, sum))",
        "detail": "mid-range.abc",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 5,
        "importPath": "mid-range.abc",
        "description": "mid-range.abc",
        "peekOfCode": "sum = float(number1) + float(number2)\n# Display the sum\n# will print value in float\nprint(\"The sum of {0} and {1} is {2}\".format(number1, number2, sum))",
        "detail": "mid-range.abc",
        "documentation": {}
    },
    {
        "label": "PluginBase",
        "kind": 6,
        "importPath": "mid-range.abc_abc_base",
        "description": "mid-range.abc_abc_base",
        "peekOfCode": "class PluginBase(abc.ABC):\n    @abc.abstractmethod\n    def load(self, input):\n        \"\"\"Retrieve data from the input source\n        and return an object.\n        \"\"\"\n    @abc.abstractmethod\n    def save(self, output, data):\n        \"\"\"Save the data object to the output.\"\"\"\nclass SubclassImplementation(PluginBase):",
        "detail": "mid-range.abc_abc_base",
        "documentation": {}
    },
    {
        "label": "SubclassImplementation",
        "kind": 6,
        "importPath": "mid-range.abc_abc_base",
        "description": "mid-range.abc_abc_base",
        "peekOfCode": "class SubclassImplementation(PluginBase):\n    def load(self, input):\n        return input.read()\n    def save(self, output, data):\n        return output.write(data)\nif __name__ == \"__main__\":\n    print(\"Subclass:\", issubclass(SubclassImplementation, PluginBase))\n    print(\"Instance:\", isinstance(SubclassImplementation(), PluginBase))",
        "detail": "mid-range.abc_abc_base",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "mid-range.abc_abstractproperty",
        "description": "mid-range.abc_abstractproperty",
        "peekOfCode": "class Base(abc.ABC):\n    @property\n    @abc.abstractmethod\n    def value(self):\n        return \"Should never reach here\"\n    @property\n    @abc.abstractmethod\n    def constant(self):\n        return \"Should never reach here\"\nclass Implementation(Base):",
        "detail": "mid-range.abc_abstractproperty",
        "documentation": {}
    },
    {
        "label": "Implementation",
        "kind": 6,
        "importPath": "mid-range.abc_abstractproperty",
        "description": "mid-range.abc_abstractproperty",
        "peekOfCode": "class Implementation(Base):\n    @property\n    def value(self):\n        return \"concrete property\"\n    constant = \"set by a class attribute\"\ntry:\n    b = Base()\n    print(\"Base.value:\", b.value)\nexcept Exception as err:\n    print(\"ERROR:\", str(err))",
        "detail": "mid-range.abc_abstractproperty",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "mid-range.abc_abstractproperty",
        "description": "mid-range.abc_abstractproperty",
        "peekOfCode": "i = Implementation()\nprint(\"Implementation.value   :\", i.value)\nprint(\"Implementation.constant:\", i.constant)",
        "detail": "mid-range.abc_abstractproperty",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "mid-range.abc_abstractproperty_rw",
        "description": "mid-range.abc_abstractproperty_rw",
        "peekOfCode": "class Base(abc.ABC):\n    @property\n    @abc.abstractmethod\n    def value(self):\n        return \"Should never reach here\"\n    @value.setter\n    @abc.abstractmethod\n    def value(self, new_value):\n        return\nclass PartialImplementation(Base):",
        "detail": "mid-range.abc_abstractproperty_rw",
        "documentation": {}
    },
    {
        "label": "PartialImplementation",
        "kind": 6,
        "importPath": "mid-range.abc_abstractproperty_rw",
        "description": "mid-range.abc_abstractproperty_rw",
        "peekOfCode": "class PartialImplementation(Base):\n    @property\n    def value(self):\n        return \"Read-only\"\nclass Implementation(Base):\n    _value = \"Default value\"\n    @property\n    def value(self):\n        return self._value\n    @value.setter",
        "detail": "mid-range.abc_abstractproperty_rw",
        "documentation": {}
    },
    {
        "label": "Implementation",
        "kind": 6,
        "importPath": "mid-range.abc_abstractproperty_rw",
        "description": "mid-range.abc_abstractproperty_rw",
        "peekOfCode": "class Implementation(Base):\n    _value = \"Default value\"\n    @property\n    def value(self):\n        return self._value\n    @value.setter\n    def value(self, new_value):\n        self._value = new_value\ntry:\n    b = Base()",
        "detail": "mid-range.abc_abstractproperty_rw",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "mid-range.abc_abstractproperty_rw",
        "description": "mid-range.abc_abstractproperty_rw",
        "peekOfCode": "p = PartialImplementation()\nprint(\"PartialImplementation.value:\", p.value)\ntry:\n    p.value = \"Alteration\"\n    print(\"PartialImplementation.value:\", p.value)\nexcept Exception as err:\n    print(\"ERROR:\", str(err))\ni = Implementation()\nprint(\"Implementation.value:\", i.value)\ni.value = \"New value\"",
        "detail": "mid-range.abc_abstractproperty_rw",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "mid-range.abc_abstractproperty_rw",
        "description": "mid-range.abc_abstractproperty_rw",
        "peekOfCode": "i = Implementation()\nprint(\"Implementation.value:\", i.value)\ni.value = \"New value\"\nprint(\"Changed value:\", i.value)",
        "detail": "mid-range.abc_abstractproperty_rw",
        "documentation": {}
    },
    {
        "label": "i.value",
        "kind": 5,
        "importPath": "mid-range.abc_abstractproperty_rw",
        "description": "mid-range.abc_abstractproperty_rw",
        "peekOfCode": "i.value = \"New value\"\nprint(\"Changed value:\", i.value)",
        "detail": "mid-range.abc_abstractproperty_rw",
        "documentation": {}
    },
    {
        "label": "PluginBase",
        "kind": 6,
        "importPath": "mid-range.abc_base",
        "description": "mid-range.abc_base",
        "peekOfCode": "class PluginBase(metaclass=abc.ABCMeta):\n    @abc.abstractmethod\n    def load(self, input):\n        \"\"\"Retrieve data from the input source\n        and return an object.\n        \"\"\"\n    @abc.abstractmethod\n    def save(self, output, data):\n        \"\"\"Save the data object to the output.\"\"\"",
        "detail": "mid-range.abc_base",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "mid-range.abc_class_static",
        "description": "mid-range.abc_class_static",
        "peekOfCode": "class Base(abc.ABC):\n    @classmethod\n    @abc.abstractmethod\n    def factory(cls, *args):\n        return cls()\n    @staticmethod\n    @abc.abstractmethod\n    def const_behavior():\n        return \"Should never reach here\"\nclass Implementation(Base):",
        "detail": "mid-range.abc_class_static",
        "documentation": {}
    },
    {
        "label": "Implementation",
        "kind": 6,
        "importPath": "mid-range.abc_class_static",
        "description": "mid-range.abc_class_static",
        "peekOfCode": "class Implementation(Base):\n    def do_something(self):\n        pass\n    @classmethod\n    def factory(cls, *args):\n        obj = cls(*args)\n        obj.do_something()\n        return obj\n    @staticmethod\n    def const_behavior():",
        "detail": "mid-range.abc_class_static",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "mid-range.abc_class_static",
        "description": "mid-range.abc_class_static",
        "peekOfCode": "i = Implementation.factory()\nprint(\"Implementation.const_behavior :\", i.const_behavior())",
        "detail": "mid-range.abc_class_static",
        "documentation": {}
    },
    {
        "label": "ABCWithConcreteImplementation",
        "kind": 6,
        "importPath": "mid-range.abc_concrete_method",
        "description": "mid-range.abc_concrete_method",
        "peekOfCode": "class ABCWithConcreteImplementation(abc.ABC):\n    @abc.abstractmethod\n    def retrieve_values(self, input):\n        print(\"base class reading data\")\n        return input.read()\nclass ConcreteOverride(ABCWithConcreteImplementation):\n    def retrieve_values(self, input):\n        base_data = super(ConcreteOverride, self).retrieve_values(input)\n        print(\"subclass sorting data\")\n        response = sorted(base_data.splitlines())",
        "detail": "mid-range.abc_concrete_method",
        "documentation": {}
    },
    {
        "label": "ConcreteOverride",
        "kind": 6,
        "importPath": "mid-range.abc_concrete_method",
        "description": "mid-range.abc_concrete_method",
        "peekOfCode": "class ConcreteOverride(ABCWithConcreteImplementation):\n    def retrieve_values(self, input):\n        base_data = super(ConcreteOverride, self).retrieve_values(input)\n        print(\"subclass sorting data\")\n        response = sorted(base_data.splitlines())\n        return response\ninput = io.StringIO(\n    \"\"\"line one\nline two\nline three",
        "detail": "mid-range.abc_concrete_method",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 5,
        "importPath": "mid-range.abc_concrete_method",
        "description": "mid-range.abc_concrete_method",
        "peekOfCode": "input = io.StringIO(\n    \"\"\"line one\nline two\nline three\n\"\"\"\n)\nreader = ConcreteOverride()\nprint(reader.retrieve_values(input))\nprint()",
        "detail": "mid-range.abc_concrete_method",
        "documentation": {}
    },
    {
        "label": "reader",
        "kind": 5,
        "importPath": "mid-range.abc_concrete_method",
        "description": "mid-range.abc_concrete_method",
        "peekOfCode": "reader = ConcreteOverride()\nprint(reader.retrieve_values(input))\nprint()",
        "detail": "mid-range.abc_concrete_method",
        "documentation": {}
    },
    {
        "label": "IncompleteImplementation",
        "kind": 6,
        "importPath": "mid-range.abc_incomplete",
        "description": "mid-range.abc_incomplete",
        "peekOfCode": "class IncompleteImplementation(PluginBase):\n    def save(self, output, data):\n        return output.write(data)\nif __name__ == \"__main__\":\n    print(\"Subclass:\", issubclass(IncompleteImplementation, PluginBase))\n    print(\"Instance:\", isinstance(IncompleteImplementation(), PluginBase))",
        "detail": "mid-range.abc_incomplete",
        "documentation": {}
    },
    {
        "label": "LocalBaseClass",
        "kind": 6,
        "importPath": "mid-range.abc_register",
        "description": "mid-range.abc_register",
        "peekOfCode": "class LocalBaseClass:\n    pass\n@PluginBase.register\nclass RegisteredImplementation(LocalBaseClass):\n    def load(self, input):\n        return input.read()\n    def save(self, output, data):\n        return output.write(data)\nif __name__ == \"__main__\":\n    print(\"Subclass:\", issubclass(RegisteredImplementation, PluginBase))",
        "detail": "mid-range.abc_register",
        "documentation": {}
    },
    {
        "label": "RegisteredImplementation",
        "kind": 6,
        "importPath": "mid-range.abc_register",
        "description": "mid-range.abc_register",
        "peekOfCode": "class RegisteredImplementation(LocalBaseClass):\n    def load(self, input):\n        return input.read()\n    def save(self, output, data):\n        return output.write(data)\nif __name__ == \"__main__\":\n    print(\"Subclass:\", issubclass(RegisteredImplementation, PluginBase))\n    print(\"Instance:\", isinstance(RegisteredImplementation(), PluginBase))",
        "detail": "mid-range.abc_register",
        "documentation": {}
    },
    {
        "label": "SubclassImplementation",
        "kind": 6,
        "importPath": "mid-range.abc_subclass",
        "description": "mid-range.abc_subclass",
        "peekOfCode": "class SubclassImplementation(PluginBase):\n    def load(self, input):\n        return input.read()\n    def save(self, output, data):\n        return output.write(data)\nif __name__ == \"__main__\":\n    print(\"Subclass:\", issubclass(SubclassImplementation, PluginBase))\n    print(\"Instance:\", isinstance(SubclassImplementation(), PluginBase))",
        "detail": "mid-range.abc_subclass",
        "documentation": {}
    },
    {
        "label": "abs_val",
        "kind": 2,
        "importPath": "mid-range.abs",
        "description": "mid-range.abs",
        "peekOfCode": "def abs_val(num):\n    \"\"\"\n    Find the absolute value of a number.\n    >>> abs_val(-5.1)\n    5.1\n    >>> abs_val(-5) == abs_val(5)\n    True\n    >>> abs_val(0)\n    0\n    \"\"\"",
        "detail": "mid-range.abs",
        "documentation": {}
    },
    {
        "label": "test_abs_val",
        "kind": 2,
        "importPath": "mid-range.abs",
        "description": "mid-range.abs",
        "peekOfCode": "def test_abs_val():\n    \"\"\"\n    >>> test_abs_val()\n    \"\"\"\n    assert 0 == abs_val(0)\n    assert 34 == abs_val(34)\n    assert 100000000000 == abs_val(-100000000000)\nif __name__ == \"__main__\":\n    print(abs_val(-34))  # --> 34",
        "detail": "mid-range.abs",
        "documentation": {}
    },
    {
        "label": "absolute_value_sum",
        "kind": 2,
        "importPath": "mid-range.absolute_values_sum_minimization",
        "description": "mid-range.absolute_values_sum_minimization",
        "peekOfCode": "def absolute_value_sum(mylist, x):\n    running_sum = 0\n    for number in mylist:\n        running_sum += abs(number - x)\n    return running_sum\ndef absoluteValuesSumMinimization(a):\n    mydict = {}\n    for i in range(len(a)):\n        mydict[a[i]] = absolute_value_sum(a, a[i])\n    return min(mydict, key=mydict.get)",
        "detail": "mid-range.absolute_values_sum_minimization",
        "documentation": {}
    },
    {
        "label": "absoluteValuesSumMinimization",
        "kind": 2,
        "importPath": "mid-range.absolute_values_sum_minimization",
        "description": "mid-range.absolute_values_sum_minimization",
        "peekOfCode": "def absoluteValuesSumMinimization(a):\n    mydict = {}\n    for i in range(len(a)):\n        mydict[a[i]] = absolute_value_sum(a, a[i])\n    return min(mydict, key=mydict.get)",
        "detail": "mid-range.absolute_values_sum_minimization",
        "documentation": {}
    },
    {
        "label": "abs_max",
        "kind": 2,
        "importPath": "mid-range.abs_max",
        "description": "mid-range.abs_max",
        "peekOfCode": "def abs_max(x: list[int]) -> int:\n    \"\"\"\n    >>> abs_max([0,5,1,11])\n    11\n    >>> abs_max([3,-10,-2])\n    -10\n    \"\"\"\n    j = x[0]\n    for i in x:\n        if abs(i) > abs(j):",
        "detail": "mid-range.abs_max",
        "documentation": {}
    },
    {
        "label": "abs_max_sort",
        "kind": 2,
        "importPath": "mid-range.abs_max",
        "description": "mid-range.abs_max",
        "peekOfCode": "def abs_max_sort(x):\n    \"\"\"\n    >>> abs_max_sort([0,5,1,11])\n    11\n    >>> abs_max_sort([3,-10,-2])\n    -10\n    \"\"\"\n    return sorted(x, key=abs)[-1]\ndef main():\n    a = [1, 2, -11]",
        "detail": "mid-range.abs_max",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.abs_max",
        "description": "mid-range.abs_max",
        "peekOfCode": "def main():\n    a = [1, 2, -11]\n    assert abs_max(a) == -11\n    assert abs_max_sort(a) == -11\nif __name__ == \"__main__\":\n    main()",
        "detail": "mid-range.abs_max",
        "documentation": {}
    },
    {
        "label": "absMin",
        "kind": 2,
        "importPath": "mid-range.abs_min",
        "description": "mid-range.abs_min",
        "peekOfCode": "def absMin(x):\n    \"\"\"\n    >>> absMin([0,5,1,11])\n    0\n    >>> absMin([3,-10,-2])\n    -2\n    \"\"\"\n    j = x[0]\n    for i in x:\n        if abs_val(i) < abs_val(j):",
        "detail": "mid-range.abs_min",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.abs_min",
        "description": "mid-range.abs_min",
        "peekOfCode": "def main():\n    a = [-3, -1, 2, -11]\n    print(absMin(a))  # = -1\nif __name__ == \"__main__\":\n    main()",
        "detail": "mid-range.abs_min",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "mid-range.activate_this",
        "description": "mid-range.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[\n    : -len(\"bin\") - 1\n]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join(\n    [bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep)\n)\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism",
        "detail": "mid-range.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "mid-range.activate_this",
        "description": "mid-range.activate_this",
        "peekOfCode": "base = bin_dir[\n    : -len(\"bin\") - 1\n]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join(\n    [bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep)\n)\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)",
        "detail": "mid-range.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "mid-range.activate_this",
        "description": "mid-range.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join(\n    [bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep)\n)\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": "mid-range.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "mid-range.activate_this",
        "description": "mid-range.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "mid-range.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "mid-range.activate_this",
        "description": "mid-range.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "mid-range.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "mid-range.activate_this",
        "description": "mid-range.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "mid-range.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "mid-range.activate_this",
        "description": "mid-range.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "mid-range.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "mid-range.activate_this",
        "description": "mid-range.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "mid-range.activate_this",
        "documentation": {}
    },
    {
        "label": "printMaxActivities",
        "kind": 2,
        "importPath": "mid-range.activity_selection",
        "description": "mid-range.activity_selection",
        "peekOfCode": "def printMaxActivities(start, finish):\n    \"\"\"\n    >>> start = [1, 3, 0, 5, 8, 5]\n    >>> finish = [2, 4, 6, 7, 9, 9]\n    >>> printMaxActivities(start, finish)\n    The following activities are selected:\n    0,1,3,4,\n    \"\"\"\n    n = len(finish)\n    print(\"The following activities are selected:\")",
        "detail": "mid-range.activity_selection",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "mid-range.Add two numbers",
        "description": "mid-range.Add two numbers",
        "peekOfCode": "num1 = 1.5\nnum2 = 6.3\n# Add two numbers\nsum = num1 + num2\n# Display the sum\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))",
        "detail": "mid-range.Add two numbers",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "mid-range.Add two numbers",
        "description": "mid-range.Add two numbers",
        "peekOfCode": "num2 = 6.3\n# Add two numbers\nsum = num1 + num2\n# Display the sum\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))",
        "detail": "mid-range.Add two numbers",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 5,
        "importPath": "mid-range.Add two numbers",
        "description": "mid-range.Add two numbers",
        "peekOfCode": "sum = num1 + num2\n# Display the sum\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))",
        "detail": "mid-range.Add two numbers",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.addition",
        "description": "mid-range.addition",
        "peekOfCode": "a = True\nwhile a == True:\n    number1 = int(input(\"enter first number:\"))\n    number2 = int(input(\"enter second number:\"))\n    number3 = int(input(\"enter third number:\"))\n    sum = number1 + number2 + number3\n    print()\n    print(\"\\t\\t======================================\")\n    print()\n    print(\"Addition of three numbers is\", \" :-- \", sum)",
        "detail": "mid-range.addition",
        "documentation": {}
    },
    {
        "label": "get_num",
        "kind": 2,
        "importPath": "mid-range.addTwoHugeNumbers",
        "description": "mid-range.addTwoHugeNumbers",
        "peekOfCode": "def get_num(a):\n    cnt_a = 1\n    a_num = \"\"\n    while a.next != None:\n        if cnt_a:\n            cnt_a = 0\n            a_num += str(a.value)\n        else:\n            a_num += (\"0\" * (4 - len(str(a.value)))) + str(a.value)\n        a = a.next",
        "detail": "mid-range.addTwoHugeNumbers",
        "documentation": {}
    },
    {
        "label": "addTwoHugeNumbers",
        "kind": 2,
        "importPath": "mid-range.addTwoHugeNumbers",
        "description": "mid-range.addTwoHugeNumbers",
        "peekOfCode": "def addTwoHugeNumbers(a, b):\n    a_num = get_num(a)\n    b_num = get_num(b)\n    # print(a_num)\n    # print(b_num)\n    sm = str(a_num + b_num)\n    # print(sm)\n    ret_list = []\n    sm = sm[-1::-1]\n    for i in range(0, len(sm), 4):",
        "detail": "mid-range.addTwoHugeNumbers",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.addtwonumber",
        "description": "mid-range.addtwonumber",
        "peekOfCode": "a = int(input(\"enter first number: \"))\nb = int(input(\"enter second number: \"))\nsum = a + b\nprint(\"sum:\", sum)",
        "detail": "mid-range.addtwonumber",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.addtwonumber",
        "description": "mid-range.addtwonumber",
        "peekOfCode": "b = int(input(\"enter second number: \"))\nsum = a + b\nprint(\"sum:\", sum)",
        "detail": "mid-range.addtwonumber",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 5,
        "importPath": "mid-range.addtwonumber",
        "description": "mid-range.addtwonumber",
        "peekOfCode": "sum = a + b\nprint(\"sum:\", sum)",
        "detail": "mid-range.addtwonumber",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.AddTwoNumbers",
        "description": "mid-range.AddTwoNumbers",
        "peekOfCode": "class Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        c = 0\n        res = []\n        while l1 or l2:\n            s = 0 + c\n            if l1:\n                s += int(l1.val)\n                l1 = l1.next\n            if l2:",
        "detail": "mid-range.AddTwoNumbers",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "mid-range.add_2_number",
        "description": "mid-range.add_2_number",
        "peekOfCode": "num1 = 15\nnum2 = 12\n# Adding two nos\nsum = num1 + num2\n# printing values\nprint(\"Sum of {0} and {1} is {2}\".format(num1, num2, sum))",
        "detail": "mid-range.add_2_number",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "mid-range.add_2_number",
        "description": "mid-range.add_2_number",
        "peekOfCode": "num2 = 12\n# Adding two nos\nsum = num1 + num2\n# printing values\nprint(\"Sum of {0} and {1} is {2}\".format(num1, num2, sum))",
        "detail": "mid-range.add_2_number",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 5,
        "importPath": "mid-range.add_2_number",
        "description": "mid-range.add_2_number",
        "peekOfCode": "sum = num1 + num2\n# printing values\nprint(\"Sum of {0} and {1} is {2}\".format(num1, num2, sum))",
        "detail": "mid-range.add_2_number",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "mid-range.add_2_numbers",
        "description": "mid-range.add_2_numbers",
        "peekOfCode": "num1 = 1.5\nnum2 = 6.3\n# Add two numbers\nsum = num1 + num2\n# Display the sum\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))",
        "detail": "mid-range.add_2_numbers",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "mid-range.add_2_numbers",
        "description": "mid-range.add_2_numbers",
        "peekOfCode": "num2 = 6.3\n# Add two numbers\nsum = num1 + num2\n# Display the sum\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))",
        "detail": "mid-range.add_2_numbers",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 5,
        "importPath": "mid-range.add_2_numbers",
        "description": "mid-range.add_2_numbers",
        "peekOfCode": "sum = num1 + num2\n# Display the sum\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))",
        "detail": "mid-range.add_2_numbers",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Add_Binary",
        "description": "mid-range.Add_Binary",
        "peekOfCode": "class Solution:\n    def addBinary(self, a, b):\n        x, y = int(a, 2), int(b, 2)\n        while y:\n            answer = x ^ y\n            carry = (x & y) << 1\n            x, y = answer, carry\n        return bin(x)\nif __name__ == \"__main__\":\n    a = \"1010\"",
        "detail": "mid-range.Add_Binary",
        "documentation": {}
    },
    {
        "label": "addBorder",
        "kind": 2,
        "importPath": "mid-range.add_border",
        "description": "mid-range.add_border",
        "peekOfCode": "def addBorder(picture):\n    picture_with_border = []\n    for i in range(len(picture)):\n        # Add the main border to the picture\n        if i == 0:\n            picture_with_border.append(\"*\" * (len(picture[i]) + 2))\n        picture_with_border.append(\"*\" + \"\".join(picture[i]) + \"*\")\n        # Add the main border to the picture\n        if i == len(picture) - 1:\n            picture_with_border.append(\"*\" * (len(picture[i]) + 2))",
        "detail": "mid-range.add_border",
        "documentation": {}
    },
    {
        "label": "addTwoDigits",
        "kind": 2,
        "importPath": "mid-range.add_two_digits",
        "description": "mid-range.add_two_digits",
        "peekOfCode": "def addTwoDigits(n):\n\t\"\"\"\n\tReturn sum of the two digits in n\n\t\"\"\"\n    digits = str(n)\n    return sum([int(digit) for digit in digits])",
        "detail": "mid-range.add_two_digits",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "mid-range.add_two_number",
        "description": "mid-range.add_two_number",
        "peekOfCode": "num1 = 1.5\nnum2 = 6.3\n# Add two numbers\nsum = num1 + num2\n# Display the sum\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))",
        "detail": "mid-range.add_two_number",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "mid-range.add_two_number",
        "description": "mid-range.add_two_number",
        "peekOfCode": "num2 = 6.3\n# Add two numbers\nsum = num1 + num2\n# Display the sum\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))",
        "detail": "mid-range.add_two_number",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 5,
        "importPath": "mid-range.add_two_number",
        "description": "mid-range.add_two_number",
        "peekOfCode": "sum = num1 + num2\n# Display the sum\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))",
        "detail": "mid-range.add_two_number",
        "documentation": {}
    },
    {
        "label": "addTwoNumbers",
        "kind": 2,
        "importPath": "mid-range.add_two_numbers",
        "description": "mid-range.add_two_numbers",
        "peekOfCode": "def addTwoNumbers(l1, l2):\n    pass",
        "detail": "mid-range.add_two_numbers",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "mid-range.adjacency_list",
        "description": "mid-range.adjacency_list",
        "peekOfCode": "class Graph:\n    \"\"\" Represent a Graph as dictionary of vertices map the labels to edges.\"\"\"\n    # constructor\n    def __init__(self):\n        # empty dictionary for verts\n        self.vertices = {}\n    # add vertex\n    def add_vertex(self, vertex_id):\n        # at vertex_id create an empty set\n        self.vertices[vertex_id] = set()",
        "detail": "mid-range.adjacency_list",
        "documentation": {}
    },
    {
        "label": "adjacentElementsProduct",
        "kind": 2,
        "importPath": "mid-range.adjacentElementsProduct",
        "description": "mid-range.adjacentElementsProduct",
        "peekOfCode": "def adjacentElementsProduct(inputArray):\n    # return max(a*b for a, b in zip(inputArray, inputArray[1:]))\n    length = len(inputArray)\n    sum = []\n    for i in range(length - 1):\n        sum.append(\n            inputArray[i] * inputArray[i + 1]\n        )  # append all the values of the product into the array\n    return max(sum)",
        "detail": "mid-range.adjacentElementsProduct",
        "documentation": {}
    },
    {
        "label": "adjacentElementsProduct",
        "kind": 2,
        "importPath": "mid-range.adjacent_elements_product",
        "description": "mid-range.adjacent_elements_product",
        "peekOfCode": "def adjacentElementsProduct(inputArray):\n    pair_of_elements, maxproduct = [], -sys.maxsize\n    for i in range(len(inputArray) - 1):\n        current_product = inputArray[i] * inputArray[i + 1]\n        if current_product > maxproduct:\n            maxproduct = current_product\n            pair_of_elements.append(inputArray[i])\n            pair_of_elements.append(inputArray[i + 1])\n    return maxproduct",
        "detail": "mid-range.adjacent_elements_product",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "mid-range.adj_list",
        "description": "mid-range.adj_list",
        "peekOfCode": "class Graph:\n    \"\"\"Represent a graph as a dictionary of vertices mapping labels to edges.\"\"\"\n    def __init__(self):\n        pass\n    def add_vertex(self, vertex_id):\n        pass\n    def add_edge(self, v1, v2):\n        pass\n    def get_neighbors(self, vertex_id):\n        pass",
        "detail": "mid-range.adj_list",
        "documentation": {}
    },
    {
        "label": "adler32",
        "kind": 2,
        "importPath": "mid-range.adler32",
        "description": "mid-range.adler32",
        "peekOfCode": "def adler32(plain_text: str) -> int:\n    \"\"\"\n    Function implements adler-32 hash.\n    Iterates and evaluates a new value for each character\n    >>> adler32('Algorithms')\n    363791387\n    >>> adler32('go adler em all')\n    708642122\n    \"\"\"\n    MOD_ADLER = 65521",
        "detail": "mid-range.adler32",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.agile",
        "description": "mid-range.agile",
        "peekOfCode": "__all__ = []",
        "detail": "mid-range.agile",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "mid-range.aio_web",
        "description": "mid-range.aio_web",
        "peekOfCode": "__author__ = \"Michael Liao\"\n\"\"\"\nasync web application.\n\"\"\"\nimport asyncio\nfrom aiohttp import web\nasync def index(request):\n    await asyncio.sleep(0.5)\n    return web.Response(body=b\"<h1>Index</h1>\")\nasync def hello(request):",
        "detail": "mid-range.aio_web",
        "documentation": {}
    },
    {
        "label": "loop",
        "kind": 5,
        "importPath": "mid-range.aio_web",
        "description": "mid-range.aio_web",
        "peekOfCode": "loop = asyncio.get_event_loop()\nloop.run_until_complete(init(loop))\nloop.run_forever()",
        "detail": "mid-range.aio_web",
        "documentation": {}
    },
    {
        "label": "thrust_props",
        "kind": 2,
        "importPath": "mid-range.aircraft_thrust",
        "description": "mid-range.aircraft_thrust",
        "peekOfCode": "def thrust_props(diameter, velocity, velocity1, density):\n    # According to formula\n    return (\n        math.pi / 4 * diameter ** 2 * (velocity + velocity1 / 2) * density * velocity1\n    )\nprint(\"Hello Aircraft Lovers,\\n\")\nwhile True:\n    # Loop for continous calculation\n    start_or_end = str(raw_input(\"start or end : \")).strip().lower()\n    # Main interface",
        "detail": "mid-range.aircraft_thrust",
        "documentation": {}
    },
    {
        "label": "Repeat",
        "kind": 2,
        "importPath": "mid-range.aj",
        "description": "mid-range.aj",
        "peekOfCode": "def Repeat(x):\n    _size = len(x)\n    repeated = []\n    for i in range(_size):\n        k = i + 1\n        for j in range(k, _size):\n            if x[i] == x[j] and x[i] not in repeated:\n                repeated.append(x[i])\n    return repeated\nlist1 = [10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]",
        "detail": "mid-range.aj",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "mid-range.aj",
        "description": "mid-range.aj",
        "peekOfCode": "list1 = [10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]\nprint(Repeat(list1))",
        "detail": "mid-range.aj",
        "documentation": {}
    },
    {
        "label": "add_one",
        "kind": 2,
        "importPath": "mid-range.algorithm",
        "description": "mid-range.algorithm",
        "peekOfCode": "def add_one(num):\n    try:\n        output = int(num) + 1\n        return output\n    except:\n        # print(\"Value Error input int\")\n        return f\"ERROR: {num} is not an integer: Please input an integer\"\n# test\nprint(add_one(4))  # => 5\nprint(add_one(15))  # => 16",
        "detail": "mid-range.algorithm",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "mid-range.algorithm",
        "description": "mid-range.algorithm",
        "peekOfCode": "name = add_one(\"65\")  # => 65 + 1\nprint(name)  # => 66",
        "detail": "mid-range.algorithm",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "mid-range.all_and_any",
        "description": "mid-range.all_and_any",
        "peekOfCode": "l = [1, 2, 3, 4, 0]\n# using any evaluates some values and get true if any is true\nprint(any(l))\nprint(all(l))",
        "detail": "mid-range.all_and_any",
        "documentation": {}
    },
    {
        "label": "generate_all_combinations",
        "kind": 2,
        "importPath": "mid-range.all_combinations",
        "description": "mid-range.all_combinations",
        "peekOfCode": "def generate_all_combinations(n: int, k: int) -> List[List[int]]:\n    \"\"\"\n    >>> generate_all_combinations(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    \"\"\"\n    result: List[List[int]] = []\n    create_all_state(1, n, k, [], result)\n    return result\ndef create_all_state(\n    increment: int,",
        "detail": "mid-range.all_combinations",
        "documentation": {}
    },
    {
        "label": "create_all_state",
        "kind": 2,
        "importPath": "mid-range.all_combinations",
        "description": "mid-range.all_combinations",
        "peekOfCode": "def create_all_state(\n    increment: int,\n    total_number: int,\n    level: int,\n    current_list: List[int],\n    total_list: List[List[int]],\n) -> None:\n    if level == 0:\n        total_list.append(current_list[:])\n        return",
        "detail": "mid-range.all_combinations",
        "documentation": {}
    },
    {
        "label": "print_all_state",
        "kind": 2,
        "importPath": "mid-range.all_combinations",
        "description": "mid-range.all_combinations",
        "peekOfCode": "def print_all_state(total_list: List[List[int]]) -> None:\n    for i in total_list:\n        print(*i)\nif __name__ == \"__main__\":\n    n = 4\n    k = 2\n    total_list = generate_all_combinations(n, k)\n    print_all_state(total_list)",
        "detail": "mid-range.all_combinations",
        "documentation": {}
    },
    {
        "label": "allIndexes",
        "kind": 2,
        "importPath": "mid-range.All_indices",
        "description": "mid-range.All_indices",
        "peekOfCode": "def allIndexes(input, x, start):\n    # If the start index is equal to end of array then return empty array\n    if start == len(input):\n        ans = []\n        return ans\n    # recursion\n    smallIndex = allIndexes(input, x, start + 1)\n    # If the element at start index is equal to x then put the start in first index of array.\n    if input[start] == x:\n        myAns = [0 for i in range(len(smallIndex) + 1)]",
        "detail": "mid-range.All_indices",
        "documentation": {}
    },
    {
        "label": "allIndices",
        "kind": 2,
        "importPath": "mid-range.All_indices",
        "description": "mid-range.All_indices",
        "peekOfCode": "def allIndices(input, x):\n    return allIndexes(input, x, 0)\nn = int(input(\"Enter size of array : \"))\narr = []\nfor i in range(n):\n    e = int(input())\n    arr.append(e)\nx = int(input())\noutput = allIndices(arr, x)\n# Printing the output array",
        "detail": "mid-range.All_indices",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.All_indices",
        "description": "mid-range.All_indices",
        "peekOfCode": "n = int(input(\"Enter size of array : \"))\narr = []\nfor i in range(n):\n    e = int(input())\n    arr.append(e)\nx = int(input())\noutput = allIndices(arr, x)\n# Printing the output array\nfor i in output:\n    print(i, end=\" \")",
        "detail": "mid-range.All_indices",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.All_indices",
        "description": "mid-range.All_indices",
        "peekOfCode": "arr = []\nfor i in range(n):\n    e = int(input())\n    arr.append(e)\nx = int(input())\noutput = allIndices(arr, x)\n# Printing the output array\nfor i in output:\n    print(i, end=\" \")\n# Example",
        "detail": "mid-range.All_indices",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.All_indices",
        "description": "mid-range.All_indices",
        "peekOfCode": "x = int(input())\noutput = allIndices(arr, x)\n# Printing the output array\nfor i in output:\n    print(i, end=\" \")\n# Example\n# Input 5\n# 6 5 6 7 5\n# Output\n# 0,2",
        "detail": "mid-range.All_indices",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "mid-range.All_indices",
        "description": "mid-range.All_indices",
        "peekOfCode": "output = allIndices(arr, x)\n# Printing the output array\nfor i in output:\n    print(i, end=\" \")\n# Example\n# Input 5\n# 6 5 6 7 5\n# Output\n# 0,2",
        "detail": "mid-range.All_indices",
        "documentation": {}
    },
    {
        "label": "country_name",
        "kind": 5,
        "importPath": "mid-range.All_information_about_Country",
        "description": "mid-range.All_information_about_Country",
        "peekOfCode": "country_name = \"India\"\na = CountryInfo(country_name)\ninfo_1 = a.alt_spellings()\nprint(info_1)\ninfo_2 = a.capital()\nprint(info_2)\ninfo_3 = a.languages()\nprint(info_3)\ninfo_4 = a.timezones()\nprint(info_4)",
        "detail": "mid-range.All_information_about_Country",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.All_information_about_Country",
        "description": "mid-range.All_information_about_Country",
        "peekOfCode": "a = CountryInfo(country_name)\ninfo_1 = a.alt_spellings()\nprint(info_1)\ninfo_2 = a.capital()\nprint(info_2)\ninfo_3 = a.languages()\nprint(info_3)\ninfo_4 = a.timezones()\nprint(info_4)\ninfo_5 = a.currencies()",
        "detail": "mid-range.All_information_about_Country",
        "documentation": {}
    },
    {
        "label": "info_1",
        "kind": 5,
        "importPath": "mid-range.All_information_about_Country",
        "description": "mid-range.All_information_about_Country",
        "peekOfCode": "info_1 = a.alt_spellings()\nprint(info_1)\ninfo_2 = a.capital()\nprint(info_2)\ninfo_3 = a.languages()\nprint(info_3)\ninfo_4 = a.timezones()\nprint(info_4)\ninfo_5 = a.currencies()\nprint(info_5)",
        "detail": "mid-range.All_information_about_Country",
        "documentation": {}
    },
    {
        "label": "info_2",
        "kind": 5,
        "importPath": "mid-range.All_information_about_Country",
        "description": "mid-range.All_information_about_Country",
        "peekOfCode": "info_2 = a.capital()\nprint(info_2)\ninfo_3 = a.languages()\nprint(info_3)\ninfo_4 = a.timezones()\nprint(info_4)\ninfo_5 = a.currencies()\nprint(info_5)\ninfo_6 = a.area()\nprint(info_6)",
        "detail": "mid-range.All_information_about_Country",
        "documentation": {}
    },
    {
        "label": "info_3",
        "kind": 5,
        "importPath": "mid-range.All_information_about_Country",
        "description": "mid-range.All_information_about_Country",
        "peekOfCode": "info_3 = a.languages()\nprint(info_3)\ninfo_4 = a.timezones()\nprint(info_4)\ninfo_5 = a.currencies()\nprint(info_5)\ninfo_6 = a.area()\nprint(info_6)\ninfo_7 = a.borders()\nprint(info_7)",
        "detail": "mid-range.All_information_about_Country",
        "documentation": {}
    },
    {
        "label": "info_4",
        "kind": 5,
        "importPath": "mid-range.All_information_about_Country",
        "description": "mid-range.All_information_about_Country",
        "peekOfCode": "info_4 = a.timezones()\nprint(info_4)\ninfo_5 = a.currencies()\nprint(info_5)\ninfo_6 = a.area()\nprint(info_6)\ninfo_7 = a.borders()\nprint(info_7)\ninfo_8 = a.calling_codes()\nprint(info_8)",
        "detail": "mid-range.All_information_about_Country",
        "documentation": {}
    },
    {
        "label": "info_5",
        "kind": 5,
        "importPath": "mid-range.All_information_about_Country",
        "description": "mid-range.All_information_about_Country",
        "peekOfCode": "info_5 = a.currencies()\nprint(info_5)\ninfo_6 = a.area()\nprint(info_6)\ninfo_7 = a.borders()\nprint(info_7)\ninfo_8 = a.calling_codes()\nprint(info_8)\ninfo_9 = a.wiki()\nprint(info_9)",
        "detail": "mid-range.All_information_about_Country",
        "documentation": {}
    },
    {
        "label": "info_6",
        "kind": 5,
        "importPath": "mid-range.All_information_about_Country",
        "description": "mid-range.All_information_about_Country",
        "peekOfCode": "info_6 = a.area()\nprint(info_6)\ninfo_7 = a.borders()\nprint(info_7)\ninfo_8 = a.calling_codes()\nprint(info_8)\ninfo_9 = a.wiki()\nprint(info_9)\ninfo_10 = a.info()\nfor p, q in info_10.items():",
        "detail": "mid-range.All_information_about_Country",
        "documentation": {}
    },
    {
        "label": "info_7",
        "kind": 5,
        "importPath": "mid-range.All_information_about_Country",
        "description": "mid-range.All_information_about_Country",
        "peekOfCode": "info_7 = a.borders()\nprint(info_7)\ninfo_8 = a.calling_codes()\nprint(info_8)\ninfo_9 = a.wiki()\nprint(info_9)\ninfo_10 = a.info()\nfor p, q in info_10.items():\n    print(f\"{p}     {q}\")",
        "detail": "mid-range.All_information_about_Country",
        "documentation": {}
    },
    {
        "label": "info_8",
        "kind": 5,
        "importPath": "mid-range.All_information_about_Country",
        "description": "mid-range.All_information_about_Country",
        "peekOfCode": "info_8 = a.calling_codes()\nprint(info_8)\ninfo_9 = a.wiki()\nprint(info_9)\ninfo_10 = a.info()\nfor p, q in info_10.items():\n    print(f\"{p}     {q}\")",
        "detail": "mid-range.All_information_about_Country",
        "documentation": {}
    },
    {
        "label": "info_9",
        "kind": 5,
        "importPath": "mid-range.All_information_about_Country",
        "description": "mid-range.All_information_about_Country",
        "peekOfCode": "info_9 = a.wiki()\nprint(info_9)\ninfo_10 = a.info()\nfor p, q in info_10.items():\n    print(f\"{p}     {q}\")",
        "detail": "mid-range.All_information_about_Country",
        "documentation": {}
    },
    {
        "label": "info_10",
        "kind": 5,
        "importPath": "mid-range.All_information_about_Country",
        "description": "mid-range.All_information_about_Country",
        "peekOfCode": "info_10 = a.info()\nfor p, q in info_10.items():\n    print(f\"{p}     {q}\")",
        "detail": "mid-range.All_information_about_Country",
        "documentation": {}
    },
    {
        "label": "allLongestStrings",
        "kind": 2,
        "importPath": "mid-range.all_longest_strings",
        "description": "mid-range.all_longest_strings",
        "peekOfCode": "def allLongestStrings(inputArray):\n    # sortedList = sorted(inputArray, key=len, reverse=True)\n    max_string_length, longest_strings = max(inputArray, key=len), []\n    for i in range(len(inputArray)):\n        if len(inputArray[i]) == len(max_string_length):\n            longest_strings.append(inputArray[i])\n    return longest_strings",
        "detail": "mid-range.all_longest_strings",
        "documentation": {}
    },
    {
        "label": "generate_all_subsequences",
        "kind": 2,
        "importPath": "mid-range.all_subsequences",
        "description": "mid-range.all_subsequences",
        "peekOfCode": "def generate_all_subsequences(sequence: List[Any]) -> None:\n    create_state_space_tree(sequence, [], 0)\ndef create_state_space_tree(\n    sequence: List[Any], current_subsequence: List[Any], index: int\n) -> None:\n    \"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly two children.\n    It terminates when it reaches the end of the given sequence.\n    \"\"\"",
        "detail": "mid-range.all_subsequences",
        "documentation": {}
    },
    {
        "label": "create_state_space_tree",
        "kind": 2,
        "importPath": "mid-range.all_subsequences",
        "description": "mid-range.all_subsequences",
        "peekOfCode": "def create_state_space_tree(\n    sequence: List[Any], current_subsequence: List[Any], index: int\n) -> None:\n    \"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly two children.\n    It terminates when it reaches the end of the given sequence.\n    \"\"\"\n    if index == len(sequence):\n        print(current_subsequence)",
        "detail": "mid-range.all_subsequences",
        "documentation": {}
    },
    {
        "label": "zeros",
        "kind": 2,
        "importPath": "mid-range.all_zeros",
        "description": "mid-range.all_zeros",
        "peekOfCode": "def zeros(arr, n):\n    count = 0\n    for i in range(n):\n        if arr[i] != 0:\n            arr[count] = arr[i]\n            count += 1\n    while count < n:\n        arr[count] = 0\n        count += 1\ndef print_arr(arr, n):",
        "detail": "mid-range.all_zeros",
        "documentation": {}
    },
    {
        "label": "print_arr",
        "kind": 2,
        "importPath": "mid-range.all_zeros",
        "description": "mid-range.all_zeros",
        "peekOfCode": "def print_arr(arr, n):\n    for i in range(n):\n        print(arr[i], end=\" \")\narr = [1, 0, 0, 2, 5, 0]\nzeros(arr, len(arr))\nprint_arr(arr, len(arr))",
        "detail": "mid-range.all_zeros",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.all_zeros",
        "description": "mid-range.all_zeros",
        "peekOfCode": "arr = [1, 0, 0, 2, 5, 0]\nzeros(arr, len(arr))\nprint_arr(arr, len(arr))",
        "detail": "mid-range.all_zeros",
        "documentation": {}
    },
    {
        "label": "is_increasing_sequence",
        "kind": 2,
        "importPath": "mid-range.almost_increasing_sequence",
        "description": "mid-range.almost_increasing_sequence",
        "peekOfCode": "def is_increasing_sequence(sequence):\n    for i in range(len(sequence) - 1):\n        if sequence[i] >= sequence[i + 1]:\n            return i\n    return -1\ndef almostIncreasingSequence(sequence):\n    j = is_increasing_sequence(sequence)\n    if j == -1:\n        return True\n    if is_increasing_sequence(sequence[j - 1 : j] + sequence[j + 1 :]) == -1:",
        "detail": "mid-range.almost_increasing_sequence",
        "documentation": {}
    },
    {
        "label": "almostIncreasingSequence",
        "kind": 2,
        "importPath": "mid-range.almost_increasing_sequence",
        "description": "mid-range.almost_increasing_sequence",
        "peekOfCode": "def almostIncreasingSequence(sequence):\n    j = is_increasing_sequence(sequence)\n    if j == -1:\n        return True\n    if is_increasing_sequence(sequence[j - 1 : j] + sequence[j + 1 :]) == -1:\n        return True  # Deleting earlier element makes it increasing\n    if is_increasing_sequence(sequence[j : j + 1] + sequence[j + 2 :]) == -1:\n        return True  # Deleting later element makes it increasing\n    return False",
        "detail": "mid-range.almost_increasing_sequence",
        "documentation": {}
    },
    {
        "label": "csAlphanumericRestriction",
        "kind": 2,
        "importPath": "mid-range.alpha",
        "description": "mid-range.alpha",
        "peekOfCode": "def csAlphanumericRestriction(input_str): #c is every char in\ninput string\nis_numeric = False\nis_alpha = False\nfor c in input_str:\n% if c.isnumeric():\nis_numeric = True\nelif c.isalpha():\nis_alpha = True\nelse:",
        "detail": "mid-range.alpha",
        "documentation": {}
    },
    {
        "label": "is_numeric",
        "kind": 5,
        "importPath": "mid-range.alpha",
        "description": "mid-range.alpha",
        "peekOfCode": "is_numeric = False\nis_alpha = False\nfor c in input_str:\n% if c.isnumeric():\nis_numeric = True\nelif c.isalpha():\nis_alpha = True\nelse:\n‘ return False\nreturn (is_numeric and not is_alpha) or (is_alpha and not",
        "detail": "mid-range.alpha",
        "documentation": {}
    },
    {
        "label": "is_alpha",
        "kind": 5,
        "importPath": "mid-range.alpha",
        "description": "mid-range.alpha",
        "peekOfCode": "is_alpha = False\nfor c in input_str:\n% if c.isnumeric():\nis_numeric = True\nelif c.isalpha():\nis_alpha = True\nelse:\n‘ return False\nreturn (is_numeric and not is_alpha) or (is_alpha and not\nis_numeric)",
        "detail": "mid-range.alpha",
        "documentation": {}
    },
    {
        "label": "is_numeric",
        "kind": 5,
        "importPath": "mid-range.alpha",
        "description": "mid-range.alpha",
        "peekOfCode": "is_numeric = True\nelif c.isalpha():\nis_alpha = True\nelse:\n‘ return False\nreturn (is_numeric and not is_alpha) or (is_alpha and not\nis_numeric)\nI",
        "detail": "mid-range.alpha",
        "documentation": {}
    },
    {
        "label": "is_alpha",
        "kind": 5,
        "importPath": "mid-range.alpha",
        "description": "mid-range.alpha",
        "peekOfCode": "is_alpha = True\nelse:\n‘ return False\nreturn (is_numeric and not is_alpha) or (is_alpha and not\nis_numeric)\nI",
        "detail": "mid-range.alpha",
        "documentation": {}
    },
    {
        "label": "Filter",
        "kind": 6,
        "importPath": "mid-range.alphabeticalattributes",
        "description": "mid-range.alphabeticalattributes",
        "peekOfCode": "class Filter(base.Filter):\n    \"\"\"Alphabetizes attributes for elements\"\"\"\n    def __iter__(self):\n        for token in base.Filter.__iter__(self):\n            if token[\"type\"] in (\"StartTag\", \"EmptyTag\"):\n                attrs = OrderedDict()\n                for name, value in sorted(token[\"data\"].items(), key=_attr_key):\n                    attrs[name] = value\n                token[\"data\"] = attrs\n            yield token",
        "detail": "mid-range.alphabeticalattributes",
        "documentation": {}
    },
    {
        "label": "alphabeticShift",
        "kind": 2,
        "importPath": "mid-range.alphabetic_shift",
        "description": "mid-range.alphabetic_shift",
        "peekOfCode": "def alphabeticShift(inputString):\n    outputString = \"\"\n    for i in range(len(inputString)):\n        outputString += chr((ord(inputString[i]) + 1 - 97) % 26 + 97)\n    return outputString",
        "detail": "mid-range.alphabetic_shift",
        "documentation": {}
    },
    {
        "label": "alternatingSums",
        "kind": 2,
        "importPath": "mid-range.alternating_sums",
        "description": "mid-range.alternating_sums",
        "peekOfCode": "def alternatingSums(a):\n    team1, team2 = [], []\n    for i in range(len(a)):\n        if i % 2 == 0:\n            team1.append(a[i])\n        else:\n            team2.append(a[i])\n    return [sum(team1), sum(team2)]",
        "detail": "mid-range.alternating_sums",
        "documentation": {}
    },
    {
        "label": "alternative_string_arrange",
        "kind": 2,
        "importPath": "mid-range.alternative_string_arrange",
        "description": "mid-range.alternative_string_arrange",
        "peekOfCode": "def alternative_string_arrange(first_str: str, second_str: str) -> str:\n    \"\"\"\n    Return the alternative arrangements of the two strings.\n    :param first_str:\n    :param second_str:\n    :return: String\n    >>> alternative_string_arrange(\"ABCD\", \"XY\")\n    'AXBYCD'\n    >>> alternative_string_arrange(\"XY\", \"ABCD\")\n    'XAYBCD'",
        "detail": "mid-range.alternative_string_arrange",
        "documentation": {}
    },
    {
        "label": "Among",
        "kind": 6,
        "importPath": "mid-range.among",
        "description": "mid-range.among",
        "peekOfCode": "class Among(object):\n    def __init__(self, s, substring_i, result, method=None):\n        \"\"\"\n        @ivar s search string\n        @ivar substring index to longest matching substring\n        @ivar result of the lookup\n        @ivar method method to use if substring matches\n        \"\"\"\n        self.s = s\n        self.substring_i = substring_i",
        "detail": "mid-range.among",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "mid-range.an",
        "description": "mid-range.an",
        "peekOfCode": "l = [\n    \"angor\",\n    \"argon\",\n    \"goran\",\n    \"grano\",\n    \"groan\",\n    \"nagor\",\n    \"Orang\",\n    \"orang\",\n    \"organ\",",
        "detail": "mid-range.an",
        "documentation": {}
    },
    {
        "label": "SortAnagram",
        "kind": 2,
        "importPath": "mid-range.anagram",
        "description": "mid-range.anagram",
        "peekOfCode": "def SortAnagram(arr):\n    temp = []\n    stage = []\n    dic = []\n    for i in arr:\n        for j in i:\n            stage.append(j)\n        stage.sort()\n        temp.append(\"\".join(stage))\n        stage = []",
        "detail": "mid-range.anagram",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.anagram",
        "description": "mid-range.anagram",
        "peekOfCode": "arr = [\"cat\", \"dog\", \"tac\", \"god\", \"act\"]\nSortAnagram(arr)",
        "detail": "mid-range.anagram",
        "documentation": {}
    },
    {
        "label": "signature",
        "kind": 2,
        "importPath": "mid-range.anagrams",
        "description": "mid-range.anagrams",
        "peekOfCode": "def signature(word):\n    return \"\".join(sorted(word))\nword_bysig = collections.defaultdict(list)\nfor word in word_list:\n    word_bysig[signature(word)].append(word)\ndef anagram(my_word):\n    return word_bysig[signature(my_word)]\nprint(\"finding anagrams...\")\nall_anagrams = {word: anagram(word) for word in word_list if len(anagram(word)) > 1}\nprint(\"writing anagrams to file...\")",
        "detail": "mid-range.anagrams",
        "documentation": {}
    },
    {
        "label": "anagram",
        "kind": 2,
        "importPath": "mid-range.anagrams",
        "description": "mid-range.anagrams",
        "peekOfCode": "def anagram(my_word):\n    return word_bysig[signature(my_word)]\nprint(\"finding anagrams...\")\nall_anagrams = {word: anagram(word) for word in word_list if len(anagram(word)) > 1}\nprint(\"writing anagrams to file...\")\nwith open(\"anagrams.txt\", \"w\") as file:\n    file.write(\"all_anagrams = \")\n    file.write(pprint.pformat(all_anagrams))\ntotal_time = round(time.time() - start_time, 2)\nprint((\"Done [\", total_time, \"seconds ]\"))",
        "detail": "mid-range.anagrams",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "mid-range.anagrams",
        "description": "mid-range.anagrams",
        "peekOfCode": "start_time = time.time()\nprint(\"creating word list...\")\npath = os.path.split(os.path.realpath(__file__))\nwith open(path[0] + \"/words.txt\") as f:\n    word_list = sorted(list({word.strip().lower() for word in f}))\ndef signature(word):\n    return \"\".join(sorted(word))\nword_bysig = collections.defaultdict(list)\nfor word in word_list:\n    word_bysig[signature(word)].append(word)",
        "detail": "mid-range.anagrams",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "mid-range.anagrams",
        "description": "mid-range.anagrams",
        "peekOfCode": "path = os.path.split(os.path.realpath(__file__))\nwith open(path[0] + \"/words.txt\") as f:\n    word_list = sorted(list({word.strip().lower() for word in f}))\ndef signature(word):\n    return \"\".join(sorted(word))\nword_bysig = collections.defaultdict(list)\nfor word in word_list:\n    word_bysig[signature(word)].append(word)\ndef anagram(my_word):\n    return word_bysig[signature(my_word)]",
        "detail": "mid-range.anagrams",
        "documentation": {}
    },
    {
        "label": "word_bysig",
        "kind": 5,
        "importPath": "mid-range.anagrams",
        "description": "mid-range.anagrams",
        "peekOfCode": "word_bysig = collections.defaultdict(list)\nfor word in word_list:\n    word_bysig[signature(word)].append(word)\ndef anagram(my_word):\n    return word_bysig[signature(my_word)]\nprint(\"finding anagrams...\")\nall_anagrams = {word: anagram(word) for word in word_list if len(anagram(word)) > 1}\nprint(\"writing anagrams to file...\")\nwith open(\"anagrams.txt\", \"w\") as file:\n    file.write(\"all_anagrams = \")",
        "detail": "mid-range.anagrams",
        "documentation": {}
    },
    {
        "label": "all_anagrams",
        "kind": 5,
        "importPath": "mid-range.anagrams",
        "description": "mid-range.anagrams",
        "peekOfCode": "all_anagrams = {word: anagram(word) for word in word_list if len(anagram(word)) > 1}\nprint(\"writing anagrams to file...\")\nwith open(\"anagrams.txt\", \"w\") as file:\n    file.write(\"all_anagrams = \")\n    file.write(pprint.pformat(all_anagrams))\ntotal_time = round(time.time() - start_time, 2)\nprint((\"Done [\", total_time, \"seconds ]\"))",
        "detail": "mid-range.anagrams",
        "documentation": {}
    },
    {
        "label": "total_time",
        "kind": 5,
        "importPath": "mid-range.anagrams",
        "description": "mid-range.anagrams",
        "peekOfCode": "total_time = round(time.time() - start_time, 2)\nprint((\"Done [\", total_time, \"seconds ]\"))",
        "detail": "mid-range.anagrams",
        "documentation": {}
    },
    {
        "label": "bishopAndPawn",
        "kind": 2,
        "importPath": "mid-range.AndPawn",
        "description": "mid-range.AndPawn",
        "peekOfCode": "def bishopAndPawn(bishop, pawn):\n    if ord(bishop[0]) == ord(pawn[0]):\n        return False\n    else:\n        bishop_elm = ord(bishop[0]) + int(bishop[1])\n        pawn_elm = ord(pawn[0]) + int(pawn[1])\n        return (bishop_elm + pawn_elm) % 2 == 0",
        "detail": "mid-range.AndPawn",
        "documentation": {}
    },
    {
        "label": "complementary",
        "kind": 2,
        "importPath": "mid-range.Angle",
        "description": "mid-range.Angle",
        "peekOfCode": "def complementary():\n    while True:\n        complementary = float(input(\"Complementary of : \"))\n        if complementary <= 90:\n            complement = 90 - complementary\n            return complement\n            break\n        else:\n            print(\"Number greater than 90 degree. Try again\")\n            continue",
        "detail": "mid-range.Angle",
        "documentation": {}
    },
    {
        "label": "supplementary",
        "kind": 2,
        "importPath": "mid-range.Angle",
        "description": "mid-range.Angle",
        "peekOfCode": "def supplementary():\n    while True:\n        supplementary = float(input(\"Supplementary of : \"))\n        if supplementary <= 180:\n            supplement = 180 - supplementary\n            return supplement\n            break\n        else:\n            print(\"Number greater than 180 degree. Try again\")\n            continue",
        "detail": "mid-range.Angle",
        "documentation": {}
    },
    {
        "label": "Animal",
        "kind": 6,
        "importPath": "mid-range.animals",
        "description": "mid-range.animals",
        "peekOfCode": "class Animal(object):\n    def run(self):\n        print(\"Animal is running...\")\nclass Dog(Animal):\n    def run(self):\n        print(\"Dog is running...\")\nclass Cat(Animal):\n    def run(self):\n        print(\"Cat is running...\")\ndef run_twice(animal):",
        "detail": "mid-range.animals",
        "documentation": {}
    },
    {
        "label": "Dog",
        "kind": 6,
        "importPath": "mid-range.animals",
        "description": "mid-range.animals",
        "peekOfCode": "class Dog(Animal):\n    def run(self):\n        print(\"Dog is running...\")\nclass Cat(Animal):\n    def run(self):\n        print(\"Cat is running...\")\ndef run_twice(animal):\n    animal.run()\n    animal.run()\na = Animal()",
        "detail": "mid-range.animals",
        "documentation": {}
    },
    {
        "label": "Cat",
        "kind": 6,
        "importPath": "mid-range.animals",
        "description": "mid-range.animals",
        "peekOfCode": "class Cat(Animal):\n    def run(self):\n        print(\"Cat is running...\")\ndef run_twice(animal):\n    animal.run()\n    animal.run()\na = Animal()\nd = Dog()\nc = Cat()\nprint(\"a is Animal?\", isinstance(a, Animal))",
        "detail": "mid-range.animals",
        "documentation": {}
    },
    {
        "label": "run_twice",
        "kind": 2,
        "importPath": "mid-range.animals",
        "description": "mid-range.animals",
        "peekOfCode": "def run_twice(animal):\n    animal.run()\n    animal.run()\na = Animal()\nd = Dog()\nc = Cat()\nprint(\"a is Animal?\", isinstance(a, Animal))\nprint(\"a is Dog?\", isinstance(a, Dog))\nprint(\"a is Cat?\", isinstance(a, Cat))\nprint(\"d is Animal?\", isinstance(d, Animal))",
        "detail": "mid-range.animals",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.animals",
        "description": "mid-range.animals",
        "peekOfCode": "a = Animal()\nd = Dog()\nc = Cat()\nprint(\"a is Animal?\", isinstance(a, Animal))\nprint(\"a is Dog?\", isinstance(a, Dog))\nprint(\"a is Cat?\", isinstance(a, Cat))\nprint(\"d is Animal?\", isinstance(d, Animal))\nprint(\"d is Dog?\", isinstance(d, Dog))\nprint(\"d is Cat?\", isinstance(d, Cat))\nrun_twice(c)",
        "detail": "mid-range.animals",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.animals",
        "description": "mid-range.animals",
        "peekOfCode": "d = Dog()\nc = Cat()\nprint(\"a is Animal?\", isinstance(a, Animal))\nprint(\"a is Dog?\", isinstance(a, Dog))\nprint(\"a is Cat?\", isinstance(a, Cat))\nprint(\"d is Animal?\", isinstance(d, Animal))\nprint(\"d is Dog?\", isinstance(d, Dog))\nprint(\"d is Cat?\", isinstance(d, Cat))\nrun_twice(c)",
        "detail": "mid-range.animals",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.animals",
        "description": "mid-range.animals",
        "peekOfCode": "c = Cat()\nprint(\"a is Animal?\", isinstance(a, Animal))\nprint(\"a is Dog?\", isinstance(a, Dog))\nprint(\"a is Cat?\", isinstance(a, Cat))\nprint(\"d is Animal?\", isinstance(d, Animal))\nprint(\"d is Dog?\", isinstance(d, Dog))\nprint(\"d is Cat?\", isinstance(d, Cat))\nrun_twice(c)",
        "detail": "mid-range.animals",
        "documentation": {}
    },
    {
        "label": "csAnythingButFive",
        "kind": 2,
        "importPath": "mid-range.anithingButFive",
        "description": "mid-range.anithingButFive",
        "peekOfCode": "def csAnythingButFive(start, end):\n    count = 0\n    new_list = []\n    for num in range(start, end + 1):\n        str_num = str(num)\n        if \"5\" in str_num:\n            continue\n        count += 1\n    return count\nprint(csAnythingButFive(1, 5))",
        "detail": "mid-range.anithingButFive",
        "documentation": {}
    },
    {
        "label": "isPalindrome",
        "kind": 2,
        "importPath": "mid-range.Any-or-All",
        "description": "mid-range.Any-or-All",
        "peekOfCode": "def isPalindrome(num):\n    num = str(num)\n    front = len(num) - 1\n    rear = 0\n    while rear <= front:\n        if not num[front] == num[rear]:\n            return False\n        rear += 1\n        front -= 1\n    return True",
        "detail": "mid-range.Any-or-All",
        "documentation": {}
    },
    {
        "label": "isPalindrome",
        "kind": 2,
        "importPath": "mid-range.Any-or-All",
        "description": "mid-range.Any-or-All",
        "peekOfCode": "def isPalindrome(num):\n    num = str(num)\n    return True if num == num[::-1] else False\nn = int(input())\nnums = list(map(int, input().split()))\nprint(\n    \"True\"\n    if all(x >= 0 for x in nums) and any(isPalindrome(x) for x in nums)\n    else \"False\"\n)",
        "detail": "mid-range.Any-or-All",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.Any-or-All",
        "description": "mid-range.Any-or-All",
        "peekOfCode": "n = int(input())\nnums = list(map(int, input().split()))\nprint(\n    \"True\"\n    if all(x >= 0 for x in nums) and any(isPalindrome(x) for x in nums)\n    else \"False\"\n)\n# More Concise Solution using string reversal\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef isPalindrome(num):",
        "detail": "mid-range.Any-or-All",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "mid-range.Any-or-All",
        "description": "mid-range.Any-or-All",
        "peekOfCode": "nums = list(map(int, input().split()))\nprint(\n    \"True\"\n    if all(x >= 0 for x in nums) and any(isPalindrome(x) for x in nums)\n    else \"False\"\n)\n# More Concise Solution using string reversal\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef isPalindrome(num):\n    num = str(num)",
        "detail": "mid-range.Any-or-All",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.Any-or-All",
        "description": "mid-range.Any-or-All",
        "peekOfCode": "n = int(input())\nnums = list(map(int, input().split()))\nprint(\n    \"True\"\n    if all(x >= 0 for x in nums) and any(isPalindrome(x) for x in nums)\n    else \"False\"\n)",
        "detail": "mid-range.Any-or-All",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "mid-range.Any-or-All",
        "description": "mid-range.Any-or-All",
        "peekOfCode": "nums = list(map(int, input().split()))\nprint(\n    \"True\"\n    if all(x >= 0 for x in nums) and any(isPalindrome(x) for x in nums)\n    else \"False\"\n)",
        "detail": "mid-range.Any-or-All",
        "documentation": {}
    },
    {
        "label": "get_file_names",
        "kind": 2,
        "importPath": "mid-range.anyMimeSearch",
        "description": "mid-range.anyMimeSearch",
        "peekOfCode": "def get_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                # matches.append(os.path.join(root, filename))  # full path\n                matches.append(os.path.join(filename))  # just file name\n        if matches:\n            print(\"Found {} files:\".format(len(matches)))\n            output_files(matches)",
        "detail": "mid-range.anyMimeSearch",
        "documentation": {}
    },
    {
        "label": "output_files",
        "kind": 2,
        "importPath": "mid-range.anyMimeSearch",
        "description": "mid-range.anyMimeSearch",
        "peekOfCode": "def output_files(list_of_files):\n    for filename in list_of_files:\n        print(filename)\nif __name__ == \"__main__\":\n    get_file_names(PATH, PATTERN)",
        "detail": "mid-range.anyMimeSearch",
        "documentation": {}
    },
    {
        "label": "PATH",
        "kind": 5,
        "importPath": "mid-range.anyMimeSearch",
        "description": "mid-range.anyMimeSearch",
        "peekOfCode": "PATH = \"./\"\nPATTERN = \"*.\"\ndef get_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                # matches.append(os.path.join(root, filename))  # full path\n                matches.append(os.path.join(filename))  # just file name\n        if matches:",
        "detail": "mid-range.anyMimeSearch",
        "documentation": {}
    },
    {
        "label": "PATTERN",
        "kind": 5,
        "importPath": "mid-range.anyMimeSearch",
        "description": "mid-range.anyMimeSearch",
        "peekOfCode": "PATTERN = \"*.\"\ndef get_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                # matches.append(os.path.join(root, filename))  # full path\n                matches.append(os.path.join(filename))  # just file name\n        if matches:\n            print(\"Found {} files:\".format(len(matches)))",
        "detail": "mid-range.anyMimeSearch",
        "documentation": {}
    },
    {
        "label": "TerminalRootHandler",
        "kind": 6,
        "importPath": "mid-range.api_handlers",
        "description": "mid-range.api_handlers",
        "peekOfCode": "class TerminalRootHandler(APIHandler):\n    @web.authenticated\n    def get(self):\n        models = self.terminal_manager.list()\n        self.finish(json.dumps(models))\n    @web.authenticated\n    def post(self):\n        \"\"\"POST /terminals creates a new terminal and redirects to it\"\"\"\n        model = self.terminal_manager.create()\n        self.finish(json.dumps(model))",
        "detail": "mid-range.api_handlers",
        "documentation": {}
    },
    {
        "label": "TerminalHandler",
        "kind": 6,
        "importPath": "mid-range.api_handlers",
        "description": "mid-range.api_handlers",
        "peekOfCode": "class TerminalHandler(APIHandler):\n    SUPPORTED_METHODS = (\"GET\", \"DELETE\")\n    @web.authenticated\n    def get(self, name):\n        model = self.terminal_manager.get(name)\n        self.finish(json.dumps(model))\n    @web.authenticated\n    @gen.coroutine\n    def delete(self, name):\n        yield self.terminal_manager.terminate(name, force=True)",
        "detail": "mid-range.api_handlers",
        "documentation": {}
    },
    {
        "label": "clip",
        "kind": 5,
        "importPath": "mid-range.app",
        "description": "mid-range.app",
        "peekOfCode": "clip = VideoFileClip(\"FROZEN Full UK Trailer Official Disney UK.mp4\")\nclip.write_gif(\"output.gif\")",
        "detail": "mid-range.app",
        "documentation": {}
    },
    {
        "label": "user_cache_dir",
        "kind": 2,
        "importPath": "mid-range.appdirs",
        "description": "mid-range.appdirs",
        "peekOfCode": "def user_cache_dir(appname: str) -> str:\n    return _appdirs.user_cache_dir(appname, appauthor=False)\ndef user_config_dir(appname: str, roaming: bool = True) -> str:\n    path = _appdirs.user_config_dir(appname, appauthor=False, roaming=roaming)\n    if _appdirs.system == \"darwin\" and not os.path.isdir(path):\n        path = os.path.expanduser(\"~/.config/\")\n        if appname:\n            path = os.path.join(path, appname)\n    return path\n# for the discussion regarding site_config_dir locations",
        "detail": "mid-range.appdirs",
        "documentation": {}
    },
    {
        "label": "user_config_dir",
        "kind": 2,
        "importPath": "mid-range.appdirs",
        "description": "mid-range.appdirs",
        "peekOfCode": "def user_config_dir(appname: str, roaming: bool = True) -> str:\n    path = _appdirs.user_config_dir(appname, appauthor=False, roaming=roaming)\n    if _appdirs.system == \"darwin\" and not os.path.isdir(path):\n        path = os.path.expanduser(\"~/.config/\")\n        if appname:\n            path = os.path.join(path, appname)\n    return path\n# for the discussion regarding site_config_dir locations\n# see <https://github.com/pypa/pip/issues/1733>\ndef site_config_dirs(appname: str) -> List[str]:",
        "detail": "mid-range.appdirs",
        "documentation": {}
    },
    {
        "label": "site_config_dirs",
        "kind": 2,
        "importPath": "mid-range.appdirs",
        "description": "mid-range.appdirs",
        "peekOfCode": "def site_config_dirs(appname: str) -> List[str]:\n    dirval = _appdirs.site_config_dir(appname, appauthor=False, multipath=True)\n    if _appdirs.system not in [\"win32\", \"darwin\"]:\n        # always look in /etc directly as well\n        return dirval.split(os.pathsep) + [\"/etc\"]\n    return [dirval]",
        "detail": "mid-range.appdirs",
        "documentation": {}
    },
    {
        "label": "appendAndDelete",
        "kind": 2,
        "importPath": "mid-range.Append-and-Delete",
        "description": "mid-range.Append-and-Delete",
        "peekOfCode": "def appendAndDelete(s, t, k):\n    x = 0\n    if s == t:\n        return \"Yes\"\n    if k > (len(s) + len(t)):\n        return \"Yes\"\n    for i in range(min(len(s), len(t))):\n        if s[i] == t[i]:\n            if x == 0 and i == min(len(s), len(t)) - 1:\n                x = (len(s) - i) + (len(t) - i)",
        "detail": "mid-range.Append-and-Delete",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.Areaoftriangle",
        "description": "mid-range.Areaoftriangle",
        "peekOfCode": "a = 5\nb = 6\nc = 7\n# Uncomment below to take inputs from the user\n# a = float(input('Enter first side: '))\n# b = float(input('Enter second side: '))\n# c = float(input('Enter third side: '))\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n# calculate the area",
        "detail": "mid-range.Areaoftriangle",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.Areaoftriangle",
        "description": "mid-range.Areaoftriangle",
        "peekOfCode": "b = 6\nc = 7\n# Uncomment below to take inputs from the user\n# a = float(input('Enter first side: '))\n# b = float(input('Enter second side: '))\n# c = float(input('Enter third side: '))\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n# calculate the area\narea = (s * (s - a) * (s - b) * (s - c)) ** 0.5",
        "detail": "mid-range.Areaoftriangle",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.Areaoftriangle",
        "description": "mid-range.Areaoftriangle",
        "peekOfCode": "c = 7\n# Uncomment below to take inputs from the user\n# a = float(input('Enter first side: '))\n# b = float(input('Enter second side: '))\n# c = float(input('Enter third side: '))\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n# calculate the area\narea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\nprint(\"The area of the triangle is %0.2f\" % area)",
        "detail": "mid-range.Areaoftriangle",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.Areaoftriangle",
        "description": "mid-range.Areaoftriangle",
        "peekOfCode": "s = (a + b + c) / 2\n# calculate the area\narea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\nprint(\"The area of the triangle is %0.2f\" % area)",
        "detail": "mid-range.Areaoftriangle",
        "documentation": {}
    },
    {
        "label": "area",
        "kind": 5,
        "importPath": "mid-range.Areaoftriangle",
        "description": "mid-range.Areaoftriangle",
        "peekOfCode": "area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\nprint(\"The area of the triangle is %0.2f\" % area)",
        "detail": "mid-range.Areaoftriangle",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.Area_of_triangle",
        "description": "mid-range.Area_of_triangle",
        "peekOfCode": "a = 5\nb = 6\nc = 7\n# a = float(input('Enter first side: '))\n# b = float(input('Enter second side: '))\n# c = float(input('Enter third side: '))\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n# calculate the area\narea = (s * (s - a) * (s - b) * (s - c)) ** 0.5",
        "detail": "mid-range.Area_of_triangle",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.Area_of_triangle",
        "description": "mid-range.Area_of_triangle",
        "peekOfCode": "b = 6\nc = 7\n# a = float(input('Enter first side: '))\n# b = float(input('Enter second side: '))\n# c = float(input('Enter third side: '))\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n# calculate the area\narea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\nprint(\"The area of the triangle is %0.2f\" % area)",
        "detail": "mid-range.Area_of_triangle",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.Area_of_triangle",
        "description": "mid-range.Area_of_triangle",
        "peekOfCode": "c = 7\n# a = float(input('Enter first side: '))\n# b = float(input('Enter second side: '))\n# c = float(input('Enter third side: '))\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n# calculate the area\narea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\nprint(\"The area of the triangle is %0.2f\" % area)",
        "detail": "mid-range.Area_of_triangle",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.Area_of_triangle",
        "description": "mid-range.Area_of_triangle",
        "peekOfCode": "s = (a + b + c) / 2\n# calculate the area\narea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\nprint(\"The area of the triangle is %0.2f\" % area)",
        "detail": "mid-range.Area_of_triangle",
        "documentation": {}
    },
    {
        "label": "area",
        "kind": 5,
        "importPath": "mid-range.Area_of_triangle",
        "description": "mid-range.Area_of_triangle",
        "peekOfCode": "area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\nprint(\"The area of the triangle is %0.2f\" % area)",
        "detail": "mid-range.Area_of_triangle",
        "documentation": {}
    },
    {
        "label": "areEquallyStrong",
        "kind": 2,
        "importPath": "mid-range.are_equally_strong",
        "description": "mid-range.are_equally_strong",
        "peekOfCode": "def areEquallyStrong(yourLeft, yourRight, friendsLeft, friendsRight):\n    myStrongestArm = max(yourLeft, yourRight)\n    myWeakestArm = min(yourLeft, yourRight)\n    friendStrongestArm = max(friendsLeft, friendsRight)\n    friendWeakestArm = min(friendsLeft, friendsRight)\n    if myStrongestArm == friendStrongestArm and myWeakestArm == friendWeakestArm:\n        return True\n    else:\n        return False",
        "detail": "mid-range.are_equally_strong",
        "documentation": {}
    },
    {
        "label": "areSimilar",
        "kind": 2,
        "importPath": "mid-range.are_similar",
        "description": "mid-range.are_similar",
        "peekOfCode": "def areSimilar(a, b):\n    for i in range(len(a)):\n        sorted_a, sorted_b = sorted(a), sorted(b)\n        if sorted_a != sorted_b:\n            return False\n        inversions = 0\n        for i in range(len(a)):\n            if a[i] != b[i]:\n                inversions += 1\n        return inversions == 2 or inversions == 0",
        "detail": "mid-range.are_similar",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_arguments",
        "description": "mid-range.argparse_arguments",
        "peekOfCode": "parser = argparse.ArgumentParser(description=\"Example with nonoptional arguments\")\nparser.add_argument(\"count\", action=\"store\", type=int)\nparser.add_argument(\"units\", action=\"store\")\nprint(parser.parse_args())",
        "detail": "mid-range.argparse_arguments",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_choices",
        "description": "mid-range.argparse_choices",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument(\"--mode\", choices=(\"read-only\", \"read-write\"))\nprint(parser.parse_args())",
        "detail": "mid-range.argparse_choices",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_conflict_handler_resolve",
        "description": "mid-range.argparse_conflict_handler_resolve",
        "peekOfCode": "parser = argparse.ArgumentParser(conflict_handler=\"resolve\")\nparser.add_argument(\"-a\", action=\"store\")\nparser.add_argument(\"-b\", action=\"store\", help=\"Short alone\")\nparser.add_argument(\"--long-b\", \"-b\", action=\"store\", help=\"Long and short together\")\nprint(parser.parse_args([\"-h\"]))",
        "detail": "mid-range.argparse_conflict_handler_resolve",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_conflict_handler_resolve2",
        "description": "mid-range.argparse_conflict_handler_resolve2",
        "peekOfCode": "parser = argparse.ArgumentParser(conflict_handler=\"resolve\")\nparser.add_argument(\"-a\", action=\"store\")\nparser.add_argument(\"--long-b\", \"-b\", action=\"store\", help=\"Long and short together\")\nparser.add_argument(\"-b\", action=\"store\", help=\"Short alone\")\nprint(parser.parse_args([\"-h\"]))",
        "detail": "mid-range.argparse_conflict_handler_resolve2",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_custom_help",
        "description": "mid-range.argparse_custom_help",
        "peekOfCode": "parser = argparse.ArgumentParser(add_help=True)\nparser.add_argument(\"-a\", action=\"store_true\", default=False)\nparser.add_argument(\"-b\", action=\"store\", dest=\"b\")\nparser.add_argument(\"-c\", action=\"store\", dest=\"c\", type=int)\nprint(\"print_usage output:\")\nparser.print_usage()\nprint()\nprint(\"print_help output:\")\nparser.print_help()",
        "detail": "mid-range.argparse_custom_help",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_default_grouping",
        "description": "mid-range.argparse_default_grouping",
        "peekOfCode": "parser = argparse.ArgumentParser(description=\"Short sample app\")\nparser.add_argument(\"--optional\", action=\"store_true\", default=False)\nparser.add_argument(\"positional\", action=\"store\")\nprint(parser.parse_args())",
        "detail": "mid-range.argparse_default_grouping",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_FileType",
        "description": "mid-range.argparse_FileType",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument(\"-i\", metavar=\"in-file\", type=argparse.FileType(\"rt\"))\nparser.add_argument(\"-o\", metavar=\"out-file\", type=argparse.FileType(\"wt\"))\ntry:\n    results = parser.parse_args()\n    print(\"Input file:\", results.i)\n    print(\"Output file:\", results.o)\nexcept IOError as msg:\n    parser.error(str(msg))",
        "detail": "mid-range.argparse_FileType",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_fromfile_prefix_chars",
        "description": "mid-range.argparse_fromfile_prefix_chars",
        "peekOfCode": "parser = argparse.ArgumentParser(\n    description=\"Short sample app\", fromfile_prefix_chars=\"@\"\n)\nparser.add_argument(\"-a\", action=\"store_true\", default=False)\nparser.add_argument(\"-b\", action=\"store\", dest=\"b\")\nparser.add_argument(\"-c\", action=\"store\", dest=\"c\", type=int)\nprint(parser.parse_args([\"@argparse_fromfile_prefix_chars.txt\"]))",
        "detail": "mid-range.argparse_fromfile_prefix_chars",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_long",
        "description": "mid-range.argparse_long",
        "peekOfCode": "parser = argparse.ArgumentParser(description=\"Example with long option names\")\nparser.add_argument(\"--noarg\", action=\"store_true\", default=False)\nparser.add_argument(\"--witharg\", action=\"store\", dest=\"witharg\")\nparser.add_argument(\"--witharg2\", action=\"store\", dest=\"witharg2\", type=int)\nprint(parser.parse_args([\"--noarg\", \"--witharg\", \"val\", \"--witharg2=3\"]))",
        "detail": "mid-range.argparse_long",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_metavar_type_help_formatter",
        "description": "mid-range.argparse_metavar_type_help_formatter",
        "peekOfCode": "parser = argparse.ArgumentParser(\n    add_help=True, formatter_class=argparse.MetavarTypeHelpFormatter\n)\nparser.add_argument(\"-i\", type=int, dest=\"notshown1\")\nparser.add_argument(\"-f\", type=float, dest=\"notshown2\")\nparser.print_help()",
        "detail": "mid-range.argparse_metavar_type_help_formatter",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_mutually_exclusive",
        "description": "mid-range.argparse_mutually_exclusive",
        "peekOfCode": "parser = argparse.ArgumentParser()\ngroup = parser.add_mutually_exclusive_group()\ngroup.add_argument(\"-a\", action=\"store_true\")\ngroup.add_argument(\"-b\", action=\"store_true\")\nprint(parser.parse_args())",
        "detail": "mid-range.argparse_mutually_exclusive",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 5,
        "importPath": "mid-range.argparse_mutually_exclusive",
        "description": "mid-range.argparse_mutually_exclusive",
        "peekOfCode": "group = parser.add_mutually_exclusive_group()\ngroup.add_argument(\"-a\", action=\"store_true\")\ngroup.add_argument(\"-b\", action=\"store_true\")\nprint(parser.parse_args())",
        "detail": "mid-range.argparse_mutually_exclusive",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_nargs",
        "description": "mid-range.argparse_nargs",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument(\"--three\", nargs=3)\nparser.add_argument(\"--optional\", nargs=\"?\")\nparser.add_argument(\"--all\", nargs=\"*\", dest=\"all\")\nparser.add_argument(\"--one-or-more\", nargs=\"+\")\nprint(parser.parse_args())",
        "detail": "mid-range.argparse_nargs",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_parent_base",
        "description": "mid-range.argparse_parent_base",
        "peekOfCode": "parser = argparse.ArgumentParser(add_help=False)\nparser.add_argument(\"--user\", action=\"store\")\nparser.add_argument(\"--password\", action=\"store\")",
        "detail": "mid-range.argparse_parent_base",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_parent_with_group",
        "description": "mid-range.argparse_parent_with_group",
        "peekOfCode": "parser = argparse.ArgumentParser(add_help=False)\ngroup = parser.add_argument_group(\"authentication\")\ngroup.add_argument(\"--user\", action=\"store\")\ngroup.add_argument(\"--password\", action=\"store\")",
        "detail": "mid-range.argparse_parent_with_group",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 5,
        "importPath": "mid-range.argparse_parent_with_group",
        "description": "mid-range.argparse_parent_with_group",
        "peekOfCode": "group = parser.add_argument_group(\"authentication\")\ngroup.add_argument(\"--user\", action=\"store\")\ngroup.add_argument(\"--password\", action=\"store\")",
        "detail": "mid-range.argparse_parent_with_group",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_prefix_chars",
        "description": "mid-range.argparse_prefix_chars",
        "peekOfCode": "parser = argparse.ArgumentParser(\n    description=\"Change the option prefix characters\", prefix_chars=\"-+/\"\n)\nparser.add_argument(\"-a\", action=\"store_false\", default=None, help=\"Turn A off\")\nparser.add_argument(\"+a\", action=\"store_true\", default=None, help=\"Turn A on\")\nparser.add_argument(\"//noarg\", \"++noarg\", action=\"store_true\", default=False)\nprint(parser.parse_args())",
        "detail": "mid-range.argparse_prefix_chars",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_raw_description_help_formatter",
        "description": "mid-range.argparse_raw_description_help_formatter",
        "peekOfCode": "parser = argparse.ArgumentParser(\n    add_help=True,\n    formatter_class=argparse.RawDescriptionHelpFormatter,\n    description=\"\"\"\n    description\n        not\n           wrapped\"\"\",\n    epilog=\"\"\"\n    epilog\n      not",
        "detail": "mid-range.argparse_raw_description_help_formatter",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_raw_text_help_formatter",
        "description": "mid-range.argparse_raw_text_help_formatter",
        "peekOfCode": "parser = argparse.ArgumentParser(\n    add_help=True,\n    formatter_class=argparse.RawTextHelpFormatter,\n    description=\"\"\"\n    description\n        not\n           wrapped\"\"\",\n    epilog=\"\"\"\n    epilog\n      not",
        "detail": "mid-range.argparse_raw_text_help_formatter",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_short",
        "description": "mid-range.argparse_short",
        "peekOfCode": "parser = argparse.ArgumentParser(description=\"Short sample app\")\nparser.add_argument(\"-a\", action=\"store_true\", default=False)\nparser.add_argument(\"-b\", action=\"store\", dest=\"b\")\nparser.add_argument(\"-c\", action=\"store\", dest=\"c\", type=int)\nprint(parser.parse_args([\"-a\", \"-bval\", \"-c\", \"3\"]))",
        "detail": "mid-range.argparse_short",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_subparsers",
        "description": "mid-range.argparse_subparsers",
        "peekOfCode": "parser = argparse.ArgumentParser()\nsubparsers = parser.add_subparsers(help=\"commands\")\n# A list command\nlist_parser = subparsers.add_parser(\"list\", help=\"List contents\")\nlist_parser.add_argument(\"dirname\", action=\"store\", help=\"Directory to list\")\n# A create command\ncreate_parser = subparsers.add_parser(\"create\", help=\"Create a directory\")\ncreate_parser.add_argument(\"dirname\", action=\"store\", help=\"New directory to create\")\ncreate_parser.add_argument(\n    \"--read-only\",",
        "detail": "mid-range.argparse_subparsers",
        "documentation": {}
    },
    {
        "label": "subparsers",
        "kind": 5,
        "importPath": "mid-range.argparse_subparsers",
        "description": "mid-range.argparse_subparsers",
        "peekOfCode": "subparsers = parser.add_subparsers(help=\"commands\")\n# A list command\nlist_parser = subparsers.add_parser(\"list\", help=\"List contents\")\nlist_parser.add_argument(\"dirname\", action=\"store\", help=\"Directory to list\")\n# A create command\ncreate_parser = subparsers.add_parser(\"create\", help=\"Create a directory\")\ncreate_parser.add_argument(\"dirname\", action=\"store\", help=\"New directory to create\")\ncreate_parser.add_argument(\n    \"--read-only\",\n    default=False,",
        "detail": "mid-range.argparse_subparsers",
        "documentation": {}
    },
    {
        "label": "list_parser",
        "kind": 5,
        "importPath": "mid-range.argparse_subparsers",
        "description": "mid-range.argparse_subparsers",
        "peekOfCode": "list_parser = subparsers.add_parser(\"list\", help=\"List contents\")\nlist_parser.add_argument(\"dirname\", action=\"store\", help=\"Directory to list\")\n# A create command\ncreate_parser = subparsers.add_parser(\"create\", help=\"Create a directory\")\ncreate_parser.add_argument(\"dirname\", action=\"store\", help=\"New directory to create\")\ncreate_parser.add_argument(\n    \"--read-only\",\n    default=False,\n    action=\"store_true\",\n    help=\"Set permissions to prevent writing to the directory\",",
        "detail": "mid-range.argparse_subparsers",
        "documentation": {}
    },
    {
        "label": "create_parser",
        "kind": 5,
        "importPath": "mid-range.argparse_subparsers",
        "description": "mid-range.argparse_subparsers",
        "peekOfCode": "create_parser = subparsers.add_parser(\"create\", help=\"Create a directory\")\ncreate_parser.add_argument(\"dirname\", action=\"store\", help=\"New directory to create\")\ncreate_parser.add_argument(\n    \"--read-only\",\n    default=False,\n    action=\"store_true\",\n    help=\"Set permissions to prevent writing to the directory\",\n)\n# A delete command\ndelete_parser = subparsers.add_parser(\"delete\", help=\"Remove a directory\")",
        "detail": "mid-range.argparse_subparsers",
        "documentation": {}
    },
    {
        "label": "delete_parser",
        "kind": 5,
        "importPath": "mid-range.argparse_subparsers",
        "description": "mid-range.argparse_subparsers",
        "peekOfCode": "delete_parser = subparsers.add_parser(\"delete\", help=\"Remove a directory\")\ndelete_parser.add_argument(\"dirname\", action=\"store\", help=\"The directory to remove\")\ndelete_parser.add_argument(\n    \"--recursive\",\n    \"-r\",\n    default=False,\n    action=\"store_true\",\n    help=\"Remove the contents of the directory, too\",\n)\nprint(parser.parse_args())",
        "detail": "mid-range.argparse_subparsers",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_type",
        "description": "mid-range.argparse_type",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument(\"-i\", type=int)\nparser.add_argument(\"-f\", type=float)\nparser.add_argument(\"--file\", type=open)\ntry:\n    print(parser.parse_args())\nexcept IOError as msg:\n    parser.error(str(msg))",
        "detail": "mid-range.argparse_type",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_uses_parent",
        "description": "mid-range.argparse_uses_parent",
        "peekOfCode": "parser = argparse.ArgumentParser(parents=[argparse_parent_base.parser])\nparser.add_argument(\"--local-arg\", action=\"store_true\", default=False)\nprint(parser.parse_args())",
        "detail": "mid-range.argparse_uses_parent",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_uses_parent_with_group",
        "description": "mid-range.argparse_uses_parent_with_group",
        "peekOfCode": "parser = argparse.ArgumentParser(parents=[argparse_parent_with_group.parser])\nparser.add_argument(\"--local-arg\", action=\"store_true\", default=False)\nprint(parser.parse_args())",
        "detail": "mid-range.argparse_uses_parent_with_group",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_without_help",
        "description": "mid-range.argparse_without_help",
        "peekOfCode": "parser = argparse.ArgumentParser(add_help=False)\nparser.add_argument(\"-a\", action=\"store_true\", default=False)\nparser.add_argument(\"-b\", action=\"store\", dest=\"b\")\nparser.add_argument(\"-c\", action=\"store\", dest=\"c\", type=int)\nprint(parser.parse_args())",
        "detail": "mid-range.argparse_without_help",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_with_help",
        "description": "mid-range.argparse_with_help",
        "peekOfCode": "parser = argparse.ArgumentParser(add_help=True)\nparser.add_argument(\"-a\", action=\"store_true\", default=False)\nparser.add_argument(\"-b\", action=\"store\", dest=\"b\")\nparser.add_argument(\"-c\", action=\"store\", dest=\"c\", type=int)\nprint(parser.parse_args())",
        "detail": "mid-range.argparse_with_help",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.argparse_with_shlex",
        "description": "mid-range.argparse_with_shlex",
        "peekOfCode": "parser = argparse.ArgumentParser(description=\"Short sample app\")\nparser.add_argument(\"-a\", action=\"store_true\", default=False)\nparser.add_argument(\"-b\", action=\"store\", dest=\"b\")\nparser.add_argument(\"-c\", action=\"store\", dest=\"c\", type=int)\nconfig = ConfigParser()\nconfig.read(\"argparse_with_shlex.ini\")\nconfig_value = config.get(\"cli\", \"options\")\nprint(\"Config  :\", config_value)\nargument_list = shlex.split(config_value)\nprint(\"Arg List:\", argument_list)",
        "detail": "mid-range.argparse_with_shlex",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "mid-range.argparse_with_shlex",
        "description": "mid-range.argparse_with_shlex",
        "peekOfCode": "config = ConfigParser()\nconfig.read(\"argparse_with_shlex.ini\")\nconfig_value = config.get(\"cli\", \"options\")\nprint(\"Config  :\", config_value)\nargument_list = shlex.split(config_value)\nprint(\"Arg List:\", argument_list)\nprint(\"Results :\", parser.parse_args(argument_list))",
        "detail": "mid-range.argparse_with_shlex",
        "documentation": {}
    },
    {
        "label": "config_value",
        "kind": 5,
        "importPath": "mid-range.argparse_with_shlex",
        "description": "mid-range.argparse_with_shlex",
        "peekOfCode": "config_value = config.get(\"cli\", \"options\")\nprint(\"Config  :\", config_value)\nargument_list = shlex.split(config_value)\nprint(\"Arg List:\", argument_list)\nprint(\"Results :\", parser.parse_args(argument_list))",
        "detail": "mid-range.argparse_with_shlex",
        "documentation": {}
    },
    {
        "label": "argument_list",
        "kind": 5,
        "importPath": "mid-range.argparse_with_shlex",
        "description": "mid-range.argparse_with_shlex",
        "peekOfCode": "argument_list = shlex.split(config_value)\nprint(\"Arg List:\", argument_list)\nprint(\"Results :\", parser.parse_args(argument_list))",
        "detail": "mid-range.argparse_with_shlex",
        "documentation": {}
    },
    {
        "label": "add_numbers",
        "kind": 2,
        "importPath": "mid-range.args_example",
        "description": "mid-range.args_example",
        "peekOfCode": "def add_numbers(*args):\n    res = 0\n    for i in args:\n        res += i\n    return res\n# Quick Test\nt1 = add_numbers(123, 435, 876, 12, 54, 76, 78954, 89, 87, 56, 78, 98, 56, 32, 87)\nif t1 == sum([123, 435, 876, 12, 54, 76, 78954, 89, 87, 56, 78, 98, 56, 32, 87]):\n    print(\"Sum: \" + str(t1))\nelse:",
        "detail": "mid-range.args_example",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "mid-range.args_example",
        "description": "mid-range.args_example",
        "peekOfCode": "t1 = add_numbers(123, 435, 876, 12, 54, 76, 78954, 89, 87, 56, 78, 98, 56, 32, 87)\nif t1 == sum([123, 435, 876, 12, 54, 76, 78954, 89, 87, 56, 78, 98, 56, 32, 87]):\n    print(\"Sum: \" + str(t1))\nelse:\n    print(\"Something went wrong!\")",
        "detail": "mid-range.args_example",
        "documentation": {}
    },
    {
        "label": "squared",
        "kind": 2,
        "importPath": "mid-range.args_example_1",
        "description": "mid-range.args_example_1",
        "peekOfCode": "def squared(*params):\n    for arg in params:\n        yield ((arg, arg % 2 == 0))\n# Quick Test\nprint(\"Divisibility Test(by 2): \")\nfor n, bool_ in squared(12, 13, 34, 4576, 234536, 2341):\n    if bool_:\n        print(\"  [\" + str(n) + \"] -> is divisible by 2!\")\n    else:\n        print(\"  [\" + str(n) + \"] -> is NOT divisible by 2!\")",
        "detail": "mid-range.args_example_1",
        "documentation": {}
    },
    {
        "label": "check_input_args",
        "kind": 2,
        "importPath": "mid-range.argv",
        "description": "mid-range.argv",
        "peekOfCode": "def check_input_args(args):\n    counter = 0\n    for i in args:\n        counter += 1\n    while True:\n        try:\n            if counter != 4:\n                break\n        except ValueError:\n            print('arguments amount is wrong')",
        "detail": "mid-range.argv",
        "documentation": {}
    },
    {
        "label": "check_input_args",
        "kind": 2,
        "importPath": "mid-range.argv",
        "description": "mid-range.argv",
        "peekOfCode": "def check_input_args(*args):\n    if len(args) > 4:\n        print(\"Passed args are more than 4.\")\n        return\n    # check each file\n    for file in sys.argv[0:3]:\n        if not os.path.isfile(file):\n            raise ValueError\n            return",
        "detail": "mid-range.argv",
        "documentation": {}
    },
    {
        "label": "arithmetic_arranger",
        "kind": 2,
        "importPath": "mid-range.arithmetic_arranger",
        "description": "mid-range.arithmetic_arranger",
        "peekOfCode": "def arithmetic_arranger(problems, calc=False):\n    \"\"\"\n    :type problems: list\n    \"\"\"\n    if len(problems) > 5:\n        return ERR_SIZE\n    rex = re.compile(r\"^[0-9]{1,4}$\")\n    formated = []\n    for p in problems:\n        [a, op, b] = p.split()",
        "detail": "mid-range.arithmetic_arranger",
        "documentation": {}
    },
    {
        "label": "fmt",
        "kind": 2,
        "importPath": "mid-range.arithmetic_arranger",
        "description": "mid-range.arithmetic_arranger",
        "peekOfCode": "def fmt(a, op, b, calc):\n    x = int(a)\n    y = int(b)\n    r = x + y if op == \"+\" else x - y\n    base = r if r > 0 else 0 - r\n    n = max([len(a), len(b), len(str(base))]) if calc else max([len(a), len(b)])\n    r = str(r)\n    n += 2  # for the op and a space\n    res = [a.rjust(n), op + \" \" + b.rjust(n - 2), \"-\" * n]\n    if calc:",
        "detail": "mid-range.arithmetic_arranger",
        "documentation": {}
    },
    {
        "label": "ERR_SIZE",
        "kind": 5,
        "importPath": "mid-range.arithmetic_arranger",
        "description": "mid-range.arithmetic_arranger",
        "peekOfCode": "ERR_SIZE = \"Error: Too many problems.\"\nERR_OP = \"Error: Operator must be '+' or '-'.\"\nERR_NUM = \"Error: Numbers must only contain digits.\"\nERR_LEN = \"Error: Numbers cannot be more than four digits.\"\ndef arithmetic_arranger(problems, calc=False):\n    \"\"\"\n    :type problems: list\n    \"\"\"\n    if len(problems) > 5:\n        return ERR_SIZE",
        "detail": "mid-range.arithmetic_arranger",
        "documentation": {}
    },
    {
        "label": "ERR_OP",
        "kind": 5,
        "importPath": "mid-range.arithmetic_arranger",
        "description": "mid-range.arithmetic_arranger",
        "peekOfCode": "ERR_OP = \"Error: Operator must be '+' or '-'.\"\nERR_NUM = \"Error: Numbers must only contain digits.\"\nERR_LEN = \"Error: Numbers cannot be more than four digits.\"\ndef arithmetic_arranger(problems, calc=False):\n    \"\"\"\n    :type problems: list\n    \"\"\"\n    if len(problems) > 5:\n        return ERR_SIZE\n    rex = re.compile(r\"^[0-9]{1,4}$\")",
        "detail": "mid-range.arithmetic_arranger",
        "documentation": {}
    },
    {
        "label": "ERR_NUM",
        "kind": 5,
        "importPath": "mid-range.arithmetic_arranger",
        "description": "mid-range.arithmetic_arranger",
        "peekOfCode": "ERR_NUM = \"Error: Numbers must only contain digits.\"\nERR_LEN = \"Error: Numbers cannot be more than four digits.\"\ndef arithmetic_arranger(problems, calc=False):\n    \"\"\"\n    :type problems: list\n    \"\"\"\n    if len(problems) > 5:\n        return ERR_SIZE\n    rex = re.compile(r\"^[0-9]{1,4}$\")\n    formated = []",
        "detail": "mid-range.arithmetic_arranger",
        "documentation": {}
    },
    {
        "label": "ERR_LEN",
        "kind": 5,
        "importPath": "mid-range.arithmetic_arranger",
        "description": "mid-range.arithmetic_arranger",
        "peekOfCode": "ERR_LEN = \"Error: Numbers cannot be more than four digits.\"\ndef arithmetic_arranger(problems, calc=False):\n    \"\"\"\n    :type problems: list\n    \"\"\"\n    if len(problems) > 5:\n        return ERR_SIZE\n    rex = re.compile(r\"^[0-9]{1,4}$\")\n    formated = []\n    for p in problems:",
        "detail": "mid-range.arithmetic_arranger",
        "documentation": {}
    },
    {
        "label": "arithmeticExpression",
        "kind": 2,
        "importPath": "mid-range.arithmetic_expression",
        "description": "mid-range.arithmetic_expression",
        "peekOfCode": "def arithmeticExpression(a, b, c):\n    \"\"\"\n    Consider an arithmetic expression of the form a#b=c. \n    Check whether it is possible to replace # with one of \n    the four signs: +, -, * or / to obtain a correct\n    \"\"\"\n    return (\n        True if (a + b == c) or (a - b == c) or (a * b == c) or (a / b == c) else False\n    )",
        "detail": "mid-range.arithmetic_expression",
        "documentation": {}
    },
    {
        "label": "arithmetic_p_sequence_builder",
        "kind": 2,
        "importPath": "mid-range.arithmetic_progression_builder",
        "description": "mid-range.arithmetic_progression_builder",
        "peekOfCode": "def arithmetic_p_sequence_builder(a, d, n_last):\n    # To generate an A.P. length should be\n    # greater than or equal to 1\n    if n_last < 1:\n        return -1\n    seq = []\n    # Every item is obtained by\n    # applying the general term formula\n    for n in range(1, n_last + 1):\n        seq.append(a + (n - 1) * d)",
        "detail": "mid-range.arithmetic_progression_builder",
        "documentation": {}
    },
    {
        "label": "sumOfSeries",
        "kind": 2,
        "importPath": "mid-range.ARKA",
        "description": "mid-range.ARKA",
        "peekOfCode": "def sumOfSeries(n):\n    x = n * (n + 1) / 2\n    return (int)(x * x)\n# Driver Function\nn = 5\nprint(sumOfSeries(n))",
        "detail": "mid-range.ARKA",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.ARKA",
        "description": "mid-range.ARKA",
        "peekOfCode": "n = 5\nprint(sumOfSeries(n))",
        "detail": "mid-range.ARKA",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "mid-range.Armstrong number",
        "description": "mid-range.Armstrong number",
        "peekOfCode": "num = int(input(\"enter 1-digit number:\"))\nf = num\nsum = 0\nwhile f > 0:\n    a = f % 10\n    f = int(f / 10)\n    sum = sum + (a ** 3)\nif sum == num:\n    print(\"it is an armstrong number:\", num)\nelse:",
        "detail": "mid-range.Armstrong number",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "mid-range.Armstrong number",
        "description": "mid-range.Armstrong number",
        "peekOfCode": "f = num\nsum = 0\nwhile f > 0:\n    a = f % 10\n    f = int(f / 10)\n    sum = sum + (a ** 3)\nif sum == num:\n    print(\"it is an armstrong number:\", num)\nelse:\n    print(\"it is not an armstrong number:\", num)",
        "detail": "mid-range.Armstrong number",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 5,
        "importPath": "mid-range.Armstrong number",
        "description": "mid-range.Armstrong number",
        "peekOfCode": "sum = 0\nwhile f > 0:\n    a = f % 10\n    f = int(f / 10)\n    sum = sum + (a ** 3)\nif sum == num:\n    print(\"it is an armstrong number:\", num)\nelse:\n    print(\"it is not an armstrong number:\", num)",
        "detail": "mid-range.Armstrong number",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "mid-range.armstrongnumber",
        "description": "mid-range.armstrongnumber",
        "peekOfCode": "num = int(input(\"Enter a number: \"))\n# initialize sum\nsum = 0\n# find the sum of the cube of each digit\ntemp = num\nwhile temp > 0:\n    digit = temp % 10\n    sum += digit ** 3\n    temp //= 10\n# display the result",
        "detail": "mid-range.armstrongnumber",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 5,
        "importPath": "mid-range.armstrongnumber",
        "description": "mid-range.armstrongnumber",
        "peekOfCode": "sum = 0\n# find the sum of the cube of each digit\ntemp = num\nwhile temp > 0:\n    digit = temp % 10\n    sum += digit ** 3\n    temp //= 10\n# display the result\nif num == sum:\n    print(num, \"is an Armstrong number\")",
        "detail": "mid-range.armstrongnumber",
        "documentation": {}
    },
    {
        "label": "temp",
        "kind": 5,
        "importPath": "mid-range.armstrongnumber",
        "description": "mid-range.armstrongnumber",
        "peekOfCode": "temp = num\nwhile temp > 0:\n    digit = temp % 10\n    sum += digit ** 3\n    temp //= 10\n# display the result\nif num == sum:\n    print(num, \"is an Armstrong number\")\nelse:\n    print(num, \"is not an Armstrong number\")",
        "detail": "mid-range.armstrongnumber",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "mid-range.armstrong_number",
        "description": "mid-range.armstrong_number",
        "peekOfCode": "num = int(input(\"Enter a number:\"))\nsum = 0\ntemp = num\nwhile temp > 0:\n    digit = temp % 10\n    sum += digit ** 3\n    temp //= 10\nif num == sum:\n    print(num, \"is an Armstrong number\")\nelse:",
        "detail": "mid-range.armstrong_number",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 5,
        "importPath": "mid-range.armstrong_number",
        "description": "mid-range.armstrong_number",
        "peekOfCode": "sum = 0\ntemp = num\nwhile temp > 0:\n    digit = temp % 10\n    sum += digit ** 3\n    temp //= 10\nif num == sum:\n    print(num, \"is an Armstrong number\")\nelse:\n    print(num, \"is not an Armstrong number\")",
        "detail": "mid-range.armstrong_number",
        "documentation": {}
    },
    {
        "label": "temp",
        "kind": 5,
        "importPath": "mid-range.armstrong_number",
        "description": "mid-range.armstrong_number",
        "peekOfCode": "temp = num\nwhile temp > 0:\n    digit = temp % 10\n    sum += digit ** 3\n    temp //= 10\nif num == sum:\n    print(num, \"is an Armstrong number\")\nelse:\n    print(num, \"is not an Armstrong number\")",
        "detail": "mid-range.armstrong_number",
        "documentation": {}
    },
    {
        "label": "transform_array",
        "kind": 2,
        "importPath": "mid-range.array",
        "description": "mid-range.array",
        "peekOfCode": "def transform_array(array, f):\n    \"\"\"Args; 2D array e.g. [[2,2],[2,2]],\n    f = function e.g lambda x: x*2\n    return [[4,4], [4,4]]\"\"\"\n    height = len(array)\n    width = len(array[0])\n    for col in range(width):\n        for row in range(height):\n            val = array[row][col]\n            array[row][col] = f(val)",
        "detail": "mid-range.array",
        "documentation": {}
    },
    {
        "label": "num_multiply",
        "kind": 2,
        "importPath": "mid-range.array",
        "description": "mid-range.array",
        "peekOfCode": "def num_multiply(array, n):\n    \"\"\"Args; array - 2d Array [[2,2],[2,2]], n = number to\n    mulitply with, just want to change the array\"\"\"\n    def num2(x):\n        return n * x\n    # return num_multiply(array, n) ?\n    return transform_array(array, num2)\n# I just want to change my array\n# TEST\narray = [[1, 1], [-1, -1]]",
        "detail": "mid-range.array",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "mid-range.array",
        "description": "mid-range.array",
        "peekOfCode": "array = [[1, 1], [-1, -1]]\nn = 2\nprint(num_multiply(array, n))\n# Expected changed list is [[2,2], [-2,2]]",
        "detail": "mid-range.array",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.array",
        "description": "mid-range.array",
        "peekOfCode": "n = 2\nprint(num_multiply(array, n))\n# Expected changed list is [[2,2], [-2,2]]",
        "detail": "mid-range.array",
        "documentation": {}
    },
    {
        "label": "arrayChange",
        "kind": 2,
        "importPath": "mid-range.arrayChange",
        "description": "mid-range.arrayChange",
        "peekOfCode": "def arrayChange(inputArray):\n    moves = 0\n    for i in range(len(inputArray) - 1):\n        left = inputArray[i]\n        right = inputArray[i + 1]\n        if left >= right:\n            tmp_moves = left - right + 1\n            inputArray[i + 1] += tmp_moves\n            moves += tmp_moves\n    return moves",
        "detail": "mid-range.arrayChange",
        "documentation": {}
    },
    {
        "label": "L,",
        "kind": 5,
        "importPath": "mid-range.arrayConsecutive",
        "description": "mid-range.arrayConsecutive",
        "peekOfCode": "L, = eval(dir()[0])\ns = 0\nwhile len(L) > 1:\n    L = (\n        numpy.add(L[:-1:2], L[1::2])\n        if s % 2 == 0\n        else numpy.multiply(L[:-1:2], L[1::2])\n    )\n    s += 1\nreturn L[0]",
        "detail": "mid-range.arrayConsecutive",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.arrayConsecutive",
        "description": "mid-range.arrayConsecutive",
        "peekOfCode": "s = 0\nwhile len(L) > 1:\n    L = (\n        numpy.add(L[:-1:2], L[1::2])\n        if s % 2 == 0\n        else numpy.multiply(L[:-1:2], L[1::2])\n    )\n    s += 1\nreturn L[0]",
        "detail": "mid-range.arrayConsecutive",
        "documentation": {}
    },
    {
        "label": "L,",
        "kind": 5,
        "importPath": "mid-range.arrayConversion",
        "description": "mid-range.arrayConversion",
        "peekOfCode": "L, = eval(dir()[0])\ns = 0\nwhile len(L) > 1:\n    L = (\n        numpy.add(L[:-1:2], L[1::2])\n        if s % 2 == 0\n        else numpy.multiply(L[:-1:2], L[1::2])\n    )\n    s += 1\nreturn L[0]",
        "detail": "mid-range.arrayConversion",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.arrayConversion",
        "description": "mid-range.arrayConversion",
        "peekOfCode": "s = 0\nwhile len(L) > 1:\n    L = (\n        numpy.add(L[:-1:2], L[1::2])\n        if s % 2 == 0\n        else numpy.multiply(L[:-1:2], L[1::2])\n    )\n    s += 1\nreturn L[0]",
        "detail": "mid-range.arrayConversion",
        "documentation": {}
    },
    {
        "label": "areSimilar",
        "kind": 2,
        "importPath": "mid-range.arraysAreSimilar",
        "description": "mid-range.arraysAreSimilar",
        "peekOfCode": "def areSimilar(a, b):\n    left = None\n    right = None\n    areSimilar = True\n    mism = 0\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            mism += 1\n        else:\n            continue",
        "detail": "mid-range.arraysAreSimilar",
        "documentation": {}
    },
    {
        "label": "initializeStack",
        "kind": 2,
        "importPath": "mid-range.arrayStack",
        "description": "mid-range.arrayStack",
        "peekOfCode": "def initializeStack():\n    stack = []\n    return stack\ndef isEmpty(stack):\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef pop(stack):\n    if isEmpty(stack):",
        "detail": "mid-range.arrayStack",
        "documentation": {}
    },
    {
        "label": "isEmpty",
        "kind": 2,
        "importPath": "mid-range.arrayStack",
        "description": "mid-range.arrayStack",
        "peekOfCode": "def isEmpty(stack):\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef pop(stack):\n    if isEmpty(stack):\n        return str(-maxsize - 1)\n    return stack.pop()\ndef push(item, stack):",
        "detail": "mid-range.arrayStack",
        "documentation": {}
    },
    {
        "label": "pop",
        "kind": 2,
        "importPath": "mid-range.arrayStack",
        "description": "mid-range.arrayStack",
        "peekOfCode": "def pop(stack):\n    if isEmpty(stack):\n        return str(-maxsize - 1)\n    return stack.pop()\ndef push(item, stack):\n    stack.append(item)\n    print(str(item) + \" pushed into stack\")\ndef peek(stack):\n    if isEmpty(stack):\n        return str(-maxsize - 1)",
        "detail": "mid-range.arrayStack",
        "documentation": {}
    },
    {
        "label": "push",
        "kind": 2,
        "importPath": "mid-range.arrayStack",
        "description": "mid-range.arrayStack",
        "peekOfCode": "def push(item, stack):\n    stack.append(item)\n    print(str(item) + \" pushed into stack\")\ndef peek(stack):\n    if isEmpty(stack):\n        return str(-maxsize - 1)\n    return stack[len(stack) - 1]\n# Driver code to test the functions\nstack = initializeStack()\npush(3, stack)",
        "detail": "mid-range.arrayStack",
        "documentation": {}
    },
    {
        "label": "peek",
        "kind": 2,
        "importPath": "mid-range.arrayStack",
        "description": "mid-range.arrayStack",
        "peekOfCode": "def peek(stack):\n    if isEmpty(stack):\n        return str(-maxsize - 1)\n    return stack[len(stack) - 1]\n# Driver code to test the functions\nstack = initializeStack()\npush(3, stack)\npush(4, stack)\npush(5, stack)\nprint(peek(stack))",
        "detail": "mid-range.arrayStack",
        "documentation": {}
    },
    {
        "label": "stack",
        "kind": 5,
        "importPath": "mid-range.arrayStack",
        "description": "mid-range.arrayStack",
        "peekOfCode": "stack = initializeStack()\npush(3, stack)\npush(4, stack)\npush(5, stack)\nprint(peek(stack))\nprint(pop(stack))",
        "detail": "mid-range.arrayStack",
        "documentation": {}
    },
    {
        "label": "ar_iter",
        "kind": 5,
        "importPath": "mid-range.arrayterator",
        "description": "mid-range.arrayterator",
        "peekOfCode": "ar_iter = np.lib.Arrayterator(AR_i8)\nar_iter.var\nar_iter.buf_size\nar_iter.start\nar_iter.stop\nar_iter.step\nar_iter.shape\nar_iter.flat\nar_iter.__array__()\nfor i in ar_iter:",
        "detail": "mid-range.arrayterator",
        "documentation": {}
    },
    {
        "label": "to_hex",
        "kind": 2,
        "importPath": "mid-range.array_byteswap",
        "description": "mid-range.array_byteswap",
        "peekOfCode": "def to_hex(a):\n    chars_per_item = a.itemsize * 2  # 2 hex digits\n    hex_version = binascii.hexlify(a)\n    num_chunks = len(hex_version) // chars_per_item\n    for i in range(num_chunks):\n        start = i * chars_per_item\n        end = start + chars_per_item\n        yield hex_version[start:end]\nstart = int(\"0x12345678\", 16)\nend = start + 5",
        "detail": "mid-range.array_byteswap",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "mid-range.array_byteswap",
        "description": "mid-range.array_byteswap",
        "peekOfCode": "start = int(\"0x12345678\", 16)\nend = start + 5\na1 = array.array(\"i\", range(start, end))\na2 = array.array(\"i\", range(start, end))\na2.byteswap()\nfmt = \"{:>12} {:>12} {:>12} {:>12}\"\nprint(fmt.format(\"A1 hex\", \"A1\", \"A2 hex\", \"A2\"))\nprint(fmt.format(\"-\" * 12, \"-\" * 12, \"-\" * 12, \"-\" * 12))\nfmt = \"{!r:>12} {:12} {!r:>12} {:12}\"\nfor values in zip(to_hex(a1), a1, to_hex(a2), a2):",
        "detail": "mid-range.array_byteswap",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "mid-range.array_byteswap",
        "description": "mid-range.array_byteswap",
        "peekOfCode": "end = start + 5\na1 = array.array(\"i\", range(start, end))\na2 = array.array(\"i\", range(start, end))\na2.byteswap()\nfmt = \"{:>12} {:>12} {:>12} {:>12}\"\nprint(fmt.format(\"A1 hex\", \"A1\", \"A2 hex\", \"A2\"))\nprint(fmt.format(\"-\" * 12, \"-\" * 12, \"-\" * 12, \"-\" * 12))\nfmt = \"{!r:>12} {:12} {!r:>12} {:12}\"\nfor values in zip(to_hex(a1), a1, to_hex(a2), a2):\n    print(fmt.format(*values))",
        "detail": "mid-range.array_byteswap",
        "documentation": {}
    },
    {
        "label": "a1",
        "kind": 5,
        "importPath": "mid-range.array_byteswap",
        "description": "mid-range.array_byteswap",
        "peekOfCode": "a1 = array.array(\"i\", range(start, end))\na2 = array.array(\"i\", range(start, end))\na2.byteswap()\nfmt = \"{:>12} {:>12} {:>12} {:>12}\"\nprint(fmt.format(\"A1 hex\", \"A1\", \"A2 hex\", \"A2\"))\nprint(fmt.format(\"-\" * 12, \"-\" * 12, \"-\" * 12, \"-\" * 12))\nfmt = \"{!r:>12} {:12} {!r:>12} {:12}\"\nfor values in zip(to_hex(a1), a1, to_hex(a2), a2):\n    print(fmt.format(*values))",
        "detail": "mid-range.array_byteswap",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "mid-range.array_byteswap",
        "description": "mid-range.array_byteswap",
        "peekOfCode": "a2 = array.array(\"i\", range(start, end))\na2.byteswap()\nfmt = \"{:>12} {:>12} {:>12} {:>12}\"\nprint(fmt.format(\"A1 hex\", \"A1\", \"A2 hex\", \"A2\"))\nprint(fmt.format(\"-\" * 12, \"-\" * 12, \"-\" * 12, \"-\" * 12))\nfmt = \"{!r:>12} {:12} {!r:>12} {:12}\"\nfor values in zip(to_hex(a1), a1, to_hex(a2), a2):\n    print(fmt.format(*values))",
        "detail": "mid-range.array_byteswap",
        "documentation": {}
    },
    {
        "label": "fmt",
        "kind": 5,
        "importPath": "mid-range.array_byteswap",
        "description": "mid-range.array_byteswap",
        "peekOfCode": "fmt = \"{:>12} {:>12} {:>12} {:>12}\"\nprint(fmt.format(\"A1 hex\", \"A1\", \"A2 hex\", \"A2\"))\nprint(fmt.format(\"-\" * 12, \"-\" * 12, \"-\" * 12, \"-\" * 12))\nfmt = \"{!r:>12} {:12} {!r:>12} {:12}\"\nfor values in zip(to_hex(a1), a1, to_hex(a2), a2):\n    print(fmt.format(*values))",
        "detail": "mid-range.array_byteswap",
        "documentation": {}
    },
    {
        "label": "fmt",
        "kind": 5,
        "importPath": "mid-range.array_byteswap",
        "description": "mid-range.array_byteswap",
        "peekOfCode": "fmt = \"{!r:>12} {:12} {!r:>12} {:12}\"\nfor values in zip(to_hex(a1), a1, to_hex(a2), a2):\n    print(fmt.format(*values))",
        "detail": "mid-range.array_byteswap",
        "documentation": {}
    },
    {
        "label": "arrayChange",
        "kind": 2,
        "importPath": "mid-range.array_change",
        "description": "mid-range.array_change",
        "peekOfCode": "def arrayChange(inputArray):\n    moves = 0\n    current = inputArray[0]\n    for number in inputArray[1:]:\n        if number <= current:\n            moves += current - number + 1\n            current += 1\n        else:\n            current = number\n    return moves",
        "detail": "mid-range.array_change",
        "documentation": {}
    },
    {
        "label": "generator",
        "kind": 5,
        "importPath": "mid-range.array_constructors",
        "description": "mid-range.array_constructors",
        "peekOfCode": "generator = (i for i in range(10))\nnp.require(a, requirements=1)  # E: No overload variant\nnp.require(a, requirements=\"TEST\")  # E: incompatible type\nnp.zeros(\"test\")  # E: incompatible type\nnp.zeros()  # E: Missing positional argument\nnp.ones(\"test\")  # E: incompatible type\nnp.ones()  # E: Missing positional argument\nnp.array(0, float, True)  # E: Too many positional\nnp.linspace(None, \"bob\")  # E: No overload variant\nnp.linspace(0, 2, num=10.0)  # E: No overload variant",
        "detail": "mid-range.array_constructors",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.array_file",
        "description": "mid-range.array_file",
        "peekOfCode": "a = array.array(\"i\", range(5))\nprint(\"A1:\", a)\n# Write the array of numbers to a temporary file\noutput = tempfile.NamedTemporaryFile()\na.tofile(output.file)  # must pass an *actual* file\noutput.flush()\n# Read the raw data\nwith open(output.name, \"rb\") as input:\n    raw_data = input.read()\n    print(\"Raw Contents:\", binascii.hexlify(raw_data))",
        "detail": "mid-range.array_file",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "mid-range.array_file",
        "description": "mid-range.array_file",
        "peekOfCode": "output = tempfile.NamedTemporaryFile()\na.tofile(output.file)  # must pass an *actual* file\noutput.flush()\n# Read the raw data\nwith open(output.name, \"rb\") as input:\n    raw_data = input.read()\n    print(\"Raw Contents:\", binascii.hexlify(raw_data))\n    # Read the data into an array\n    input.seek(0)\n    a2 = array.array(\"i\")",
        "detail": "mid-range.array_file",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "mid-range.array_like",
        "description": "mid-range.array_like",
        "peekOfCode": "class A:\n    pass\nx1: ArrayLike = (i for i in range(10))  # E: Incompatible types in assignment\nx2: ArrayLike = A()  # E: Incompatible types in assignment\nx3: ArrayLike = {1: \"foo\", 2: \"bar\"}  # E: Incompatible types in assignment\nscalar = np.int64(1)\nscalar.__array__(dtype=np.float64)  # E: No overload variant\narray = np.array([1])\narray.__array__(dtype=np.float64)  # E: No overload variant",
        "detail": "mid-range.array_like",
        "documentation": {}
    },
    {
        "label": "scalar",
        "kind": 5,
        "importPath": "mid-range.array_like",
        "description": "mid-range.array_like",
        "peekOfCode": "scalar = np.int64(1)\nscalar.__array__(dtype=np.float64)  # E: No overload variant\narray = np.array([1])\narray.__array__(dtype=np.float64)  # E: No overload variant",
        "detail": "mid-range.array_like",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "mid-range.array_like",
        "description": "mid-range.array_like",
        "peekOfCode": "array = np.array([1])\narray.__array__(dtype=np.float64)  # E: No overload variant",
        "detail": "mid-range.array_like",
        "documentation": {}
    },
    {
        "label": "arrayMaximalAdjacentDifference",
        "kind": 2,
        "importPath": "mid-range.array_maximal_adjacent_abs_difference",
        "description": "mid-range.array_maximal_adjacent_abs_difference",
        "peekOfCode": "def arrayMaximalAdjacentDifference(inputArray):\n    max_diff = -15\n    for i in range(len(inputArray) - 1):\n        max_diff = max(abs(inputArray[i] - inputArray[i + 1]), max_diff)\n    return max_diff",
        "detail": "mid-range.array_maximal_adjacent_abs_difference",
        "documentation": {}
    },
    {
        "label": "maxSum",
        "kind": 2,
        "importPath": "mid-range.array_max_consecutive_sum",
        "description": "mid-range.array_max_consecutive_sum",
        "peekOfCode": "def maxSum(arr, n, k):\n    # k must be greater\n    if n < k:\n        print(\"Invalid\")\n        return -1\n    # Compute sum of first\n    # window of size k\n    res = 0\n    for i in range(k):\n        res += arr[i]",
        "detail": "mid-range.array_max_consecutive_sum",
        "documentation": {}
    },
    {
        "label": "arrayMaxConsecutiveSum",
        "kind": 2,
        "importPath": "mid-range.array_max_consecutive_sum",
        "description": "mid-range.array_max_consecutive_sum",
        "peekOfCode": "def arrayMaxConsecutiveSum(inputArray, k):\n    \"\"\"Find maximal possible sum of k consecutive elements in list of integers\n    Args:\n        intputArray(int): List of integers\n        k(int): Number of consecutive elements\n    Return\n        Maximum sum of k consecutive elements\n    Raises:\n    \"\"\"\n    return maxSum(inputArray, len(inputArray), k)",
        "detail": "mid-range.array_max_consecutive_sum",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "mid-range.Array_Methods_extend().txt",
        "description": "mid-range.Array_Methods_extend().txt",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\"]\ncars = [\"Ford\", \"BMW\", \"Volvo\"]\nfruits.extend(cars)\nprint(fruits)",
        "detail": "mid-range.Array_Methods_extend().txt",
        "documentation": {}
    },
    {
        "label": "cars",
        "kind": 5,
        "importPath": "mid-range.Array_Methods_extend().txt",
        "description": "mid-range.Array_Methods_extend().txt",
        "peekOfCode": "cars = [\"Ford\", \"BMW\", \"Volvo\"]\nfruits.extend(cars)\nprint(fruits)",
        "detail": "mid-range.Array_Methods_extend().txt",
        "documentation": {}
    },
    {
        "label": "myFunc",
        "kind": 2,
        "importPath": "mid-range.Array_Methods_sort()_3.txt",
        "description": "mid-range.Array_Methods_sort()_3.txt",
        "peekOfCode": "def myFunc(e):\n    return len(e)\ncars = [\"Ford\", \"Mitsubishi\", \"BMW\", \"VW\"]\ncars.sort(key=myFunc)\nprint(cars)",
        "detail": "mid-range.Array_Methods_sort()_3.txt",
        "documentation": {}
    },
    {
        "label": "cars",
        "kind": 5,
        "importPath": "mid-range.Array_Methods_sort()_3.txt",
        "description": "mid-range.Array_Methods_sort()_3.txt",
        "peekOfCode": "cars = [\"Ford\", \"Mitsubishi\", \"BMW\", \"VW\"]\ncars.sort(key=myFunc)\nprint(cars)",
        "detail": "mid-range.Array_Methods_sort()_3.txt",
        "documentation": {}
    },
    {
        "label": "myFunc",
        "kind": 2,
        "importPath": "mid-range.Array_Methods_sort()_4.txt",
        "description": "mid-range.Array_Methods_sort()_4.txt",
        "peekOfCode": "def myFunc(e):\n    return e[\"year\"]\ncars = [\n    {\"car\": \"Ford\", \"year\": 2005},\n    {\"car\": \"Mitsubishi\", \"year\": 2000},\n    {\"car\": \"BMW\", \"year\": 2019},\n    {\"car\": \"VW\", \"year\": 2011},\n]\ncars.sort(key=myFunc)\nprint(cars)",
        "detail": "mid-range.Array_Methods_sort()_4.txt",
        "documentation": {}
    },
    {
        "label": "cars",
        "kind": 5,
        "importPath": "mid-range.Array_Methods_sort()_4.txt",
        "description": "mid-range.Array_Methods_sort()_4.txt",
        "peekOfCode": "cars = [\n    {\"car\": \"Ford\", \"year\": 2005},\n    {\"car\": \"Mitsubishi\", \"year\": 2000},\n    {\"car\": \"BMW\", \"year\": 2019},\n    {\"car\": \"VW\", \"year\": 2011},\n]\ncars.sort(key=myFunc)\nprint(cars)",
        "detail": "mid-range.Array_Methods_sort()_4.txt",
        "documentation": {}
    },
    {
        "label": "myFunc",
        "kind": 2,
        "importPath": "mid-range.Array_Methods_sort()_5.txt",
        "description": "mid-range.Array_Methods_sort()_5.txt",
        "peekOfCode": "def myFunc(e):\n    return len(e)\ncars = [\"Ford\", \"Mitsubishi\", \"BMW\", \"VW\"]\ncars.sort(reverse=True, key=myFunc)\nprint(cars)",
        "detail": "mid-range.Array_Methods_sort()_5.txt",
        "documentation": {}
    },
    {
        "label": "cars",
        "kind": 5,
        "importPath": "mid-range.Array_Methods_sort()_5.txt",
        "description": "mid-range.Array_Methods_sort()_5.txt",
        "peekOfCode": "cars = [\"Ford\", \"Mitsubishi\", \"BMW\", \"VW\"]\ncars.sort(reverse=True, key=myFunc)\nprint(cars)",
        "detail": "mid-range.Array_Methods_sort()_5.txt",
        "documentation": {}
    },
    {
        "label": "arrayReplace",
        "kind": 2,
        "importPath": "mid-range.array_replace",
        "description": "mid-range.array_replace",
        "peekOfCode": "def arrayReplace(inputArray, elemToReplace, substitutionElem):\n    for i in range(len(inputArray)):\n        if inputArray[i] == elemToReplace:\n            inputArray[i] = substitutionElem\n    return inputArray",
        "detail": "mid-range.array_replace",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.array_sequence",
        "description": "mid-range.array_sequence",
        "peekOfCode": "a = array.array(\"i\", range(3))\nprint(\"Initial :\", a)\na.extend(range(3))\nprint(\"Extended:\", a)\nprint(\"Slice   :\", a[2:5])\nprint(\"Iterator:\")\nprint(list(enumerate(a)))",
        "detail": "mid-range.array_sequence",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.array_string",
        "description": "mid-range.array_string",
        "peekOfCode": "s = b\"This is the array.\"\na = array.array(\"b\", s)\nprint(\"As byte string:\", s)\nprint(\"As array      :\", a)\nprint(\"As hex        :\", binascii.hexlify(a))",
        "detail": "mid-range.array_string",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.array_string",
        "description": "mid-range.array_string",
        "peekOfCode": "a = array.array(\"b\", s)\nprint(\"As byte string:\", s)\nprint(\"As array      :\", a)\nprint(\"As hex        :\", binascii.hexlify(a))",
        "detail": "mid-range.array_string",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.array_tobytes",
        "description": "mid-range.array_tobytes",
        "peekOfCode": "a = array.array(\"i\", range(5))\nprint(\"A1:\", a)\nas_bytes = a.tobytes()\nprint(\"Bytes:\", binascii.hexlify(as_bytes))\na2 = array.array(\"i\")\na2.frombytes(as_bytes)\nprint(\"A2:\", a2)",
        "detail": "mid-range.array_tobytes",
        "documentation": {}
    },
    {
        "label": "as_bytes",
        "kind": 5,
        "importPath": "mid-range.array_tobytes",
        "description": "mid-range.array_tobytes",
        "peekOfCode": "as_bytes = a.tobytes()\nprint(\"Bytes:\", binascii.hexlify(as_bytes))\na2 = array.array(\"i\")\na2.frombytes(as_bytes)\nprint(\"A2:\", a2)",
        "detail": "mid-range.array_tobytes",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "mid-range.array_tobytes",
        "description": "mid-range.array_tobytes",
        "peekOfCode": "a2 = array.array(\"i\")\na2.frombytes(as_bytes)\nprint(\"A2:\", a2)",
        "detail": "mid-range.array_tobytes",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.array_to_bst",
        "description": "mid-range.array_to_bst",
        "peekOfCode": "class TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\ndef array_to_bst(nums):\n    if not nums:\n        return None\n    mid = len(nums) // 2\n    node = TreeNode(nums[mid])",
        "detail": "mid-range.array_to_bst",
        "documentation": {}
    },
    {
        "label": "array_to_bst",
        "kind": 2,
        "importPath": "mid-range.array_to_bst",
        "description": "mid-range.array_to_bst",
        "peekOfCode": "def array_to_bst(nums):\n    if not nums:\n        return None\n    mid = len(nums) // 2\n    node = TreeNode(nums[mid])\n    node.left = array_to_bst(nums[:mid])\n    node.right = array_to_bst(nums[mid + 1 :])\n    return node",
        "detail": "mid-range.array_to_bst",
        "documentation": {}
    },
    {
        "label": "computeAP",
        "kind": 2,
        "importPath": "mid-range.articulation_points",
        "description": "mid-range.articulation_points",
        "peekOfCode": "def computeAP(l):  # noqa: E741\n    n = len(l)\n    outEdgeCount = 0\n    low = [0] * n\n    visited = [False] * n\n    isArt = [False] * n\n    def dfs(root, at, parent, outEdgeCount):\n        if parent == root:\n            outEdgeCount += 1\n        visited[at] = True",
        "detail": "mid-range.articulation_points",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.articulation_points",
        "description": "mid-range.articulation_points",
        "peekOfCode": "data = {\n    0: [1, 2],\n    1: [0, 2],\n    2: [0, 1, 3, 5],\n    3: [2, 4],\n    4: [3],\n    5: [2, 6, 8],\n    6: [5, 7],\n    7: [6, 8],\n    8: [5, 7],",
        "detail": "mid-range.articulation_points",
        "documentation": {}
    },
    {
        "label": "to_base16",
        "kind": 2,
        "importPath": "mid-range.ascii",
        "description": "mid-range.ascii",
        "peekOfCode": "def to_base16(string, visualize=False):\n    \"\"\"\n    Convert ascii to hexadecimal\n    :param string: string to convert\n    :param visualize: Show process\n    :param as_string: return value as string not array\n    :return: hex representation of given string\n    \"\"\"\n    hex_array = []\n    for b_value in to_base2(string):",
        "detail": "mid-range.ascii",
        "documentation": {}
    },
    {
        "label": "to_base2",
        "kind": 2,
        "importPath": "mid-range.ascii",
        "description": "mid-range.ascii",
        "peekOfCode": "def to_base2(string, visualize=False, as_string=False):\n    \"\"\"\n    Convert ascii string to binary\n    :param string: Ascii string\n    :param visualize: Show process\n    :param as_string: join strings with a space as one large value\n    :return: array of binary numbers, or entire string\n    \"\"\"\n    _list = []\n    for x in string:",
        "detail": "mid-range.ascii",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.ASCIIvaluecharacter",
        "description": "mid-range.ASCIIvaluecharacter",
        "peekOfCode": "c = \"p\"\nprint(\"The ASCII value of '\" + c + \"' is\", ord(c))",
        "detail": "mid-range.ASCIIvaluecharacter",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "mid-range.asgi",
        "description": "mid-range.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "mid-range.asgi",
        "documentation": {}
    },
    {
        "label": "ImageAdapter",
        "kind": 6,
        "importPath": "mid-range.asset",
        "description": "mid-range.asset",
        "peekOfCode": "class ImageAdapter:\n    def __init__(self, env: BuildEnvironment) -> None:\n        self.env = env\n    def get_original_image_uri(self, name: str) -> str:\n        \"\"\"Get the original image URI.\"\"\"\n        while name in self.env.original_image_uri:\n            name = self.env.original_image_uri[name]\n        return name",
        "detail": "mid-range.asset",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.AssignCookies",
        "description": "mid-range.AssignCookies",
        "peekOfCode": "class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g = sorted(g)\n        s = sorted(s)\n        content = 0\n        while s and g:\n            if s[-1] >= g[-1]:\n                s.pop()\n                content += 1\n            g.pop()",
        "detail": "mid-range.AssignCookies",
        "documentation": {}
    },
    {
        "label": "MANAGER",
        "kind": 5,
        "importPath": "mid-range.astroid_manager",
        "description": "mid-range.astroid_manager",
        "peekOfCode": "MANAGER = AstroidManager()",
        "detail": "mid-range.astroid_manager",
        "documentation": {}
    },
    {
        "label": "AsyncioAuthenticator",
        "kind": 6,
        "importPath": "mid-range.asyncio",
        "description": "mid-range.asyncio",
        "peekOfCode": "class AsyncioAuthenticator(Authenticator):\n    \"\"\"ZAP authentication for use in the asyncio IO loop\"\"\"\n    def __init__(self, context=None, loop=None):\n        super().__init__(context)\n        self.loop = loop or asyncio.get_event_loop()\n        self.__poller = None\n        self.__task = None\n    async def __handle_zap(self):\n        while True:\n            events = await self.__poller.poll()",
        "detail": "mid-range.asyncio",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.asyncio",
        "description": "mid-range.asyncio",
        "peekOfCode": "__all__ = [\"AsyncioAuthenticator\"]",
        "detail": "mid-range.asyncio",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_as_completed",
        "description": "mid-range.asyncio_as_completed",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    event_loop.run_until_complete(main(3))\nfinally:\n    event_loop.close()",
        "detail": "mid-range.asyncio_as_completed",
        "documentation": {}
    },
    {
        "label": "callback",
        "kind": 2,
        "importPath": "mid-range.asyncio_call_at",
        "description": "mid-range.asyncio_call_at",
        "peekOfCode": "def callback(n, loop):\n    print(\"callback {} invoked at {}\".format(n, loop.time()))\nasync def main(loop):\n    now = loop.time()\n    print(\"clock time: {}\".format(time.time()))\n    print(\"loop  time: {}\".format(now))\n    print(\"registering callbacks\")\n    loop.call_at(now + 0.2, callback, 1, loop)\n    loop.call_at(now + 0.1, callback, 2, loop)\n    loop.call_soon(callback, 3, loop)",
        "detail": "mid-range.asyncio_call_at",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_call_at",
        "description": "mid-range.asyncio_call_at",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    print(\"entering event loop\")\n    event_loop.run_until_complete(main(event_loop))\nfinally:\n    print(\"closing event loop\")\n    event_loop.close()",
        "detail": "mid-range.asyncio_call_at",
        "documentation": {}
    },
    {
        "label": "callback",
        "kind": 2,
        "importPath": "mid-range.asyncio_call_later",
        "description": "mid-range.asyncio_call_later",
        "peekOfCode": "def callback(n):\n    print(\"callback {} invoked\".format(n))\nasync def main(loop):\n    print(\"registering callbacks\")\n    loop.call_later(0.2, callback, 1)\n    loop.call_later(0.1, callback, 2)\n    loop.call_soon(callback, 3)\n    await asyncio.sleep(0.4)\nevent_loop = asyncio.get_event_loop()\ntry:",
        "detail": "mid-range.asyncio_call_later",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_call_later",
        "description": "mid-range.asyncio_call_later",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    print(\"entering event loop\")\n    event_loop.run_until_complete(main(event_loop))\nfinally:\n    print(\"closing event loop\")\n    event_loop.close()",
        "detail": "mid-range.asyncio_call_later",
        "documentation": {}
    },
    {
        "label": "callback",
        "kind": 2,
        "importPath": "mid-range.asyncio_call_soon",
        "description": "mid-range.asyncio_call_soon",
        "peekOfCode": "def callback(arg, *, kwarg=\"default\"):\n    print(\"callback invoked with {} and {}\".format(arg, kwarg))\nasync def main(loop):\n    print(\"registering callbacks\")\n    loop.call_soon(callback, 1)\n    wrapped = functools.partial(callback, kwarg=\"not default\")\n    loop.call_soon(wrapped, 2)\n    await asyncio.sleep(0.1)\nevent_loop = asyncio.get_event_loop()\ntry:",
        "detail": "mid-range.asyncio_call_soon",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_call_soon",
        "description": "mid-range.asyncio_call_soon",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    print(\"entering event loop\")\n    event_loop.run_until_complete(main(event_loop))\nfinally:\n    print(\"closing event loop\")\n    event_loop.close()",
        "detail": "mid-range.asyncio_call_soon",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_cancel_task",
        "description": "mid-range.asyncio_cancel_task",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    event_loop.run_until_complete(main(event_loop))\nfinally:\n    event_loop.close()",
        "detail": "mid-range.asyncio_cancel_task",
        "documentation": {}
    },
    {
        "label": "task_canceller",
        "kind": 2,
        "importPath": "mid-range.asyncio_cancel_task2",
        "description": "mid-range.asyncio_cancel_task2",
        "peekOfCode": "def task_canceller(t):\n    print(\"in task_canceller\")\n    t.cancel()\n    print(\"canceled the task\")\nasync def main(loop):\n    print(\"creating task\")\n    task = loop.create_task(task_func())\n    loop.call_soon(task_canceller, task)\n    try:\n        await task",
        "detail": "mid-range.asyncio_cancel_task2",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_cancel_task2",
        "description": "mid-range.asyncio_cancel_task2",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    event_loop.run_until_complete(main(event_loop))\nfinally:\n    event_loop.close()",
        "detail": "mid-range.asyncio_cancel_task2",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_condition",
        "description": "mid-range.asyncio_condition",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    result = event_loop.run_until_complete(main(event_loop))\nfinally:\n    event_loop.close()",
        "detail": "mid-range.asyncio_condition",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_coroutine",
        "description": "mid-range.asyncio_coroutine",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    print(\"starting coroutine\")\n    coro = coroutine()\n    print(\"entering event loop\")\n    event_loop.run_until_complete(coro)\nfinally:\n    print(\"closing event loop\")\n    event_loop.close()",
        "detail": "mid-range.asyncio_coroutine",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_coroutine_chain",
        "description": "mid-range.asyncio_coroutine_chain",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    return_value = event_loop.run_until_complete(outer())\n    print(\"return value: {!r}\".format(return_value))\nfinally:\n    event_loop.close()",
        "detail": "mid-range.asyncio_coroutine_chain",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_coroutine_return",
        "description": "mid-range.asyncio_coroutine_return",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    return_value = event_loop.run_until_complete(coroutine())\n    print(\"it returned: {!r}\".format(return_value))\nfinally:\n    event_loop.close()",
        "detail": "mid-range.asyncio_coroutine_return",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_create_task",
        "description": "mid-range.asyncio_create_task",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    event_loop.run_until_complete(main(event_loop))\nfinally:\n    event_loop.close()",
        "detail": "mid-range.asyncio_create_task",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.asyncio_debug",
        "description": "mid-range.asyncio_debug",
        "peekOfCode": "parser = argparse.ArgumentParser(\"debugging asyncio\")\nparser.add_argument(\"-v\", dest=\"verbose\", default=False, action=\"store_true\")\nargs = parser.parse_args()\nlogging.basicConfig(\n    level=logging.DEBUG, format=\"%(levelname)7s: %(message)s\", stream=sys.stderr\n)\nLOG = logging.getLogger(\"\")\nasync def inner():\n    LOG.info(\"inner starting\")\n    # Use a blocking sleep to simulate",
        "detail": "mid-range.asyncio_debug",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "mid-range.asyncio_debug",
        "description": "mid-range.asyncio_debug",
        "peekOfCode": "args = parser.parse_args()\nlogging.basicConfig(\n    level=logging.DEBUG, format=\"%(levelname)7s: %(message)s\", stream=sys.stderr\n)\nLOG = logging.getLogger(\"\")\nasync def inner():\n    LOG.info(\"inner starting\")\n    # Use a blocking sleep to simulate\n    # doing work inside the function.\n    time.sleep(0.1)",
        "detail": "mid-range.asyncio_debug",
        "documentation": {}
    },
    {
        "label": "LOG",
        "kind": 5,
        "importPath": "mid-range.asyncio_debug",
        "description": "mid-range.asyncio_debug",
        "peekOfCode": "LOG = logging.getLogger(\"\")\nasync def inner():\n    LOG.info(\"inner starting\")\n    # Use a blocking sleep to simulate\n    # doing work inside the function.\n    time.sleep(0.1)\n    LOG.info(\"inner completed\")\nasync def outer(loop):\n    LOG.info(\"outer starting\")\n    await asyncio.ensure_future(loop.create_task(inner()))",
        "detail": "mid-range.asyncio_debug",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_debug",
        "description": "mid-range.asyncio_debug",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\nif args.verbose:\n    LOG.info(\"enabling debugging\")\n    # Enable debugging\n    event_loop.set_debug(True)\n    # Make the threshold for \"slow\" tasks very very small for\n    # illustration. The default is 0.1, or 100 milliseconds.\n    event_loop.slow_callback_duration = 0.001\n    # Report all mistakes managing asynchronous resources.\n    warnings.simplefilter(\"always\", ResourceWarning)",
        "detail": "mid-range.asyncio_debug",
        "documentation": {}
    },
    {
        "label": "MESSAGES",
        "kind": 5,
        "importPath": "mid-range.asyncio_echo_client_coroutine",
        "description": "mid-range.asyncio_echo_client_coroutine",
        "peekOfCode": "MESSAGES = [b\"This is the message. \", b\"It will be sent \", b\"in parts.\"]\nSERVER_ADDRESS = (\"localhost\", 10000)\nasync def echo_client(address, messages):\n    log = logging.getLogger(\"echo_client\")\n    log.debug(\"connecting to {} port {}\".format(*address))\n    reader, writer = await asyncio.open_connection(*address)\n    # This could be writer.writelines() except that\n    # would make it harder to show each part of the message\n    # being sent.\n    for msg in messages:",
        "detail": "mid-range.asyncio_echo_client_coroutine",
        "documentation": {}
    },
    {
        "label": "SERVER_ADDRESS",
        "kind": 5,
        "importPath": "mid-range.asyncio_echo_client_coroutine",
        "description": "mid-range.asyncio_echo_client_coroutine",
        "peekOfCode": "SERVER_ADDRESS = (\"localhost\", 10000)\nasync def echo_client(address, messages):\n    log = logging.getLogger(\"echo_client\")\n    log.debug(\"connecting to {} port {}\".format(*address))\n    reader, writer = await asyncio.open_connection(*address)\n    # This could be writer.writelines() except that\n    # would make it harder to show each part of the message\n    # being sent.\n    for msg in messages:\n        writer.write(msg)",
        "detail": "mid-range.asyncio_echo_client_coroutine",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "mid-range.asyncio_echo_client_coroutine",
        "description": "mid-range.asyncio_echo_client_coroutine",
        "peekOfCode": "log = logging.getLogger(\"main\")\nevent_loop = asyncio.get_event_loop()\ntry:\n    event_loop.run_until_complete(echo_client(SERVER_ADDRESS, MESSAGES))\nfinally:\n    log.debug(\"closing event loop\")\n    event_loop.close()",
        "detail": "mid-range.asyncio_echo_client_coroutine",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_echo_client_coroutine",
        "description": "mid-range.asyncio_echo_client_coroutine",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    event_loop.run_until_complete(echo_client(SERVER_ADDRESS, MESSAGES))\nfinally:\n    log.debug(\"closing event loop\")\n    event_loop.close()",
        "detail": "mid-range.asyncio_echo_client_coroutine",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_ensure_future",
        "description": "mid-range.asyncio_ensure_future",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    print(\"entering event loop\")\n    result = event_loop.run_until_complete(starter())\nfinally:\n    event_loop.close()",
        "detail": "mid-range.asyncio_ensure_future",
        "documentation": {}
    },
    {
        "label": "set_event",
        "kind": 2,
        "importPath": "mid-range.asyncio_event",
        "description": "mid-range.asyncio_event",
        "peekOfCode": "def set_event(event):\n    print(\"setting event in callback\")\n    event.set()\nasync def coro1(event):\n    print(\"coro1 waiting for event\")\n    await event.wait()\n    print(\"coro1 triggered\")\nasync def coro2(event):\n    print(\"coro2 waiting for event\")\n    await event.wait()",
        "detail": "mid-range.asyncio_event",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_event",
        "description": "mid-range.asyncio_event",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    event_loop.run_until_complete(main(event_loop))\nfinally:\n    event_loop.close()",
        "detail": "mid-range.asyncio_event",
        "documentation": {}
    },
    {
        "label": "blocks",
        "kind": 2,
        "importPath": "mid-range.asyncio_executor_thread",
        "description": "mid-range.asyncio_executor_thread",
        "peekOfCode": "def blocks(n):\n    log = logging.getLogger(\"blocks({})\".format(n))\n    log.info(\"running\")\n    time.sleep(0.1)\n    log.info(\"done\")\n    return n ** 2\nasync def run_blocking_tasks(executor):\n    log = logging.getLogger(\"run_blocking_tasks\")\n    log.info(\"starting\")\n    log.info(\"creating executor tasks\")",
        "detail": "mid-range.asyncio_executor_thread",
        "documentation": {}
    },
    {
        "label": "mark_done",
        "kind": 2,
        "importPath": "mid-range.asyncio_future_await",
        "description": "mid-range.asyncio_future_await",
        "peekOfCode": "def mark_done(future, result):\n    print(\"setting future result to {!r}\".format(result))\n    future.set_result(result)\nasync def main(loop):\n    all_done = asyncio.Future()\n    print(\"scheduling mark_done\")\n    loop.call_soon(mark_done, all_done, \"the result\")\n    result = await all_done\n    print(\"returned result: {!r}\".format(result))\nevent_loop = asyncio.get_event_loop()",
        "detail": "mid-range.asyncio_future_await",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_future_await",
        "description": "mid-range.asyncio_future_await",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    event_loop.run_until_complete(main(event_loop))\nfinally:\n    event_loop.close()",
        "detail": "mid-range.asyncio_future_await",
        "documentation": {}
    },
    {
        "label": "callback",
        "kind": 2,
        "importPath": "mid-range.asyncio_future_callback",
        "description": "mid-range.asyncio_future_callback",
        "peekOfCode": "def callback(future, n):\n    print(\"{}: future done: {}\".format(n, future.result()))\nasync def register_callbacks(all_done):\n    print(\"registering callbacks on future\")\n    all_done.add_done_callback(functools.partial(callback, n=1))\n    all_done.add_done_callback(functools.partial(callback, n=2))\nasync def main(all_done):\n    await register_callbacks(all_done)\n    print(\"setting result of future\")\n    all_done.set_result(\"the result\")",
        "detail": "mid-range.asyncio_future_callback",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_future_callback",
        "description": "mid-range.asyncio_future_callback",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    all_done = asyncio.Future()\n    event_loop.run_until_complete(main(all_done))\nfinally:\n    event_loop.close()",
        "detail": "mid-range.asyncio_future_callback",
        "documentation": {}
    },
    {
        "label": "mark_done",
        "kind": 2,
        "importPath": "mid-range.asyncio_future_event_loop",
        "description": "mid-range.asyncio_future_event_loop",
        "peekOfCode": "def mark_done(future, result):\n    print(\"setting future result to {!r}\".format(result))\n    future.set_result(result)\nevent_loop = asyncio.get_event_loop()\ntry:\n    all_done = asyncio.Future()\n    print(\"scheduling mark_done\")\n    event_loop.call_soon(mark_done, all_done, \"the result\")\n    print(\"entering event loop\")\n    result = event_loop.run_until_complete(all_done)",
        "detail": "mid-range.asyncio_future_event_loop",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_future_event_loop",
        "description": "mid-range.asyncio_future_event_loop",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    all_done = asyncio.Future()\n    print(\"scheduling mark_done\")\n    event_loop.call_soon(mark_done, all_done, \"the result\")\n    print(\"entering event loop\")\n    result = event_loop.run_until_complete(all_done)\n    print(\"returned result: {!r}\".format(result))\nfinally:\n    print(\"closing event loop\")",
        "detail": "mid-range.asyncio_future_event_loop",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_gather",
        "description": "mid-range.asyncio_gather",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    event_loop.run_until_complete(main())\nfinally:\n    event_loop.close()",
        "detail": "mid-range.asyncio_gather",
        "documentation": {}
    },
    {
        "label": "outer",
        "kind": 2,
        "importPath": "mid-range.asyncio_generator",
        "description": "mid-range.asyncio_generator",
        "peekOfCode": "def outer():\n    print(\"in outer\")\n    print(\"waiting for result1\")\n    result1 = yield from phase1()\n    print(\"waiting for result2\")\n    result2 = yield from phase2(result1)\n    return (result1, result2)\n@asyncio.coroutine\ndef phase1():\n    print(\"in phase1\")",
        "detail": "mid-range.asyncio_generator",
        "documentation": {}
    },
    {
        "label": "phase1",
        "kind": 2,
        "importPath": "mid-range.asyncio_generator",
        "description": "mid-range.asyncio_generator",
        "peekOfCode": "def phase1():\n    print(\"in phase1\")\n    return \"result1\"\n@asyncio.coroutine\ndef phase2(arg):\n    print(\"in phase2\")\n    return \"result2 derived from {}\".format(arg)\nevent_loop = asyncio.get_event_loop()\ntry:\n    return_value = event_loop.run_until_complete(outer())",
        "detail": "mid-range.asyncio_generator",
        "documentation": {}
    },
    {
        "label": "phase2",
        "kind": 2,
        "importPath": "mid-range.asyncio_generator",
        "description": "mid-range.asyncio_generator",
        "peekOfCode": "def phase2(arg):\n    print(\"in phase2\")\n    return \"result2 derived from {}\".format(arg)\nevent_loop = asyncio.get_event_loop()\ntry:\n    return_value = event_loop.run_until_complete(outer())\n    print(\"return value: {!r}\".format(return_value))\nfinally:\n    event_loop.close()",
        "detail": "mid-range.asyncio_generator",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_generator",
        "description": "mid-range.asyncio_generator",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    return_value = event_loop.run_until_complete(outer())\n    print(\"return value: {!r}\".format(return_value))\nfinally:\n    event_loop.close()",
        "detail": "mid-range.asyncio_generator",
        "documentation": {}
    },
    {
        "label": "TARGETS",
        "kind": 5,
        "importPath": "mid-range.asyncio_getaddrinfo",
        "description": "mid-range.asyncio_getaddrinfo",
        "peekOfCode": "TARGETS = [\n    (\"pymotw.com\", \"https\"),\n    (\"doughellmann.com\", \"https\"),\n    (\"python.org\", \"https\"),\n]\nasync def main(loop, targets):\n    for target in targets:\n        info = await loop.getaddrinfo(*target, proto=socket.IPPROTO_TCP)\n        for host in info:\n            print(\"{:20}: {}\".format(target[0], host[4][0]))",
        "detail": "mid-range.asyncio_getaddrinfo",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_getaddrinfo",
        "description": "mid-range.asyncio_getaddrinfo",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    event_loop.run_until_complete(main(event_loop, TARGETS))\nfinally:\n    event_loop.close()",
        "detail": "mid-range.asyncio_getaddrinfo",
        "documentation": {}
    },
    {
        "label": "TARGETS",
        "kind": 5,
        "importPath": "mid-range.asyncio_getnameinfo",
        "description": "mid-range.asyncio_getnameinfo",
        "peekOfCode": "TARGETS = [(\"66.33.211.242\", 443), (\"104.130.43.121\", 443)]\nasync def main(loop, targets):\n    for target in targets:\n        info = await loop.getnameinfo(target)\n        print(\"{:15}: {} {}\".format(target[0], *info))\nevent_loop = asyncio.get_event_loop()\ntry:\n    event_loop.run_until_complete(main(event_loop, TARGETS))\nfinally:\n    event_loop.close()",
        "detail": "mid-range.asyncio_getnameinfo",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_getnameinfo",
        "description": "mid-range.asyncio_getnameinfo",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    event_loop.run_until_complete(main(event_loop, TARGETS))\nfinally:\n    event_loop.close()",
        "detail": "mid-range.asyncio_getnameinfo",
        "documentation": {}
    },
    {
        "label": "unlock",
        "kind": 2,
        "importPath": "mid-range.asyncio_lock",
        "description": "mid-range.asyncio_lock",
        "peekOfCode": "def unlock(lock):\n    print(\"callback releasing lock\")\n    lock.release()\nasync def coro1(lock):\n    print(\"coro1 waiting for the lock\")\n    async with lock:\n        print(\"coro1 acquired lock\")\n    print(\"coro1 released lock\")\nasync def coro2(lock):\n    print(\"coro2 waiting for the lock\")",
        "detail": "mid-range.asyncio_lock",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_lock",
        "description": "mid-range.asyncio_lock",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    event_loop.run_until_complete(main(event_loop))\nfinally:\n    event_loop.close()",
        "detail": "mid-range.asyncio_lock",
        "documentation": {}
    },
    {
        "label": "signal_handler",
        "kind": 2,
        "importPath": "mid-range.asyncio_signal",
        "description": "mid-range.asyncio_signal",
        "peekOfCode": "def signal_handler(name):\n    print(\"signal_handler({!r})\".format(name))\nevent_loop = asyncio.get_event_loop()\nevent_loop.add_signal_handler(\n    signal.SIGHUP, functools.partial(signal_handler, name=\"SIGHUP\")\n)\nevent_loop.add_signal_handler(\n    signal.SIGUSR1, functools.partial(signal_handler, name=\"SIGUSR1\")\n)\nevent_loop.add_signal_handler(",
        "detail": "mid-range.asyncio_signal",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_signal",
        "description": "mid-range.asyncio_signal",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\nevent_loop.add_signal_handler(\n    signal.SIGHUP, functools.partial(signal_handler, name=\"SIGHUP\")\n)\nevent_loop.add_signal_handler(\n    signal.SIGUSR1, functools.partial(signal_handler, name=\"SIGUSR1\")\n)\nevent_loop.add_signal_handler(\n    signal.SIGINT, functools.partial(signal_handler, name=\"SIGINT\")\n)",
        "detail": "mid-range.asyncio_signal",
        "documentation": {}
    },
    {
        "label": "LOG",
        "kind": 5,
        "importPath": "mid-range.asyncio_stop",
        "description": "mid-range.asyncio_stop",
        "peekOfCode": "LOG = logging.getLogger(\"main\")\nasync def stopper(loop):\n    LOG.debug(\"stopper invoked\")\n    loop.stop()\nevent_loop = asyncio.get_event_loop()\nevent_loop.create_task(stopper(event_loop))\ntry:\n    LOG.debug(\"entering event loop\")\n    event_loop.run_forever()\nfinally:",
        "detail": "mid-range.asyncio_stop",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_stop",
        "description": "mid-range.asyncio_stop",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\nevent_loop.create_task(stopper(event_loop))\ntry:\n    LOG.debug(\"entering event loop\")\n    event_loop.run_forever()\nfinally:\n    LOG.debug(\"closing event loop\")\n    event_loop.close()",
        "detail": "mid-range.asyncio_stop",
        "documentation": {}
    },
    {
        "label": "MESSAGE",
        "kind": 5,
        "importPath": "mid-range.asyncio_subprocess_coroutine_write",
        "description": "mid-range.asyncio_subprocess_coroutine_write",
        "peekOfCode": "MESSAGE = \"\"\"\nThis message will be converted\nto all caps.\n\"\"\"\nevent_loop = asyncio.get_event_loop()\ntry:\n    return_code, results = event_loop.run_until_complete(to_upper(MESSAGE))\nfinally:\n    event_loop.close()\nif return_code:",
        "detail": "mid-range.asyncio_subprocess_coroutine_write",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_subprocess_coroutine_write",
        "description": "mid-range.asyncio_subprocess_coroutine_write",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    return_code, results = event_loop.run_until_complete(to_upper(MESSAGE))\nfinally:\n    event_loop.close()\nif return_code:\n    print(\"error exit {}\".format(return_code))\nelse:\n    print(\"Original: {!r}\".format(MESSAGE))\n    print(\"Changed : {!r}\".format(results))",
        "detail": "mid-range.asyncio_subprocess_coroutine_write",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_wait",
        "description": "mid-range.asyncio_wait",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    event_loop.run_until_complete(main(3))\nfinally:\n    event_loop.close()",
        "detail": "mid-range.asyncio_wait",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 5,
        "importPath": "mid-range.asyncio_wait_timeout",
        "description": "mid-range.asyncio_wait_timeout",
        "peekOfCode": "event_loop = asyncio.get_event_loop()\ntry:\n    event_loop.run_until_complete(main(3))\nfinally:\n    event_loop.close()",
        "detail": "mid-range.asyncio_wait_timeout",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "mid-range.async_hello",
        "description": "mid-range.async_hello",
        "peekOfCode": "def hello():\n    print(\"Hello world! (%s)\" % threading.currentThread())\n    yield from asyncio.sleep(1)\n    print(\"Hello again! (%s)\" % threading.currentThread())\nloop = asyncio.get_event_loop()\ntasks = [hello(), hello()]\nloop.run_until_complete(asyncio.wait(tasks))\nloop.close()",
        "detail": "mid-range.async_hello",
        "documentation": {}
    },
    {
        "label": "loop",
        "kind": 5,
        "importPath": "mid-range.async_hello",
        "description": "mid-range.async_hello",
        "peekOfCode": "loop = asyncio.get_event_loop()\ntasks = [hello(), hello()]\nloop.run_until_complete(asyncio.wait(tasks))\nloop.close()",
        "detail": "mid-range.async_hello",
        "documentation": {}
    },
    {
        "label": "tasks",
        "kind": 5,
        "importPath": "mid-range.async_hello",
        "description": "mid-range.async_hello",
        "peekOfCode": "tasks = [hello(), hello()]\nloop.run_until_complete(asyncio.wait(tasks))\nloop.close()",
        "detail": "mid-range.async_hello",
        "documentation": {}
    },
    {
        "label": "loop",
        "kind": 5,
        "importPath": "mid-range.async_hello2",
        "description": "mid-range.async_hello2",
        "peekOfCode": "loop = asyncio.get_event_loop()\ntasks = [hello(), hello()]\nloop.run_until_complete(asyncio.wait(tasks))\nloop.close()",
        "detail": "mid-range.async_hello2",
        "documentation": {}
    },
    {
        "label": "tasks",
        "kind": 5,
        "importPath": "mid-range.async_hello2",
        "description": "mid-range.async_hello2",
        "peekOfCode": "tasks = [hello(), hello()]\nloop.run_until_complete(asyncio.wait(tasks))\nloop.close()",
        "detail": "mid-range.async_hello2",
        "documentation": {}
    },
    {
        "label": "wget",
        "kind": 2,
        "importPath": "mid-range.async_wget",
        "description": "mid-range.async_wget",
        "peekOfCode": "def wget(host):\n    print(\"wget %s...\" % host)\n    connect = asyncio.open_connection(host, 80)\n    reader, writer = yield from connect\n    header = \"GET / HTTP/1.0\\r\\nHost: %s\\r\\n\\r\\n\" % host\n    writer.write(header.encode(\"utf-8\"))\n    yield from writer.drain()\n    while True:\n        line = yield from reader.readline()\n        if line == b\"\\r\\n\":",
        "detail": "mid-range.async_wget",
        "documentation": {}
    },
    {
        "label": "loop",
        "kind": 5,
        "importPath": "mid-range.async_wget",
        "description": "mid-range.async_wget",
        "peekOfCode": "loop = asyncio.get_event_loop()\ntasks = [wget(host) for host in [\"www.sina.com.cn\", \"www.sohu.com\", \"www.163.com\"]]\nloop.run_until_complete(asyncio.wait(tasks))\nloop.close()",
        "detail": "mid-range.async_wget",
        "documentation": {}
    },
    {
        "label": "tasks",
        "kind": 5,
        "importPath": "mid-range.async_wget",
        "description": "mid-range.async_wget",
        "peekOfCode": "tasks = [wget(host) for host in [\"www.sina.com.cn\", \"www.sohu.com\", \"www.163.com\"]]\nloop.run_until_complete(asyncio.wait(tasks))\nloop.close()",
        "detail": "mid-range.async_wget",
        "documentation": {}
    },
    {
        "label": "loop",
        "kind": 5,
        "importPath": "mid-range.async_wget2",
        "description": "mid-range.async_wget2",
        "peekOfCode": "loop = asyncio.get_event_loop()\ntasks = [hello(), hello()]\nloop.run_until_complete(asyncio.wait(tasks))\nloop.close()",
        "detail": "mid-range.async_wget2",
        "documentation": {}
    },
    {
        "label": "tasks",
        "kind": 5,
        "importPath": "mid-range.async_wget2",
        "description": "mid-range.async_wget2",
        "peekOfCode": "tasks = [hello(), hello()]\nloop.run_until_complete(asyncio.wait(tasks))\nloop.close()",
        "detail": "mid-range.async_wget2",
        "documentation": {}
    },
    {
        "label": "all_done",
        "kind": 2,
        "importPath": "mid-range.atexit_decorator",
        "description": "mid-range.atexit_decorator",
        "peekOfCode": "def all_done():\n    print(\"all_done()\")\nprint(\"starting main program\")",
        "detail": "mid-range.atexit_decorator",
        "documentation": {}
    },
    {
        "label": "exit_with_exception",
        "kind": 2,
        "importPath": "mid-range.atexit_exception",
        "description": "mid-range.atexit_exception",
        "peekOfCode": "def exit_with_exception(message):\n    raise RuntimeError(message)\natexit.register(exit_with_exception, \"Registered first\")\natexit.register(exit_with_exception, \"Registered second\")",
        "detail": "mid-range.atexit_exception",
        "documentation": {}
    },
    {
        "label": "is_called",
        "kind": 2,
        "importPath": "mid-range.atexit_keyboardinterrupt",
        "description": "mid-range.atexit_keyboardinterrupt",
        "peekOfCode": "def is_called():\n    print(\"The atexit handlers are still called\")\natexit.register(is_called)\nsys.stdout.write(\"Press Ctrl-C now\")\nsys.stdout.flush()\nignored = sys.stdin.readline()",
        "detail": "mid-range.atexit_keyboardinterrupt",
        "documentation": {}
    },
    {
        "label": "ignored",
        "kind": 5,
        "importPath": "mid-range.atexit_keyboardinterrupt",
        "description": "mid-range.atexit_keyboardinterrupt",
        "peekOfCode": "ignored = sys.stdin.readline()",
        "detail": "mid-range.atexit_keyboardinterrupt",
        "documentation": {}
    },
    {
        "label": "my_cleanup",
        "kind": 2,
        "importPath": "mid-range.atexit_multiple",
        "description": "mid-range.atexit_multiple",
        "peekOfCode": "def my_cleanup(name):\n    print(\"my_cleanup({})\".format(name))\natexit.register(my_cleanup, \"first\")\natexit.register(my_cleanup, \"second\")\natexit.register(my_cleanup, \"third\")",
        "detail": "mid-range.atexit_multiple",
        "documentation": {}
    },
    {
        "label": "not_called",
        "kind": 2,
        "importPath": "mid-range.atexit_os_exit",
        "description": "mid-range.atexit_os_exit",
        "peekOfCode": "def not_called():\n    print(\"This should not be called\")\nprint(\"Registering\")\natexit.register(not_called)\nprint(\"Registered\")\nprint(\"Exiting...\")\nos._exit(0)",
        "detail": "mid-range.atexit_os_exit",
        "documentation": {}
    },
    {
        "label": "not_called",
        "kind": 2,
        "importPath": "mid-range.atexit_signal_child",
        "description": "mid-range.atexit_signal_child",
        "peekOfCode": "def not_called():\n    print(\"CHILD: atexit handler should not have been called\")\nprint(\"CHILD: Registering atexit handler\")\nsys.stdout.flush()\natexit.register(not_called)\nprint(\"CHILD: Pausing to wait for signal\")\nsys.stdout.flush()\ntime.sleep(5)",
        "detail": "mid-range.atexit_signal_child",
        "documentation": {}
    },
    {
        "label": "proc",
        "kind": 5,
        "importPath": "mid-range.atexit_signal_parent",
        "description": "mid-range.atexit_signal_parent",
        "peekOfCode": "proc = subprocess.Popen(\"./atexit_signal_child.py\")\nprint(\"PARENT: Pausing before sending signal...\")\ntime.sleep(1)\nprint(\"PARENT: Signaling child\")\nos.kill(proc.pid, signal.SIGTERM)",
        "detail": "mid-range.atexit_signal_parent",
        "documentation": {}
    },
    {
        "label": "all_done",
        "kind": 2,
        "importPath": "mid-range.atexit_simple",
        "description": "mid-range.atexit_simple",
        "peekOfCode": "def all_done():\n    print(\"all_done()\")\nprint(\"Registering\")\natexit.register(all_done)\nprint(\"Registered\")",
        "detail": "mid-range.atexit_simple",
        "documentation": {}
    },
    {
        "label": "all_done",
        "kind": 2,
        "importPath": "mid-range.atexit_sys_exit",
        "description": "mid-range.atexit_sys_exit",
        "peekOfCode": "def all_done():\n    print(\"all_done()\")\nprint(\"Registering\")\natexit.register(all_done)\nprint(\"Registered\")\nprint(\"Exiting...\")\nsys.exit()",
        "detail": "mid-range.atexit_sys_exit",
        "documentation": {}
    },
    {
        "label": "my_cleanup",
        "kind": 2,
        "importPath": "mid-range.atexit_unregister",
        "description": "mid-range.atexit_unregister",
        "peekOfCode": "def my_cleanup(name):\n    print(\"my_cleanup({})\".format(name))\natexit.register(my_cleanup, \"first\")\natexit.register(my_cleanup, \"second\")\natexit.register(my_cleanup, \"third\")\natexit.unregister(my_cleanup)",
        "detail": "mid-range.atexit_unregister",
        "documentation": {}
    },
    {
        "label": "my_cleanup",
        "kind": 2,
        "importPath": "mid-range.atexit_unregister_not_registered",
        "description": "mid-range.atexit_unregister_not_registered",
        "peekOfCode": "def my_cleanup(name):\n    print(\"my_cleanup({})\".format(name))\nif False:\n    atexit.register(my_cleanup, \"never registered\")\natexit.unregister(my_cleanup)",
        "detail": "mid-range.atexit_unregister_not_registered",
        "documentation": {}
    },
    {
        "label": "MyObject",
        "kind": 6,
        "importPath": "mid-range.attrs",
        "description": "mid-range.attrs",
        "peekOfCode": "class MyObject(object):\n    def __init__(self):\n        self.x = 9\n    def power(self):\n        return self.x * self.x\nobj = MyObject()\nprint(\"hasattr(obj, 'x') =\", hasattr(obj, \"x\"))  # 'x'？\nprint(\"hasattr(obj, 'y') =\", hasattr(obj, \"y\"))  # 'y'？\nsetattr(obj, \"y\", 19)  # 'y'\nprint(\"hasattr(obj, 'y') =\", hasattr(obj, \"y\"))  # 'y'？",
        "detail": "mid-range.attrs",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "mid-range.attrs",
        "description": "mid-range.attrs",
        "peekOfCode": "obj = MyObject()\nprint(\"hasattr(obj, 'x') =\", hasattr(obj, \"x\"))  # 'x'？\nprint(\"hasattr(obj, 'y') =\", hasattr(obj, \"y\"))  # 'y'？\nsetattr(obj, \"y\", 19)  # 'y'\nprint(\"hasattr(obj, 'y') =\", hasattr(obj, \"y\"))  # 'y'？\nprint(\"getattr(obj, 'y') =\", getattr(obj, \"y\"))  # 'y'\nprint(\"obj.y =\", obj.y)  # 'y'\nprint(\"getattr(obj, 'z') =\", getattr(obj, \"z\", 404))  # 'z'，，404\nf = getattr(obj, \"power\")  # 'power'\nprint(f)",
        "detail": "mid-range.attrs",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "mid-range.attrs",
        "description": "mid-range.attrs",
        "peekOfCode": "f = getattr(obj, \"power\")  # 'power'\nprint(f)\nprint(f())",
        "detail": "mid-range.attrs",
        "documentation": {}
    },
    {
        "label": "book",
        "kind": 5,
        "importPath": "mid-range.audiobook_gen",
        "description": "mid-range.audiobook_gen",
        "peekOfCode": "book = open(input(\"Enter the book name: \"), \"rb\")\npg_no = int(\n    input(\n        \"Enter the page number from which you want the system to start reading text: \"\n    )\n)\npdf_Reader = PyPDF2.PdfFileReader(book)\npages = pdf_Reader.numPages\nspeaker = pyttsx3.init()\nfor num in range((pg_no - 1), pages):",
        "detail": "mid-range.audiobook_gen",
        "documentation": {}
    },
    {
        "label": "pg_no",
        "kind": 5,
        "importPath": "mid-range.audiobook_gen",
        "description": "mid-range.audiobook_gen",
        "peekOfCode": "pg_no = int(\n    input(\n        \"Enter the page number from which you want the system to start reading text: \"\n    )\n)\npdf_Reader = PyPDF2.PdfFileReader(book)\npages = pdf_Reader.numPages\nspeaker = pyttsx3.init()\nfor num in range((pg_no - 1), pages):\n    page = pdf_Reader.getPage(num)",
        "detail": "mid-range.audiobook_gen",
        "documentation": {}
    },
    {
        "label": "pdf_Reader",
        "kind": 5,
        "importPath": "mid-range.audiobook_gen",
        "description": "mid-range.audiobook_gen",
        "peekOfCode": "pdf_Reader = PyPDF2.PdfFileReader(book)\npages = pdf_Reader.numPages\nspeaker = pyttsx3.init()\nfor num in range((pg_no - 1), pages):\n    page = pdf_Reader.getPage(num)\n    text = page.extractText()\n    speaker.say(text)\n    speaker.runAndWait()",
        "detail": "mid-range.audiobook_gen",
        "documentation": {}
    },
    {
        "label": "pages",
        "kind": 5,
        "importPath": "mid-range.audiobook_gen",
        "description": "mid-range.audiobook_gen",
        "peekOfCode": "pages = pdf_Reader.numPages\nspeaker = pyttsx3.init()\nfor num in range((pg_no - 1), pages):\n    page = pdf_Reader.getPage(num)\n    text = page.extractText()\n    speaker.say(text)\n    speaker.runAndWait()",
        "detail": "mid-range.audiobook_gen",
        "documentation": {}
    },
    {
        "label": "speaker",
        "kind": 5,
        "importPath": "mid-range.audiobook_gen",
        "description": "mid-range.audiobook_gen",
        "peekOfCode": "speaker = pyttsx3.init()\nfor num in range((pg_no - 1), pages):\n    page = pdf_Reader.getPage(num)\n    text = page.extractText()\n    speaker.say(text)\n    speaker.runAndWait()",
        "detail": "mid-range.audiobook_gen",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.auto",
        "description": "mid-range.auto",
        "peekOfCode": "__all__ = [\"tqdm\", \"trange\"]",
        "detail": "mid-range.auto",
        "documentation": {}
    },
    {
        "label": "Trie",
        "kind": 6,
        "importPath": "mid-range.autocomplete_using_trie",
        "description": "mid-range.autocomplete_using_trie",
        "peekOfCode": "class Trie:\n    def __init__(self):\n        self._trie = {}\n    def insert_word(self, text):\n        trie = self._trie\n        for char in text:\n            if char not in trie:\n                trie[char] = {}\n            trie = trie[char]\n        trie[END] = True",
        "detail": "mid-range.autocomplete_using_trie",
        "documentation": {}
    },
    {
        "label": "autocomplete_using_trie",
        "kind": 2,
        "importPath": "mid-range.autocomplete_using_trie",
        "description": "mid-range.autocomplete_using_trie",
        "peekOfCode": "def autocomplete_using_trie(s):\n    \"\"\"\n    >>> trie = Trie()\n    >>> for word in words:\n    ...     trie.insert_word(word)\n    ...\n    >>> matches = autocomplete_using_trie(\"de\")\n    \"detergent \" in matches\n    True\n    \"dog \" in matches",
        "detail": "mid-range.autocomplete_using_trie",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.autocomplete_using_trie",
        "description": "mid-range.autocomplete_using_trie",
        "peekOfCode": "def main():\n    print(autocomplete_using_trie(\"de\"))\nif __name__ == \"__main__\":\n    main()",
        "detail": "mid-range.autocomplete_using_trie",
        "documentation": {}
    },
    {
        "label": "END",
        "kind": 5,
        "importPath": "mid-range.autocomplete_using_trie",
        "description": "mid-range.autocomplete_using_trie",
        "peekOfCode": "END = \"#\"\nclass Trie:\n    def __init__(self):\n        self._trie = {}\n    def insert_word(self, text):\n        trie = self._trie\n        for char in text:\n            if char not in trie:\n                trie[char] = {}\n            trie = trie[char]",
        "detail": "mid-range.autocomplete_using_trie",
        "documentation": {}
    },
    {
        "label": "trie",
        "kind": 5,
        "importPath": "mid-range.autocomplete_using_trie",
        "description": "mid-range.autocomplete_using_trie",
        "peekOfCode": "trie = Trie()\nwords = (\"depart\", \"detergent\", \"daring\", \"dog\", \"deer\", \"deal\")\nfor word in words:\n    trie.insert_word(word)\ndef autocomplete_using_trie(s):\n    \"\"\"\n    >>> trie = Trie()\n    >>> for word in words:\n    ...     trie.insert_word(word)\n    ...",
        "detail": "mid-range.autocomplete_using_trie",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "mid-range.autocomplete_using_trie",
        "description": "mid-range.autocomplete_using_trie",
        "peekOfCode": "words = (\"depart\", \"detergent\", \"daring\", \"dog\", \"deer\", \"deal\")\nfor word in words:\n    trie.insert_word(word)\ndef autocomplete_using_trie(s):\n    \"\"\"\n    >>> trie = Trie()\n    >>> for word in words:\n    ...     trie.insert_word(word)\n    ...\n    >>> matches = autocomplete_using_trie(\"de\")",
        "detail": "mid-range.autocomplete_using_trie",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "mid-range.Automate_Screenshot",
        "description": "mid-range.Automate_Screenshot",
        "peekOfCode": "i = 0\nwhile i < 10:\n    img = pyautogui.screenshot()\n    # You have to specify the path that you wish to add screenshot\n    img.save(\"D:\\Screenshot\\img\" + str(i) + \".png\")\n    i = i + 1\n    time.sleep(10)",
        "detail": "mid-range.Automate_Screenshot",
        "documentation": {}
    },
    {
        "label": "speak",
        "kind": 2,
        "importPath": "mid-range.Automate_Shutdown",
        "description": "mid-range.Automate_Shutdown",
        "peekOfCode": "def speak(audio):\n    speak = Dispatch((\"sapi.spvoice\"))\n    speak.speak(audio)\nspeak(\"Hello, I am your personal assistant\")\ndef TakeCommand():\n    r = sr.Recognizer()\n    with sr.Microphone() as source:\n        print(\"Listening...\")\n        r.pause_threshold = 1\n        r.adjust_for_ambient_noise(source, duration=1)",
        "detail": "mid-range.Automate_Shutdown",
        "documentation": {}
    },
    {
        "label": "TakeCommand",
        "kind": 2,
        "importPath": "mid-range.Automate_Shutdown",
        "description": "mid-range.Automate_Shutdown",
        "peekOfCode": "def TakeCommand():\n    r = sr.Recognizer()\n    with sr.Microphone() as source:\n        print(\"Listening...\")\n        r.pause_threshold = 1\n        r.adjust_for_ambient_noise(source, duration=1)\n        audio = r.listen(source)\n        try:\n            print(\"Recognizing...\")\n            Query = r.recognize_google(audio, language=\"en-in\")",
        "detail": "mid-range.Automate_Shutdown",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.autonotebook",
        "description": "mid-range.autonotebook",
        "peekOfCode": "__all__ = [\"tqdm\", \"trange\"]",
        "detail": "mid-range.autonotebook",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.average-of-levels-in-binary-tree",
        "description": "mid-range.average-of-levels-in-binary-tree",
        "peekOfCode": "class Solution:\n    def averageOfLevels(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[float]\n        \"\"\"\n        root.level = 0\n        q = [root]\n        ans = []\n        sum, num, curLevel = 0, 0, 0",
        "detail": "mid-range.average-of-levels-in-binary-tree",
        "documentation": {}
    },
    {
        "label": "avgSums",
        "kind": 2,
        "importPath": "mid-range.Average",
        "description": "mid-range.Average",
        "peekOfCode": "def avgSums():\n    summingUp = sum(m) + sum(n) + sum(q)\n    summed = summingUp / 3\n    return summed\nprint(avgSums)",
        "detail": "mid-range.Average",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "mid-range.Average",
        "description": "mid-range.Average",
        "peekOfCode": "m = [1, 43, 656, 8, 54, 908, 4, 5, 23, 78, 435, 89, 45, 476, 89]\nn = [234, 56, 90, 675, 56, 786, 90, 564, 8, 657, 87, 64, 354, 2, 75]\nq = [34, 76, 76, 564, 34, 32, 16, 67, 25, 98, 90, 345, 235, 64, 134, 76]\ndef avgSums():\n    summingUp = sum(m) + sum(n) + sum(q)\n    summed = summingUp / 3\n    return summed\nprint(avgSums)",
        "detail": "mid-range.Average",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.Average",
        "description": "mid-range.Average",
        "peekOfCode": "n = [234, 56, 90, 675, 56, 786, 90, 564, 8, 657, 87, 64, 354, 2, 75]\nq = [34, 76, 76, 564, 34, 32, 16, 67, 25, 98, 90, 345, 235, 64, 134, 76]\ndef avgSums():\n    summingUp = sum(m) + sum(n) + sum(q)\n    summed = summingUp / 3\n    return summed\nprint(avgSums)",
        "detail": "mid-range.Average",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "mid-range.Average",
        "description": "mid-range.Average",
        "peekOfCode": "q = [34, 76, 76, 564, 34, 32, 16, 67, 25, 98, 90, 345, 235, 64, 134, 76]\ndef avgSums():\n    summingUp = sum(m) + sum(n) + sum(q)\n    summed = summingUp / 3\n    return summed\nprint(avgSums)",
        "detail": "mid-range.Average",
        "documentation": {}
    },
    {
        "label": "average",
        "kind": 2,
        "importPath": "mid-range.average_calculator",
        "description": "mid-range.average_calculator",
        "peekOfCode": "def average(array):\n    # getting all unique numbers\n    p = set(array)\n    # calculating the total number of elements\n    s = len(p)\n    # computing the average\n    ans = sum(p) / s\n    # printing the result\n    print(\"Average is:\", ans)\n# getting the input",
        "detail": "mid-range.average_calculator",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.average_calculator",
        "description": "mid-range.average_calculator",
        "peekOfCode": "arr = input(\"Enter numbers: \").strip().split()\n# converting elements into integer type for calculating average\narr_int = []\nfor i in arr:\n    arr_int.append(int(i))\n# calling function to compute the average\naverage(arr_int)\n\"\"\"\nCOMPLEXITY:\n\t Time Complexity -> O(1)",
        "detail": "mid-range.average_calculator",
        "documentation": {}
    },
    {
        "label": "arr_int",
        "kind": 5,
        "importPath": "mid-range.average_calculator",
        "description": "mid-range.average_calculator",
        "peekOfCode": "arr_int = []\nfor i in arr:\n    arr_int.append(int(i))\n# calling function to compute the average\naverage(arr_int)\n\"\"\"\nCOMPLEXITY:\n\t Time Complexity -> O(1)\n\t Space Complexity -> O(N)\nSample Input:",
        "detail": "mid-range.average_calculator",
        "documentation": {}
    },
    {
        "label": "average",
        "kind": 2,
        "importPath": "mid-range.average_mean",
        "description": "mid-range.average_mean",
        "peekOfCode": "def average(nums):\n    \"\"\"Find mean of a list of numbers.\"\"\"\n    return sum(nums) / len(nums)\ndef test_average():\n    \"\"\"\n    >>> test_average()\n    \"\"\"\n    assert 12.0 == average([3, 6, 9, 12, 15, 18, 21])\n    assert 20 == average([5, 10, 15, 20, 25, 30, 35])\n    assert 4.5 == average([1, 2, 3, 4, 5, 6, 7, 8])",
        "detail": "mid-range.average_mean",
        "documentation": {}
    },
    {
        "label": "test_average",
        "kind": 2,
        "importPath": "mid-range.average_mean",
        "description": "mid-range.average_mean",
        "peekOfCode": "def test_average():\n    \"\"\"\n    >>> test_average()\n    \"\"\"\n    assert 12.0 == average([3, 6, 9, 12, 15, 18, 21])\n    assert 20 == average([5, 10, 15, 20, 25, 30, 35])\n    assert 4.5 == average([1, 2, 3, 4, 5, 6, 7, 8])\nif __name__ == \"__main__\":\n    \"\"\"Call average module to find mean of a specific list of numbers.\"\"\"\n    print(average([2, 4, 6, 8, 20, 50, 70]))",
        "detail": "mid-range.average_mean",
        "documentation": {}
    },
    {
        "label": "median",
        "kind": 2,
        "importPath": "mid-range.average_median",
        "description": "mid-range.average_median",
        "peekOfCode": "def median(nums):\n    \"\"\"\n    Find median of a list of numbers.\n    >>> median([0])\n    0\n    >>> median([4,1,3,2])\n    2.5\n    >>> median([2, 70, 6, 50, 20, 8, 4])\n    8\n    Args:",
        "detail": "mid-range.average_median",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.average_median",
        "description": "mid-range.average_median",
        "peekOfCode": "def main():\n    import doctest\n    doctest.testmod()\nif __name__ == \"__main__\":\n    main()",
        "detail": "mid-range.average_median",
        "documentation": {}
    },
    {
        "label": "mode",
        "kind": 2,
        "importPath": "mid-range.average_mode",
        "description": "mid-range.average_mode",
        "peekOfCode": "def mode(input_list):  # Defining function \"mode.\"\n    \"\"\"This function returns the mode(Mode as in the measures of\n    central tendency) of the input data.\n    The input list may contain any Datastructure or any Datatype.\n    >>> input_list = [2, 3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 2, 2, 2]\n    >>> mode(input_list)\n    2\n    >>> input_list = [2, 3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 2, 2, 2]\n    >>> mode(input_list) == statistics.mode(input_list)\n    True",
        "detail": "mid-range.average_mode",
        "documentation": {}
    },
    {
        "label": "avgSums",
        "kind": 2,
        "importPath": "mid-range.avg",
        "description": "mid-range.avg",
        "peekOfCode": "def avgSums(a, b, c):\n    summingUp = sum(a) + sum(b) + sum(c)\n    summed = summingUp / 3\n    return summed\nprint(avgSums(m, n, q))\n# [Running] python -u \"c:\\0-a-A-October\\00-weeks\\08-my-website\\Stable\\Public\\2-content\\Data-Structures\\DS-and-Algorithms-Prac\\DS-n-Algos\\Arrays\\python\\sum-avg\\avg.py\"\n# 2892.6666666666665\n#\n# [Done] exited with code=0 in 0.186 seconds",
        "detail": "mid-range.avg",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "mid-range.avg",
        "description": "mid-range.avg",
        "peekOfCode": "m = [1, 43, 656, 8, 54, 908, 4, 5, 23, 78, 435, 89, 45, 476, 89]\nn = [234, 56, 90, 675, 56, 786, 90, 564, 8, 657, 87, 64, 354, 2, 75]\nq = [34, 76, 76, 564, 34, 32, 16, 67, 25, 98, 90, 345, 235, 64, 134, 76]\ndef avgSums(a, b, c):\n    summingUp = sum(a) + sum(b) + sum(c)\n    summed = summingUp / 3\n    return summed\nprint(avgSums(m, n, q))\n# [Running] python -u \"c:\\0-a-A-October\\00-weeks\\08-my-website\\Stable\\Public\\2-content\\Data-Structures\\DS-and-Algorithms-Prac\\DS-n-Algos\\Arrays\\python\\sum-avg\\avg.py\"\n# 2892.6666666666665",
        "detail": "mid-range.avg",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.avg",
        "description": "mid-range.avg",
        "peekOfCode": "n = [234, 56, 90, 675, 56, 786, 90, 564, 8, 657, 87, 64, 354, 2, 75]\nq = [34, 76, 76, 564, 34, 32, 16, 67, 25, 98, 90, 345, 235, 64, 134, 76]\ndef avgSums(a, b, c):\n    summingUp = sum(a) + sum(b) + sum(c)\n    summed = summingUp / 3\n    return summed\nprint(avgSums(m, n, q))\n# [Running] python -u \"c:\\0-a-A-October\\00-weeks\\08-my-website\\Stable\\Public\\2-content\\Data-Structures\\DS-and-Algorithms-Prac\\DS-n-Algos\\Arrays\\python\\sum-avg\\avg.py\"\n# 2892.6666666666665\n#",
        "detail": "mid-range.avg",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "mid-range.avg",
        "description": "mid-range.avg",
        "peekOfCode": "q = [34, 76, 76, 564, 34, 32, 16, 67, 25, 98, 90, 345, 235, 64, 134, 76]\ndef avgSums(a, b, c):\n    summingUp = sum(a) + sum(b) + sum(c)\n    summed = summingUp / 3\n    return summed\nprint(avgSums(m, n, q))\n# [Running] python -u \"c:\\0-a-A-October\\00-weeks\\08-my-website\\Stable\\Public\\2-content\\Data-Structures\\DS-and-Algorithms-Prac\\DS-n-Algos\\Arrays\\python\\sum-avg\\avg.py\"\n# 2892.6666666666665\n#\n# [Done] exited with code=0 in 0.186 seconds",
        "detail": "mid-range.avg",
        "documentation": {}
    },
    {
        "label": "fh",
        "kind": 5,
        "importPath": "mid-range.avg_xdspam_confidence",
        "description": "mid-range.avg_xdspam_confidence",
        "peekOfCode": "fh = open(\"mbox-short.txt\")\n# The 'mbox-short.txt' file can be downloaded from the link: https://www.py4e.com/code3/mbox-short.txt\nsum = 0\ncount = 0\nfor fx in fh:\n    fx = fx.rstrip()\n    if not fx.startswith(\"X-DSPAM-Confidence:\"):\n        continue\n    fy = fx[19:]\n    count = count + 1",
        "detail": "mid-range.avg_xdspam_confidence",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 5,
        "importPath": "mid-range.avg_xdspam_confidence",
        "description": "mid-range.avg_xdspam_confidence",
        "peekOfCode": "sum = 0\ncount = 0\nfor fx in fh:\n    fx = fx.rstrip()\n    if not fx.startswith(\"X-DSPAM-Confidence:\"):\n        continue\n    fy = fx[19:]\n    count = count + 1\n    sum = sum + float(fy)\nprint(\"Average spam confidence: \", sum / count)",
        "detail": "mid-range.avg_xdspam_confidence",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "mid-range.avg_xdspam_confidence",
        "description": "mid-range.avg_xdspam_confidence",
        "peekOfCode": "count = 0\nfor fx in fh:\n    fx = fx.rstrip()\n    if not fx.startswith(\"X-DSPAM-Confidence:\"):\n        continue\n    fy = fx[19:]\n    count = count + 1\n    sum = sum + float(fy)\nprint(\"Average spam confidence: \", sum / count)",
        "detail": "mid-range.avg_xdspam_confidence",
        "documentation": {}
    },
    {
        "label": "avoidObstacles",
        "kind": 2,
        "importPath": "mid-range.avoidObstacles",
        "description": "mid-range.avoidObstacles",
        "peekOfCode": "def avoidObstacles(inputArray):\n    for i in range(1, max(inputArray)):\n        divs = any([x for x in inputArray if not x % i])\n        if not divs:\n            return i\n    return max(inputArray) + 1",
        "detail": "mid-range.avoidObstacles",
        "documentation": {}
    },
    {
        "label": "avoidObstacles",
        "kind": 2,
        "importPath": "mid-range.avoid_obstacles",
        "description": "mid-range.avoid_obstacles",
        "peekOfCode": "def avoidObstacles(inputArray):\n    sortedlist = sorted(inputArray)  # Sort list in ascending order\n    jump_dist = 1  # Set jump distance to 1 initially\n    obstacle_hit = True  # Flag to check if current jump distance hit an obstacle\n    while obstacle_hit:\n        obstacle_hit = False  # Set flag to false as we check next jump distance\n        jump_dist += (\n            1\n        )  # Increment jump distance as we check if next value hits no obstacles\n        # Check if jumping with current length hits an obstacle",
        "detail": "mid-range.avoid_obstacles",
        "documentation": {}
    },
    {
        "label": "backpedal",
        "kind": 2,
        "importPath": "mid-range.backpedal",
        "description": "mid-range.backpedal",
        "peekOfCode": "def backpedal(goal: Node, parents: Mapping[Node, Optional[Node]]) -> list[Node]:\n    \"\"\"With a dict of parent->child, walk backwards from the goal as far as possible and return the path.\"\"\"\n    back_path = []\n    node = goal\n    while node is not None:\n        back_path.append(node)\n        node = parents[node]\n    return back_path[::-1]",
        "detail": "mid-range.backpedal",
        "documentation": {}
    },
    {
        "label": "backpedal",
        "kind": 2,
        "importPath": "mid-range.backpedal_(1)",
        "description": "mid-range.backpedal_(1)",
        "peekOfCode": "def backpedal(goal: Node, parents: Mapping[Node, Optional[Node]]) -> list[Node]:\n    \"\"\"With a dict of parent->child, walk backwards from the goal as far as possible and return the path.\"\"\"\n    back_path = []\n    node = goal\n    while node is not None:\n        back_path.append(node)\n        node = parents[node]\n    return back_path[::-1]",
        "detail": "mid-range.backpedal_(1)",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.BackSpaceStringCompare",
        "description": "mid-range.BackSpaceStringCompare",
        "peekOfCode": "class Solution:\n    def backspaceCompare(self, S: str, T: str) -> bool:\n        def deleteBackSpace(X):\n            stack = []\n            for i in X:\n                if not i == \"#\":\n                    stack.append(i)\n                elif len(stack) == 0:\n                    continue\n                else:",
        "detail": "mid-range.BackSpaceStringCompare",
        "documentation": {}
    },
    {
        "label": "backspaceCompare",
        "kind": 2,
        "importPath": "mid-range.Backspace_String_compare",
        "description": "mid-range.Backspace_String_compare",
        "peekOfCode": "def backspaceCompare(S, T):\n    return __helperFunc(S) == __helperFunc(T)\ndef __helperFunc(s):\n    stack = []\n    for ele in s:\n        if ele != \"#\":\n            stack.append(ele)\n        else:\n            if len(stack) > 0:\n                stack.pop()",
        "detail": "mid-range.Backspace_String_compare",
        "documentation": {}
    },
    {
        "label": "S",
        "kind": 5,
        "importPath": "mid-range.bad_string",
        "description": "mid-range.bad_string",
        "peekOfCode": "S = input().strip()\ntry:\n    # if it's possible to convert the entered string into an integer then this block will execute\n    print(int(S))\nexcept:\n    # if it's not possible, then this block will be executed\n    print(\"Bad String\")\n\"\"\"\nCOMPLEXITY:\n\t Time Complexity -> O(1)",
        "detail": "mid-range.bad_string",
        "documentation": {}
    },
    {
        "label": "checkValidString",
        "kind": 2,
        "importPath": "mid-range.balance+paranteses",
        "description": "mid-range.balance+paranteses",
        "peekOfCode": "def checkValidString(s):\n    \"\"\"\n    TimeComplexity: O(n)\n    SpaceComplexity: O(1)\n    \"\"\"\n    used_stars = 0\n    unused_stars = 0\n    open_p = 0\n    for p in s:\n        if p == \"(\":",
        "detail": "mid-range.balance+paranteses",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.BalanceaBST",
        "description": "mid-range.BalanceaBST",
        "peekOfCode": "class Solution:\n    def balanceBST(self, root: TreeNode) -> TreeNode:\n        result = []\n        def inorder(node):\n            if node:\n                if node.left != None:\n                    inorder(node.left)\n                result.append(int(node.val))\n                if node.right != None:\n                    inorder(node.right)",
        "detail": "mid-range.BalanceaBST",
        "documentation": {}
    },
    {
        "label": "balancedBrackets",
        "kind": 2,
        "importPath": "mid-range.balanced-brackets",
        "description": "mid-range.balanced-brackets",
        "peekOfCode": "def balancedBrackets(string):\n    stack = []\n    # Process every character on input\n    for char in string:\n        # Assign an initial value in case the stack is empty\n        last = 0\n        # Assign the value of the last element if stack is not empty\n        if stack:\n            last = stack[len(stack) - 1]\n        if stack and last in brackets and brackets[last] == char:",
        "detail": "mid-range.balanced-brackets",
        "documentation": {}
    },
    {
        "label": "brackets",
        "kind": 5,
        "importPath": "mid-range.balanced-brackets",
        "description": "mid-range.balanced-brackets",
        "peekOfCode": "brackets = {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n# On each input string, process it using the balance checker\ndef balancedBrackets(string):\n    stack = []\n    # Process every character on input\n    for char in string:\n        # Assign an initial value in case the stack is empty\n        last = 0\n        # Assign the value of the last element if stack is not empty\n        if stack:",
        "detail": "mid-range.balanced-brackets",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Balanced-Paranthesis",
        "description": "mid-range.Balanced-Paranthesis",
        "peekOfCode": "class Solution:\n    # @param A : string\n    # @return an integer\n    def solve(self, A):\n        stack = []\n        c = Counter(A)\n        for i in A:\n            if i == \"(\":\n                stack.append(\"(\")\n                continue",
        "detail": "mid-range.Balanced-Paranthesis",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.Balanced_Binary_Tree",
        "description": "mid-range.Balanced_Binary_Tree",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\nclass Solution:\n    def isBalanced(self, root):\n        def helper(root):\n            if not root:\n                return (True, 0)",
        "detail": "mid-range.Balanced_Binary_Tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Balanced_Binary_Tree",
        "description": "mid-range.Balanced_Binary_Tree",
        "peekOfCode": "class Solution:\n    def isBalanced(self, root):\n        def helper(root):\n            if not root:\n                return (True, 0)\n            leftB, leftH = helper(root.left)\n            rightB, rightH = helper(root.right)\n            return (\n                leftB and rightB and abs(leftH - rightH) <= 1,\n                max(leftH, rightH) + 1,",
        "detail": "mid-range.Balanced_Binary_Tree",
        "documentation": {}
    },
    {
        "label": "balanced_parentheses",
        "kind": 2,
        "importPath": "mid-range.balanced_parentheses",
        "description": "mid-range.balanced_parentheses",
        "peekOfCode": "def balanced_parentheses(parentheses):\n    \"\"\" Use a stack to check if a string of parentheses are balanced.\"\"\"\n    stack = Stack(len(parentheses))\n    for parenthesis in parentheses:\n        if parenthesis == \"(\":\n            stack.push(parenthesis)\n        elif parenthesis == \")\":\n            stack.pop()\n    return not stack.is_empty()\nif __name__ == \"__main__\":",
        "detail": "mid-range.balanced_parentheses",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "mid-range.balanced_parentheses",
        "description": "mid-range.balanced_parentheses",
        "peekOfCode": "__author__ = \"Omkar Pathak\"\ndef balanced_parentheses(parentheses):\n    \"\"\" Use a stack to check if a string of parentheses are balanced.\"\"\"\n    stack = Stack(len(parentheses))\n    for parenthesis in parentheses:\n        if parenthesis == \"(\":\n            stack.push(parenthesis)\n        elif parenthesis == \")\":\n            stack.pop()\n    return not stack.is_empty()",
        "detail": "mid-range.balanced_parentheses",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "mid-range.balance_parenthesis",
        "description": "mid-range.balance_parenthesis",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()\n    def is_empty(self):\n        return self.items == []\n    def peek(self):",
        "detail": "mid-range.balance_parenthesis",
        "documentation": {}
    },
    {
        "label": "is_same",
        "kind": 2,
        "importPath": "mid-range.balance_parenthesis",
        "description": "mid-range.balance_parenthesis",
        "peekOfCode": "def is_same(p1, p2):\n    if p1 == \"(\" and p2 == \")\":\n        return True\n    elif p1 == \"[\" and p2 == \"]\":\n        return True\n    elif p1 == \"{\" and p2 == \"}\":\n        return True\n    else:\n        return False\ndef is_balanced(check_string):",
        "detail": "mid-range.balance_parenthesis",
        "documentation": {}
    },
    {
        "label": "is_balanced",
        "kind": 2,
        "importPath": "mid-range.balance_parenthesis",
        "description": "mid-range.balance_parenthesis",
        "peekOfCode": "def is_balanced(check_string):\n    s = Stack()\n    index = 0\n    is_bal = True\n    while index < len(check_string) and is_bal:\n        paren = check_string[index]\n        if paren in \"{[(\":\n            s.push(paren)\n        else:\n            if s.is_empty():",
        "detail": "mid-range.balance_parenthesis",
        "documentation": {}
    },
    {
        "label": "balance",
        "kind": 2,
        "importPath": "mid-range.balance_parenthisis",
        "description": "mid-range.balance_parenthisis",
        "peekOfCode": "def balance(arr):\n    open_bracket = [\"[\", \"{\", \"(\"]\n    close_bracket = [\"]\", \"}\", \")\"]\n    stack = []\n    for i in arr:\n        if i in open_bracket:\n            stack.append(i)\n        elif i in close_bracket:\n            pos = close_bracket.index(i)\n            if len(stack) >= 0 and (open_bracket[pos] == stack[len(stack) - 1]):",
        "detail": "mid-range.balance_parenthisis",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.balance_parenthisis",
        "description": "mid-range.balance_parenthisis",
        "peekOfCode": "arr = [\"{\", \"[\", \"]\", \"}\"]\nprint(balance(arr))",
        "detail": "mid-range.balance_parenthisis",
        "documentation": {}
    },
    {
        "label": "BallObject",
        "kind": 6,
        "importPath": "mid-range.ball",
        "description": "mid-range.ball",
        "peekOfCode": "class BallObject(pyglet.shapes.Circle):\n    def __init__(self, *args, **kwargs):\n        super(BallObject, self).__init__(*args, **kwargs)\n        self.color = (255, 180, 0)\n        self.velocity_x, self.velocity_y = 0.0, 0.0\n    def update(self, win_size: Tuple, border: Tuple, other_object, dt) -> None:\n        speed = [\n            2.37,\n            2.49,\n            2.54,",
        "detail": "mid-range.ball",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.Bar_Graph",
        "description": "mid-range.Bar_Graph",
        "peekOfCode": "x = []\ny = []\na = int(input(\"Enter the number of values that you want to represent in Bar graph : \"))\nprint(\"X-axis\")\nfor i in range(a):\n    p = int(input(f\"Enter the {i+1} value on X axis : \"))\n    x.append(p)\nprint(\"Y-axis\")\nfor j in range(a):\n    q = int(input(f\"Enter the {j+1} value on Y axis : \"))",
        "detail": "mid-range.Bar_Graph",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "mid-range.Bar_Graph",
        "description": "mid-range.Bar_Graph",
        "peekOfCode": "y = []\na = int(input(\"Enter the number of values that you want to represent in Bar graph : \"))\nprint(\"X-axis\")\nfor i in range(a):\n    p = int(input(f\"Enter the {i+1} value on X axis : \"))\n    x.append(p)\nprint(\"Y-axis\")\nfor j in range(a):\n    q = int(input(f\"Enter the {j+1} value on Y axis : \"))\n    y.append(q)",
        "detail": "mid-range.Bar_Graph",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.Bar_Graph",
        "description": "mid-range.Bar_Graph",
        "peekOfCode": "a = int(input(\"Enter the number of values that you want to represent in Bar graph : \"))\nprint(\"X-axis\")\nfor i in range(a):\n    p = int(input(f\"Enter the {i+1} value on X axis : \"))\n    x.append(p)\nprint(\"Y-axis\")\nfor j in range(a):\n    q = int(input(f\"Enter the {j+1} value on Y axis : \"))\n    y.append(q)\n# To set the name of the window",
        "detail": "mid-range.Bar_Graph",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "mid-range.Bar_Graph",
        "description": "mid-range.Bar_Graph",
        "peekOfCode": "fig = pyplot.gcf()\nfig.canvas.set_window_title(\"BAR GRAPH\")\n# To set title of the window\npyplot.title(\"Bar Graph representation\")\npyplot.bar(x, y)\npyplot.show()",
        "detail": "mid-range.Bar_Graph",
        "documentation": {}
    },
    {
        "label": "Filter",
        "kind": 6,
        "importPath": "mid-range.base",
        "description": "mid-range.base",
        "peekOfCode": "class Filter(object):\n    def __init__(self, source):\n        self.source = source\n    def __iter__(self):\n        return iter(self.source)\n    def __getattr__(self, name):\n        return getattr(self.source, name)",
        "detail": "mid-range.base",
        "documentation": {}
    },
    {
        "label": "encode_to_b16",
        "kind": 2,
        "importPath": "mid-range.base16",
        "description": "mid-range.base16",
        "peekOfCode": "def encode_to_b16(inp: str) -> bytes:\n    \"\"\"\n    Encodes a given utf-8 string into base-16.\n    >>> encode_to_b16('Hello World!')\n    b'48656C6C6F20576F726C6421'\n    >>> encode_to_b16('HELLO WORLD!')\n    b'48454C4C4F20574F524C4421'\n    >>> encode_to_b16('')\n    b''\n    \"\"\"",
        "detail": "mid-range.base16",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.base32",
        "description": "mid-range.base32",
        "peekOfCode": "def main() -> None:\n    inp = input(\"->\")\n    encoded = inp.encode(\"utf-8\")  # encoded the input (we need a bytes like object)\n    b32encoded = base64.b32encode(encoded)  # b32encoded the encoded string\n    print(b32encoded)\n    print(base64.b32decode(b32encoded).decode(\"utf-8\"))  # decoded it\nif __name__ == \"__main__\":\n    main()",
        "detail": "mid-range.base32",
        "documentation": {}
    },
    {
        "label": "encoded_data",
        "kind": 5,
        "importPath": "mid-range.base64_b64decode",
        "description": "mid-range.base64_b64decode",
        "peekOfCode": "encoded_data = b\"VGhpcyBpcyB0aGUgZGF0YSwgaW4gdGhlIGNsZWFyLg==\"\ndecoded_data = base64.b64decode(encoded_data)\nprint(\"Encoded :\", encoded_data)\nprint(\"Decoded :\", decoded_data)",
        "detail": "mid-range.base64_b64decode",
        "documentation": {}
    },
    {
        "label": "decoded_data",
        "kind": 5,
        "importPath": "mid-range.base64_b64decode",
        "description": "mid-range.base64_b64decode",
        "peekOfCode": "decoded_data = base64.b64decode(encoded_data)\nprint(\"Encoded :\", encoded_data)\nprint(\"Decoded :\", decoded_data)",
        "detail": "mid-range.base64_b64decode",
        "documentation": {}
    },
    {
        "label": "byte_string",
        "kind": 5,
        "importPath": "mid-range.base64_b64encode",
        "description": "mid-range.base64_b64encode",
        "peekOfCode": "byte_string = initial_data.encode(\"utf-8\")\nencoded_data = base64.b64encode(byte_string)\nnum_initial = len(byte_string)\n# There will never be more than 2 padding bytes.\npadding = 3 - (num_initial % 3)\nprint(\"{} bytes before encoding\".format(num_initial))\nprint(\"Expect {} padding bytes\".format(padding))\nprint(\"{} bytes after encoding\\n\".format(len(encoded_data)))\nprint(encoded_data)",
        "detail": "mid-range.base64_b64encode",
        "documentation": {}
    },
    {
        "label": "encoded_data",
        "kind": 5,
        "importPath": "mid-range.base64_b64encode",
        "description": "mid-range.base64_b64encode",
        "peekOfCode": "encoded_data = base64.b64encode(byte_string)\nnum_initial = len(byte_string)\n# There will never be more than 2 padding bytes.\npadding = 3 - (num_initial % 3)\nprint(\"{} bytes before encoding\".format(num_initial))\nprint(\"Expect {} padding bytes\".format(padding))\nprint(\"{} bytes after encoding\\n\".format(len(encoded_data)))\nprint(encoded_data)",
        "detail": "mid-range.base64_b64encode",
        "documentation": {}
    },
    {
        "label": "num_initial",
        "kind": 5,
        "importPath": "mid-range.base64_b64encode",
        "description": "mid-range.base64_b64encode",
        "peekOfCode": "num_initial = len(byte_string)\n# There will never be more than 2 padding bytes.\npadding = 3 - (num_initial % 3)\nprint(\"{} bytes before encoding\".format(num_initial))\nprint(\"Expect {} padding bytes\".format(padding))\nprint(\"{} bytes after encoding\\n\".format(len(encoded_data)))\nprint(encoded_data)",
        "detail": "mid-range.base64_b64encode",
        "documentation": {}
    },
    {
        "label": "padding",
        "kind": 5,
        "importPath": "mid-range.base64_b64encode",
        "description": "mid-range.base64_b64encode",
        "peekOfCode": "padding = 3 - (num_initial % 3)\nprint(\"{} bytes before encoding\".format(num_initial))\nprint(\"Expect {} padding bytes\".format(padding))\nprint(\"{} bytes after encoding\\n\".format(len(encoded_data)))\nprint(encoded_data)",
        "detail": "mid-range.base64_b64encode",
        "documentation": {}
    },
    {
        "label": "original_data",
        "kind": 5,
        "importPath": "mid-range.base64_base16",
        "description": "mid-range.base64_base16",
        "peekOfCode": "original_data = b\"This is the data, in the clear.\"\nprint(\"Original:\", original_data)\nencoded_data = base64.b16encode(original_data)\nprint(\"Encoded :\", encoded_data)\ndecoded_data = base64.b16decode(encoded_data)\nprint(\"Decoded :\", decoded_data)",
        "detail": "mid-range.base64_base16",
        "documentation": {}
    },
    {
        "label": "encoded_data",
        "kind": 5,
        "importPath": "mid-range.base64_base16",
        "description": "mid-range.base64_base16",
        "peekOfCode": "encoded_data = base64.b16encode(original_data)\nprint(\"Encoded :\", encoded_data)\ndecoded_data = base64.b16decode(encoded_data)\nprint(\"Decoded :\", decoded_data)",
        "detail": "mid-range.base64_base16",
        "documentation": {}
    },
    {
        "label": "decoded_data",
        "kind": 5,
        "importPath": "mid-range.base64_base16",
        "description": "mid-range.base64_base16",
        "peekOfCode": "decoded_data = base64.b16decode(encoded_data)\nprint(\"Decoded :\", decoded_data)",
        "detail": "mid-range.base64_base16",
        "documentation": {}
    },
    {
        "label": "original_data",
        "kind": 5,
        "importPath": "mid-range.base64_base32",
        "description": "mid-range.base64_base32",
        "peekOfCode": "original_data = b\"This is the data, in the clear.\"\nprint(\"Original:\", original_data)\nencoded_data = base64.b32encode(original_data)\nprint(\"Encoded :\", encoded_data)\ndecoded_data = base64.b32decode(encoded_data)\nprint(\"Decoded :\", decoded_data)",
        "detail": "mid-range.base64_base32",
        "documentation": {}
    },
    {
        "label": "encoded_data",
        "kind": 5,
        "importPath": "mid-range.base64_base32",
        "description": "mid-range.base64_base32",
        "peekOfCode": "encoded_data = base64.b32encode(original_data)\nprint(\"Encoded :\", encoded_data)\ndecoded_data = base64.b32decode(encoded_data)\nprint(\"Decoded :\", decoded_data)",
        "detail": "mid-range.base64_base32",
        "documentation": {}
    },
    {
        "label": "decoded_data",
        "kind": 5,
        "importPath": "mid-range.base64_base32",
        "description": "mid-range.base64_base32",
        "peekOfCode": "decoded_data = base64.b32decode(encoded_data)\nprint(\"Decoded :\", decoded_data)",
        "detail": "mid-range.base64_base32",
        "documentation": {}
    },
    {
        "label": "original_data",
        "kind": 5,
        "importPath": "mid-range.base64_base85",
        "description": "mid-range.base64_base85",
        "peekOfCode": "original_data = b\"This is the data, in the clear.\"\nprint(\"Original    : {} bytes {!r}\".format(len(original_data), original_data))\nb64_data = base64.b64encode(original_data)\nprint(\"b64 Encoded : {} bytes {!r}\".format(len(b64_data), b64_data))\nb85_data = base64.b85encode(original_data)\nprint(\"b85 Encoded : {} bytes {!r}\".format(len(b85_data), b85_data))\na85_data = base64.a85encode(original_data)\nprint(\"a85 Encoded : {} bytes {!r}\".format(len(a85_data), a85_data))",
        "detail": "mid-range.base64_base85",
        "documentation": {}
    },
    {
        "label": "b64_data",
        "kind": 5,
        "importPath": "mid-range.base64_base85",
        "description": "mid-range.base64_base85",
        "peekOfCode": "b64_data = base64.b64encode(original_data)\nprint(\"b64 Encoded : {} bytes {!r}\".format(len(b64_data), b64_data))\nb85_data = base64.b85encode(original_data)\nprint(\"b85 Encoded : {} bytes {!r}\".format(len(b85_data), b85_data))\na85_data = base64.a85encode(original_data)\nprint(\"a85 Encoded : {} bytes {!r}\".format(len(a85_data), a85_data))",
        "detail": "mid-range.base64_base85",
        "documentation": {}
    },
    {
        "label": "b85_data",
        "kind": 5,
        "importPath": "mid-range.base64_base85",
        "description": "mid-range.base64_base85",
        "peekOfCode": "b85_data = base64.b85encode(original_data)\nprint(\"b85 Encoded : {} bytes {!r}\".format(len(b85_data), b85_data))\na85_data = base64.a85encode(original_data)\nprint(\"a85 Encoded : {} bytes {!r}\".format(len(a85_data), a85_data))",
        "detail": "mid-range.base64_base85",
        "documentation": {}
    },
    {
        "label": "a85_data",
        "kind": 5,
        "importPath": "mid-range.base64_base85",
        "description": "mid-range.base64_base85",
        "peekOfCode": "a85_data = base64.a85encode(original_data)\nprint(\"a85 Encoded : {} bytes {!r}\".format(len(a85_data), a85_data))",
        "detail": "mid-range.base64_base85",
        "documentation": {}
    },
    {
        "label": "encodes_with_pluses",
        "kind": 5,
        "importPath": "mid-range.base64_urlsafe",
        "description": "mid-range.base64_urlsafe",
        "peekOfCode": "encodes_with_pluses = b\"\\xfb\\xef\"\nencodes_with_slashes = b\"\\xff\\xff\"\nfor original in [encodes_with_pluses, encodes_with_slashes]:\n    print(\"Original         :\", repr(original))\n    print(\"Standard encoding:\", base64.standard_b64encode(original))\n    print(\"URL-safe encoding:\", base64.urlsafe_b64encode(original))\n    print()",
        "detail": "mid-range.base64_urlsafe",
        "documentation": {}
    },
    {
        "label": "encodes_with_slashes",
        "kind": 5,
        "importPath": "mid-range.base64_urlsafe",
        "description": "mid-range.base64_urlsafe",
        "peekOfCode": "encodes_with_slashes = b\"\\xff\\xff\"\nfor original in [encodes_with_pluses, encodes_with_slashes]:\n    print(\"Original         :\", repr(original))\n    print(\"Standard encoding:\", base64.standard_b64encode(original))\n    print(\"URL-safe encoding:\", base64.urlsafe_b64encode(original))\n    print()",
        "detail": "mid-range.base64_urlsafe",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.base85",
        "description": "mid-range.base85",
        "peekOfCode": "def main() -> None:\n    inp = input(\"->\")\n    encoded = inp.encode(\"utf-8\")  # encoded the input (we need a bytes like object)\n    a85encoded = base64.a85encode(encoded)  # a85encoded the encoded string\n    print(a85encoded)\n    print(base64.a85decode(a85encoded).decode(\"utf-8\"))  # decoded it\nif __name__ == \"__main__\":\n    main()",
        "detail": "mid-range.base85",
        "documentation": {}
    },
    {
        "label": "plt.rcParams[\"font.family\"]",
        "kind": 5,
        "importPath": "mid-range.base_graph",
        "description": "mid-range.base_graph",
        "peekOfCode": "plt.rcParams[\"font.family\"] = \"MEIRYO\"\nplt.rcParams[\"font.size\"] = 18\nw, h, dpi = 1920, 1080, 144\nfig = plt.figure(figsize=(w / dpi, h / dpi), dpi=dpi, facecolor=\"white\")\nx = np.arange(-0.2, 7, 0.001)\ny1 = 3 * np.sin(x)\ny2 = 2.3 * np.sin(x)\nplt.xticks(np.linspace(0, np.pi * 2.5, num=6, endpoint=True))\nplt.yticks(np.linspace(-11, 11, num=23, endpoint=True))\nplt.grid(True)",
        "detail": "mid-range.base_graph",
        "documentation": {}
    },
    {
        "label": "plt.rcParams[\"font.size\"]",
        "kind": 5,
        "importPath": "mid-range.base_graph",
        "description": "mid-range.base_graph",
        "peekOfCode": "plt.rcParams[\"font.size\"] = 18\nw, h, dpi = 1920, 1080, 144\nfig = plt.figure(figsize=(w / dpi, h / dpi), dpi=dpi, facecolor=\"white\")\nx = np.arange(-0.2, 7, 0.001)\ny1 = 3 * np.sin(x)\ny2 = 2.3 * np.sin(x)\nplt.xticks(np.linspace(0, np.pi * 2.5, num=6, endpoint=True))\nplt.yticks(np.linspace(-11, 11, num=23, endpoint=True))\nplt.grid(True)\nplt.plot(x, y1, label=\"電流\")",
        "detail": "mid-range.base_graph",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "mid-range.base_graph",
        "description": "mid-range.base_graph",
        "peekOfCode": "fig = plt.figure(figsize=(w / dpi, h / dpi), dpi=dpi, facecolor=\"white\")\nx = np.arange(-0.2, 7, 0.001)\ny1 = 3 * np.sin(x)\ny2 = 2.3 * np.sin(x)\nplt.xticks(np.linspace(0, np.pi * 2.5, num=6, endpoint=True))\nplt.yticks(np.linspace(-11, 11, num=23, endpoint=True))\nplt.grid(True)\nplt.plot(x, y1, label=\"電流\")\nplt.plot(x, y2, label=\"両端電圧\")\nplt.legend()",
        "detail": "mid-range.base_graph",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.base_graph",
        "description": "mid-range.base_graph",
        "peekOfCode": "x = np.arange(-0.2, 7, 0.001)\ny1 = 3 * np.sin(x)\ny2 = 2.3 * np.sin(x)\nplt.xticks(np.linspace(0, np.pi * 2.5, num=6, endpoint=True))\nplt.yticks(np.linspace(-11, 11, num=23, endpoint=True))\nplt.grid(True)\nplt.plot(x, y1, label=\"電流\")\nplt.plot(x, y2, label=\"両端電圧\")\nplt.legend()\nplt.legend(bbox_to_anchor=(1, 1), loc=\"upper right\", borderaxespad=1)",
        "detail": "mid-range.base_graph",
        "documentation": {}
    },
    {
        "label": "y1",
        "kind": 5,
        "importPath": "mid-range.base_graph",
        "description": "mid-range.base_graph",
        "peekOfCode": "y1 = 3 * np.sin(x)\ny2 = 2.3 * np.sin(x)\nplt.xticks(np.linspace(0, np.pi * 2.5, num=6, endpoint=True))\nplt.yticks(np.linspace(-11, 11, num=23, endpoint=True))\nplt.grid(True)\nplt.plot(x, y1, label=\"電流\")\nplt.plot(x, y2, label=\"両端電圧\")\nplt.legend()\nplt.legend(bbox_to_anchor=(1, 1), loc=\"upper right\", borderaxespad=1)\nplt.show()",
        "detail": "mid-range.base_graph",
        "documentation": {}
    },
    {
        "label": "y2",
        "kind": 5,
        "importPath": "mid-range.base_graph",
        "description": "mid-range.base_graph",
        "peekOfCode": "y2 = 2.3 * np.sin(x)\nplt.xticks(np.linspace(0, np.pi * 2.5, num=6, endpoint=True))\nplt.yticks(np.linspace(-11, 11, num=23, endpoint=True))\nplt.grid(True)\nplt.plot(x, y1, label=\"電流\")\nplt.plot(x, y2, label=\"両端電圧\")\nplt.legend()\nplt.legend(bbox_to_anchor=(1, 1), loc=\"upper right\", borderaxespad=1)\nplt.show()",
        "detail": "mid-range.base_graph",
        "documentation": {}
    },
    {
        "label": "BaseJobResource",
        "kind": 6,
        "importPath": "mid-range.base_job",
        "description": "mid-range.base_job",
        "peekOfCode": "class BaseJobResource(Resource):\n    def dispatch_request(\n        self,\n        provider: str,\n        owner_name: str,\n        repo_name: str,\n        build_number: int,\n        job_number: int,\n        *args,\n        **kwargs",
        "detail": "mid-range.base_job",
        "documentation": {}
    },
    {
        "label": "Spinner",
        "kind": 5,
        "importPath": "mid-range.base_spinner",
        "description": "mid-range.base_spinner",
        "peekOfCode": "Spinner = namedtuple(\"Spinner\", \"frames interval\")\ndefault_spinner = Spinner(\"⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏\", 80)",
        "detail": "mid-range.base_spinner",
        "documentation": {}
    },
    {
        "label": "default_spinner",
        "kind": 5,
        "importPath": "mid-range.base_spinner",
        "description": "mid-range.base_spinner",
        "peekOfCode": "default_spinner = Spinner(\"⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏\", 80)",
        "detail": "mid-range.base_spinner",
        "documentation": {}
    },
    {
        "label": "pdf",
        "kind": 5,
        "importPath": "mid-range.basic",
        "description": "mid-range.basic",
        "peekOfCode": "pdf = FPDF()\n# Set Author Name of the PDF\npdf.set_author(\"@NavonilDas\")\n# Set Subject of The PDF\npdf.set_subject(\"python\")\n# Set the Title of the PDF\npdf.set_title(\"Generating PDF with Python\")\npdf.add_page()\n# Set Font family Courier with font size 28\npdf.set_font(\"Courier\", \"\", 18)",
        "detail": "mid-range.basic",
        "documentation": {}
    },
    {
        "label": "kilometers",
        "kind": 5,
        "importPath": "mid-range.basic_example",
        "description": "mid-range.basic_example",
        "peekOfCode": "kilometers = float(input(\"Enter value in kilometers: \"))\n# conversion factor\nconv_fac = 0.621371\n# calculate miles\nmiles = kilometers * conv_fac\nprint(\"%0.2f kilometers is equal to %0.2f miles\" % (kilometers, miles))",
        "detail": "mid-range.basic_example",
        "documentation": {}
    },
    {
        "label": "conv_fac",
        "kind": 5,
        "importPath": "mid-range.basic_example",
        "description": "mid-range.basic_example",
        "peekOfCode": "conv_fac = 0.621371\n# calculate miles\nmiles = kilometers * conv_fac\nprint(\"%0.2f kilometers is equal to %0.2f miles\" % (kilometers, miles))",
        "detail": "mid-range.basic_example",
        "documentation": {}
    },
    {
        "label": "miles",
        "kind": 5,
        "importPath": "mid-range.basic_example",
        "description": "mid-range.basic_example",
        "peekOfCode": "miles = kilometers * conv_fac\nprint(\"%0.2f kilometers is equal to %0.2f miles\" % (kilometers, miles))",
        "detail": "mid-range.basic_example",
        "documentation": {}
    },
    {
        "label": "findSum",
        "kind": 2,
        "importPath": "mid-range.bb1",
        "description": "mid-range.bb1",
        "peekOfCode": "def findSum(N, S):\n    result = []\n    find(N, S, [], result)\n    return result\ndef find(N, S, path, result):\n    if N <= 0:\n        return\n    if S < 0:\n        return\n    for i in range(21):",
        "detail": "mid-range.bb1",
        "documentation": {}
    },
    {
        "label": "find",
        "kind": 2,
        "importPath": "mid-range.bb1",
        "description": "mid-range.bb1",
        "peekOfCode": "def find(N, S, path, result):\n    if N <= 0:\n        return\n    if S < 0:\n        return\n    for i in range(21):\n        if i == S:\n            path.append(i)\n            while N > 0:\n                path.append(0)",
        "detail": "mid-range.bb1",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "mid-range.bb1",
        "description": "mid-range.bb1",
        "peekOfCode": "result = findSum(5, 3)",
        "detail": "mid-range.bb1",
        "documentation": {}
    },
    {
        "label": "bdist_rpm",
        "kind": 6,
        "importPath": "mid-range.bdist_rpm",
        "description": "mid-range.bdist_rpm",
        "peekOfCode": "class bdist_rpm(orig.bdist_rpm):\n    \"\"\"\n    Override the default bdist_rpm behavior to do the following:\n    1. Run egg_info to ensure the name and version are properly calculated.\n    2. Always run 'install' using --single-version-externally-managed to\n       disable eggs in RPM distributions.\n    \"\"\"\n    def run(self):\n        # ensure distro name is up-to-date\n        self.run_command(\"egg_info\")",
        "detail": "mid-range.bdist_rpm",
        "documentation": {}
    },
    {
        "label": "bead_sort",
        "kind": 2,
        "importPath": "mid-range.bead_sort",
        "description": "mid-range.bead_sort",
        "peekOfCode": "def bead_sort(sequence: list) -> list:\n    \"\"\"\n    >>> bead_sort([6, 11, 12, 4, 1, 5])\n    [1, 4, 5, 6, 11, 12]\n    >>> bead_sort([9, 8, 7, 6, 5, 4 ,3, 2, 1])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    >>> bead_sort([5, 0, 4, 3])\n    [0, 3, 4, 5]\n    >>> bead_sort([8, 2, 1])\n    [1, 2, 8]",
        "detail": "mid-range.bead_sort",
        "documentation": {}
    },
    {
        "label": "beautifulBinaryString",
        "kind": 2,
        "importPath": "mid-range.Beautiful-Binary-String",
        "description": "mid-range.Beautiful-Binary-String",
        "peekOfCode": "def beautifulBinaryString(b):\n    return (len(b) - len(b.replace(\"010\", \"\"))) // 3\nif __name__ == \"__main__\":\n    fptr = open(os.environ[\"OUTPUT_PATH\"], \"w\")\n    n = int(input())\n    b = input()\n    result = beautifulBinaryString(b)\n    fptr.write(str(result) + \"\\n\")\n    fptr.close()",
        "detail": "mid-range.Beautiful-Binary-String",
        "documentation": {}
    },
    {
        "label": "beautifulPairs",
        "kind": 2,
        "importPath": "mid-range.Beautiful-Pairs",
        "description": "mid-range.Beautiful-Pairs",
        "peekOfCode": "def beautifulPairs(A, B):\n    bp = sum((Counter(A) - Counter(B)).values())\n    return len(A) - bp + 1 if bp else len(A) - 1\nif __name__ == \"__main__\":\n    fptr = open(os.environ[\"OUTPUT_PATH\"], \"w\")\n    n = int(input())\n    A = list(map(int, input().rstrip().split()))\n    B = list(map(int, input().rstrip().split()))\n    result = beautifulPairs(A, B)\n    fptr.write(str(result) + \"\\n\")",
        "detail": "mid-range.Beautiful-Pairs",
        "documentation": {}
    },
    {
        "label": "page",
        "kind": 5,
        "importPath": "mid-range.BeautifulSoup4_sample",
        "description": "mid-range.BeautifulSoup4_sample",
        "peekOfCode": "page = requests.get(\"https://www.census.gov/programs-surveys/popest.html\")\nprint(page.status_code)\nsoup = BeautifulSoup(page.text, \"html.parser\")\nlink_set = set()\nfor link in soup.find_all(\"a\"):\n    web_links = link.get(\"href\")\n    print(web_links)\n    link_set.add(web_links)\ncsvfile = open(\"code_python.csv\", \"w+\", newline=\"\")\nwriter = csv.writer(csvfile)",
        "detail": "mid-range.BeautifulSoup4_sample",
        "documentation": {}
    },
    {
        "label": "soup",
        "kind": 5,
        "importPath": "mid-range.BeautifulSoup4_sample",
        "description": "mid-range.BeautifulSoup4_sample",
        "peekOfCode": "soup = BeautifulSoup(page.text, \"html.parser\")\nlink_set = set()\nfor link in soup.find_all(\"a\"):\n    web_links = link.get(\"href\")\n    print(web_links)\n    link_set.add(web_links)\ncsvfile = open(\"code_python.csv\", \"w+\", newline=\"\")\nwriter = csv.writer(csvfile)\nwriter.writerow([\"Links\"])\nfor link in link_set:",
        "detail": "mid-range.BeautifulSoup4_sample",
        "documentation": {}
    },
    {
        "label": "link_set",
        "kind": 5,
        "importPath": "mid-range.BeautifulSoup4_sample",
        "description": "mid-range.BeautifulSoup4_sample",
        "peekOfCode": "link_set = set()\nfor link in soup.find_all(\"a\"):\n    web_links = link.get(\"href\")\n    print(web_links)\n    link_set.add(web_links)\ncsvfile = open(\"code_python.csv\", \"w+\", newline=\"\")\nwriter = csv.writer(csvfile)\nwriter.writerow([\"Links\"])\nfor link in link_set:\n    writer.writerow([link])",
        "detail": "mid-range.BeautifulSoup4_sample",
        "documentation": {}
    },
    {
        "label": "csvfile",
        "kind": 5,
        "importPath": "mid-range.BeautifulSoup4_sample",
        "description": "mid-range.BeautifulSoup4_sample",
        "peekOfCode": "csvfile = open(\"code_python.csv\", \"w+\", newline=\"\")\nwriter = csv.writer(csvfile)\nwriter.writerow([\"Links\"])\nfor link in link_set:\n    writer.writerow([link])\ncsvfile.close()",
        "detail": "mid-range.BeautifulSoup4_sample",
        "documentation": {}
    },
    {
        "label": "writer",
        "kind": 5,
        "importPath": "mid-range.BeautifulSoup4_sample",
        "description": "mid-range.BeautifulSoup4_sample",
        "peekOfCode": "writer = csv.writer(csvfile)\nwriter.writerow([\"Links\"])\nfor link in link_set:\n    writer.writerow([link])\ncsvfile.close()",
        "detail": "mid-range.BeautifulSoup4_sample",
        "documentation": {}
    },
    {
        "label": "isBeautifulString",
        "kind": 2,
        "importPath": "mid-range.BeautifulString",
        "description": "mid-range.BeautifulString",
        "peekOfCode": "def isBeautifulString(inputString):\n    counter = [inputString.count(i) for i in string.ascii_lowercase]\n    return counter[::-1] == sorted(counter)",
        "detail": "mid-range.BeautifulString",
        "documentation": {}
    },
    {
        "label": "before_nothing",
        "kind": 2,
        "importPath": "mid-range.before",
        "description": "mid-range.before",
        "peekOfCode": "def before_nothing(retry_state: \"RetryCallState\") -> None:\n    \"\"\"Before call strategy that does nothing.\"\"\"\ndef before_log(\n    logger: \"logging.Logger\", log_level: int\n) -> typing.Callable[[\"RetryCallState\"], None]:\n    \"\"\"Before call strategy that logs to some logger the attempt.\"\"\"\n    def log_it(retry_state: \"RetryCallState\") -> None:\n        logger.log(\n            log_level,\n            f\"Starting call to '{_utils.get_callback_name(retry_state.fn)}', \"",
        "detail": "mid-range.before",
        "documentation": {}
    },
    {
        "label": "before_log",
        "kind": 2,
        "importPath": "mid-range.before",
        "description": "mid-range.before",
        "peekOfCode": "def before_log(\n    logger: \"logging.Logger\", log_level: int\n) -> typing.Callable[[\"RetryCallState\"], None]:\n    \"\"\"Before call strategy that logs to some logger the attempt.\"\"\"\n    def log_it(retry_state: \"RetryCallState\") -> None:\n        logger.log(\n            log_level,\n            f\"Starting call to '{_utils.get_callback_name(retry_state.fn)}', \"\n            f\"this is the {_utils.to_ordinal(retry_state.attempt_number)} time calling it.\",\n        )",
        "detail": "mid-range.before",
        "documentation": {}
    },
    {
        "label": "printDist",
        "kind": 2,
        "importPath": "mid-range.BellmanFord",
        "description": "mid-range.BellmanFord",
        "peekOfCode": "def printDist(dist, V):\n    print(\"\\nVertex Distance\")\n    for i in range(V):\n        if dist[i] != float(\"inf\"):\n            print(i, \"\\t\", int(dist[i]), end=\"\\t\")\n        else:\n            print(i, \"\\t\", \"INF\", end=\"\\t\")\n        print()\ndef BellmanFord(graph, V, E, src):\n    mdist = [float(\"inf\") for i in range(V)]",
        "detail": "mid-range.BellmanFord",
        "documentation": {}
    },
    {
        "label": "BellmanFord",
        "kind": 2,
        "importPath": "mid-range.BellmanFord",
        "description": "mid-range.BellmanFord",
        "peekOfCode": "def BellmanFord(graph, V, E, src):\n    mdist = [float(\"inf\") for i in range(V)]\n    mdist[src] = 0.0\n    for i in range(V - 1):\n        for j in range(V):\n            u = graph[j][\"src\"]\n            v = graph[j][\"dst\"]\n            w = graph[j][\"weight\"]\n            if mdist[u] != float(\"inf\") and mdist[u] + w < mdist[v]:\n                mdist[v] = mdist[u] + w",
        "detail": "mid-range.BellmanFord",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 5,
        "importPath": "mid-range.BellmanFord",
        "description": "mid-range.BellmanFord",
        "peekOfCode": "V = int(input(\"Enter number of vertices: \"))\nE = int(input(\"Enter number of edges: \"))\ngraph = [dict() for j in range(E)]\nfor i in range(V):\n    graph[i][i] = 0.0\nfor i in range(E):\n    print(\"\\nEdge \", i + 1)\n    src = int(input(\"Enter source:\"))\n    dst = int(input(\"Enter destination:\"))\n    weight = float(input(\"Enter weight:\"))",
        "detail": "mid-range.BellmanFord",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 5,
        "importPath": "mid-range.BellmanFord",
        "description": "mid-range.BellmanFord",
        "peekOfCode": "E = int(input(\"Enter number of edges: \"))\ngraph = [dict() for j in range(E)]\nfor i in range(V):\n    graph[i][i] = 0.0\nfor i in range(E):\n    print(\"\\nEdge \", i + 1)\n    src = int(input(\"Enter source:\"))\n    dst = int(input(\"Enter destination:\"))\n    weight = float(input(\"Enter weight:\"))\n    graph[i] = {\"src\": src, \"dst\": dst, \"weight\": weight}",
        "detail": "mid-range.BellmanFord",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "mid-range.BellmanFord",
        "description": "mid-range.BellmanFord",
        "peekOfCode": "graph = [dict() for j in range(E)]\nfor i in range(V):\n    graph[i][i] = 0.0\nfor i in range(E):\n    print(\"\\nEdge \", i + 1)\n    src = int(input(\"Enter source:\"))\n    dst = int(input(\"Enter destination:\"))\n    weight = float(input(\"Enter weight:\"))\n    graph[i] = {\"src\": src, \"dst\": dst, \"weight\": weight}\ngsrc = int(input(\"\\nEnter shortest path source:\"))",
        "detail": "mid-range.BellmanFord",
        "documentation": {}
    },
    {
        "label": "gsrc",
        "kind": 5,
        "importPath": "mid-range.BellmanFord",
        "description": "mid-range.BellmanFord",
        "peekOfCode": "gsrc = int(input(\"\\nEnter shortest path source:\"))\nBellmanFord(graph, V, E, gsrc)",
        "detail": "mid-range.BellmanFord",
        "documentation": {}
    },
    {
        "label": "bellman_ford",
        "kind": 2,
        "importPath": "mid-range.bellman_ford",
        "description": "mid-range.bellman_ford",
        "peekOfCode": "def bellman_ford(graph, source):\n    weight = {}\n    pre_node = {}\n    initialize_single_source(graph, source, weight, pre_node)\n    for i in range(1, len(graph)):\n        for node in graph:\n            for adjacent in graph[node]:\n                if weight[adjacent] > weight[node] + graph[node][adjacent]:\n                    weight[adjacent] = weight[node] + graph[node][adjacent]\n                    pre_node[adjacent] = node",
        "detail": "mid-range.bellman_ford",
        "documentation": {}
    },
    {
        "label": "initialize_single_source",
        "kind": 2,
        "importPath": "mid-range.bellman_ford",
        "description": "mid-range.bellman_ford",
        "peekOfCode": "def initialize_single_source(graph, source, weight, pre_node):\n    for node in graph:\n        weight[node] = float(\"inf\")\n        pre_node[node] = None\n    weight[source] = 0",
        "detail": "mid-range.bellman_ford",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.bells",
        "description": "mid-range.bells",
        "peekOfCode": "__all__ = [\"tqdm\", \"trange\"]\nimport warnings\nfrom os import getenv\nif getenv(\"TQDM_TELEGRAM_TOKEN\") and getenv(\"TQDM_TELEGRAM_CHAT_ID\"):\n    from .telegram import tqdm, trange\nelif getenv(\"TQDM_DISCORD_TOKEN\") and getenv(\"TQDM_DISCORD_CHANNEL_ID\"):\n    from .discord import tqdm, trange\nelse:\n    from ..auto import tqdm, trange\nwith warnings.catch_warnings():",
        "detail": "mid-range.bells",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.BestTimeToBuyAndSellStockII",
        "description": "mid-range.BestTimeToBuyAndSellStockII",
        "peekOfCode": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        profit = 0\n        for i in range(0, len(prices) - 1):\n            if prices[i + 1] > prices[i]:\n                profit += prices[i + 1] - prices[i]\n        return profit",
        "detail": "mid-range.BestTimeToBuyAndSellStockII",
        "documentation": {}
    },
    {
        "label": "maxProfit",
        "kind": 2,
        "importPath": "mid-range.Best_Time_to_Buy_and_Sell_Stock",
        "description": "mid-range.Best_Time_to_Buy_and_Sell_Stock",
        "peekOfCode": "def maxProfit(prices):\n    i = 0\n    max_profit = 0\n    while i < len(prices) - 1:\n        while i < len(prices) - 1 and prices[i] >= prices[i + 1]:\n            i += 1\n        min_pri = prices[i]\n        while i < len(prices) - 1 and prices[i] <= prices[i + 1]:\n            i += 1\n        max_pri = prices[i]",
        "detail": "mid-range.Best_Time_to_Buy_and_Sell_Stock",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "mid-range.bfs",
        "description": "mid-range.bfs",
        "peekOfCode": "def bfs(g, N):\n    queue = []\n    visited = [False] * (N)\n    bfs = []\n    queue.append(0)\n    visited[0] = True\n    while queue:\n        cur = queue.pop(0)\n        bfs.append(cur)\n        for neighbour in g[cur]:",
        "detail": "mid-range.bfs",
        "documentation": {}
    },
    {
        "label": "bfs_paths_dict",
        "kind": 2,
        "importPath": "mid-range.bfs_paths_dict",
        "description": "mid-range.bfs_paths_dict",
        "peekOfCode": "def bfs_paths_dict(\n    graph: Mapping[Node, set[Node]], start: Node, goal: Node\n) -> Iterable[list[Node]]:\n    \"\"\"Find all the paths from start to goal using BFS on a dict.\"\"\"\n    to_visit = deque([[start]])\n    while to_visit:\n        path = to_visit.popleft()\n        node = path[-1]\n        if node == goal:\n            yield path",
        "detail": "mid-range.bfs_paths_dict",
        "documentation": {}
    },
    {
        "label": "bfs_paths_dict",
        "kind": 2,
        "importPath": "mid-range.bfs_paths_dict_(1)",
        "description": "mid-range.bfs_paths_dict_(1)",
        "peekOfCode": "def bfs_paths_dict(\n    graph: Mapping[Node, set[Node]], start: Node, goal: Node\n) -> Iterable[list[Node]]:\n    \"\"\"Find all the paths from start to goal using BFS on a dict.\"\"\"\n    to_visit = deque([[start]])\n    while to_visit:\n        path = to_visit.popleft()\n        node = path[-1]\n        if node == goal:\n            yield path",
        "detail": "mid-range.bfs_paths_dict_(1)",
        "documentation": {}
    },
    {
        "label": "bfs_paths_dict",
        "kind": 2,
        "importPath": "mid-range.bfs_paths_dict_(2)",
        "description": "mid-range.bfs_paths_dict_(2)",
        "peekOfCode": "def bfs_paths_dict(\n    graph: Mapping[Node, set[Node]], start: Node, goal: Node\n) -> Iterable[list[Node]]:\n    \"\"\"Find all the paths from start to goal using BFS on a dict.\"\"\"\n    to_visit = deque([[start]])\n    while to_visit:\n        path = to_visit.popleft()\n        node = path[-1]\n        if node == goal:\n            yield path",
        "detail": "mid-range.bfs_paths_dict_(2)",
        "documentation": {}
    },
    {
        "label": "bfs_search_dict",
        "kind": 2,
        "importPath": "mid-range.bfs_search_dict",
        "description": "mid-range.bfs_search_dict",
        "peekOfCode": "def bfs_search_dict(\n    graph: Mapping[Node, Iterable[Node]], start: Node, predicate: Callable[[Node], bool]\n) -> bool:\n    \"\"\"Find the closest node to start that matches the predicate using breadth first search.\"\"\"\n    visited = set()\n    to_visit = deque([start])\n    while to_visit:\n        node = to_visit.popleft()\n        if node in visited:\n            continue",
        "detail": "mid-range.bfs_search_dict",
        "documentation": {}
    },
    {
        "label": "bfs_search_dict",
        "kind": 2,
        "importPath": "mid-range.bfs_search_dict_(1)",
        "description": "mid-range.bfs_search_dict_(1)",
        "peekOfCode": "def bfs_search_dict(\n    graph: Mapping[Node, Iterable[Node]], start: Node, predicate: Callable[[Node], bool]\n) -> bool:\n    \"\"\"Find the closest node to start that matches the predicate using breadth first search.\"\"\"\n    visited = set()\n    to_visit = deque([start])\n    while to_visit:\n        node = to_visit.popleft()\n        if node in visited:\n            continue",
        "detail": "mid-range.bfs_search_dict_(1)",
        "documentation": {}
    },
    {
        "label": "bfs_search_grid",
        "kind": 2,
        "importPath": "mid-range.bfs_search_grid",
        "description": "mid-range.bfs_search_grid",
        "peekOfCode": "def bfs_search_grid(\n    grid: Sequence[Sequence[int]], start: tuple[int, int], goal: tuple[int, int]\n) -> bool:\n    \"\"\"On a grid of 0s and 1s, find if start is connected to goal via a path of 1s.\"\"\"\n    rows = range(len(grid))\n    cols = range(len(grid[0]))\n    seen = {start}\n    to_visit = deque([start])\n    while to_visit:\n        r, c = to_visit.popleft()",
        "detail": "mid-range.bfs_search_grid",
        "documentation": {}
    },
    {
        "label": "bfs_search_grid",
        "kind": 2,
        "importPath": "mid-range.bfs_search_grid_(1)",
        "description": "mid-range.bfs_search_grid_(1)",
        "peekOfCode": "def bfs_search_grid(\n    grid: Sequence[Sequence[int]], start: tuple[int, int], goal: tuple[int, int]\n) -> bool:\n    \"\"\"On a grid of 0s and 1s, find if start is connected to goal via a path of 1s.\"\"\"\n    rows = range(len(grid))\n    cols = range(len(grid[0]))\n    seen = {start}\n    to_visit = deque([start])\n    while to_visit:\n        r, c = to_visit.popleft()",
        "detail": "mid-range.bfs_search_grid_(1)",
        "documentation": {}
    },
    {
        "label": "csBinaryToASCII",
        "kind": 2,
        "importPath": "mid-range.bin-2-ascii",
        "description": "mid-range.bin-2-ascii",
        "peekOfCode": "def csBinaryToASCII(binary):\n    string_blocks = (binary[i : i + 8] for i in range(0, len(binary), 8))\n    string = \"\".join(chr(int(char, 2)) for char in string_blocks)\n    return string\nprint(csBinaryToASCII(\"011011000110000101101101011000100110010001100001\"))",
        "detail": "mid-range.bin-2-ascii",
        "documentation": {}
    },
    {
        "label": "binarySearchAppr",
        "kind": 2,
        "importPath": "mid-range.binary search",
        "description": "mid-range.binary search",
        "peekOfCode": "def binarySearchAppr(arr, start, end, x):\n    # check condition\n    if end >= start:\n        mid = start + (end - start)//2\n        # If element is present at the middle\n        if arr[mid] == x:\n        return mid\n        # If element is smaller than mid\n        elif arr[mid] > x:\n        return binarySearchAppr(arr, start, mid-1, x)",
        "detail": "mid-range.binary search",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.binary search",
        "description": "mid-range.binary search",
        "peekOfCode": "arr = sorted(['t', 'u', 't', 'o', 'r', 'i', 'a', 'l'])\nx = 'r'\nresult = binarySearchAppr(arr, 0, len(arr)-1, x)\nif result != -1:\n    print(\"Element is present at index \"+str(result))\nelse:\n    print(\"Element is not present in array\")",
        "detail": "mid-range.binary search",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.binary search",
        "description": "mid-range.binary search",
        "peekOfCode": "x = 'r'\nresult = binarySearchAppr(arr, 0, len(arr)-1, x)\nif result != -1:\n    print(\"Element is present at index \"+str(result))\nelse:\n    print(\"Element is not present in array\")",
        "detail": "mid-range.binary search",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "mid-range.binary search",
        "description": "mid-range.binary search",
        "peekOfCode": "result = binarySearchAppr(arr, 0, len(arr)-1, x)\nif result != -1:\n    print(\"Element is present at index \"+str(result))\nelse:\n    print(\"Element is not present in array\")",
        "detail": "mid-range.binary search",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.binary-tree-tilt",
        "description": "mid-range.binary-tree-tilt",
        "peekOfCode": "class Solution:\n    def findTilt(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        global ans\n        ans = 0\n        self.sumOfNode(root)\n        return ans",
        "detail": "mid-range.binary-tree-tilt",
        "documentation": {}
    },
    {
        "label": "binarySearch",
        "kind": 2,
        "importPath": "mid-range.binarySearch",
        "description": "mid-range.binarySearch",
        "peekOfCode": "def binarySearch(A, l, r, x):\n    if r >= l:\n        mid = int((l + (r - 1)) / 2)\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            r = mid - 1\n            return binarySearch(A, l, r, x)\n        else:\n            l = mid + 1",
        "detail": "mid-range.binarySearch",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "mid-range.binarySearch",
        "description": "mid-range.binarySearch",
        "peekOfCode": "A = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(binarySearch(A, 0, len(A) - 1, 8))",
        "detail": "mid-range.binarySearch",
        "documentation": {}
    },
    {
        "label": "csBinaryToASCII",
        "kind": 2,
        "importPath": "mid-range.binaryToASCII",
        "description": "mid-range.binaryToASCII",
        "peekOfCode": "def csBinaryToASCII(binary):\n    binary_letters = []\n    letters = \"\"\n    if binary == \"\":\n        return \"\"\n    for index in range(0, len(binary), 8):\n        binary_letters.append(binary[index : index + 8])\n    print(binary_letters)\n    for string in binary_letters:\n        binary_int = v = chr(int(string, 2))",
        "detail": "mid-range.binaryToASCII",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "mid-range.binaryTree",
        "description": "mid-range.binaryTree",
        "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.left = None\n        self.right = None\n        self.data = data\n    def insert(self, data):\n        # Checks if node exists\n        if self.data:\n            if data <",
        "detail": "mid-range.binaryTree",
        "documentation": {}
    },
    {
        "label": "pascal_triangle",
        "kind": 2,
        "importPath": "mid-range.Binary_Coefficients",
        "description": "mid-range.Binary_Coefficients",
        "peekOfCode": "def pascal_triangle(lineNumber):\n    list1 = list()\n    list1.append([1])\n    i = 1\n    while i <= lineNumber:\n        j = 1\n        l = []\n        l.append(1)\n        while j < i:\n            l.append(list1[i - 1][j] + list1[i - 1][j - 1])",
        "detail": "mid-range.Binary_Coefficients",
        "documentation": {}
    },
    {
        "label": "binomial_coef",
        "kind": 2,
        "importPath": "mid-range.Binary_Coefficients",
        "description": "mid-range.Binary_Coefficients",
        "peekOfCode": "def binomial_coef(n, k):\n    pascalTriangle = pascal_triangle(n)\n    return pascalTriangle[n][k - 1]",
        "detail": "mid-range.Binary_Coefficients",
        "documentation": {}
    },
    {
        "label": "binary_count_setbits",
        "kind": 2,
        "importPath": "mid-range.binary_count_setbits",
        "description": "mid-range.binary_count_setbits",
        "peekOfCode": "def binary_count_setbits(a: int) -> int:\n    \"\"\"\n    Take in 1 integer, return a number that is\n    the number of 1's in binary representation of that number.\n    >>> binary_count_setbits(25)\n    3\n    >>> binary_count_setbits(36)\n    2\n    >>> binary_count_setbits(16)\n    1",
        "detail": "mid-range.binary_count_setbits",
        "documentation": {}
    },
    {
        "label": "binary_count_trailing_zeros",
        "kind": 2,
        "importPath": "mid-range.binary_count_trailing_zeros",
        "description": "mid-range.binary_count_trailing_zeros",
        "peekOfCode": "def binary_count_trailing_zeros(a: int) -> int:\n    \"\"\"\n    Take in 1 integer, return a number that is\n    the number of trailing zeros in binary representation of that number.\n    >>> binary_count_trailing_zeros(25)\n    0\n    >>> binary_count_trailing_zeros(36)\n    2\n    >>> binary_count_trailing_zeros(16)\n    4",
        "detail": "mid-range.binary_count_trailing_zeros",
        "documentation": {}
    },
    {
        "label": "binary_exponentiation",
        "kind": 2,
        "importPath": "mid-range.binary_exponentiation",
        "description": "mid-range.binary_exponentiation",
        "peekOfCode": "def binary_exponentiation(a, n):\n    if n == 0:\n        return 1\n    elif n % 2 == 1:\n        return binary_exponentiation(a, n - 1) * a\n    else:\n        b = binary_exponentiation(a, n / 2)\n        return b * b\nif __name__ == \"__main__\":\n    try:",
        "detail": "mid-range.binary_exponentiation",
        "documentation": {}
    },
    {
        "label": "b_expo",
        "kind": 2,
        "importPath": "mid-range.binary_exponentiation_2",
        "description": "mid-range.binary_exponentiation_2",
        "peekOfCode": "def b_expo(a, b):\n    res = 0\n    while b > 0:\n        if b & 1:\n            res += a\n        a += a\n        b >>= 1\n    return res\ndef b_expo_mod(a, b, c):\n    res = 0",
        "detail": "mid-range.binary_exponentiation_2",
        "documentation": {}
    },
    {
        "label": "b_expo_mod",
        "kind": 2,
        "importPath": "mid-range.binary_exponentiation_2",
        "description": "mid-range.binary_exponentiation_2",
        "peekOfCode": "def b_expo_mod(a, b, c):\n    res = 0\n    while b > 0:\n        if b & 1:\n            res = ((res % c) + (a % c)) % c\n        a += a\n        b >>= 1\n    return res\n\"\"\"\n* Wondering how this method works !",
        "detail": "mid-range.binary_exponentiation_2",
        "documentation": {}
    },
    {
        "label": "b_expo",
        "kind": 2,
        "importPath": "mid-range.binary_exponentiation_3",
        "description": "mid-range.binary_exponentiation_3",
        "peekOfCode": "def b_expo(a, b):\n    res = 1\n    while b > 0:\n        if b & 1:\n            res *= a\n        a *= a\n        b >>= 1\n    return res\ndef b_expo_mod(a, b, c):\n    res = 1",
        "detail": "mid-range.binary_exponentiation_3",
        "documentation": {}
    },
    {
        "label": "b_expo_mod",
        "kind": 2,
        "importPath": "mid-range.binary_exponentiation_3",
        "description": "mid-range.binary_exponentiation_3",
        "peekOfCode": "def b_expo_mod(a, b, c):\n    res = 1\n    while b > 0:\n        if b & 1:\n            res = ((res % c) * (a % c)) % c\n        a *= a\n        b >>= 1\n    return res\n\"\"\"\n* Wondering how this method works !",
        "detail": "mid-range.binary_exponentiation_3",
        "documentation": {}
    },
    {
        "label": "bin_exp_mod",
        "kind": 2,
        "importPath": "mid-range.binary_exp_mod",
        "description": "mid-range.binary_exp_mod",
        "peekOfCode": "def bin_exp_mod(a, n, b):\n    \"\"\"\n    >>> bin_exp_mod(3, 4, 5)\n    1\n    >>> bin_exp_mod(7, 13, 10)\n    7\n    \"\"\"\n    # mod b\n    assert not (b == 0), \"This cannot accept modulo that is == 0\"\n    if n == 0:",
        "detail": "mid-range.binary_exp_mod",
        "documentation": {}
    },
    {
        "label": "Binary_Search",
        "kind": 2,
        "importPath": "mid-range.Binary_Insertion_Sort",
        "description": "mid-range.Binary_Insertion_Sort",
        "peekOfCode": "def Binary_Search(Test_arr, low, high, k):\n    if high >= low:\n        Mid = (low + high) // 2\n        if Test_arr[Mid] < k:\n            return Binary_Search(Test_arr, Mid + 1, high, k)\n        elif Test_arr[Mid] > k:\n            return Binary_Search(Test_arr, low, Mid - 1, k)\n        else:\n            return Mid\n    else:",
        "detail": "mid-range.Binary_Insertion_Sort",
        "documentation": {}
    },
    {
        "label": "Insertion_Sort",
        "kind": 2,
        "importPath": "mid-range.Binary_Insertion_Sort",
        "description": "mid-range.Binary_Insertion_Sort",
        "peekOfCode": "def Insertion_Sort(Test_arr):\n    for i in range(1, len(Test_arr)):\n        val = Test_arr[i]\n        j = Binary_Search(Test_arr[:i], 0, len(Test_arr[:i]) - 1, val)\n        Test_arr.pop(i)\n        Test_arr.insert(j, val)\n    return Test_arr\nif __name__ == \"__main__\":\n    Test_list = input(\"Enter the list of Numbers: \").split()\n    Test_list = [int(i) for i in Test_list]",
        "detail": "mid-range.Binary_Insertion_Sort",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.binary_numbers",
        "description": "mid-range.binary_numbers",
        "peekOfCode": "n = int(input())  # getting input\nremainder = []\nwhile n > 0:\n    rm = n % 2\n    n = (\n        n // 2\n    )  # whenever decimal to binary conversion is done, the number is repeatedly divided by 2 until it could not be divided any further\n    remainder.append(rm)  # appending the remainder that is obtained each time in a list\ncount, result = 0, 0\nfor i in range(0, len(remainder)):",
        "detail": "mid-range.binary_numbers",
        "documentation": {}
    },
    {
        "label": "remainder",
        "kind": 5,
        "importPath": "mid-range.binary_numbers",
        "description": "mid-range.binary_numbers",
        "peekOfCode": "remainder = []\nwhile n > 0:\n    rm = n % 2\n    n = (\n        n // 2\n    )  # whenever decimal to binary conversion is done, the number is repeatedly divided by 2 until it could not be divided any further\n    remainder.append(rm)  # appending the remainder that is obtained each time in a list\ncount, result = 0, 0\nfor i in range(0, len(remainder)):\n    if remainder[i] == 0:",
        "detail": "mid-range.binary_numbers",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "mid-range.binary_search",
        "description": "mid-range.binary_search",
        "peekOfCode": "def binary_search(arr, x):\n    start = 0\n    end = len(arr) - 1\n    mid = 0\n    while start <= end:\n        mid = (start + end) // 2\n        # If x is greater, search in right array\n        if arr[mid] < x:\n            start = mid + 1\n        # If x is smaller, search in left array",
        "detail": "mid-range.binary_search",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.binary_search",
        "description": "mid-range.binary_search",
        "peekOfCode": "arr = []\nn = int(input(\"Enter size of array : \"))\nprint(\"Enter array  elements : \")\nfor i in range(n):\n    e = int(input())\n    arr.append(e)\nx = int(input(\"Enter element to search \"))\nans = binary_search(arr, x)\nif ans == -1:\n    print(\"Element not found\")",
        "detail": "mid-range.binary_search",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.binary_search",
        "description": "mid-range.binary_search",
        "peekOfCode": "n = int(input(\"Enter size of array : \"))\nprint(\"Enter array  elements : \")\nfor i in range(n):\n    e = int(input())\n    arr.append(e)\nx = int(input(\"Enter element to search \"))\nans = binary_search(arr, x)\nif ans == -1:\n    print(\"Element not found\")\nelse:",
        "detail": "mid-range.binary_search",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.binary_search",
        "description": "mid-range.binary_search",
        "peekOfCode": "x = int(input(\"Enter element to search \"))\nans = binary_search(arr, x)\nif ans == -1:\n    print(\"Element not found\")\nelse:\n    print(\"Element found at \", ans)",
        "detail": "mid-range.binary_search",
        "documentation": {}
    },
    {
        "label": "ans",
        "kind": 5,
        "importPath": "mid-range.binary_search",
        "description": "mid-range.binary_search",
        "peekOfCode": "ans = binary_search(arr, x)\nif ans == -1:\n    print(\"Element not found\")\nelse:\n    print(\"Element found at \", ans)",
        "detail": "mid-range.binary_search",
        "documentation": {}
    },
    {
        "label": "binarySearch",
        "kind": 2,
        "importPath": "mid-range.binary_search_rec",
        "description": "mid-range.binary_search_rec",
        "peekOfCode": "def binarySearch(arr, val):\n    # base case when the array is empty\n    if len(arr) == 0:\n        return False\n    # find the mid point of the array\n    mid = len(arr) // 2\n    if arr[mid] == val:\n        return True\n    # if the value of the mid point is greater than the val to search for, call the binarySearch fun with the first\n    # half of the array",
        "detail": "mid-range.binary_search_rec",
        "documentation": {}
    },
    {
        "label": "BinarySearchTree",
        "kind": 6,
        "importPath": "mid-range.binary_search_tree",
        "description": "mid-range.binary_search_tree",
        "peekOfCode": "class BinarySearchTree:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    def insert(self, value):\n        pass\n    def contains(self, target):\n        pass\n    def get_max(self):",
        "detail": "mid-range.binary_search_tree",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.Binary_Search_Tree_Construction",
        "description": "mid-range.Binary_Search_Tree_Construction",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\nclass Solution:\n    def insertIn(self, root, num):\n        currNode = root\n        while True:\n            if num > currNode.val:",
        "detail": "mid-range.Binary_Search_Tree_Construction",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Binary_Search_Tree_Construction",
        "description": "mid-range.Binary_Search_Tree_Construction",
        "peekOfCode": "class Solution:\n    def insertIn(self, root, num):\n        currNode = root\n        while True:\n            if num > currNode.val:\n                if currNode.right is None:\n                    currNode.right = TreeNode(num)\n                    break\n                else:\n                    currNode = currNode.right",
        "detail": "mid-range.Binary_Search_Tree_Construction",
        "documentation": {}
    },
    {
        "label": "BinarySearchTree",
        "kind": 6,
        "importPath": "mid-range.binary_search_tree_recursive",
        "description": "mid-range.binary_search_tree_recursive",
        "peekOfCode": "class BinarySearchTree:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    def insert(self, value):\n        if value < self.value:\n            if self.left is None:\n                self.left = BinarySearchTree(value)\n            else:",
        "detail": "mid-range.binary_search_tree_recursive",
        "documentation": {}
    },
    {
        "label": "binaryToDecimal",
        "kind": 2,
        "importPath": "mid-range.binary_to_decimal",
        "description": "mid-range.binary_to_decimal",
        "peekOfCode": "def binaryToDecimal(binary):\n    \"\"\"\n        >>> binaryToDecimal(111110000)\n        496\n        >>> binaryToDecimal(10100)\n        20\n        >>> binaryToDecimal(101011)\n        43\n        \"\"\"\n    decimal, i, n = 0, 0, 0",
        "detail": "mid-range.binary_to_decimal",
        "documentation": {}
    },
    {
        "label": "binary_to_decimal_conv",
        "kind": 2,
        "importPath": "mid-range.binary_to_decimal_conversion",
        "description": "mid-range.binary_to_decimal_conversion",
        "peekOfCode": "def binary_to_decimal_conv(binary_string):\n    res = 0\n    binary_l = list(binary_string)\n    for bit_i in range(len(binary_l)):\n        res += int(binary_l[bit_i]) * (2 ** bit_i)\n    return res\n# Test\n# Testing interface\ni = 0\nwhile True:",
        "detail": "mid-range.binary_to_decimal_conversion",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "mid-range.binary_to_decimal_conversion",
        "description": "mid-range.binary_to_decimal_conversion",
        "peekOfCode": "i = 0\nwhile True:\n    if (\n        raw_input(\"\\n[{}] Exit(press e) or Continue(press c): \".format(i))\n        .strip()\n        .lower()\n        == \"c\"\n    ):\n        print(\"Decimal form: \" + str(binary_to_decimal_conv(raw_input(\"\\nBinary?: \"))))\n    else:",
        "detail": "mid-range.binary_to_decimal_conversion",
        "documentation": {}
    },
    {
        "label": "binary_to_decimal_conv",
        "kind": 2,
        "importPath": "mid-range.binary_to_decimal_converter",
        "description": "mid-range.binary_to_decimal_converter",
        "peekOfCode": "def binary_to_decimal_conv(binary_string):\n    res = 0\n    binary_l = list(binary_string)\n    for bit_i in range(len(binary_l)):\n        res += int(binary_l[bit_i]) * (2 ** bit_i)\n    return res\n# Test\n# Testing interface\ni = 0\nwhile True:",
        "detail": "mid-range.binary_to_decimal_converter",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "mid-range.binary_to_decimal_converter",
        "description": "mid-range.binary_to_decimal_converter",
        "peekOfCode": "i = 0\nwhile True:\n    if (\n        raw_input(\"\\n[{}] Exit(press e) or Continue(press c): \".format(i))\n        .strip()\n        .lower()\n        == \"c\"\n    ):\n        print(\"Decimal form: \" + str(binary_to_decimal_conv(raw_input(\"\\nBinary?: \"))))\n    else:",
        "detail": "mid-range.binary_to_decimal_converter",
        "documentation": {}
    },
    {
        "label": "bin_to_octal",
        "kind": 2,
        "importPath": "mid-range.binary_to_octal",
        "description": "mid-range.binary_to_octal",
        "peekOfCode": "def bin_to_octal(bin_string: str) -> str:\n    if not all(char in \"01\" for char in bin_string):\n        raise ValueError(\"Non-binary value was passed to the function\")\n    if not bin_string:\n        raise ValueError(\"Empty string was passed to the function\")\n    oct_string = \"\"\n    while len(bin_string) % 3 != 0:\n        bin_string = \"0\" + bin_string\n    bin_string_in_3_list = [\n        bin_string[index : index + 3]",
        "detail": "mid-range.binary_to_octal",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.Binary_tree Paths",
        "description": "mid-range.Binary_tree Paths",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    def binaryTreePaths(self, root):\n        res = []\n        path = \"\"\n        def helper(node, path):",
        "detail": "mid-range.Binary_tree Paths",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Binary_tree Paths",
        "description": "mid-range.Binary_tree Paths",
        "peekOfCode": "class Solution:\n    def binaryTreePaths(self, root):\n        res = []\n        path = \"\"\n        def helper(node, path):\n            if not node:\n                return\n            path += str(node.val) + \"->\"\n            if not node.left and not node.right:\n                res.append(path[:-2])",
        "detail": "mid-range.Binary_tree Paths",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.Binary_Tree_Inorder_Traversal",
        "description": "mid-range.Binary_Tree_Inorder_Traversal",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    def inorderTraversal(self, root):\n        stack = []\n        res = []\n        while stack or root:",
        "detail": "mid-range.Binary_Tree_Inorder_Traversal",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Binary_Tree_Inorder_Traversal",
        "description": "mid-range.Binary_Tree_Inorder_Traversal",
        "peekOfCode": "class Solution:\n    def inorderTraversal(self, root):\n        stack = []\n        res = []\n        while stack or root:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            res.append(root.val)",
        "detail": "mid-range.Binary_Tree_Inorder_Traversal",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.Binary_Tree_Level_Order_Traversal",
        "description": "mid-range.Binary_Tree_Level_Order_Traversal",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    def levelOrder(self, root):\n        if not root:\n            return []\n        res = []",
        "detail": "mid-range.Binary_Tree_Level_Order_Traversal",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Binary_Tree_Level_Order_Traversal",
        "description": "mid-range.Binary_Tree_Level_Order_Traversal",
        "peekOfCode": "class Solution:\n    def levelOrder(self, root):\n        if not root:\n            return []\n        res = []\n        queue = collections.deque()\n        queue.append(root)\n        while len(queue):\n            num = len(queue)\n            arr = []",
        "detail": "mid-range.Binary_Tree_Level_Order_Traversal",
        "documentation": {}
    },
    {
        "label": "binary_tree_paths",
        "kind": 2,
        "importPath": "mid-range.binary_tree_paths",
        "description": "mid-range.binary_tree_paths",
        "peekOfCode": "def binary_tree_paths(root):\n    res = []\n    if root is None:\n        return res\n    dfs(res, root, str(root.val))\n    return res\ndef dfs(res, root, cur):\n    if root.left is None and root.right is None:\n        res.append(cur)\n    if root.left:",
        "detail": "mid-range.binary_tree_paths",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "mid-range.binary_tree_paths",
        "description": "mid-range.binary_tree_paths",
        "peekOfCode": "def dfs(res, root, cur):\n    if root.left is None and root.right is None:\n        res.append(cur)\n    if root.left:\n        dfs(res, root.left, cur + \"->\" + str(root.left.val))\n    if root.right:\n        dfs(res, root.right, cur + \"->\" + str(root.right.val))",
        "detail": "mid-range.binary_tree_paths",
        "documentation": {}
    },
    {
        "label": "twos_complement",
        "kind": 2,
        "importPath": "mid-range.binary_twos_complement",
        "description": "mid-range.binary_twos_complement",
        "peekOfCode": "def twos_complement(number: int) -> str:\n    \"\"\"\n    Take in a negative integer 'number'.\n    Return the two's complement representation of 'number'.\n    >>> twos_complement(0)\n    '0b0'\n    >>> twos_complement(-1)\n    '0b11'\n    >>> twos_complement(-5)\n    '0b1011'",
        "detail": "mid-range.binary_twos_complement",
        "documentation": {}
    },
    {
        "label": "pad",
        "kind": 2,
        "importPath": "mid-range.binary_utils",
        "description": "mid-range.binary_utils",
        "peekOfCode": "def pad(value, return_type=str):\n    \"\"\"\n        Pad binary value with zeros\n        :param value: string\n        :param return_type: string\n    \"\"\"\n    if type(value) is not str:\n        raise TypeError(\"pad only accepts str, not {}\".format(str(type(value))))\n    if len(value) % 4 != 0:\n        pad_amount = 4 - (len(value) % 4)",
        "detail": "mid-range.binary_utils",
        "documentation": {}
    },
    {
        "label": "to_string",
        "kind": 2,
        "importPath": "mid-range.binary_utils",
        "description": "mid-range.binary_utils",
        "peekOfCode": "def to_string(binary_array, delimiter=\" \"):\n    \"\"\"\n        Convert binary array to string\n    \"\"\"\n    if type(binary_array) is not list:\n        raise TypeError(\"to_string only accepts lists, not {}\".format(str(type(value))))\n    return delimiter.join(binary_array)",
        "detail": "mid-range.binary_utils",
        "documentation": {}
    },
    {
        "label": "binary_xor",
        "kind": 2,
        "importPath": "mid-range.binary_xor_operator",
        "description": "mid-range.binary_xor_operator",
        "peekOfCode": "def binary_xor(a: int, b: int) -> str:\n    \"\"\"\n    Take in 2 integers, convert them to binary,\n    return a binary number that is the\n    result of a binary xor operation on the integers provided.\n    >>> binary_xor(25, 32)\n    '0b111001'\n    >>> binary_xor(37, 50)\n    '0b010111'\n    >>> binary_xor(21, 30)",
        "detail": "mid-range.binary_xor_operator",
        "documentation": {}
    },
    {
        "label": "checkBinod",
        "kind": 2,
        "importPath": "mid-range.binod",
        "description": "mid-range.binod",
        "peekOfCode": "def checkBinod(file):  # Trying to find Binod In File Insted Of Manohar Ka Kotha\n    # master\n    with open(file, \"r\") as f:\n        # master\n        fileContent = f.read()\n    if \"binod\" in fileContent.lower():\n        print(f\"**************Congratulations Binod found in {f}********************\")\n        return True\n    else:\n        return False",
        "detail": "mid-range.binod",
        "documentation": {}
    },
    {
        "label": "binomial_coefficient",
        "kind": 2,
        "importPath": "mid-range.binomial_coefficient",
        "description": "mid-range.binomial_coefficient",
        "peekOfCode": "def binomial_coefficient(n, r):\n    \"\"\"\n    Find binomial coefficient using pascals triangle.\n    >>> binomial_coefficient(10, 5)\n    252\n    \"\"\"\n    C = [0 for i in range(r + 1)]\n    # nc0 = 1\n    C[0] = 1\n    for i in range(1, n + 1):",
        "detail": "mid-range.binomial_coefficient",
        "documentation": {}
    },
    {
        "label": "bipartite_matching_single",
        "kind": 2,
        "importPath": "mid-range.bipartite_matching_single",
        "description": "mid-range.bipartite_matching_single",
        "peekOfCode": "def bipartite_matching_single(graph: Sequence[int]) -> list[int]:\n    matches = list(graph)\n    in_degrees = [0] * len(\n        graph\n    )  # This is an alternate to collections.Counter when the keys are 0-n.\n    for target in graph:\n        in_degrees[target] += 1\n    zero_in_degrees = [\n        node for node, in_degree in enumerate(in_degrees) if not in_degree\n    ]",
        "detail": "mid-range.bipartite_matching_single",
        "documentation": {}
    },
    {
        "label": "bipartite_matching_single",
        "kind": 2,
        "importPath": "mid-range.bipartite_matching_single_(1)",
        "description": "mid-range.bipartite_matching_single_(1)",
        "peekOfCode": "def bipartite_matching_single(graph: Sequence[int]) -> list[int]:\n    matches = list(graph)\n    in_degrees = [0] * len(\n        graph\n    )  # This is an alternate to collections.Counter when the keys are 0-n.\n    for target in graph:\n        in_degrees[target] += 1\n    zero_in_degrees = [\n        node for node, in_degree in enumerate(in_degrees) if not in_degree\n    ]",
        "detail": "mid-range.bipartite_matching_single_(1)",
        "documentation": {}
    },
    {
        "label": "bipartite_matching_single",
        "kind": 2,
        "importPath": "mid-range.bipartite_matching_single_(2)",
        "description": "mid-range.bipartite_matching_single_(2)",
        "peekOfCode": "def bipartite_matching_single(graph: Sequence[int]) -> list[int]:\n    matches = list(graph)\n    in_degrees = [0] * len(\n        graph\n    )  # This is an alternate to collections.Counter when the keys are 0-n.\n    for target in graph:\n        in_degrees[target] += 1\n    zero_in_degrees = [\n        node for node, in_degree in enumerate(in_degrees) if not in_degree\n    ]",
        "detail": "mid-range.bipartite_matching_single_(2)",
        "documentation": {}
    },
    {
        "label": "birthdays",
        "kind": 5,
        "importPath": "mid-range.birthdays",
        "description": "mid-range.birthdays",
        "peekOfCode": "birthdays = {'Alice': 'Apr 1', 'Bob': 'Dec 12', 'Carol': 'Mar 4'}\nwhile True:\n   print('Enter a name: (blank to quit)')\n name = input()\n if name == '':\n   break\n if name in birthdays:\n   print(birthdays[name] + ' is the birthday of ' + name)\n else:\n   print('I do not have birthday information for ' + name)",
        "detail": "mid-range.birthdays",
        "documentation": {}
    },
    {
        "label": "bisection",
        "kind": 2,
        "importPath": "mid-range.bisection",
        "description": "mid-range.bisection",
        "peekOfCode": "def bisection(\n    function, a, b\n):  # finds where the function becomes 0 in [a,b] using bolzano\n    start = a\n    end = b\n    if function(a) == 0:  # one of the a or b is a root for the function\n        return a\n    elif function(b) == 0:\n        return b\n    elif (",
        "detail": "mid-range.bisection",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "mid-range.bisection",
        "description": "mid-range.bisection",
        "peekOfCode": "def f(x):\n    return math.pow(x, 3) - 2 * x - 5\nprint(bisection(f, 1, 1000))",
        "detail": "mid-range.bisection",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "mid-range.bisect_example",
        "description": "mid-range.bisect_example",
        "peekOfCode": "values = [14, 85, 77, 26, 50, 45, 66, 79, 10, 3, 84, 77, 1]\nprint(\"New  Pos  Contents\")\nprint(\"---  ---  --------\")\nl = []\nfor i in values:\n    position = bisect.bisect(l, i)\n    bisect.insort(l, i)\n    print(\"{:3}  {:3}\".format(i, position), l)",
        "detail": "mid-range.bisect_example",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "mid-range.bisect_example",
        "description": "mid-range.bisect_example",
        "peekOfCode": "l = []\nfor i in values:\n    position = bisect.bisect(l, i)\n    bisect.insort(l, i)\n    print(\"{:3}  {:3}\".format(i, position), l)",
        "detail": "mid-range.bisect_example",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "mid-range.bisect_example2",
        "description": "mid-range.bisect_example2",
        "peekOfCode": "values = [14, 85, 77, 26, 50, 45, 66, 79, 10, 3, 84, 77, 1]\nprint(\"New  Pos  Contents\")\nprint(\"---  ---  --------\")\n# Use bisect_left and insort_left.\nl = []\nfor i in values:\n    position = bisect.bisect_left(l, i)\n    bisect.insort_left(l, i)\n    print(\"{:3}  {:3}\".format(i, position), l)",
        "detail": "mid-range.bisect_example2",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "mid-range.bisect_example2",
        "description": "mid-range.bisect_example2",
        "peekOfCode": "l = []\nfor i in values:\n    position = bisect.bisect_left(l, i)\n    bisect.insort_left(l, i)\n    print(\"{:3}  {:3}\".format(i, position), l)",
        "detail": "mid-range.bisect_example2",
        "documentation": {}
    },
    {
        "label": "bisect_search",
        "kind": 2,
        "importPath": "mid-range.bisect_search",
        "description": "mid-range.bisect_search",
        "peekOfCode": "def bisect_search(predicate: Callable[[int], bool], low: int, high: int) -> int:\n    \"\"\"Find the lowest int between low and high where predicate(int) is True.\"\"\"\n    while low < high:\n        mid = (\n            low + (high - low) // 2\n        )  # Avoids integer overflow compared to mid = (low + high) // 2\n        if predicate(mid):\n            high = mid\n        else:\n            low = mid + 1",
        "detail": "mid-range.bisect_search",
        "documentation": {}
    },
    {
        "label": "bisect_search",
        "kind": 2,
        "importPath": "mid-range.bisect_search_(1)",
        "description": "mid-range.bisect_search_(1)",
        "peekOfCode": "def bisect_search(predicate: Callable[[int], bool], low: int, high: int) -> int:\n    \"\"\"Find the lowest int between low and high where predicate(int) is True.\"\"\"\n    while low < high:\n        mid = (\n            low + (high - low) // 2\n        )  # Avoids integer overflow compared to mid = (low + high) // 2\n        if predicate(mid):\n            high = mid\n        else:\n            low = mid + 1",
        "detail": "mid-range.bisect_search_(1)",
        "documentation": {}
    },
    {
        "label": "bishopAndPawn",
        "kind": 2,
        "importPath": "mid-range.bishop_and_pawn",
        "description": "mid-range.bishop_and_pawn",
        "peekOfCode": "def bishopAndPawn(bishop, pawn):\n    x = \"abcdefgh\"\n    return abs(int(x.index(bishop[0])) - int(x.index(pawn[0]))) == abs(\n        int(bishop[1]) - int(pawn[1])\n    )",
        "detail": "mid-range.bishop_and_pawn",
        "documentation": {}
    },
    {
        "label": "pseudo",
        "kind": 5,
        "importPath": "mid-range.bitbucket_repolist",
        "description": "mid-range.bitbucket_repolist",
        "peekOfCode": "pseudo = argv[1] if len(argv) > 1 else \"lbesson\"\njsonfile = \"bitbucket_{}.json\".format(pseudo)\nsystem(\"curl --silent https://bitbucket.org/api/1.0/users/\" + pseudo + \" > \" + jsonfile)\nb = load(open(jsonfile, \"r\"))\n# for i in b['repositories']:\n#     print(i['slug'])\nlist_of_repo = sorted([i[\"slug\"] for i in b[\"repositories\"]])\nfor i in list_of_repo:\n    print(i)",
        "detail": "mid-range.bitbucket_repolist",
        "documentation": {}
    },
    {
        "label": "jsonfile",
        "kind": 5,
        "importPath": "mid-range.bitbucket_repolist",
        "description": "mid-range.bitbucket_repolist",
        "peekOfCode": "jsonfile = \"bitbucket_{}.json\".format(pseudo)\nsystem(\"curl --silent https://bitbucket.org/api/1.0/users/\" + pseudo + \" > \" + jsonfile)\nb = load(open(jsonfile, \"r\"))\n# for i in b['repositories']:\n#     print(i['slug'])\nlist_of_repo = sorted([i[\"slug\"] for i in b[\"repositories\"]])\nfor i in list_of_repo:\n    print(i)",
        "detail": "mid-range.bitbucket_repolist",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.bitbucket_repolist",
        "description": "mid-range.bitbucket_repolist",
        "peekOfCode": "b = load(open(jsonfile, \"r\"))\n# for i in b['repositories']:\n#     print(i['slug'])\nlist_of_repo = sorted([i[\"slug\"] for i in b[\"repositories\"]])\nfor i in list_of_repo:\n    print(i)",
        "detail": "mid-range.bitbucket_repolist",
        "documentation": {}
    },
    {
        "label": "list_of_repo",
        "kind": 5,
        "importPath": "mid-range.bitbucket_repolist",
        "description": "mid-range.bitbucket_repolist",
        "peekOfCode": "list_of_repo = sorted([i[\"slug\"] for i in b[\"repositories\"]])\nfor i in list_of_repo:\n    print(i)",
        "detail": "mid-range.bitbucket_repolist",
        "documentation": {}
    },
    {
        "label": "bitonic_sort",
        "kind": 2,
        "importPath": "mid-range.bitonic_sort",
        "description": "mid-range.bitonic_sort",
        "peekOfCode": "def bitonic_sort(arr, reverse=False):\n    \"\"\"\n    bitonic sort is sorting algorithm to use multiple process, but this code not containing parallel process\n    It can sort only array that sizes power of 2\n    It can sort array in both increasing order and decreasing order by giving argument true(increasing) and false(decreasing)\n    Worst-case in parallel: O(log(n)^2)\n    Worst-case in non-parallel: O(nlog(n)^2)\n    reference: https://en.wikipedia.org/wiki/Bitonic_sorter\n    \"\"\"\n    def compare(arr, reverse):",
        "detail": "mid-range.bitonic_sort",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.BitwiseANDofNumbers",
        "description": "mid-range.BitwiseANDofNumbers",
        "peekOfCode": "class Solution:\n    def rangeBitwiseAnd(self, m: int, n: int) -> int:\n        ans = m\n        if not m == 0:\n            x = math.log2(m)\n            x = int(x) + 1\n            x = 2 ** x\n        else:\n            return 0\n        if n >= x:",
        "detail": "mid-range.BitwiseANDofNumbers",
        "documentation": {}
    },
    {
        "label": "i8",
        "kind": 5,
        "importPath": "mid-range.bitwise_ops",
        "description": "mid-range.bitwise_ops",
        "peekOfCode": "i8 = np.int64()\ni4 = np.int32()\nu8 = np.uint64()\nb_ = np.bool_()\ni = int()\nf8 = np.float64()\nb_ >> f8  # E: No overload variant\ni8 << f8  # E: No overload variant\ni | f8  # E: Unsupported operand types\ni8 ^ f8  # E: No overload variant",
        "detail": "mid-range.bitwise_ops",
        "documentation": {}
    },
    {
        "label": "i4",
        "kind": 5,
        "importPath": "mid-range.bitwise_ops",
        "description": "mid-range.bitwise_ops",
        "peekOfCode": "i4 = np.int32()\nu8 = np.uint64()\nb_ = np.bool_()\ni = int()\nf8 = np.float64()\nb_ >> f8  # E: No overload variant\ni8 << f8  # E: No overload variant\ni | f8  # E: Unsupported operand types\ni8 ^ f8  # E: No overload variant\nu8 & f8  # E: No overload variant",
        "detail": "mid-range.bitwise_ops",
        "documentation": {}
    },
    {
        "label": "u8",
        "kind": 5,
        "importPath": "mid-range.bitwise_ops",
        "description": "mid-range.bitwise_ops",
        "peekOfCode": "u8 = np.uint64()\nb_ = np.bool_()\ni = int()\nf8 = np.float64()\nb_ >> f8  # E: No overload variant\ni8 << f8  # E: No overload variant\ni | f8  # E: Unsupported operand types\ni8 ^ f8  # E: No overload variant\nu8 & f8  # E: No overload variant\n~f8  # E: Unsupported operand type",
        "detail": "mid-range.bitwise_ops",
        "documentation": {}
    },
    {
        "label": "b_",
        "kind": 5,
        "importPath": "mid-range.bitwise_ops",
        "description": "mid-range.bitwise_ops",
        "peekOfCode": "b_ = np.bool_()\ni = int()\nf8 = np.float64()\nb_ >> f8  # E: No overload variant\ni8 << f8  # E: No overload variant\ni | f8  # E: Unsupported operand types\ni8 ^ f8  # E: No overload variant\nu8 & f8  # E: No overload variant\n~f8  # E: Unsupported operand type\n# mypys' error message for `NoReturn` is unfortunately pretty bad",
        "detail": "mid-range.bitwise_ops",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "mid-range.bitwise_ops",
        "description": "mid-range.bitwise_ops",
        "peekOfCode": "i = int()\nf8 = np.float64()\nb_ >> f8  # E: No overload variant\ni8 << f8  # E: No overload variant\ni | f8  # E: Unsupported operand types\ni8 ^ f8  # E: No overload variant\nu8 & f8  # E: No overload variant\n~f8  # E: Unsupported operand type\n# mypys' error message for `NoReturn` is unfortunately pretty bad\n# TODO: Reenable this once we add support for numerical precision for `number`s",
        "detail": "mid-range.bitwise_ops",
        "documentation": {}
    },
    {
        "label": "f8",
        "kind": 5,
        "importPath": "mid-range.bitwise_ops",
        "description": "mid-range.bitwise_ops",
        "peekOfCode": "f8 = np.float64()\nb_ >> f8  # E: No overload variant\ni8 << f8  # E: No overload variant\ni | f8  # E: Unsupported operand types\ni8 ^ f8  # E: No overload variant\nu8 & f8  # E: No overload variant\n~f8  # E: Unsupported operand type\n# mypys' error message for `NoReturn` is unfortunately pretty bad\n# TODO: Reenable this once we add support for numerical precision for `number`s\n# a = u8 | 0  # E: Need type annotation",
        "detail": "mid-range.bitwise_ops",
        "documentation": {}
    },
    {
        "label": "blackAndWhite",
        "kind": 2,
        "importPath": "mid-range.BlackAndWhite",
        "description": "mid-range.BlackAndWhite",
        "peekOfCode": "def blackAndWhite():\n    img = Image.open(\n        r\"C:\\Users\\pc\\Desktop\\Hacking-Scripts\\Python\\Black and White\\Images\\img.jpg\"\n    )\n    BlackAndwhite = img.convert(\"L\")\n    BlackAndwhite.save(\n        r\"C:\\Users\\pc\\Desktop\\Hacking-Scripts\\Python\\Black and White\\Images\\bw_img.jpg\"\n    )\nif __name__ == \"__main__\":\n    blackAndWhite()",
        "detail": "mid-range.BlackAndWhite",
        "documentation": {}
    },
    {
        "label": "checkBlanagrams",
        "kind": 2,
        "importPath": "mid-range.blanagrams",
        "description": "mid-range.blanagrams",
        "peekOfCode": "def checkBlanagrams(word1, word2):\n    lenWord1 = len(word1)\n    lenWord2 = len(word2)\n    # To store the frequencies of characters\n    # of string word1 and word2\n    freq1 = [0] * 26\n    freq2 = [0] * 26\n    # To store the count of valid pairs\n    count = 0\n    # Update the frequencies of the characters of string word1",
        "detail": "mid-range.blanagrams",
        "documentation": {}
    },
    {
        "label": "Block",
        "kind": 6,
        "importPath": "mid-range.block",
        "description": "mid-range.block",
        "peekOfCode": "class Block:\n    \"\"\"\n    Base class for square or rectangular object\n    \"\"\"\n    def __init__(self, bounds, position, width, height, color):\n        # Create a rectangle centered around the x and y\n        self.bounds = bounds\n        self.position = position\n        self.rectangle = self.set_rectangle(position, width, height)\n        self.color = color",
        "detail": "mid-range.block",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "mid-range.blogscraping",
        "description": "mid-range.blogscraping",
        "peekOfCode": "response = requests.get(\"http://codedemos.com/sampleblog/\")\nsoup = BeautifulSoup(response.text, \"html.parser\")\nposts = soup.find_all(class_=\"post-preview\")\nwith open(\"posts.csv\", \"w\") as csv_file:\n    csv_writer = writer(csv_file)\n    headers = [\"Title\", \"Link\", \"Date\"]\n    csv_writer.writerow(headers)\n    for post in posts:\n        title = post.find(class_=\"post-title\").get_text().replace(\"\\n\", \"\")\n        link = post.find(\"a\")[\"href\"]",
        "detail": "mid-range.blogscraping",
        "documentation": {}
    },
    {
        "label": "soup",
        "kind": 5,
        "importPath": "mid-range.blogscraping",
        "description": "mid-range.blogscraping",
        "peekOfCode": "soup = BeautifulSoup(response.text, \"html.parser\")\nposts = soup.find_all(class_=\"post-preview\")\nwith open(\"posts.csv\", \"w\") as csv_file:\n    csv_writer = writer(csv_file)\n    headers = [\"Title\", \"Link\", \"Date\"]\n    csv_writer.writerow(headers)\n    for post in posts:\n        title = post.find(class_=\"post-title\").get_text().replace(\"\\n\", \"\")\n        link = post.find(\"a\")[\"href\"]\n        date = post.select(\".post-date\")[0].get_text()",
        "detail": "mid-range.blogscraping",
        "documentation": {}
    },
    {
        "label": "posts",
        "kind": 5,
        "importPath": "mid-range.blogscraping",
        "description": "mid-range.blogscraping",
        "peekOfCode": "posts = soup.find_all(class_=\"post-preview\")\nwith open(\"posts.csv\", \"w\") as csv_file:\n    csv_writer = writer(csv_file)\n    headers = [\"Title\", \"Link\", \"Date\"]\n    csv_writer.writerow(headers)\n    for post in posts:\n        title = post.find(class_=\"post-title\").get_text().replace(\"\\n\", \"\")\n        link = post.find(\"a\")[\"href\"]\n        date = post.select(\".post-date\")[0].get_text()\n        csv_writer.writerow([title, link, date])",
        "detail": "mid-range.blogscraping",
        "documentation": {}
    },
    {
        "label": "boxBlur",
        "kind": 2,
        "importPath": "mid-range.Blur",
        "description": "mid-range.Blur",
        "peekOfCode": "def boxBlur(image):\n    def pixels(matrix, i, j):\n        summ = 0\n        for x in range(i - 1, i + 2):\n            for y in range(j - 1, j + 2):\n                summ += matrix[x][y]\n                mean = summ // 9\n        return mean\n    output = []\n    row = len(image)",
        "detail": "mid-range.Blur",
        "documentation": {}
    },
    {
        "label": "body_mass_index",
        "kind": 5,
        "importPath": "mid-range.bmi_body_mass_index_calculator",
        "description": "mid-range.bmi_body_mass_index_calculator",
        "peekOfCode": "body_mass_index = lambda w, h: round((w) / ((h * 0.01) ** 2), 1)\n# Test\n# Playing/Testing Interface\ni = 0\nwhile True:\n    if (\n        raw_input(\"\\n[{}] Exit(press e) or To count BMI(press c):\".format(i))\n        .strip()\n        .lower()\n        == \"c\"",
        "detail": "mid-range.bmi_body_mass_index_calculator",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "mid-range.bmi_body_mass_index_calculator",
        "description": "mid-range.bmi_body_mass_index_calculator",
        "peekOfCode": "i = 0\nwhile True:\n    if (\n        raw_input(\"\\n[{}] Exit(press e) or To count BMI(press c):\".format(i))\n        .strip()\n        .lower()\n        == \"c\"\n    ):\n        cal = body_mass_index(\n            float(raw_input(\"\\nWeight(in kgs)?: \")),",
        "detail": "mid-range.bmi_body_mass_index_calculator",
        "documentation": {}
    },
    {
        "label": "chessBoardCellColor",
        "kind": 2,
        "importPath": "mid-range.BoardCellColor",
        "description": "mid-range.BoardCellColor",
        "peekOfCode": "def chessBoardCellColor(cell1, cell2):\n    cell1_elm = ord(cell1[0]) + int(cell1[1])\n    cell2_elm = ord(cell2[0]) + int(cell2[1])\n    return (cell1_elm + cell2_elm) % 2 == 0",
        "detail": "mid-range.BoardCellColor",
        "documentation": {}
    },
    {
        "label": "bogosort",
        "kind": 2,
        "importPath": "mid-range.bogosort",
        "description": "mid-range.bogosort",
        "peekOfCode": "def bogosort(collection):\n    \"\"\"Pure implementation of the bogosort algorithm in Python\n    :param collection: some mutable ordered collection with heterogeneous\n    comparable items inside\n    :return: the same collection ordered by ascending\n    Examples:\n    >>> bogosort([0, 5, 3, 2, 2])\n    [0, 2, 2, 3, 5]\n    >>> bogosort([])\n    []",
        "detail": "mid-range.bogosort",
        "documentation": {}
    },
    {
        "label": "bogo_sort",
        "kind": 2,
        "importPath": "mid-range.bogo_sort",
        "description": "mid-range.bogo_sort",
        "peekOfCode": "def bogo_sort(arr, simulation=False):\n    \"\"\"Bogo Sort\n        Best Case Complexity: O(n)\n        Worst Case Complexity: O(∞)\n        Average Case Complexity: O(n(n-1)!)\n    \"\"\"\n    iteration = 0\n    if simulation:\n        print(\"iteration\", iteration, \":\", *arr)\n    def is_sorted(arr):",
        "detail": "mid-range.bogo_sort",
        "documentation": {}
    },
    {
        "label": "addBorder",
        "kind": 2,
        "importPath": "mid-range.Border",
        "description": "mid-range.Border",
        "peekOfCode": "def addBorder(picture):\n    new_pic = []\n    border = \"\"\n    pic_len = len(picture)\n    for i in range(0, len(picture[0]) + 2):\n        border += \"*\"\n    new_pic.append(border)\n    for i in range(0, pic_len):\n        new_pic.append(\"*\" + picture[i] + \"*\")\n    new_pic.append(border)",
        "detail": "mid-range.Border",
        "documentation": {}
    },
    {
        "label": "BorlandStyle",
        "kind": 6,
        "importPath": "mid-range.borland",
        "description": "mid-range.borland",
        "peekOfCode": "class BorlandStyle(Style):\n    \"\"\"\n    Style similar to the style used in the borland IDEs.\n    \"\"\"\n    default_style = \"\"\n    styles = {\n        Whitespace: \"#bbbbbb\",\n        Comment: \"italic #008800\",\n        Comment.Preproc: \"noitalic #008080\",\n        Comment.Special: \"noitalic bold\",",
        "detail": "mid-range.borland",
        "documentation": {}
    },
    {
        "label": "boxBlur",
        "kind": 2,
        "importPath": "mid-range.boxBlurImage",
        "description": "mid-range.boxBlurImage",
        "peekOfCode": "def boxBlur(image):\n    m = len(image) - 2\n    n = len(image[0]) - 2\n    blur_img = [[0] * n for _ in range(m)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            indexes = [\n                [i - 1, j - 1],\n                [i - 1, j],\n                [i - 1, j + 1],",
        "detail": "mid-range.boxBlurImage",
        "documentation": {}
    },
    {
        "label": "infer_namespace",
        "kind": 2,
        "importPath": "mid-range.brain_argparse",
        "description": "mid-range.brain_argparse",
        "peekOfCode": "def infer_namespace(node, context=None):\n    callsite = arguments.CallSite.from_call(node, context=context)\n    if not callsite.keyword_arguments:\n        # Cannot make sense of it.\n        raise UseInferenceDefault()\n    class_node = nodes.ClassDef(\"Namespace\", \"docstring\")\n    class_node.parent = node.parent\n    for attr in set(callsite.keyword_arguments):\n        fake_node = nodes.EmptyNode()\n        fake_node.parent = class_node",
        "detail": "mid-range.brain_argparse",
        "documentation": {}
    },
    {
        "label": "service_request_transform",
        "kind": 2,
        "importPath": "mid-range.brain_boto3",
        "description": "mid-range.brain_boto3",
        "peekOfCode": "def service_request_transform(node):\n    \"\"\"Transform ServiceResource to look like dynamic classes\"\"\"\n    code = \"\"\"\n    def __getattr__(self, attr):\n        return 0\n    \"\"\"\n    func_getattr = extract_node(code)\n    node.locals[\"__getattr__\"] = [func_getattr]\n    return node\ndef _looks_like_boto3_service_request(node):",
        "detail": "mid-range.brain_boto3",
        "documentation": {}
    },
    {
        "label": "BOTO_SERVICE_FACTORY_QUALIFIED_NAME",
        "kind": 5,
        "importPath": "mid-range.brain_boto3",
        "description": "mid-range.brain_boto3",
        "peekOfCode": "BOTO_SERVICE_FACTORY_QUALIFIED_NAME = \"boto3.resources.base.ServiceResource\"\ndef service_request_transform(node):\n    \"\"\"Transform ServiceResource to look like dynamic classes\"\"\"\n    code = \"\"\"\n    def __getattr__(self, attr):\n        return 0\n    \"\"\"\n    func_getattr = extract_node(code)\n    node.locals[\"__getattr__\"] = [func_getattr]\n    return node",
        "detail": "mid-range.brain_boto3",
        "documentation": {}
    },
    {
        "label": "dateutil_transform",
        "kind": 2,
        "importPath": "mid-range.brain_dateutil",
        "description": "mid-range.brain_dateutil",
        "peekOfCode": "def dateutil_transform():\n    return AstroidBuilder(AstroidManager()).string_build(\n        textwrap.dedent(\n            \"\"\"\n    import datetime\n    def parse(timestr, parserinfo=None, **kwargs):\n        return datetime.datetime()\n    \"\"\"\n        )\n    )",
        "detail": "mid-range.brain_dateutil",
        "documentation": {}
    },
    {
        "label": "numpy_core_fromnumeric_transform",
        "kind": 2,
        "importPath": "mid-range.brain_numpy_core_fromnumeric",
        "description": "mid-range.brain_numpy_core_fromnumeric",
        "peekOfCode": "def numpy_core_fromnumeric_transform():\n    return parse(\n        \"\"\"\n    def sum(a, axis=None, dtype=None, out=None, keepdims=None, initial=None):\n        return numpy.ndarray([0, 0])\n    \"\"\"\n    )\nregister_module_extender(\n    AstroidManager(), \"numpy.core.fromnumeric\", numpy_core_fromnumeric_transform\n)",
        "detail": "mid-range.brain_numpy_core_fromnumeric",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "mid-range.breadth_first_search",
        "description": "mid-range.breadth_first_search",
        "peekOfCode": "def search(graph, start_vertex):\n    \"\"\"\n    Breadth first search algorithm\n    :param graph: \n    :param start_vertex: \n    :return: \n    \"\"\"\n    # Take a list for storing already visited vertexes\n    if (\n        start_vertex not in graph",
        "detail": "mid-range.breadth_first_search",
        "documentation": {}
    },
    {
        "label": "time_complexities",
        "kind": 2,
        "importPath": "mid-range.breadth_first_search",
        "description": "mid-range.breadth_first_search",
        "peekOfCode": "def time_complexities():\n    \"\"\"\n    Return information on functions\n    time complexity\n    :return: string\n    \"\"\"\n    return \"O(V + E) where V = Number of vertices and E = Number of Edges\"\ndef get_code():\n    \"\"\"\n    easily retrieve the source code",
        "detail": "mid-range.breadth_first_search",
        "documentation": {}
    },
    {
        "label": "get_code",
        "kind": 2,
        "importPath": "mid-range.breadth_first_search",
        "description": "mid-range.breadth_first_search",
        "peekOfCode": "def get_code():\n    \"\"\"\n    easily retrieve the source code\n    of the function\n    :return: source code\n    \"\"\"\n    return inspect.getsource(search)",
        "detail": "mid-range.breadth_first_search",
        "documentation": {}
    },
    {
        "label": "breadth_first_search",
        "kind": 2,
        "importPath": "mid-range.breadth_first_search_2",
        "description": "mid-range.breadth_first_search_2",
        "peekOfCode": "def breadth_first_search(graph: dict, start: str) -> set[str]:\n    \"\"\"\n    >>> ''.join(sorted(breadth_first_search(G, 'A')))\n    'ABCDEF'\n    \"\"\"\n    explored = {start}\n    queue = [start]\n    while queue:\n        v = queue.pop(0)  # queue.popleft()\n        for w in graph[v]:",
        "detail": "mid-range.breadth_first_search_2",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "mid-range.breadth_first_search_2",
        "description": "mid-range.breadth_first_search_2",
        "peekOfCode": "G = {\n    \"A\": [\"B\", \"C\"],\n    \"B\": [\"A\", \"D\", \"E\"],\n    \"C\": [\"A\", \"F\"],\n    \"D\": [\"B\"],\n    \"E\": [\"B\", \"F\"],\n    \"F\": [\"C\", \"E\"],\n}\ndef breadth_first_search(graph: dict, start: str) -> set[str]:\n    \"\"\"",
        "detail": "mid-range.breadth_first_search_2",
        "documentation": {}
    },
    {
        "label": "oddEvenSort",
        "kind": 2,
        "importPath": "mid-range.brickSort",
        "description": "mid-range.brickSort",
        "peekOfCode": "def oddEvenSort(arr, n):\n    # Initially array is unsorted\n    isSorted = 0\n    while isSorted == 0:\n        isSorted = 1\n        temp = 0\n        for i in range(1, n - 1, 2):\n            if arr[i] > arr[i + 1]:\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n                isSorted = 0",
        "detail": "mid-range.brickSort",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.brickSort",
        "description": "mid-range.brickSort",
        "peekOfCode": "arr = [34, 2, 10, -9]\nn = len(arr)\noddEvenSort(arr, n)\nfor i in range(0, n):\n    print(arr[i], end=\" \")",
        "detail": "mid-range.brickSort",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.brickSort",
        "description": "mid-range.brickSort",
        "peekOfCode": "n = len(arr)\noddEvenSort(arr, n)\nfor i in range(0, n):\n    print(arr[i], end=\" \")",
        "detail": "mid-range.brickSort",
        "documentation": {}
    },
    {
        "label": "brick_sort",
        "kind": 2,
        "importPath": "mid-range.brick_sort",
        "description": "mid-range.brick_sort",
        "peekOfCode": "def brick_sort(arr):\n    \"\"\"Performs an odd-even in-place sort, which is a variation of a bubble\n    sort.\n    https://www.geeksforgeeks.org/odd-even-sort-brick-sort/\n    :param arr: the array of values to sort\n    :return: the sorted array\n    \"\"\"\n    # Initially array is unsorted\n    is_sorted = False\n    while not is_sorted:",
        "detail": "mid-range.brick_sort",
        "documentation": {}
    },
    {
        "label": "browsers",
        "kind": 5,
        "importPath": "mid-range.browser_status",
        "description": "mid-range.browser_status",
        "peekOfCode": "browsers = [\"chrome.exe\", \"firefox.exe\", \"edge.exe\", \"iexplore.exe\"]\n# ADD DOWNLOADS PATH HERE::: r is for raw string enter the path\n# Example: path_to_watch=r\"C:\\Users\\Xyz\\Downloads\"\n# find downloads path .\npath_to_watch = r\" \"\nfor browser in browsers:\n    while browser in (process.name() for process in psutil.process_iter()):\n        watcher(path_to_watch)",
        "detail": "mid-range.browser_status",
        "documentation": {}
    },
    {
        "label": "path_to_watch",
        "kind": 5,
        "importPath": "mid-range.browser_status",
        "description": "mid-range.browser_status",
        "peekOfCode": "path_to_watch = r\" \"\nfor browser in browsers:\n    while browser in (process.name() for process in psutil.process_iter()):\n        watcher(path_to_watch)",
        "detail": "mid-range.browser_status",
        "documentation": {}
    },
    {
        "label": "user_pass",
        "kind": 5,
        "importPath": "mid-range.Bruteforce_attack",
        "description": "mid-range.Bruteforce_attack",
        "peekOfCode": "user_pass = input(\"Enter your password\")\n# storing alphabet letter to use thm to crack password\npassword = [\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",",
        "detail": "mid-range.Bruteforce_attack",
        "documentation": {}
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "mid-range.Bruteforce_attack",
        "description": "mid-range.Bruteforce_attack",
        "peekOfCode": "password = [\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",",
        "detail": "mid-range.Bruteforce_attack",
        "documentation": {}
    },
    {
        "label": "guess",
        "kind": 5,
        "importPath": "mid-range.Bruteforce_attack",
        "description": "mid-range.Bruteforce_attack",
        "peekOfCode": "guess = \"\"\n# using while loop to generate many passwords untill one of\n# them does not matches user_pass\nwhile guess != user_pass:\n    guess = \"\"\n    # generating random passwords using for loop\n    for letter in range(len(user_pass)):\n        guess_letter = password[randint(0, 25)]\n        guess = str(guess_letter) + str(guess)\n    # printing guessed passwords",
        "detail": "mid-range.Bruteforce_attack",
        "documentation": {}
    },
    {
        "label": "BSTIterator",
        "kind": 6,
        "importPath": "mid-range.BSTIterator",
        "description": "mid-range.BSTIterator",
        "peekOfCode": "class BSTIterator:\n    def __init__(self, root):\n        self.stack = []\n        while root:\n            self.stack.append(root)\n            root = root.left\n    def has_next(self):\n        return bool(self.stack)\n    def next(self):\n        node = self.stack.pop()",
        "detail": "mid-range.BSTIterator",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.BSTtoGST",
        "description": "mid-range.BSTtoGST",
        "peekOfCode": "class Solution:\n    def convertBST(self, root: TreeNode) -> TreeNode:\n        self.ans = 0\n        def add(node):\n            if not node:\n                return\n            add(node.right)\n            self.ans += node.val\n            node.val = self.ans\n            add(node.left)",
        "detail": "mid-range.BSTtoGST",
        "documentation": {}
    },
    {
        "label": "closest_value",
        "kind": 2,
        "importPath": "mid-range.bst_closest_value",
        "description": "mid-range.bst_closest_value",
        "peekOfCode": "def closest_value(root, target):\n    \"\"\"\n    :type root: TreeNode\n    :type target: float\n    :rtype: int\n    \"\"\"\n    a = root.val\n    kid = root.left if target < a else root.right\n    if not kid:\n        return a",
        "detail": "mid-range.bst_closest_value",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.BST_from_preorder",
        "description": "mid-range.BST_from_preorder",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    def bstFromPreorder(self, preorder):\n        if not preorder:\n            return None\n        root = TreeNode(preorder[0])",
        "detail": "mid-range.BST_from_preorder",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.BST_from_preorder",
        "description": "mid-range.BST_from_preorder",
        "peekOfCode": "class Solution:\n    def bstFromPreorder(self, preorder):\n        if not preorder:\n            return None\n        root = TreeNode(preorder[0])\n        i = 1\n        while i < len(preorder) and preorder[i] < root.val:\n            i += 1\n        root.left = self.bstFromPreorder(preorder[1:i])\n        root.right = self.bstFromPreorder(preorder[i:])",
        "detail": "mid-range.BST_from_preorder",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 5,
        "importPath": "mid-range.BST_from_preorder",
        "description": "mid-range.BST_from_preorder",
        "peekOfCode": "preorder = [19, 4, 8, 11]\nbst = Solution()\nbst.bstFromPreorder(preorder)",
        "detail": "mid-range.BST_from_preorder",
        "documentation": {}
    },
    {
        "label": "bst",
        "kind": 5,
        "importPath": "mid-range.BST_from_preorder",
        "description": "mid-range.BST_from_preorder",
        "peekOfCode": "bst = Solution()\nbst.bstFromPreorder(preorder)",
        "detail": "mid-range.BST_from_preorder",
        "documentation": {}
    },
    {
        "label": "bst_make_balanced_recur",
        "kind": 2,
        "importPath": "mid-range.bst_make_balanced_recur",
        "description": "mid-range.bst_make_balanced_recur",
        "peekOfCode": "def bst_make_balanced_recur(values: Sequence[int]) -> Optional[BTNode]:\n    \"\"\"Make a balanced binary search tree from a sorted sequence of values.\"\"\"\n    if not values:\n        return None\n    mid = len(values) // 2\n    root = BTNode(values[mid])\n    root.left = bst_make_balanced_recur(values[:mid])\n    root.right = bst_make_balanced_recur(values[mid + 1 :])\n    return root",
        "detail": "mid-range.bst_make_balanced_recur",
        "documentation": {}
    },
    {
        "label": "bst_make_balanced_recur",
        "kind": 2,
        "importPath": "mid-range.bst_make_balanced_recur_(1)",
        "description": "mid-range.bst_make_balanced_recur_(1)",
        "peekOfCode": "def bst_make_balanced_recur(values: Sequence[int]) -> Optional[BTNode]:\n    \"\"\"Make a balanced binary search tree from a sorted sequence of values.\"\"\"\n    if not values:\n        return None\n    mid = len(values) // 2\n    root = BTNode(values[mid])\n    root.left = bst_make_balanced_recur(values[:mid])\n    root.right = bst_make_balanced_recur(values[mid + 1 :])\n    return root",
        "detail": "mid-range.bst_make_balanced_recur_(1)",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.BTInOrderTraversal",
        "description": "mid-range.BTInOrderTraversal",
        "peekOfCode": "class Solution:\n    def inorderTraversal(self, root: TreeNode) -> List[int]:\n        io = []\n        if root == None:\n            return []\n        def inorder(x):\n            if x.left != None:\n                inorder(x.left)\n            io.append(int(x.val))\n            if x.right != None:",
        "detail": "mid-range.BTInOrderTraversal",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.BTInOrderTraversal",
        "description": "mid-range.BTInOrderTraversal",
        "peekOfCode": "class Solution:\n    def inorderTraversal(self, root: TreeNode) -> List[int]:\n        if root == None:\n            return []\n        stack = []\n        io = []\n        c = root\n        while c != None or len(stack) != 0:\n            while c != None:\n                stack.append(c)",
        "detail": "mid-range.BTInOrderTraversal",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.BTPostOrderTraversal",
        "description": "mid-range.BTPostOrderTraversal",
        "peekOfCode": "class Solution:\n    def postorderTraversal(self, root: TreeNode) -> List[int]:\n        if root == None:\n            return []\n        po = []\n        def postorder(x):\n            if not x:\n                return\n            postorder(x.left)\n            postorder(x.right)",
        "detail": "mid-range.BTPostOrderTraversal",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.BTPreOrderTraversal",
        "description": "mid-range.BTPreOrderTraversal",
        "peekOfCode": "class Solution:\n    def preorderTraversal(self, root: TreeNode) -> List[int]:\n        if root == None:\n            return []\n        po = []\n        def preorder(x):\n            if x:\n                po.append(x.val)\n                preorder(x.left)\n                preorder(x.right)",
        "detail": "mid-range.BTPreOrderTraversal",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.BTPreOrderTraversal",
        "description": "mid-range.BTPreOrderTraversal",
        "peekOfCode": "class Solution:\n    def preorderTraversal(self, root: TreeNode) -> List[int]:\n        if root == None:\n            return []\n        stack = []\n        po = []\n        c = root\n        while c != None or len(stack) != 0:\n            while c != None:\n                stack.append(c)",
        "detail": "mid-range.BTPreOrderTraversal",
        "documentation": {}
    },
    {
        "label": "bt_inorder_traversal_recur",
        "kind": 2,
        "importPath": "mid-range.bt_inorder_traversal_recur",
        "description": "mid-range.bt_inorder_traversal_recur",
        "peekOfCode": "def bt_inorder_traversal_recur(root: Optional[BTNode]) -> Iterable[BTNode]:\n    if root is not None:\n        yield from bt_inorder_traversal_recur(root.left)\n        yield root\n        yield from bt_inorder_traversal_recur(root.right)",
        "detail": "mid-range.bt_inorder_traversal_recur",
        "documentation": {}
    },
    {
        "label": "bt_inorder_traversal_recur",
        "kind": 2,
        "importPath": "mid-range.bt_inorder_traversal_recur_(1)",
        "description": "mid-range.bt_inorder_traversal_recur_(1)",
        "peekOfCode": "def bt_inorder_traversal_recur(root: Optional[BTNode]) -> Iterable[BTNode]:\n    if root is not None:\n        yield from bt_inorder_traversal_recur(root.left)\n        yield root\n        yield from bt_inorder_traversal_recur(root.right)",
        "detail": "mid-range.bt_inorder_traversal_recur_(1)",
        "documentation": {}
    },
    {
        "label": "bt_level_order_traversal_iter",
        "kind": 2,
        "importPath": "mid-range.bt_level_order_traversal_iter",
        "description": "mid-range.bt_level_order_traversal_iter",
        "peekOfCode": "def bt_level_order_traversal_iter(root: BTNode) -> Iterable[list[BTNode]]:\n    # would do a null check here if root was Optional\n    level = deque([root])\n    while level:\n        # modify this line if you needed to grab the values\n        yield list(level)  # copy so it's not messed with\n        for _ in range(len(level)):\n            node = level.popleft()\n            for child in [node.left, node.right]:\n                if child is not None:",
        "detail": "mid-range.bt_level_order_traversal_iter",
        "documentation": {}
    },
    {
        "label": "bt_level_order_traversal_iter",
        "kind": 2,
        "importPath": "mid-range.bt_level_order_traversal_iter_(1)",
        "description": "mid-range.bt_level_order_traversal_iter_(1)",
        "peekOfCode": "def bt_level_order_traversal_iter(root: BTNode) -> Iterable[list[BTNode]]:\n    # would do a null check here if root was Optional\n    level = deque([root])\n    while level:\n        # modify this line if you needed to grab the values\n        yield list(level)  # copy so it's not messed with\n        for _ in range(len(level)):\n            node = level.popleft()\n            for child in [node.left, node.right]:\n                if child is not None:",
        "detail": "mid-range.bt_level_order_traversal_iter_(1)",
        "documentation": {}
    },
    {
        "label": "bubble_sort",
        "kind": 2,
        "importPath": "mid-range.bubble_sort",
        "description": "mid-range.bubble_sort",
        "peekOfCode": "def bubble_sort(arr, simulation=False):\n    def swap(i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n    n = len(arr)\n    swapped = True\n    iteration = 0\n    if simulation:\n        print(\"iteration\", iteration, \":\", *arr)\n    x = -1\n    while swapped:",
        "detail": "mid-range.bubble_sort",
        "documentation": {}
    },
    {
        "label": "bubblesort",
        "kind": 2,
        "importPath": "mid-range.Bubble_Sorting_Prog",
        "description": "mid-range.Bubble_Sorting_Prog",
        "peekOfCode": "def bubblesort(list):\n    # Swap the elements to arrange in order\n    for iter_num in range(len(list) - 1, 0, -1):\n        for idx in range(iter_num):\n            if list[idx] > list[idx + 1]:\n                temp = list[idx]\n                list[idx] = list[idx + 1]\n                list[idx + 1] = temp\nlist = [19, 2, 31, 45, 6, 11, 121, 27]\nbubblesort(list)",
        "detail": "mid-range.Bubble_Sorting_Prog",
        "documentation": {}
    },
    {
        "label": "list",
        "kind": 5,
        "importPath": "mid-range.Bubble_Sorting_Prog",
        "description": "mid-range.Bubble_Sorting_Prog",
        "peekOfCode": "list = [19, 2, 31, 45, 6, 11, 121, 27]\nbubblesort(list)\nprint(list)",
        "detail": "mid-range.Bubble_Sorting_Prog",
        "documentation": {}
    },
    {
        "label": "bubble_sort",
        "kind": 2,
        "importPath": "mid-range.buble_sort",
        "description": "mid-range.buble_sort",
        "peekOfCode": "def bubble_sort(arr, n):\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\narr = [64, 34, 25, 12, 22, 11, 90]\nresult = bubble_sort(arr, len(arr))\nprint(result)",
        "detail": "mid-range.buble_sort",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.buble_sort",
        "description": "mid-range.buble_sort",
        "peekOfCode": "arr = [64, 34, 25, 12, 22, 11, 90]\nresult = bubble_sort(arr, len(arr))\nprint(result)",
        "detail": "mid-range.buble_sort",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "mid-range.buble_sort",
        "description": "mid-range.buble_sort",
        "peekOfCode": "result = bubble_sort(arr, len(arr))\nprint(result)",
        "detail": "mid-range.buble_sort",
        "documentation": {}
    },
    {
        "label": "bucket_sort",
        "kind": 2,
        "importPath": "mid-range.bucket_sort",
        "description": "mid-range.bucket_sort",
        "peekOfCode": "def bucket_sort(arr):\n    \"\"\" Bucket Sort\n        Complexity: O(n^2)\n        The complexity is dominated by nextSort\n    \"\"\"\n    # The number of buckets and make buckets\n    num_buckets = len(arr)\n    buckets = [[] for bucket in range(num_buckets)]\n    # Assign values into bucket_sort\n    for value in arr:",
        "detail": "mid-range.bucket_sort",
        "documentation": {}
    },
    {
        "label": "next_sort",
        "kind": 2,
        "importPath": "mid-range.bucket_sort",
        "description": "mid-range.bucket_sort",
        "peekOfCode": "def next_sort(arr):\n    # We will use insertion sort here.\n    for i in range(1, len(arr)):\n        j = i - 1\n        key = arr[i]\n        while arr[j] > key and j >= 0:\n            arr[j + 1] = arr[j]\n            j = j - 1\n        arr[j + 1] = key\n    return arr",
        "detail": "mid-range.bucket_sort",
        "documentation": {}
    },
    {
        "label": "buddyStrings",
        "kind": 2,
        "importPath": "mid-range.buddy_strings",
        "description": "mid-range.buddy_strings",
        "peekOfCode": "def buddyStrings(A, B):\n    if len(A) != len(B):\n        return False\n    elif A == B:\n        seen = set()\n        for char in A:\n            if char in seen:\n                return True\n            seen.add(char)\n        return False",
        "detail": "mid-range.buddy_strings",
        "documentation": {}
    },
    {
        "label": "isPalindrome",
        "kind": 2,
        "importPath": "mid-range.build_palindrome",
        "description": "mid-range.build_palindrome",
        "peekOfCode": "def isPalindrome(st):\n    for i in range(len(st) // 2):\n        if st[i] != st[len(st) - 1 - i]:\n            return False\n    return True\ndef buildPalindrome(st):\n    for i in range(len(st)):\n        substring = st[i : len(st)]\n        if isPalindrome(substring):\n            non_palindrome_part = st[0:i]",
        "detail": "mid-range.build_palindrome",
        "documentation": {}
    },
    {
        "label": "buildPalindrome",
        "kind": 2,
        "importPath": "mid-range.build_palindrome",
        "description": "mid-range.build_palindrome",
        "peekOfCode": "def buildPalindrome(st):\n    for i in range(len(st)):\n        substring = st[i : len(st)]\n        if isPalindrome(substring):\n            non_palindrome_part = st[0:i]\n            return st + non_palindrome_part[::-1]\n    return \"String not found\"",
        "detail": "mid-range.build_palindrome",
        "documentation": {}
    },
    {
        "label": "BuildPhase",
        "kind": 6,
        "importPath": "mid-range.build_phase",
        "description": "mid-range.build_phase",
        "peekOfCode": "class BuildPhase(IntEnum):\n    \"\"\"Build phase of Sphinx application.\"\"\"\n    INITIALIZATION = 1\n    READING = 2\n    CONSISTENCY_CHECK = 3\n    RESOLVING = 3\n    WRITING = 4",
        "detail": "mid-range.build_phase",
        "documentation": {}
    },
    {
        "label": "heap",
        "kind": 5,
        "importPath": "mid-range.built-in-heaps",
        "description": "mid-range.built-in-heaps",
        "peekOfCode": "heap = []\nnums = [12, 3, -2, 6, 4, 8, 9]\n# for num in nums:\n#     heappush(heap, num)\n# while heap:\n#     print(heappop(heap))\nheapify(nums)\nprint(nums)",
        "detail": "mid-range.built-in-heaps",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "mid-range.built-in-heaps",
        "description": "mid-range.built-in-heaps",
        "peekOfCode": "nums = [12, 3, -2, 6, 4, 8, 9]\n# for num in nums:\n#     heappush(heap, num)\n# while heap:\n#     print(heappop(heap))\nheapify(nums)\nprint(nums)",
        "detail": "mid-range.built-in-heaps",
        "documentation": {}
    },
    {
        "label": "plugins",
        "kind": 5,
        "importPath": "mid-range.builtin",
        "description": "mid-range.builtin",
        "peekOfCode": "plugins = []\nbuiltins = (\n    (\"nose.plugins.attrib\", \"AttributeSelector\"),\n    (\"nose.plugins.capture\", \"Capture\"),\n    (\"nose.plugins.logcapture\", \"LogCapture\"),\n    (\"nose.plugins.cover\", \"Coverage\"),\n    (\"nose.plugins.debug\", \"Pdb\"),\n    (\"nose.plugins.deprecated\", \"Deprecated\"),\n    (\"nose.plugins.doctests\", \"Doctest\"),\n    (\"nose.plugins.isolate\", \"IsolationPlugin\"),",
        "detail": "mid-range.builtin",
        "documentation": {}
    },
    {
        "label": "builtins",
        "kind": 5,
        "importPath": "mid-range.builtin",
        "description": "mid-range.builtin",
        "peekOfCode": "builtins = (\n    (\"nose.plugins.attrib\", \"AttributeSelector\"),\n    (\"nose.plugins.capture\", \"Capture\"),\n    (\"nose.plugins.logcapture\", \"LogCapture\"),\n    (\"nose.plugins.cover\", \"Coverage\"),\n    (\"nose.plugins.debug\", \"Pdb\"),\n    (\"nose.plugins.deprecated\", \"Deprecated\"),\n    (\"nose.plugins.doctests\", \"Doctest\"),\n    (\"nose.plugins.isolate\", \"IsolationPlugin\"),\n    (\"nose.plugins.failuredetail\", \"FailureDetail\"),",
        "detail": "mid-range.builtin",
        "documentation": {}
    },
    {
        "label": "VirtualenvBuiltin",
        "kind": 6,
        "importPath": "mid-range.builtin_way",
        "description": "mid-range.builtin_way",
        "peekOfCode": "class VirtualenvBuiltin(Creator, Describe):\n    \"\"\"A creator that does operations itself without delegation, if we can create it we can also describe it\"\"\"\n    def __init__(self, options, interpreter):\n        Creator.__init__(self, options, interpreter)\n        Describe.__init__(self, self.dest, interpreter)",
        "detail": "mid-range.builtin_way",
        "documentation": {}
    },
    {
        "label": "Bunch",
        "kind": 6,
        "importPath": "mid-range.bunch",
        "description": "mid-range.bunch",
        "peekOfCode": "class Bunch(dict):\n    \"\"\"A dict with attribute-access\"\"\"\n    def __getattr__(self, key):\n        try:\n            return self.__getitem__(key)\n        except KeyError:\n            raise AttributeError(key)\n    def __setattr__(self, key, value):\n        self.__setitem__(key, value)\n    def __dir__(self):",
        "detail": "mid-range.bunch",
        "documentation": {}
    },
    {
        "label": "display",
        "kind": 5,
        "importPath": "mid-range.Buttons",
        "description": "mid-range.Buttons",
        "peekOfCode": "display = []\nbuttons = []\nfor n in range(10):\n    # A button is a function called when user clicks on it\n    buttons.append(lambda: display.append(n))\n# Click on button 3\nbtn = buttons[3]\nbtn()\nprint(display)",
        "detail": "mid-range.Buttons",
        "documentation": {}
    },
    {
        "label": "buttons",
        "kind": 5,
        "importPath": "mid-range.Buttons",
        "description": "mid-range.Buttons",
        "peekOfCode": "buttons = []\nfor n in range(10):\n    # A button is a function called when user clicks on it\n    buttons.append(lambda: display.append(n))\n# Click on button 3\nbtn = buttons[3]\nbtn()\nprint(display)",
        "detail": "mid-range.Buttons",
        "documentation": {}
    },
    {
        "label": "btn",
        "kind": 5,
        "importPath": "mid-range.Buttons",
        "description": "mid-range.Buttons",
        "peekOfCode": "btn = buttons[3]\nbtn()\nprint(display)",
        "detail": "mid-range.Buttons",
        "documentation": {}
    },
    {
        "label": "display",
        "kind": 5,
        "importPath": "mid-range.buttons_default",
        "description": "mid-range.buttons_default",
        "peekOfCode": "display = []\nbuttons = []\nfor n in range(10):\n    # A button is a function called when user clicks on it\n    buttons.append(lambda n=n: display.append(n))  # <1>\n# Click on button 3\nbtn = buttons[3]\nbtn()\nprint(display)",
        "detail": "mid-range.buttons_default",
        "documentation": {}
    },
    {
        "label": "buttons",
        "kind": 5,
        "importPath": "mid-range.buttons_default",
        "description": "mid-range.buttons_default",
        "peekOfCode": "buttons = []\nfor n in range(10):\n    # A button is a function called when user clicks on it\n    buttons.append(lambda n=n: display.append(n))  # <1>\n# Click on button 3\nbtn = buttons[3]\nbtn()\nprint(display)",
        "detail": "mid-range.buttons_default",
        "documentation": {}
    },
    {
        "label": "btn",
        "kind": 5,
        "importPath": "mid-range.buttons_default",
        "description": "mid-range.buttons_default",
        "peekOfCode": "btn = buttons[3]\nbtn()\nprint(display)",
        "detail": "mid-range.buttons_default",
        "documentation": {}
    },
    {
        "label": "make_button",
        "kind": 2,
        "importPath": "mid-range.buttons_make",
        "description": "mid-range.buttons_make",
        "peekOfCode": "def make_button(n):\n    return lambda: display.append(n)\nfor n in range(10):\n    # A button is a function called when user clicks on it\n    buttons.append(make_button(n))\n# Click on button 3\nbtn = buttons[3]\nbtn()\nprint(display)",
        "detail": "mid-range.buttons_make",
        "documentation": {}
    },
    {
        "label": "display",
        "kind": 5,
        "importPath": "mid-range.buttons_make",
        "description": "mid-range.buttons_make",
        "peekOfCode": "display = []\nbuttons = []\ndef make_button(n):\n    return lambda: display.append(n)\nfor n in range(10):\n    # A button is a function called when user clicks on it\n    buttons.append(make_button(n))\n# Click on button 3\nbtn = buttons[3]\nbtn()",
        "detail": "mid-range.buttons_make",
        "documentation": {}
    },
    {
        "label": "buttons",
        "kind": 5,
        "importPath": "mid-range.buttons_make",
        "description": "mid-range.buttons_make",
        "peekOfCode": "buttons = []\ndef make_button(n):\n    return lambda: display.append(n)\nfor n in range(10):\n    # A button is a function called when user clicks on it\n    buttons.append(make_button(n))\n# Click on button 3\nbtn = buttons[3]\nbtn()\nprint(display)",
        "detail": "mid-range.buttons_make",
        "documentation": {}
    },
    {
        "label": "btn",
        "kind": 5,
        "importPath": "mid-range.buttons_make",
        "description": "mid-range.buttons_make",
        "peekOfCode": "btn = buttons[3]\nbtn()\nprint(display)",
        "detail": "mid-range.buttons_make",
        "documentation": {}
    },
    {
        "label": "maxProfit",
        "kind": 2,
        "importPath": "mid-range.Buy_and_Sell_Stock",
        "description": "mid-range.Buy_and_Sell_Stock",
        "peekOfCode": "def maxProfit(prices):\n    i = 0\n    max_profit = 0\n    while i < len(prices) - 1:\n        while i < len(prices) - 1 and prices[i] >= prices[i + 1]:\n            i += 1\n        min_pri = prices[i]\n        while i < len(prices) - 1 and prices[i] <= prices[i + 1]:\n            i += 1\n        max_pri = prices[i]",
        "detail": "mid-range.Buy_and_Sell_Stock",
        "documentation": {}
    },
    {
        "label": "BlackWhiteStyle",
        "kind": 6,
        "importPath": "mid-range.bw",
        "description": "mid-range.bw",
        "peekOfCode": "class BlackWhiteStyle(Style):\n    background_color = \"#ffffff\"\n    default_style = \"\"\n    styles = {\n        Comment: \"italic\",\n        Comment.Preproc: \"noitalic\",\n        Keyword: \"bold\",\n        Keyword.Pseudo: \"nobold\",\n        Keyword.Type: \"nobold\",\n        Operator.Word: \"bold\",",
        "detail": "mid-range.bw",
        "documentation": {}
    },
    {
        "label": "sortByHeight",
        "kind": 2,
        "importPath": "mid-range.ByHeight",
        "description": "mid-range.ByHeight",
        "peekOfCode": "def sortByHeight(a):\n    # Step 1: We begin by creating a counter, starting from 0, that will be used in the subsequent for-loop.\n    j = 0\n    # Step 2: We also create a new array, called \"a_sort\", where we sort (in ascending order) all elements of the given array \"a\"\n    # that are not \"trees\" (i.e. do not have a value of -1).\n    a_sort = sorted([i for i in a if i != -1])\n    # Step 3: By implementing a for-loop, we investigate all elements of the given array \"a\" (NOT a_sort!) and check:\n    # if the element i in array \"a\" is equal to -1, the for-loop continues. Otherwise, the element i in array \"a\" should be\n    # the same as element j in array \"a_sort\" (starting from 0 index, as defined in step 1).\n    # You can think of it as working through elements of array \"a\", disregarding the \"trees\" (-1s) and sorting the rest",
        "detail": "mid-range.ByHeight",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.bz2_file_compresslevel",
        "description": "mid-range.bz2_file_compresslevel",
        "peekOfCode": "data = open(\"lorem.txt\", \"r\", encoding=\"utf-8\").read() * 1024\nprint(\"Input contains {} bytes\".format(len(data.encode(\"utf-8\"))))\nfor i in range(1, 10):\n    filename = \"compress-level-{}.bz2\".format(i)\n    with bz2.BZ2File(filename, \"wb\", compresslevel=i) as output:\n        with io.TextIOWrapper(output, encoding=\"utf-8\") as enc:\n            enc.write(data)\n    os.system(\"cksum {}\".format(filename))",
        "detail": "mid-range.bz2_file_compresslevel",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.bz2_file_write",
        "description": "mid-range.bz2_file_write",
        "peekOfCode": "data = \"Contents of the example file go here.\\n\"\nwith bz2.BZ2File(\"example.bz2\", \"wb\") as output:\n    with io.TextIOWrapper(output, encoding=\"utf-8\") as enc:\n        enc.write(data)\nos.system(\"file example.bz2\")",
        "detail": "mid-range.bz2_file_write",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.bz2_file_writelines",
        "description": "mid-range.bz2_file_writelines",
        "peekOfCode": "data = \"The same line, over and over.\\n\"\nwith bz2.BZ2File(\"lines.bz2\", \"wb\") as output:\n    with io.TextIOWrapper(output, encoding=\"utf-8\") as enc:\n        enc.writelines(itertools.repeat(data, 10))\nos.system(\"bzcat lines.bz2\")",
        "detail": "mid-range.bz2_file_writelines",
        "documentation": {}
    },
    {
        "label": "compressor",
        "kind": 5,
        "importPath": "mid-range.bz2_incremental",
        "description": "mid-range.bz2_incremental",
        "peekOfCode": "compressor = bz2.BZ2Compressor()\nwith open(\"lorem.txt\", \"rb\") as input:\n    while True:\n        block = input.read(64)\n        if not block:\n            break\n        compressed = compressor.compress(block)\n        if compressed:\n            print(\"Compressed: {}\".format(binascii.hexlify(compressed)))\n        else:",
        "detail": "mid-range.bz2_incremental",
        "documentation": {}
    },
    {
        "label": "original_data",
        "kind": 5,
        "importPath": "mid-range.bz2_lengths",
        "description": "mid-range.bz2_lengths",
        "peekOfCode": "original_data = b\"This is the original text.\"\nfmt = \"{:>15}  {:>15}\"\nprint(fmt.format(\"len(data)\", \"len(compressed)\"))\nprint(fmt.format(\"-\" * 15, \"-\" * 15))\nfor i in range(5):\n    data = original_data * i\n    compressed = bz2.compress(data)\n    print(fmt.format(len(data), len(compressed)), end=\"\")\n    print(\"*\" if len(data) < len(compressed) else \"\")",
        "detail": "mid-range.bz2_lengths",
        "documentation": {}
    },
    {
        "label": "fmt",
        "kind": 5,
        "importPath": "mid-range.bz2_lengths",
        "description": "mid-range.bz2_lengths",
        "peekOfCode": "fmt = \"{:>15}  {:>15}\"\nprint(fmt.format(\"len(data)\", \"len(compressed)\"))\nprint(fmt.format(\"-\" * 15, \"-\" * 15))\nfor i in range(5):\n    data = original_data * i\n    compressed = bz2.compress(data)\n    print(fmt.format(len(data), len(compressed)), end=\"\")\n    print(\"*\" if len(data) < len(compressed) else \"\")",
        "detail": "mid-range.bz2_lengths",
        "documentation": {}
    },
    {
        "label": "original_data",
        "kind": 5,
        "importPath": "mid-range.bz2_memory",
        "description": "mid-range.bz2_memory",
        "peekOfCode": "original_data = b\"This is the original text.\"\nprint(\"Original     : {} bytes\".format(len(original_data)))\nprint(original_data)\nprint()\ncompressed = bz2.compress(original_data)\nprint(\"Compressed   : {} bytes\".format(len(compressed)))\nhex_version = binascii.hexlify(compressed)\nfor i in range(len(hex_version) // 40 + 1):\n    print(hex_version[i * 40 : (i + 1) * 40])\nprint()",
        "detail": "mid-range.bz2_memory",
        "documentation": {}
    },
    {
        "label": "compressed",
        "kind": 5,
        "importPath": "mid-range.bz2_memory",
        "description": "mid-range.bz2_memory",
        "peekOfCode": "compressed = bz2.compress(original_data)\nprint(\"Compressed   : {} bytes\".format(len(compressed)))\nhex_version = binascii.hexlify(compressed)\nfor i in range(len(hex_version) // 40 + 1):\n    print(hex_version[i * 40 : (i + 1) * 40])\nprint()\ndecompressed = bz2.decompress(compressed)\nprint(\"Decompressed : {} bytes\".format(len(decompressed)))\nprint(decompressed)",
        "detail": "mid-range.bz2_memory",
        "documentation": {}
    },
    {
        "label": "hex_version",
        "kind": 5,
        "importPath": "mid-range.bz2_memory",
        "description": "mid-range.bz2_memory",
        "peekOfCode": "hex_version = binascii.hexlify(compressed)\nfor i in range(len(hex_version) // 40 + 1):\n    print(hex_version[i * 40 : (i + 1) * 40])\nprint()\ndecompressed = bz2.decompress(compressed)\nprint(\"Decompressed : {} bytes\".format(len(decompressed)))\nprint(decompressed)",
        "detail": "mid-range.bz2_memory",
        "documentation": {}
    },
    {
        "label": "decompressed",
        "kind": 5,
        "importPath": "mid-range.bz2_memory",
        "description": "mid-range.bz2_memory",
        "peekOfCode": "decompressed = bz2.decompress(compressed)\nprint(\"Decompressed : {} bytes\".format(len(decompressed)))\nprint(decompressed)",
        "detail": "mid-range.bz2_memory",
        "documentation": {}
    },
    {
        "label": "lorem",
        "kind": 5,
        "importPath": "mid-range.bz2_mixed",
        "description": "mid-range.bz2_mixed",
        "peekOfCode": "lorem = open(\"lorem.txt\", \"rt\").read().encode(\"utf-8\")\ncompressed = bz2.compress(lorem)\ncombined = compressed + lorem\ndecompressor = bz2.BZ2Decompressor()\ndecompressed = decompressor.decompress(combined)\ndecompressed_matches = decompressed == lorem\nprint(\"Decompressed matches lorem:\", decompressed_matches)\nunused_matches = decompressor.unused_data == lorem\nprint(\"Unused data matches lorem :\", unused_matches)",
        "detail": "mid-range.bz2_mixed",
        "documentation": {}
    },
    {
        "label": "compressed",
        "kind": 5,
        "importPath": "mid-range.bz2_mixed",
        "description": "mid-range.bz2_mixed",
        "peekOfCode": "compressed = bz2.compress(lorem)\ncombined = compressed + lorem\ndecompressor = bz2.BZ2Decompressor()\ndecompressed = decompressor.decompress(combined)\ndecompressed_matches = decompressed == lorem\nprint(\"Decompressed matches lorem:\", decompressed_matches)\nunused_matches = decompressor.unused_data == lorem\nprint(\"Unused data matches lorem :\", unused_matches)",
        "detail": "mid-range.bz2_mixed",
        "documentation": {}
    },
    {
        "label": "combined",
        "kind": 5,
        "importPath": "mid-range.bz2_mixed",
        "description": "mid-range.bz2_mixed",
        "peekOfCode": "combined = compressed + lorem\ndecompressor = bz2.BZ2Decompressor()\ndecompressed = decompressor.decompress(combined)\ndecompressed_matches = decompressed == lorem\nprint(\"Decompressed matches lorem:\", decompressed_matches)\nunused_matches = decompressor.unused_data == lorem\nprint(\"Unused data matches lorem :\", unused_matches)",
        "detail": "mid-range.bz2_mixed",
        "documentation": {}
    },
    {
        "label": "decompressor",
        "kind": 5,
        "importPath": "mid-range.bz2_mixed",
        "description": "mid-range.bz2_mixed",
        "peekOfCode": "decompressor = bz2.BZ2Decompressor()\ndecompressed = decompressor.decompress(combined)\ndecompressed_matches = decompressed == lorem\nprint(\"Decompressed matches lorem:\", decompressed_matches)\nunused_matches = decompressor.unused_data == lorem\nprint(\"Unused data matches lorem :\", unused_matches)",
        "detail": "mid-range.bz2_mixed",
        "documentation": {}
    },
    {
        "label": "decompressed",
        "kind": 5,
        "importPath": "mid-range.bz2_mixed",
        "description": "mid-range.bz2_mixed",
        "peekOfCode": "decompressed = decompressor.decompress(combined)\ndecompressed_matches = decompressed == lorem\nprint(\"Decompressed matches lorem:\", decompressed_matches)\nunused_matches = decompressor.unused_data == lorem\nprint(\"Unused data matches lorem :\", unused_matches)",
        "detail": "mid-range.bz2_mixed",
        "documentation": {}
    },
    {
        "label": "decompressed_matches",
        "kind": 5,
        "importPath": "mid-range.bz2_mixed",
        "description": "mid-range.bz2_mixed",
        "peekOfCode": "decompressed_matches = decompressed == lorem\nprint(\"Decompressed matches lorem:\", decompressed_matches)\nunused_matches = decompressor.unused_data == lorem\nprint(\"Unused data matches lorem :\", unused_matches)",
        "detail": "mid-range.bz2_mixed",
        "documentation": {}
    },
    {
        "label": "unused_matches",
        "kind": 5,
        "importPath": "mid-range.bz2_mixed",
        "description": "mid-range.bz2_mixed",
        "peekOfCode": "unused_matches = decompressor.unused_data == lorem\nprint(\"Unused data matches lorem :\", unused_matches)",
        "detail": "mid-range.bz2_mixed",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.bz2_unicode",
        "description": "mid-range.bz2_unicode",
        "peekOfCode": "data = \"Character with an åccent.\"\nwith bz2.open(\"example.bz2\", \"wt\", encoding=\"utf-8\") as output:\n    output.write(data)\nwith bz2.open(\"example.bz2\", \"rt\", encoding=\"utf-8\") as input:\n    print(\"Full file: {}\".format(input.read()))\n# Move to the beginning of the accented character.\nwith bz2.open(\"example.bz2\", \"rt\", encoding=\"utf-8\") as input:\n    input.seek(18)\n    print(\"One character: {}\".format(input.read(1)))\n# Move to the middle of the accented character.",
        "detail": "mid-range.bz2_unicode",
        "documentation": {}
    },
    {
        "label": "BaseCache",
        "kind": 6,
        "importPath": "mid-range.cache",
        "description": "mid-range.cache",
        "peekOfCode": "class BaseCache(object):\n    def get(self, key):\n        raise NotImplementedError()\n    def set(self, key, value):\n        raise NotImplementedError()\n    def delete(self, key):\n        raise NotImplementedError()\n    def close(self):\n        pass\nclass DictCache(BaseCache):",
        "detail": "mid-range.cache",
        "documentation": {}
    },
    {
        "label": "DictCache",
        "kind": 6,
        "importPath": "mid-range.cache",
        "description": "mid-range.cache",
        "peekOfCode": "class DictCache(BaseCache):\n    def __init__(self, init_dict=None):\n        self.lock = Lock()\n        self.data = init_dict or {}\n    def get(self, key):\n        return self.data.get(key, None)\n    def set(self, key, value):\n        with self.lock:\n            self.data.update({key: value})\n    def delete(self, key):",
        "detail": "mid-range.cache",
        "documentation": {}
    },
    {
        "label": "percentToOrig",
        "kind": 2,
        "importPath": "mid-range.Calc",
        "description": "mid-range.Calc",
        "peekOfCode": "def percentToOrig():\n    whatPercent = float(input(\"What Percent : \"))\n    ofWhat = float(input(\"Of What Percent : \"))\n    orignal = whatPercent / 100 * ofWhat\n    print(orignal)\nprint(percentToOrig())",
        "detail": "mid-range.Calc",
        "documentation": {}
    },
    {
        "label": "calculate_area_of_polygon",
        "kind": 2,
        "importPath": "mid-range.calculate_area_of_polygon",
        "description": "mid-range.calculate_area_of_polygon",
        "peekOfCode": "def calculate_area_of_polygon(polygon):\n    n = len(polygon)\n    prev = polygon[-1]\n    area = 0\n    for curr in polygon:\n        area += (prev[0] + curr[0]) * (prev[1] - curr[1])\n        prev = curr\n    return abs(area / 2)  # return absolute value\n###########\n# Testing #",
        "detail": "mid-range.calculate_area_of_polygon",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 2,
        "importPath": "mid-range.Calculate_resistance",
        "description": "mid-range.Calculate_resistance",
        "peekOfCode": "def res(R1, R2):\n    sum = R1 + R2\n    if option == \"series\":\n        return sum\n    else:\n        return (R1 * R2) / (R1 + R2)\nResistance1 = int(input(\"Enter R1 : \"))\nResistance2 = int(input(\"Enter R2 : \"))\noption = str(input(\"Enter series or parallel :\"))\nprint(\"\\n\")",
        "detail": "mid-range.Calculate_resistance",
        "documentation": {}
    },
    {
        "label": "Resistance1",
        "kind": 5,
        "importPath": "mid-range.Calculate_resistance",
        "description": "mid-range.Calculate_resistance",
        "peekOfCode": "Resistance1 = int(input(\"Enter R1 : \"))\nResistance2 = int(input(\"Enter R2 : \"))\noption = str(input(\"Enter series or parallel :\"))\nprint(\"\\n\")\nR = res(Resistance1, Resistance2)\nprint(\"The total resistance is\", R)",
        "detail": "mid-range.Calculate_resistance",
        "documentation": {}
    },
    {
        "label": "Resistance2",
        "kind": 5,
        "importPath": "mid-range.Calculate_resistance",
        "description": "mid-range.Calculate_resistance",
        "peekOfCode": "Resistance2 = int(input(\"Enter R2 : \"))\noption = str(input(\"Enter series or parallel :\"))\nprint(\"\\n\")\nR = res(Resistance1, Resistance2)\nprint(\"The total resistance is\", R)",
        "detail": "mid-range.Calculate_resistance",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": "mid-range.Calculate_resistance",
        "description": "mid-range.Calculate_resistance",
        "peekOfCode": "option = str(input(\"Enter series or parallel :\"))\nprint(\"\\n\")\nR = res(Resistance1, Resistance2)\nprint(\"The total resistance is\", R)",
        "detail": "mid-range.Calculate_resistance",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "mid-range.Calculate_resistance",
        "description": "mid-range.Calculate_resistance",
        "peekOfCode": "R = res(Resistance1, Resistance2)\nprint(\"The total resistance is\", R)",
        "detail": "mid-range.Calculate_resistance",
        "documentation": {}
    },
    {
        "label": "formation_num",
        "kind": 5,
        "importPath": "mid-range.calculator",
        "description": "mid-range.calculator",
        "peekOfCode": "formation_num = 32  # defining no of signs, we are using it on on multiple places\nprint(\"*\" * formation_num)  # for formation\ntitle = \"   A simple python calculator\"\nprint(title)\nprint(\"-\" * formation_num)  # for formation\nnum1 = float(input(\"   Type first number: \"))\nnum2 = float(input(\"   Type second number: \"))\noperator = input(\"   Type operator: \")\naddition = num1 + num2\nsubtraction = num1 - num2",
        "detail": "mid-range.calculator",
        "documentation": {}
    },
    {
        "label": "title",
        "kind": 5,
        "importPath": "mid-range.calculator",
        "description": "mid-range.calculator",
        "peekOfCode": "title = \"   A simple python calculator\"\nprint(title)\nprint(\"-\" * formation_num)  # for formation\nnum1 = float(input(\"   Type first number: \"))\nnum2 = float(input(\"   Type second number: \"))\noperator = input(\"   Type operator: \")\naddition = num1 + num2\nsubtraction = num1 - num2\nmultiplication = num1 * num2\ndivision = num1 / num2",
        "detail": "mid-range.calculator",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "mid-range.calculator",
        "description": "mid-range.calculator",
        "peekOfCode": "num1 = float(input(\"   Type first number: \"))\nnum2 = float(input(\"   Type second number: \"))\noperator = input(\"   Type operator: \")\naddition = num1 + num2\nsubtraction = num1 - num2\nmultiplication = num1 * num2\ndivision = num1 / num2\nif operator == \"+\":\n    print(f\"   Result: {num1} + {num2} = {addition}\")\nelif operator == \"-\":",
        "detail": "mid-range.calculator",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "mid-range.calculator",
        "description": "mid-range.calculator",
        "peekOfCode": "num2 = float(input(\"   Type second number: \"))\noperator = input(\"   Type operator: \")\naddition = num1 + num2\nsubtraction = num1 - num2\nmultiplication = num1 * num2\ndivision = num1 / num2\nif operator == \"+\":\n    print(f\"   Result: {num1} + {num2} = {addition}\")\nelif operator == \"-\":\n    print(f\"   Result: {num1} - {num2} = {subtraction}\")",
        "detail": "mid-range.calculator",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 5,
        "importPath": "mid-range.calculator",
        "description": "mid-range.calculator",
        "peekOfCode": "operator = input(\"   Type operator: \")\naddition = num1 + num2\nsubtraction = num1 - num2\nmultiplication = num1 * num2\ndivision = num1 / num2\nif operator == \"+\":\n    print(f\"   Result: {num1} + {num2} = {addition}\")\nelif operator == \"-\":\n    print(f\"   Result: {num1} - {num2} = {subtraction}\")\nelif operator == \"*\":",
        "detail": "mid-range.calculator",
        "documentation": {}
    },
    {
        "label": "addition",
        "kind": 5,
        "importPath": "mid-range.calculator",
        "description": "mid-range.calculator",
        "peekOfCode": "addition = num1 + num2\nsubtraction = num1 - num2\nmultiplication = num1 * num2\ndivision = num1 / num2\nif operator == \"+\":\n    print(f\"   Result: {num1} + {num2} = {addition}\")\nelif operator == \"-\":\n    print(f\"   Result: {num1} - {num2} = {subtraction}\")\nelif operator == \"*\":\n    print(f\"   Result: {num1} * {num2} = {multiplication}\")",
        "detail": "mid-range.calculator",
        "documentation": {}
    },
    {
        "label": "subtraction",
        "kind": 5,
        "importPath": "mid-range.calculator",
        "description": "mid-range.calculator",
        "peekOfCode": "subtraction = num1 - num2\nmultiplication = num1 * num2\ndivision = num1 / num2\nif operator == \"+\":\n    print(f\"   Result: {num1} + {num2} = {addition}\")\nelif operator == \"-\":\n    print(f\"   Result: {num1} - {num2} = {subtraction}\")\nelif operator == \"*\":\n    print(f\"   Result: {num1} * {num2} = {multiplication}\")\nelif operator == \"/\":",
        "detail": "mid-range.calculator",
        "documentation": {}
    },
    {
        "label": "multiplication",
        "kind": 5,
        "importPath": "mid-range.calculator",
        "description": "mid-range.calculator",
        "peekOfCode": "multiplication = num1 * num2\ndivision = num1 / num2\nif operator == \"+\":\n    print(f\"   Result: {num1} + {num2} = {addition}\")\nelif operator == \"-\":\n    print(f\"   Result: {num1} - {num2} = {subtraction}\")\nelif operator == \"*\":\n    print(f\"   Result: {num1} * {num2} = {multiplication}\")\nelif operator == \"/\":\n    print(f\"   Result: {num1} / {num2} = {division}\")",
        "detail": "mid-range.calculator",
        "documentation": {}
    },
    {
        "label": "division",
        "kind": 5,
        "importPath": "mid-range.calculator",
        "description": "mid-range.calculator",
        "peekOfCode": "division = num1 / num2\nif operator == \"+\":\n    print(f\"   Result: {num1} + {num2} = {addition}\")\nelif operator == \"-\":\n    print(f\"   Result: {num1} - {num2} = {subtraction}\")\nelif operator == \"*\":\n    print(f\"   Result: {num1} * {num2} = {multiplication}\")\nelif operator == \"/\":\n    print(f\"   Result: {num1} / {num2} = {division}\")\nelse:",
        "detail": "mid-range.calculator",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "mid-range.calculatorproject",
        "description": "mid-range.calculatorproject",
        "peekOfCode": "def add(x, y):\n    return x + y\ndef subtract(x, y):\n    return x - y\ndef multiply(x, y):\n    return x * y\ndef divide(x, y):\n    return x / y\nprint(\"Select operation.\")\nprint(\"1.Add\")",
        "detail": "mid-range.calculatorproject",
        "documentation": {}
    },
    {
        "label": "subtract",
        "kind": 2,
        "importPath": "mid-range.calculatorproject",
        "description": "mid-range.calculatorproject",
        "peekOfCode": "def subtract(x, y):\n    return x - y\ndef multiply(x, y):\n    return x * y\ndef divide(x, y):\n    return x / y\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")",
        "detail": "mid-range.calculatorproject",
        "documentation": {}
    },
    {
        "label": "multiply",
        "kind": 2,
        "importPath": "mid-range.calculatorproject",
        "description": "mid-range.calculatorproject",
        "peekOfCode": "def multiply(x, y):\n    return x * y\ndef divide(x, y):\n    return x / y\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\nwhile True:",
        "detail": "mid-range.calculatorproject",
        "documentation": {}
    },
    {
        "label": "divide",
        "kind": 2,
        "importPath": "mid-range.calculatorproject",
        "description": "mid-range.calculatorproject",
        "peekOfCode": "def divide(x, y):\n    return x / y\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\nwhile True:\n    # Take input from the user\n    choice = input(\"Enter choice(1/2/3/4): \")",
        "detail": "mid-range.calculatorproject",
        "documentation": {}
    },
    {
        "label": "shape",
        "kind": 5,
        "importPath": "mid-range.calc_area",
        "description": "mid-range.calc_area",
        "peekOfCode": "shape = int(\n    input(\"Enter 1 for square, 2 for rectangle, 3 for circle, or 4 for triangle: \")\n)\nif shape == 1:\n    side = float(input(\"Enter length of side: \"))\n    print(\"Area of square = \" + str(side ** 2))\nelif shape == 2:\n    l = float(input(\"Enter length: \"))\n    b = float(input(\"Enter breadth: \"))\n    print(\"Area of rectangle = \" + str(l * b))",
        "detail": "mid-range.calc_area",
        "documentation": {}
    },
    {
        "label": "viewCalender",
        "kind": 5,
        "importPath": "mid-range.calendar",
        "description": "mid-range.calendar",
        "peekOfCode": "viewCalender = lambda yy, mm: print(\"\\n\\n Calendar > \\n %s\\n\" % calendar.month(yy, mm))\n# UI\nwhile True:\n    if str(input(\"[+] Start [Y/n] ?  \")).strip().lower() == \"y\":\n        try:\n            viewCalender(int(input(\"\\nYear: \")), int(input(\"Month: \")))\n        except IndexError:\n            print(\"  -> Try Again! With valid numbers!\\n\")\n    else:\n        print(\"\\nSee Ya Soon!\")",
        "detail": "mid-range.calendar",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 2,
        "importPath": "mid-range.Calendar_(GUI)",
        "description": "mid-range.Calendar_(GUI)",
        "peekOfCode": "def text():\n    month_int = int(month.get())\n    year_int = int(year.get())\n    cal = calendar.month(year_int, month_int)\n    textfield.delete(0.0, END)\n    textfield.insert(INSERT, cal)\n# Creating Labels\nlabel1 = Label(root, text=\"Month:\")\nlabel1.grid(row=0, column=0)\nlabel2 = Label(root, text=\"Year:\")",
        "detail": "mid-range.Calendar_(GUI)",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "mid-range.Calendar_(GUI)",
        "description": "mid-range.Calendar_(GUI)",
        "peekOfCode": "root = Tk()\n# root.geometry(\"400x300\")\nroot.title(\"Calendar\")\n# Function\ndef text():\n    month_int = int(month.get())\n    year_int = int(year.get())\n    cal = calendar.month(year_int, month_int)\n    textfield.delete(0.0, END)\n    textfield.insert(INSERT, cal)",
        "detail": "mid-range.Calendar_(GUI)",
        "documentation": {}
    },
    {
        "label": "label1",
        "kind": 5,
        "importPath": "mid-range.Calendar_(GUI)",
        "description": "mid-range.Calendar_(GUI)",
        "peekOfCode": "label1 = Label(root, text=\"Month:\")\nlabel1.grid(row=0, column=0)\nlabel2 = Label(root, text=\"Year:\")\nlabel2.grid(row=0, column=1)\n# Creating spinbox\nmonth = Spinbox(root, from_=1, to=12, width=8)\nmonth.grid(row=1, column=0, padx=5)\nyear = Spinbox(root, from_=2000, to=2100, width=10)\nyear.grid(row=1, column=1, padx=10)\n# Creating Button",
        "detail": "mid-range.Calendar_(GUI)",
        "documentation": {}
    },
    {
        "label": "label2",
        "kind": 5,
        "importPath": "mid-range.Calendar_(GUI)",
        "description": "mid-range.Calendar_(GUI)",
        "peekOfCode": "label2 = Label(root, text=\"Year:\")\nlabel2.grid(row=0, column=1)\n# Creating spinbox\nmonth = Spinbox(root, from_=1, to=12, width=8)\nmonth.grid(row=1, column=0, padx=5)\nyear = Spinbox(root, from_=2000, to=2100, width=10)\nyear.grid(row=1, column=1, padx=10)\n# Creating Button\nbutton = Button(root, text=\"Go\", command=text)\nbutton.grid(row=1, column=2, padx=10)",
        "detail": "mid-range.Calendar_(GUI)",
        "documentation": {}
    },
    {
        "label": "month",
        "kind": 5,
        "importPath": "mid-range.Calendar_(GUI)",
        "description": "mid-range.Calendar_(GUI)",
        "peekOfCode": "month = Spinbox(root, from_=1, to=12, width=8)\nmonth.grid(row=1, column=0, padx=5)\nyear = Spinbox(root, from_=2000, to=2100, width=10)\nyear.grid(row=1, column=1, padx=10)\n# Creating Button\nbutton = Button(root, text=\"Go\", command=text)\nbutton.grid(row=1, column=2, padx=10)\n# Creating Textfield\ntextfield = Text(root, width=25, height=10, fg=\"red\")\ntextfield.grid(row=2, columnspan=2)",
        "detail": "mid-range.Calendar_(GUI)",
        "documentation": {}
    },
    {
        "label": "year",
        "kind": 5,
        "importPath": "mid-range.Calendar_(GUI)",
        "description": "mid-range.Calendar_(GUI)",
        "peekOfCode": "year = Spinbox(root, from_=2000, to=2100, width=10)\nyear.grid(row=1, column=1, padx=10)\n# Creating Button\nbutton = Button(root, text=\"Go\", command=text)\nbutton.grid(row=1, column=2, padx=10)\n# Creating Textfield\ntextfield = Text(root, width=25, height=10, fg=\"red\")\ntextfield.grid(row=2, columnspan=2)\nroot.mainloop()",
        "detail": "mid-range.Calendar_(GUI)",
        "documentation": {}
    },
    {
        "label": "button",
        "kind": 5,
        "importPath": "mid-range.Calendar_(GUI)",
        "description": "mid-range.Calendar_(GUI)",
        "peekOfCode": "button = Button(root, text=\"Go\", command=text)\nbutton.grid(row=1, column=2, padx=10)\n# Creating Textfield\ntextfield = Text(root, width=25, height=10, fg=\"red\")\ntextfield.grid(row=2, columnspan=2)\nroot.mainloop()",
        "detail": "mid-range.Calendar_(GUI)",
        "documentation": {}
    },
    {
        "label": "textfield",
        "kind": 5,
        "importPath": "mid-range.Calendar_(GUI)",
        "description": "mid-range.Calendar_(GUI)",
        "peekOfCode": "textfield = Text(root, width=25, height=10, fg=\"red\")\ntextfield.grid(row=2, columnspan=2)\nroot.mainloop()",
        "detail": "mid-range.Calendar_(GUI)",
        "documentation": {}
    },
    {
        "label": "cal",
        "kind": 5,
        "importPath": "mid-range.calendar_formatyear",
        "description": "mid-range.calendar_formatyear",
        "peekOfCode": "cal = calendar.TextCalendar(calendar.SUNDAY)\nprint(cal.formatyear(2017, 2, 1, 1, 3))",
        "detail": "mid-range.calendar_formatyear",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.calendar_htmlcalendar",
        "description": "mid-range.calendar_htmlcalendar",
        "peekOfCode": "c = calendar.HTMLCalendar(calendar.SUNDAY)\nprint(c.formatmonth(2017, 7))",
        "detail": "mid-range.calendar_htmlcalendar",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.calendar_locale",
        "description": "mid-range.calendar_locale",
        "peekOfCode": "c = calendar.LocaleTextCalendar(locale=\"en_US\")\nc.prmonth(2017, 7)\nprint()\nc = calendar.LocaleTextCalendar(locale=\"fr_FR\")\nc.prmonth(2017, 7)",
        "detail": "mid-range.calendar_locale",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.calendar_locale",
        "description": "mid-range.calendar_locale",
        "peekOfCode": "c = calendar.LocaleTextCalendar(locale=\"fr_FR\")\nc.prmonth(2017, 7)",
        "detail": "mid-range.calendar_locale",
        "documentation": {}
    },
    {
        "label": "year",
        "kind": 5,
        "importPath": "mid-range.calendar_secondthursday",
        "description": "mid-range.calendar_secondthursday",
        "peekOfCode": "year = int(sys.argv[1])\n# Show every month\nfor month in range(1, 13):\n    # Compute the dates for each week that overlaps the month\n    c = calendar.monthcalendar(year, month)\n    first_week = c[0]\n    second_week = c[1]\n    third_week = c[2]\n    # If there is a Thursday in the first week,\n    # the second Thursday is # in the second week.",
        "detail": "mid-range.calendar_secondthursday",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.calendar_textcalendar",
        "description": "mid-range.calendar_textcalendar",
        "peekOfCode": "c = calendar.TextCalendar(calendar.SUNDAY)\nc.prmonth(2017, 7)",
        "detail": "mid-range.calendar_textcalendar",
        "documentation": {}
    },
    {
        "label": "cal",
        "kind": 5,
        "importPath": "mid-range.calendar_yeardays2calendar",
        "description": "mid-range.calendar_yeardays2calendar",
        "peekOfCode": "cal = calendar.Calendar(calendar.SUNDAY)\ncal_data = cal.yeardays2calendar(2017, 3)\nprint(\"len(cal_data)      :\", len(cal_data))\ntop_months = cal_data[0]\nprint(\"len(top_months)    :\", len(top_months))\nfirst_month = top_months[0]\nprint(\"len(first_month)   :\", len(first_month))\nprint(\"first_month:\")\npprint.pprint(first_month, width=65)",
        "detail": "mid-range.calendar_yeardays2calendar",
        "documentation": {}
    },
    {
        "label": "cal_data",
        "kind": 5,
        "importPath": "mid-range.calendar_yeardays2calendar",
        "description": "mid-range.calendar_yeardays2calendar",
        "peekOfCode": "cal_data = cal.yeardays2calendar(2017, 3)\nprint(\"len(cal_data)      :\", len(cal_data))\ntop_months = cal_data[0]\nprint(\"len(top_months)    :\", len(top_months))\nfirst_month = top_months[0]\nprint(\"len(first_month)   :\", len(first_month))\nprint(\"first_month:\")\npprint.pprint(first_month, width=65)",
        "detail": "mid-range.calendar_yeardays2calendar",
        "documentation": {}
    },
    {
        "label": "top_months",
        "kind": 5,
        "importPath": "mid-range.calendar_yeardays2calendar",
        "description": "mid-range.calendar_yeardays2calendar",
        "peekOfCode": "top_months = cal_data[0]\nprint(\"len(top_months)    :\", len(top_months))\nfirst_month = top_months[0]\nprint(\"len(first_month)   :\", len(first_month))\nprint(\"first_month:\")\npprint.pprint(first_month, width=65)",
        "detail": "mid-range.calendar_yeardays2calendar",
        "documentation": {}
    },
    {
        "label": "first_month",
        "kind": 5,
        "importPath": "mid-range.calendar_yeardays2calendar",
        "description": "mid-range.calendar_yeardays2calendar",
        "peekOfCode": "first_month = top_months[0]\nprint(\"len(first_month)   :\", len(first_month))\nprint(\"first_month:\")\npprint.pprint(first_month, width=65)",
        "detail": "mid-range.calendar_yeardays2calendar",
        "documentation": {}
    },
    {
        "label": "nofollow",
        "kind": 2,
        "importPath": "mid-range.callbacks",
        "description": "mid-range.callbacks",
        "peekOfCode": "def nofollow(attrs, new=False):\n    href_key = (None, \"href\")\n    if href_key not in attrs:\n        return attrs\n    if attrs[href_key].startswith(\"mailto:\"):\n        return attrs\n    rel_key = (None, \"rel\")\n    rel_values = [val for val in attrs.get(rel_key, \"\").split(\" \") if val]\n    if \"nofollow\" not in [rel_val.lower() for rel_val in rel_values]:\n        rel_values.append(\"nofollow\")",
        "detail": "mid-range.callbacks",
        "documentation": {}
    },
    {
        "label": "target_blank",
        "kind": 2,
        "importPath": "mid-range.callbacks",
        "description": "mid-range.callbacks",
        "peekOfCode": "def target_blank(attrs, new=False):\n    href_key = (None, \"href\")\n    if href_key not in attrs:\n        return attrs\n    if attrs[href_key].startswith(\"mailto:\"):\n        return attrs\n    attrs[(None, \"target\")] = \"_blank\"\n    return attrs",
        "detail": "mid-range.callbacks",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.call_func",
        "description": "mid-range.call_func",
        "peekOfCode": "x = abs(100)\ny = abs(-20)\nprint(x, y)\nprint(\"max(1, 2, 3) =\", max(1, 2, 3))\nprint(\"min(1, 2, 3) =\", min(1, 2, 3))\nprint(\"sum([1, 2, 3]) =\", sum([1, 2, 3]))",
        "detail": "mid-range.call_func",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "mid-range.call_func",
        "description": "mid-range.call_func",
        "peekOfCode": "y = abs(-20)\nprint(x, y)\nprint(\"max(1, 2, 3) =\", max(1, 2, 3))\nprint(\"min(1, 2, 3) =\", min(1, 2, 3))\nprint(\"sum([1, 2, 3]) =\", sum([1, 2, 3]))",
        "detail": "mid-range.call_func",
        "documentation": {}
    },
    {
        "label": "InstallationCandidate",
        "kind": 6,
        "importPath": "mid-range.candidate",
        "description": "mid-range.candidate",
        "peekOfCode": "class InstallationCandidate(KeyBasedCompareMixin):\n    \"\"\"Represents a potential \"candidate\" for installation.\n    \"\"\"\n    __slots__ = [\"name\", \"version\", \"link\"]\n    def __init__(self, name: str, version: str, link: Link) -> None:\n        self.name = name\n        self.version = parse_version(version)\n        self.link = link\n        super().__init__(\n            key=(self.name, self.version, self.link),",
        "detail": "mid-range.candidate",
        "documentation": {}
    },
    {
        "label": "capitalize",
        "kind": 2,
        "importPath": "mid-range.capitalize",
        "description": "mid-range.capitalize",
        "peekOfCode": "def capitalize(sentence: str) -> str:\n    \"\"\"\n    This function will capitalize the first letter of a sentence or a word\n    >>> capitalize(\"hello world\")\n    'Hello world'\n    >>> capitalize(\"123 hello world\")\n    '123 hello world'\n    >>> capitalize(\" hello world\")\n    ' hello world'\n    >>> capitalize(\"a\")",
        "detail": "mid-range.capitalize",
        "documentation": {}
    },
    {
        "label": "solve",
        "kind": 2,
        "importPath": "mid-range.capitalizing",
        "description": "mid-range.capitalizing",
        "peekOfCode": "def solve(s):\n    # splitting the string into words\n    for x in s[:].split():\n        # replacing the character with it's capital form\n        s = s.replace(x, x.capitalize())\n    print(\"Updated string:\", s)\n# getting the input\ns = input(\"Enter string: \")\n# calling function to compute the result\nsolve(s)",
        "detail": "mid-range.capitalizing",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.capitalizing",
        "description": "mid-range.capitalizing",
        "peekOfCode": "s = input(\"Enter string: \")\n# calling function to compute the result\nsolve(s)\n\"\"\"\nCOMPLEXITY:\n\t Time Complexity -> O(N)\n\t Space Complexity -> O(N)\nSample Input:\nEnter string: summer of code\nSample Output:",
        "detail": "mid-range.capitalizing",
        "documentation": {}
    },
    {
        "label": "get_file_content",
        "kind": 2,
        "importPath": "mid-range.car-assemble",
        "description": "mid-range.car-assemble",
        "peekOfCode": "def get_file_content(include_tag):\n    file_name = include_tag.split(\" \")[1].replace('\"', \"\")\n    return open(file_name).read()\ndef main():\n    \"\"\"\n    Lets dont worry about the program\n    Its basically replacing <include file.svg> with its file content\n    in the same file and produces final_car.svg as output\n    This is purely to show, how we can work with multiple files in out git repository.\n    \"\"\"",
        "detail": "mid-range.car-assemble",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.car-assemble",
        "description": "mid-range.car-assemble",
        "peekOfCode": "def main():\n    \"\"\"\n    Lets dont worry about the program\n    Its basically replacing <include file.svg> with its file content\n    in the same file and produces final_car.svg as output\n    This is purely to show, how we can work with multiple files in out git repository.\n    \"\"\"\n    with open(\"car_assemble.svg\") as file:  # reading source file car_assemble.svg\n        file_content = file.read()\n        regex = r\"<include .*svg\\\" />\"  # finding pattern <include file.svg>",
        "detail": "mid-range.car-assemble",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "mid-range.carspeed",
        "description": "mid-range.carspeed",
        "peekOfCode": "class Car:\n    def __init__(self, speed=0):\n        self.speed = speed\n    # methods\n    # add 5 to speed every call\n    def accelerate(self):\n        self.speed = self.speed + 5\n    # subtract 5 from speed every call\n    def brake(self):\n        self.speed = self.speed - 5",
        "detail": "mid-range.carspeed",
        "documentation": {}
    },
    {
        "label": "car",
        "kind": 5,
        "importPath": "mid-range.carspeed",
        "description": "mid-range.carspeed",
        "peekOfCode": "car = Car()\n# call the speed 5 times\nfor i in range(5):\n    car.accelerate()\nprint(\"Current speed after five accelerations:\", car.get_speed())\n# call the break 5 times\nfor i in range(5):\n    car.brake()\nprint(\"Current speed after five breaks:\", car.get_speed())",
        "detail": "mid-range.carspeed",
        "documentation": {}
    },
    {
        "label": "determine_quadrant",
        "kind": 2,
        "importPath": "mid-range.cartesian_plane_quadrant",
        "description": "mid-range.cartesian_plane_quadrant",
        "peekOfCode": "def determine_quadrant(x, y):\n    try:\n        if x > 0 and y > 0:\n            return \"I(+,+)\"\n        elif x < 0 and y > 0:\n            return \"II(-,+)\"\n        elif x < 0 and y < 0:\n            return \"III(-,-)\"\n        elif x > 0 and y < 0:\n            return \"IV(+,-)\"",
        "detail": "mid-range.cartesian_plane_quadrant",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "mid-range.cartesian_plane_quadrant",
        "description": "mid-range.cartesian_plane_quadrant",
        "peekOfCode": "result = determine_quadrant(\n    float(input(\"X co-ordinate: \")), float(input(\"Y co-ordinate: \"))\n)\nprint(\"Quadrant is \" + result)",
        "detail": "mid-range.cartesian_plane_quadrant",
        "documentation": {}
    },
    {
        "label": "solve",
        "kind": 2,
        "importPath": "mid-range.Carvans",
        "description": "mid-range.Carvans",
        "peekOfCode": "def solve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        A = list(map(int, input().split()))\n        count = 0\n        small = float(\"inf\")\n        for each in A:\n            if each < small:\n                small = each",
        "detail": "mid-range.Carvans",
        "documentation": {}
    },
    {
        "label": "caseUnification",
        "kind": 2,
        "importPath": "mid-range.caseUnification",
        "description": "mid-range.caseUnification",
        "peekOfCode": "def caseUnification(s):\n    u = sum(1 for x in s if x.isupper())\n    if u > (len(s) / 2):\n        return s.upper()\n    else:\n        return s.lower()",
        "detail": "mid-range.caseUnification",
        "documentation": {}
    },
    {
        "label": "ceil",
        "kind": 2,
        "importPath": "mid-range.ceil",
        "description": "mid-range.ceil",
        "peekOfCode": "def ceil(x) -> int:\n    \"\"\"\n    Return the ceiling of x as an Integral.\n    :param x: the number\n    :return: the smallest integer >= x.\n    >>> import math\n    >>> all(ceil(n) == math.ceil(n) for n\n    ...     in (1, -1, 0, -0, 1.1, -1.1, 1.0, -1.0, 1_000_000_000))\n    True\n    \"\"\"",
        "detail": "mid-range.ceil",
        "documentation": {}
    },
    {
        "label": "orangesRotting",
        "kind": 2,
        "importPath": "mid-range.celeb",
        "description": "mid-range.celeb",
        "peekOfCode": "def orangesRotting(elemnts):\n    if not elemnts or len(elemnts) == 0:\n        return 0\n    n = len(elemnts)\n    m = len(elemnts[0])\n    rotten = []\n    for i in range(n):\n        for j in range(m):\n            if elemnts[i][j] == 2:\n                rotten.append((i, j))",
        "detail": "mid-range.celeb",
        "documentation": {}
    },
    {
        "label": "celebrity",
        "kind": 2,
        "importPath": "mid-range.celebrity",
        "description": "mid-range.celebrity",
        "peekOfCode": "def celebrity(knows: Callable[[int, int], bool], n: int) -> Optional[int]:\n    candidate = 0\n    for node in range(1, n):\n        if knows(candidate, node):\n            candidate = node\n    if any(knows(candidate, node) for node in range(candidate)):\n        return None\n    if any(not knows(node, candidate) for node in range(n)):\n        return None\n    return candidate",
        "detail": "mid-range.celebrity",
        "documentation": {}
    },
    {
        "label": "celebrity",
        "kind": 2,
        "importPath": "mid-range.celebrity_(1)",
        "description": "mid-range.celebrity_(1)",
        "peekOfCode": "def celebrity(knows: Callable[[int, int], bool], n: int) -> Optional[int]:\n    candidate = 0\n    for node in range(1, n):\n        if knows(candidate, node):\n            candidate = node\n    if any(knows(candidate, node) for node in range(candidate)):\n        return None\n    if any(not knows(node, candidate) for node in range(n)):\n        return None\n    return candidate",
        "detail": "mid-range.celebrity_(1)",
        "documentation": {}
    },
    {
        "label": "__origin__",
        "kind": 5,
        "importPath": "mid-range.cElementTree",
        "description": "mid-range.cElementTree",
        "peekOfCode": "__origin__ = \"xml.etree.cElementTree\"\nwarnings.warn(\n    \"defusedxml.cElementTree is deprecated, import from defusedxml.ElementTree instead.\",\n    category=DeprecationWarning,\n    stacklevel=2,\n)\n# XMLParse is a typo, keep it for backwards compatibility\nXMLTreeBuilder = XMLParse = XMLParser = DefusedXMLParser\nparse, iterparse, fromstring = _generate_etree_functions(\n    DefusedXMLParser, _TreeBuilder, _parse, _iterparse",
        "detail": "mid-range.cElementTree",
        "documentation": {}
    },
    {
        "label": "XMLTreeBuilder",
        "kind": 5,
        "importPath": "mid-range.cElementTree",
        "description": "mid-range.cElementTree",
        "peekOfCode": "XMLTreeBuilder = XMLParse = XMLParser = DefusedXMLParser\nparse, iterparse, fromstring = _generate_etree_functions(\n    DefusedXMLParser, _TreeBuilder, _parse, _iterparse\n)\nXML = fromstring\n__all__ = [\n    \"ParseError\",\n    \"XML\",\n    \"XMLParse\",\n    \"XMLParser\",",
        "detail": "mid-range.cElementTree",
        "documentation": {}
    },
    {
        "label": "XML",
        "kind": 5,
        "importPath": "mid-range.cElementTree",
        "description": "mid-range.cElementTree",
        "peekOfCode": "XML = fromstring\n__all__ = [\n    \"ParseError\",\n    \"XML\",\n    \"XMLParse\",\n    \"XMLParser\",\n    \"XMLTreeBuilder\",\n    \"fromstring\",\n    \"iterparse\",\n    \"parse\",",
        "detail": "mid-range.cElementTree",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.cElementTree",
        "description": "mid-range.cElementTree",
        "peekOfCode": "__all__ = [\n    \"ParseError\",\n    \"XML\",\n    \"XMLParse\",\n    \"XMLParser\",\n    \"XMLTreeBuilder\",\n    \"fromstring\",\n    \"iterparse\",\n    \"parse\",\n    \"tostring\",",
        "detail": "mid-range.cElementTree",
        "documentation": {}
    },
    {
        "label": "centuryFromYear",
        "kind": 2,
        "importPath": "mid-range.century_from_year",
        "description": "mid-range.century_from_year",
        "peekOfCode": "def centuryFromYear(year):\n    if year % 100 == 0:\n        return year // 100\n    else:\n        return (year // 100) + 1",
        "detail": "mid-range.century_from_year",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "mid-range.cgitb_basic_traceback",
        "description": "mid-range.cgitb_basic_traceback",
        "peekOfCode": "def func2(a, divisor):\n    return a / divisor\ndef func1(a, b):\n    c = b - 5\n    return func2(a, c)\nfunc1(1, 5)",
        "detail": "mid-range.cgitb_basic_traceback",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "mid-range.cgitb_basic_traceback",
        "description": "mid-range.cgitb_basic_traceback",
        "peekOfCode": "def func1(a, b):\n    c = b - 5\n    return func2(a, c)\nfunc1(1, 5)",
        "detail": "mid-range.cgitb_basic_traceback",
        "documentation": {}
    },
    {
        "label": "MyException",
        "kind": 6,
        "importPath": "mid-range.cgitb_exception_properties",
        "description": "mid-range.cgitb_exception_properties",
        "peekOfCode": "class MyException(Exception):\n    \"\"\"Add extra properties to a special exception\n    \"\"\"\n    def __init__(self, message, bad_value):\n        self.bad_value = bad_value\n        Exception.__init__(self, message)\n        return\nraise MyException(\"Normal message\", bad_value=99)",
        "detail": "mid-range.cgitb_exception_properties",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "mid-range.cgitb_extended_traceback",
        "description": "mid-range.cgitb_extended_traceback",
        "peekOfCode": "def func1(arg1):\n    local_var = arg1 * 2\n    return func2(local_var)\ndef func2(arg2):\n    local_var = arg2 + 2\n    return func3(local_var)\ndef func3(arg3):\n    local_var = arg2 / 2  # noqa\n    return local_var\nfunc1(1)",
        "detail": "mid-range.cgitb_extended_traceback",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "mid-range.cgitb_extended_traceback",
        "description": "mid-range.cgitb_extended_traceback",
        "peekOfCode": "def func2(arg2):\n    local_var = arg2 + 2\n    return func3(local_var)\ndef func3(arg3):\n    local_var = arg2 / 2  # noqa\n    return local_var\nfunc1(1)",
        "detail": "mid-range.cgitb_extended_traceback",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "mid-range.cgitb_extended_traceback",
        "description": "mid-range.cgitb_extended_traceback",
        "peekOfCode": "def func3(arg3):\n    local_var = arg2 / 2  # noqa\n    return local_var\nfunc1(1)",
        "detail": "mid-range.cgitb_extended_traceback",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "mid-range.cgitb_html_output",
        "description": "mid-range.cgitb_html_output",
        "peekOfCode": "def func1(arg1):\n    local_var = arg1 * 2\n    return func2(local_var)\ndef func2(arg2):\n    local_var = arg2 + 2\n    return func3(local_var)\ndef func3(arg3):\n    local_var = arg2 / 2  # noqa\n    return local_var\nfunc1(1)",
        "detail": "mid-range.cgitb_html_output",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "mid-range.cgitb_html_output",
        "description": "mid-range.cgitb_html_output",
        "peekOfCode": "def func2(arg2):\n    local_var = arg2 + 2\n    return func3(local_var)\ndef func3(arg3):\n    local_var = arg2 / 2  # noqa\n    return local_var\nfunc1(1)",
        "detail": "mid-range.cgitb_html_output",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "mid-range.cgitb_html_output",
        "description": "mid-range.cgitb_html_output",
        "peekOfCode": "def func3(arg3):\n    local_var = arg2 / 2  # noqa\n    return local_var\nfunc1(1)",
        "detail": "mid-range.cgitb_html_output",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "mid-range.cgitb_local_vars",
        "description": "mid-range.cgitb_local_vars",
        "peekOfCode": "def func2(a, divisor):\n    return a / divisor\ndef func1(a, b):\n    c = b - 5\n    return func2(a, c)\nfunc1(1, 5)",
        "detail": "mid-range.cgitb_local_vars",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "mid-range.cgitb_local_vars",
        "description": "mid-range.cgitb_local_vars",
        "peekOfCode": "def func1(a, b):\n    c = b - 5\n    return func2(a, c)\nfunc1(1, 5)",
        "detail": "mid-range.cgitb_local_vars",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "mid-range.cgitb_log_exception",
        "description": "mid-range.cgitb_log_exception",
        "peekOfCode": "def func(a, divisor):\n    return a / divisor\nfunc(1, 0)",
        "detail": "mid-range.cgitb_log_exception",
        "documentation": {}
    },
    {
        "label": "LOGDIR",
        "kind": 5,
        "importPath": "mid-range.cgitb_log_exception",
        "description": "mid-range.cgitb_log_exception",
        "peekOfCode": "LOGDIR = os.path.join(os.path.dirname(__file__), \"LOGS\")\nif not os.path.exists(LOGDIR):\n    os.makedirs(LOGDIR)\ncgitb.enable(logdir=LOGDIR, display=False, format=\"text\")\ndef func(a, divisor):\n    return a / divisor\nfunc(1, 0)",
        "detail": "mid-range.cgitb_log_exception",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "mid-range.cgitb_more_context",
        "description": "mid-range.cgitb_more_context",
        "peekOfCode": "def func2(a, divisor):\n    return a / divisor\ndef func1(a, b):\n    c = b - 5\n    # Really\n    # long\n    # comment\n    # goes\n    # here.\n    return func2(a, c)",
        "detail": "mid-range.cgitb_more_context",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "mid-range.cgitb_more_context",
        "description": "mid-range.cgitb_more_context",
        "peekOfCode": "def func1(a, b):\n    c = b - 5\n    # Really\n    # long\n    # comment\n    # goes\n    # here.\n    return func2(a, c)\nfunc1(1, 5)",
        "detail": "mid-range.cgitb_more_context",
        "documentation": {}
    },
    {
        "label": "context_length",
        "kind": 5,
        "importPath": "mid-range.cgitb_more_context",
        "description": "mid-range.cgitb_more_context",
        "peekOfCode": "context_length = int(sys.argv[1])\ncgitb.enable(format=\"text\", context=context_length)\ndef func2(a, divisor):\n    return a / divisor\ndef func1(a, b):\n    c = b - 5\n    # Really\n    # long\n    # comment\n    # goes",
        "detail": "mid-range.cgitb_more_context",
        "documentation": {}
    },
    {
        "label": "BrokenClass",
        "kind": 6,
        "importPath": "mid-range.cgitb_with_classes",
        "description": "mid-range.cgitb_with_classes",
        "peekOfCode": "class BrokenClass:\n    \"\"\"This class has an error.\n    \"\"\"\n    def __init__(self, a, b):\n        \"\"\"Be careful passing arguments in here.\n        \"\"\"\n        self.a = a\n        self.b = b\n        self.c = self.a * self.b\n        # Really",
        "detail": "mid-range.cgitb_with_classes",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "mid-range.cgitb_with_classes",
        "description": "mid-range.cgitb_with_classes",
        "peekOfCode": "o = BrokenClass(1, 0)",
        "detail": "mid-range.cgitb_with_classes",
        "documentation": {}
    },
    {
        "label": "arrayChange",
        "kind": 2,
        "importPath": "mid-range.Change",
        "description": "mid-range.Change",
        "peekOfCode": "def arrayChange(inputArray):\n    first = inputArray[0]\n    count = 0\n    for i in inputArray[1:]:\n        if i <= first:\n            count += first - i + 1\n            first = first + 1\n        else:\n            first = i\n    return count",
        "detail": "mid-range.Change",
        "documentation": {}
    },
    {
        "label": "change_brightness",
        "kind": 2,
        "importPath": "mid-range.change_brightness",
        "description": "mid-range.change_brightness",
        "peekOfCode": "def change_brightness(img: Image, level: float) -> Image:\n    \"\"\"\n    Change the brightness of a PIL Image to a given level.\n    \"\"\"\n    def brightness(c: int) -> float:\n        \"\"\"\n        Fundamental Transformation/Operation that'll be performed on\n        every bit.\n        \"\"\"\n        return 128 + level + (c - 128)",
        "detail": "mid-range.change_brightness",
        "documentation": {}
    },
    {
        "label": "change_contrast",
        "kind": 2,
        "importPath": "mid-range.change_contrast",
        "description": "mid-range.change_contrast",
        "peekOfCode": "def change_contrast(img: Image, level: int) -> Image:\n    \"\"\"\n    Function to change contrast\n    \"\"\"\n    factor = (259 * (level + 255)) / (255 * (259 - level))\n    def contrast(c: int) -> int:\n        \"\"\"\n        Fundamental Transformation/Operation that'll be performed on\n        every bit.\n        \"\"\"",
        "detail": "mid-range.change_contrast",
        "documentation": {}
    },
    {
        "label": "ChannelABC",
        "kind": 6,
        "importPath": "mid-range.channelsabc",
        "description": "mid-range.channelsabc",
        "peekOfCode": "class ChannelABC(object, metaclass=abc.ABCMeta):\n    \"\"\"A base class for all channel ABCs.\"\"\"\n    @abc.abstractmethod\n    def start(self):\n        pass\n    @abc.abstractmethod\n    def stop(self):\n        pass\n    @abc.abstractmethod\n    def is_alive(self):",
        "detail": "mid-range.channelsabc",
        "documentation": {}
    },
    {
        "label": "HBChannelABC",
        "kind": 6,
        "importPath": "mid-range.channelsabc",
        "description": "mid-range.channelsabc",
        "peekOfCode": "class HBChannelABC(ChannelABC):\n    \"\"\"HBChannel ABC.\n    The docstrings for this class can be found in the base implementation:\n    `jupyter_client.channels.HBChannel`\n    \"\"\"\n    @abc.abstractproperty\n    def time_to_dead(self):\n        pass\n    @abc.abstractmethod\n    def pause(self):",
        "detail": "mid-range.channelsabc",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.chaos",
        "description": "mid-range.chaos",
        "peekOfCode": "def main():\n    print(\"This program illustrates a chaotic function\")\n    while True:\n        try:\n            x = float((input(\"Enter a number between 0 and 1: \")))\n            if 0 < x and x < 1:\n                break\n            else:\n                print(\"Please enter correct number\")\n        except Exception as e:",
        "detail": "mid-range.chaos",
        "documentation": {}
    },
    {
        "label": "commonCharacterCount",
        "kind": 2,
        "importPath": "mid-range.CharacterCount",
        "description": "mid-range.CharacterCount",
        "peekOfCode": "def commonCharacterCount(s1, s2):\n    # Step 1: We create two lists, namely s1_l and s2_l, where we store the characters of strings s1 and s2 respectively.\n    s1_l = list(s1)\n    s2_l = list(s2)\n    # Step 2: We also create an empty list, where we are going to store all common characters.\n    common = []\n    # Step 3: Using a for-loop, we investigate the list of the first string, element by element.\n    for i in s1_l:\n        # Step 4: If the i-th element from the list of the first string is also present in the list of the second string,\n        # we append it to the common array. BE CAREFUL: We must implement the s2_l.remove(i) to avoid double-counting.",
        "detail": "mid-range.CharacterCount",
        "documentation": {}
    },
    {
        "label": "greet",
        "kind": 2,
        "importPath": "mid-range.chattybot",
        "description": "mid-range.chattybot",
        "peekOfCode": "def greet(bot_name, birth_year):\n    print(\"Hello! My name is \" + bot_name + \".\")\n    print(\"I am your an interactive chat bot!\")\n    print(\"I was created in \" + birth_year + \".\")\ndef remind_name():\n    print(\"Please, remind me your name.\")\n    name = input()\n    print(\"What a great name you have, \" + name + \"!\")\ndef guess_age():\n    print(\"Let me guess your age.\")",
        "detail": "mid-range.chattybot",
        "documentation": {}
    },
    {
        "label": "remind_name",
        "kind": 2,
        "importPath": "mid-range.chattybot",
        "description": "mid-range.chattybot",
        "peekOfCode": "def remind_name():\n    print(\"Please, remind me your name.\")\n    name = input()\n    print(\"What a great name you have, \" + name + \"!\")\ndef guess_age():\n    print(\"Let me guess your age.\")\n    print(\"Enter remainders of dividing your age by 3, 5 and 7.\")\n    rem3 = int(input())\n    rem5 = int(input())\n    rem7 = int(input())",
        "detail": "mid-range.chattybot",
        "documentation": {}
    },
    {
        "label": "guess_age",
        "kind": 2,
        "importPath": "mid-range.chattybot",
        "description": "mid-range.chattybot",
        "peekOfCode": "def guess_age():\n    print(\"Let me guess your age.\")\n    print(\"Enter remainders of dividing your age by 3, 5 and 7.\")\n    rem3 = int(input())\n    rem5 = int(input())\n    rem7 = int(input())\n    age = (rem3 * 70 + rem5 * 21 + rem7 * 15) % 105\n    print(\"Your age is \" + str(age) + \"; that's a good time to start programming!\")\ndef count():\n    print(\"Now I will prove to you that I can count to any number you want.\")",
        "detail": "mid-range.chattybot",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 2,
        "importPath": "mid-range.chattybot",
        "description": "mid-range.chattybot",
        "peekOfCode": "def count():\n    print(\"Now I will prove to you that I can count to any number you want.\")\n    num = int(input())\n    curr = 0\n    while curr <= num:\n        print(curr)\n        curr = curr + 1\ndef test():\n    print(\"Let's test your programming knowledge.\")\n    print(\"Why do we use methods?\")",
        "detail": "mid-range.chattybot",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.chattybot",
        "description": "mid-range.chattybot",
        "peekOfCode": "def test():\n    print(\"Let's test your programming knowledge.\")\n    print(\"Why do we use methods?\")\n    print(\"1. To repeat a statement multiple times.\")\n    print(\"2. To decompose a program into several small subroutines.\")\n    print(\"3. To determine the execution time of a program.\")\n    print(\"4. To interrupt the execution of a program.\")\n    answer = int(input())\n    while answer != 3:\n        print(\"Please, try again.\")",
        "detail": "mid-range.chattybot",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 2,
        "importPath": "mid-range.chattybot",
        "description": "mid-range.chattybot",
        "peekOfCode": "def end():\n    print(\"Congratulations, have a nice day!\")\ngreet(\"Aid\", \"2021\")  # change it as you need\nremind_name()\nguess_age()\ncount()\ntest()\nend()",
        "detail": "mid-range.chattybot",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "mid-range.Check-Strict-Superset",
        "description": "mid-range.Check-Strict-Superset",
        "peekOfCode": "A = set(map(int, input().split()))\nn = int(input())\nfor _ in range(n):\n    x = set(map(int, input().split()))\n    if A >= x:\n        continue\n    else:\n        print(\"False\")\n        exit()\nprint(\"True\")",
        "detail": "mid-range.Check-Strict-Superset",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.Check-Strict-Superset",
        "description": "mid-range.Check-Strict-Superset",
        "peekOfCode": "n = int(input())\nfor _ in range(n):\n    x = set(map(int, input().split()))\n    if A >= x:\n        continue\n    else:\n        print(\"False\")\n        exit()\nprint(\"True\")",
        "detail": "mid-range.Check-Strict-Superset",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "mid-range.Check-Subset",
        "description": "mid-range.Check-Subset",
        "peekOfCode": "t = int(input())\nfor _ in range(t):\n    na = int(input())\n    a = set(map(int, input().split()))\n    nb = int(input())\n    b = set(map(int, input().split()))\n    print(\"True\" if a <= b else \"False\")",
        "detail": "mid-range.Check-Subset",
        "documentation": {}
    },
    {
        "label": "passwordCheck",
        "kind": 5,
        "importPath": "mid-range.check",
        "description": "mid-range.check",
        "peekOfCode": "passwordCheck = lambda s: len(s) > 4 and all(\n    re.search(i, s) for i in (\"[A-Z]\", \"\\d\", \"[a-z]\")\n)",
        "detail": "mid-range.check",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.CheckIfAStringCanBreakAnotherString",
        "description": "mid-range.CheckIfAStringCanBreakAnotherString",
        "peekOfCode": "class Solution:\n    def count(self, d1, d2):\n        s = 0\n        for i in \"abcdefghijklmnopqrstuvwxyz\":\n            s += d1[i] - d2[i]\n            if s < 0:\n                return False\n        return True\n    def checkIfCanBreak(self, s1: str, s2: str) -> bool:\n        d1 = Counter(s1)",
        "detail": "mid-range.CheckIfAStringCanBreakAnotherString",
        "documentation": {}
    },
    {
        "label": "check_anagrams",
        "kind": 2,
        "importPath": "mid-range.check_anagrams",
        "description": "mid-range.check_anagrams",
        "peekOfCode": "def check_anagrams(first_str: str, second_str: str) -> bool:\n    \"\"\"\n    Two strings are anagrams if they are made of the same letters\n    arranged differently (ignoring the case).\n    >>> check_anagrams('Silent', 'Listen')\n    True\n    >>> check_anagrams('This is a string', 'Is this a string')\n    True\n    >>> check_anagrams('This is    a      string', 'Is     this a string')\n    True",
        "detail": "mid-range.check_anagrams",
        "documentation": {}
    },
    {
        "label": "check_bipartite",
        "kind": 2,
        "importPath": "mid-range.check_bipartite",
        "description": "mid-range.check_bipartite",
        "peekOfCode": "def check_bipartite(adj_list):\n    V = len(adj_list)\n    # Divide vertexes in the graph into set_type 1 and 2\n    # Initialize all set_types as -1\n    set_type = [-1 for v in range(V)]\n    set_type[0] = 0\n    q = [0]\n    while q:\n        v = q.pop(0)\n        # If there is a self-loop, it cannot be bipartite",
        "detail": "mid-range.check_bipartite",
        "documentation": {}
    },
    {
        "label": "checkBipartite",
        "kind": 2,
        "importPath": "mid-range.check_bipartite_graph_bfs",
        "description": "mid-range.check_bipartite_graph_bfs",
        "peekOfCode": "def checkBipartite(graph):\n    queue = []\n    visited = [False] * len(graph)\n    color = [-1] * len(graph)\n    def bfs():\n        while queue:\n            u = queue.pop(0)\n            visited[u] = True\n            for neighbour in graph[u]:\n                if neighbour == u:",
        "detail": "mid-range.check_bipartite_graph_bfs",
        "documentation": {}
    },
    {
        "label": "check_bipartite_dfs",
        "kind": 2,
        "importPath": "mid-range.check_bipartite_graph_dfs",
        "description": "mid-range.check_bipartite_graph_dfs",
        "peekOfCode": "def check_bipartite_dfs(graph):\n    visited = [False] * len(graph)\n    color = [-1] * len(graph)\n    def dfs(v, c):\n        visited[v] = True\n        color[v] = c\n        for u in graph[v]:\n            if not visited[u]:\n                dfs(u, 1 - c)\n    for i in range(len(graph)):",
        "detail": "mid-range.check_bipartite_graph_dfs",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "mid-range.check_bipartite_graph_dfs",
        "description": "mid-range.check_bipartite_graph_dfs",
        "peekOfCode": "graph = {0: [1, 3], 1: [0, 2], 2: [1, 3], 3: [0, 2], 4: []}\nprint(check_bipartite_dfs(graph))",
        "detail": "mid-range.check_bipartite_graph_dfs",
        "documentation": {}
    },
    {
        "label": "bmp_header",
        "kind": 5,
        "importPath": "mid-range.check_bmp",
        "description": "mid-range.check_bmp",
        "peekOfCode": "bmp_header = b\"\\x42\\x4d\\x38\\x8c\\x0a\\x00\\x00\\x00\\x00\\x00\\x36\\x00\\x00\\x00\\x28\\x00\\x00\\x00\\x80\\x02\\x00\\x00\\x68\\x01\\x00\\x00\\x01\\x00\\x18\\x00\"\nprint(struct.unpack(\"<ccIIIIIIHH\", bmp_header))",
        "detail": "mid-range.check_bmp",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "mid-range.check_digraph_strongly_connected",
        "description": "mid-range.check_digraph_strongly_connected",
        "peekOfCode": "class Graph:\n    def __init__(self, v):\n        self.v = v\n        self.graph = defaultdict(list)\n    def add_edge(self, u, v):\n        self.graph[u].append(v)\n    def dfs(self):\n        visited = [False] * self.v\n        self.dfs_util(0, visited)\n        if visited == [True] * self.v:",
        "detail": "mid-range.check_digraph_strongly_connected",
        "documentation": {}
    },
    {
        "label": "g1",
        "kind": 5,
        "importPath": "mid-range.check_digraph_strongly_connected",
        "description": "mid-range.check_digraph_strongly_connected",
        "peekOfCode": "g1 = Graph(5)\ng1.add_edge(0, 1)\ng1.add_edge(1, 2)\ng1.add_edge(2, 3)\ng1.add_edge(3, 0)\ng1.add_edge(2, 4)\ng1.add_edge(4, 2)\nprint(\"Yes\") if g1.is_sc() else print(\"No\")\ng2 = Graph(4)\ng2.add_edge(0, 1)",
        "detail": "mid-range.check_digraph_strongly_connected",
        "documentation": {}
    },
    {
        "label": "g2",
        "kind": 5,
        "importPath": "mid-range.check_digraph_strongly_connected",
        "description": "mid-range.check_digraph_strongly_connected",
        "peekOfCode": "g2 = Graph(4)\ng2.add_edge(0, 1)\ng2.add_edge(1, 2)\ng2.add_edge(2, 3)\nprint(\"Yes\") if g2.is_sc() else print(\"No\")",
        "detail": "mid-range.check_digraph_strongly_connected",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "mid-range.check_docs",
        "description": "mid-range.check_docs",
        "peekOfCode": "def register(linter):\n    \"\"\"Required method to auto register this checker.\n    :param linter: Main interface object for Pylint plugins\n    :type linter: Pylint object\n    \"\"\"\n    warnings.warn(\n        \"This plugin is deprecated, use pylint.extensions.docparams instead.\",\n        DeprecationWarning,\n    )\n    linter.register_checker(docparams.DocstringParameterChecker(linter))",
        "detail": "mid-range.check_docs",
        "documentation": {}
    },
    {
        "label": "check_for_cycle",
        "kind": 2,
        "importPath": "mid-range.check_for_cycle",
        "description": "mid-range.check_for_cycle",
        "peekOfCode": "def check_for_cycle(ll):\n    pass\n# Tests\nll = LinkedList()\nprint(check_for_cycle(ll))\n# should print False\nll.add_to_tail(1)\nprint(check_for_cycle(ll))\n# should print False\nll.add_to_tail(2)",
        "detail": "mid-range.check_for_cycle",
        "documentation": {}
    },
    {
        "label": "ll",
        "kind": 5,
        "importPath": "mid-range.check_for_cycle",
        "description": "mid-range.check_for_cycle",
        "peekOfCode": "ll = LinkedList()\nprint(check_for_cycle(ll))\n# should print False\nll.add_to_tail(1)\nprint(check_for_cycle(ll))\n# should print False\nll.add_to_tail(2)\nll.add_to_tail(3)\nll.add_to_tail(4)\nprint(check_for_cycle(ll))",
        "detail": "mid-range.check_for_cycle",
        "documentation": {}
    },
    {
        "label": "ll.tail.next",
        "kind": 5,
        "importPath": "mid-range.check_for_cycle",
        "description": "mid-range.check_for_cycle",
        "peekOfCode": "ll.tail.next = ll.head.next.next\nprint(check_for_cycle(ll))\n# should print True",
        "detail": "mid-range.check_for_cycle",
        "documentation": {}
    },
    {
        "label": "isSQLite3",
        "kind": 2,
        "importPath": "mid-range.check_for_sqlite_files",
        "description": "mid-range.check_for_sqlite_files",
        "peekOfCode": "def isSQLite3(filename):\n    from os.path import isfile, getsize\n    if not isfile(filename):\n        return False\n    if getsize(filename) < 100:  # SQLite database file header is 100 bytes\n        return False\n    else:\n        fd = open(filename, \"rb\")\n        header = fd.read(100)\n        fd.close()",
        "detail": "mid-range.check_for_sqlite_files",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "mid-range.check_for_sqlite_files",
        "description": "mid-range.check_for_sqlite_files",
        "peekOfCode": "log = open(\"sqlite_audit.txt\", \"w\")\nfor r, d, f in os.walk(r\".\"):\n    for files in f:\n        if isSQLite3(files):\n            print(files)\n            print(\n                \"[+] '%s' **** is a SQLITE database file **** \" % os.path.join(r, files)\n            )\n            log.write(\"[+] '%s' **** is a SQLITE database file **** \" % files + \"\\n\")\n        else:",
        "detail": "mid-range.check_for_sqlite_files",
        "documentation": {}
    },
    {
        "label": "l_to_c",
        "kind": 2,
        "importPath": "mid-range.check_IBAN",
        "description": "mid-range.check_IBAN",
        "peekOfCode": "def l_to_c(l):\n    try:\n        return str(int(l))\n    except ValueError:\n        return str(10 + ord(l.upper()) - ord(\"A\"))\ndef check_iban(iban):\n    print(\"\\nChecking the IBAN number '%s'...\" % iban)\n    ib = iban.replace(\" \", \"\")\n    ib = ib[4:] + ib[:4]\n    print(\"Of length\", len(ib))",
        "detail": "mid-range.check_IBAN",
        "documentation": {}
    },
    {
        "label": "check_iban",
        "kind": 2,
        "importPath": "mid-range.check_IBAN",
        "description": "mid-range.check_IBAN",
        "peekOfCode": "def check_iban(iban):\n    print(\"\\nChecking the IBAN number '%s'...\" % iban)\n    ib = iban.replace(\" \", \"\")\n    ib = ib[4:] + ib[:4]\n    print(\"Of length\", len(ib))\n    i = int(\"\".join(l_to_c(l) for l in ib))\n    check = (i % 97) == 1\n    if check:\n        print(\"OK '%s' seems to be a valid IBAN number.\" % iban)\n    else:",
        "detail": "mid-range.check_IBAN",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.check_IBAN",
        "description": "mid-range.check_IBAN",
        "peekOfCode": "def main(args):\n    try:\n        if not args:\n            check_iban(\"HAHA LOL YOU THOUGH I WILL LET A REAL IBAN IN MY SCRIPT\")\n        else:\n            for iban in args:\n                check_iban(iban)\n        return 0\n    except Exception as e:\n        print(e)",
        "detail": "mid-range.check_IBAN",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Check_If_a_Number_Is_Majority_Element_in_a_Sorted_Array",
        "description": "mid-range.Check_If_a_Number_Is_Majority_Element_in_a_Sorted_Array",
        "peekOfCode": "class Solution:\n    def isMajorityElement(self, nums, target):\n        dict = collections.Counter(nums)\n        if len(nums) == 1:\n            return nums[0] == target\n        k = nums[len(nums) // 2]\n        if dict[k] > len(nums) // 2:\n            return True\n        return False",
        "detail": "mid-range.Check_If_a_Number_Is_Majority_Element_in_a_Sorted_Array",
        "documentation": {}
    },
    {
        "label": "get_user_input",
        "kind": 2,
        "importPath": "mid-range.check_input",
        "description": "mid-range.check_input",
        "peekOfCode": "def get_user_input(start, end):\n    \"\"\"\n        input: two integer values\n               lower limit 'start' and maximum 'end'\n               the arguments aren't inclusive.\n        output: if reading successful then returns the read integer.\n        purpose: reads from command-line a integer in the given bounds.\n                 while input invalid asks user again\n    \"\"\"\n    loop = True  # controls while-loop",
        "detail": "mid-range.check_input",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.check_input",
        "description": "mid-range.check_input",
        "peekOfCode": "x = get_user_input(1, 6)\nprint(x)\n# Asks user to enter something, ie. a number option from a menu.\n# While type != interger, and not in the given range,\n# Program gives error message and asks for new input.",
        "detail": "mid-range.check_input",
        "documentation": {}
    },
    {
        "label": "checkInternetConnectivity",
        "kind": 2,
        "importPath": "mid-range.check_internet_con",
        "description": "mid-range.check_internet_con",
        "peekOfCode": "def checkInternetConnectivity():\n    try:\n        url = argv[1]\n        if \"https://\" or \"http://\" not in url:\n            url = \"https://\" + url\n    except:\n        url = \"https://google.com\"\n    try:\n        urlopen(url, timeout=2)\n        print('Connection to \"' + url + '\" is working')",
        "detail": "mid-range.check_internet_con",
        "documentation": {}
    },
    {
        "label": "checkPalindrome",
        "kind": 2,
        "importPath": "mid-range.check_palindrome",
        "description": "mid-range.check_palindrome",
        "peekOfCode": "def checkPalindrome(inputString):\n    for i in range(len(inputString) // 2):\n        if inputString[i] != inputString[len(inputString) - 1 - i]:\n            return False\n    return True",
        "detail": "mid-range.check_palindrome",
        "documentation": {}
    },
    {
        "label": "check_pangram",
        "kind": 2,
        "importPath": "mid-range.check_pangram",
        "description": "mid-range.check_pangram",
        "peekOfCode": "def check_pangram(input_string):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for ch in alphabet:\n        if ch not in input_string.lower():\n            return False\n    return True",
        "detail": "mid-range.check_pangram",
        "documentation": {}
    },
    {
        "label": "check_valid_ip",
        "kind": 2,
        "importPath": "mid-range.check_valid_ip_address",
        "description": "mid-range.check_valid_ip_address",
        "peekOfCode": "def check_valid_ip(ip: str) -> bool:\n    \"\"\"\n    print \"Valid IP address\" If IP is valid.\n    or\n    print \"Invalid IP address\" If IP is Invalid.\n    >>> check_valid_ip(\"192.168.0.23\")\n    True\n    >>> check_valid_ip(\"192.255.15.8\")\n    False\n    >>> check_valid_ip(\"172.100.0.8\")",
        "detail": "mid-range.check_valid_ip_address",
        "documentation": {}
    },
    {
        "label": "palindrome",
        "kind": 2,
        "importPath": "mid-range.check_whether_the_string_is_Symmetrical_or_Palindrome",
        "description": "mid-range.check_whether_the_string_is_Symmetrical_or_Palindrome",
        "peekOfCode": "def palindrome(a):\n    mid = (len(a) - 1) // 2\n    start = 0\n    last = len(a) - 1\n    flag = 0\n    while start < mid:\n        if a[start] == a[last]:\n            start += 1\n            last -= 1\n        else:",
        "detail": "mid-range.check_whether_the_string_is_Symmetrical_or_Palindrome",
        "documentation": {}
    },
    {
        "label": "symmetry",
        "kind": 2,
        "importPath": "mid-range.check_whether_the_string_is_Symmetrical_or_Palindrome",
        "description": "mid-range.check_whether_the_string_is_Symmetrical_or_Palindrome",
        "peekOfCode": "def symmetry(a):\n    n = len(a)\n    flag = 0\n    if n % 2:\n        mid = n // 2 + 1\n    else:\n        mid = n // 2\n    start1 = 0\n    start2 = mid\n    while start1 < mid and start2 < n:",
        "detail": "mid-range.check_whether_the_string_is_Symmetrical_or_Palindrome",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "mid-range.check_whether_the_string_is_Symmetrical_or_Palindrome",
        "description": "mid-range.check_whether_the_string_is_Symmetrical_or_Palindrome",
        "peekOfCode": "string = \"amaama\"\npalindrome(string)\nsymmetry(string)",
        "detail": "mid-range.check_whether_the_string_is_Symmetrical_or_Palindrome",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "mid-range.check__if_a_number_positive_._negative_or_zero",
        "description": "mid-range.check__if_a_number_positive_._negative_or_zero",
        "peekOfCode": "num = float(input(\"Enter a number: \"))\nif num > 0:\n    print(\"Positive number\")\nelif num == 0:\n    print(\"Zero\")\nelse:\n    print(\"Negative number\")\n    num = float(input(\"Enter a number: \"))\nif num >= 0:\n    if num == 0:",
        "detail": "mid-range.check__if_a_number_positive_._negative_or_zero",
        "documentation": {}
    },
    {
        "label": "CheesePreprocessor",
        "kind": 6,
        "importPath": "mid-range.cheese",
        "description": "mid-range.cheese",
        "peekOfCode": "class CheesePreprocessor(Preprocessor):\n    \"\"\"\n    Adds a cheese tag to the resources object\n    \"\"\"\n    def __init__(self, **kw):\n        \"\"\"\n        Public constructor\n        \"\"\"\n        super().__init__(**kw)\n    def preprocess(self, nb, resources):",
        "detail": "mid-range.cheese",
        "documentation": {}
    },
    {
        "label": "Print",
        "kind": 6,
        "importPath": "mid-range.cherrypy_print_file_interface",
        "description": "mid-range.cherrypy_print_file_interface",
        "peekOfCode": "class Print(object):\n    @cherrypy.expose\n    def index(self):\n        return HTML_TEMPLATE\n    @cherrypy.expose\n    def send(self, file, user, **kwargs):\n        try:\n            cups.setUser(user)\n            conn = cups.Connection()\n            job_name = str(uuid.uuid4())",
        "detail": "mid-range.cherrypy_print_file_interface",
        "documentation": {}
    },
    {
        "label": "HTML_TEMPLATE",
        "kind": 5,
        "importPath": "mid-range.cherrypy_print_file_interface",
        "description": "mid-range.cherrypy_print_file_interface",
        "peekOfCode": "HTML_TEMPLATE = \"\"\"\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html><head><title>Print</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n</head><body><h1>Print File</h1>\n<form action=\"send\" method=\"POST\" enctype=\"multipart/form-data\">\nFile name: <input name=\"file\" type=\"file\"><br>\nUser name: <input name=\"user\"><br>\n<input name=\"submit\" type=\"submit\">\n</form>",
        "detail": "mid-range.cherrypy_print_file_interface",
        "documentation": {}
    },
    {
        "label": "chessBoardCellColor",
        "kind": 2,
        "importPath": "mid-range.chess_board_cell_color",
        "description": "mid-range.chess_board_cell_color",
        "peekOfCode": "def chessBoardCellColor(cell1, cell2):\n    mydict = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6, \"G\": 7, \"H\": 8}\n    if (mydict[cell1[0]] + int(cell1[1])) % 2 == (mydict[cell2[0]] + int(cell2[1])) % 2:\n        return True\n    else:\n        return False",
        "detail": "mid-range.chess_board_cell_color",
        "documentation": {}
    },
    {
        "label": "chessKnight",
        "kind": 2,
        "importPath": "mid-range.chess_knight",
        "description": "mid-range.chess_knight",
        "peekOfCode": "def chessKnight(cell):\n    valid_count = 0\n    # All possible moves for knight\n    dirs = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]\n    # For each move of knight, check if it's valid\n    for x, y in dirs:\n        if (97 <= ord(cell[0]) + x <= 104) and (1 <= int(cell[1]) + y <= 8):\n            valid_count += 1\n    return valid_count",
        "detail": "mid-range.chess_knight",
        "documentation": {}
    },
    {
        "label": "solve",
        "kind": 2,
        "importPath": "mid-range.chicks_n_rabs",
        "description": "mid-range.chicks_n_rabs",
        "peekOfCode": "def solve(num_heads, num_legs):\n    ns = \"No solutions!\"\n    for i in range(num_heads + 1):\n        j = num_heads - i\n        if 2 * i + 4 * j == num_legs:\n            return i, j\n    return ns, ns\nif __name__ == \"__main__\":\n    numheads = 35\n    numlegs = 94",
        "detail": "mid-range.chicks_n_rabs",
        "documentation": {}
    },
    {
        "label": "chocolateFeast",
        "kind": 2,
        "importPath": "mid-range.Chocolate-Feast",
        "description": "mid-range.Chocolate-Feast",
        "peekOfCode": "def chocolateFeast(n, c, m):\n    choc = n // c\n    w = choc\n    while True:\n        if w >= m:\n            choc += w // m\n            w = (w // m) + (w % m)\n            continue\n        return choc\nif __name__ == \"__main__\":",
        "detail": "mid-range.Chocolate-Feast",
        "documentation": {}
    },
    {
        "label": "autoMate",
        "kind": 2,
        "importPath": "mid-range.ChromeDinoGame",
        "description": "mid-range.ChromeDinoGame",
        "peekOfCode": "def autoMate(key):\n    pyautogui.keyDown(key)\n    return\ndef collision(data):\n    # Check collision for birds\n    for i in range(170, 210):\n        for j in range(209, 374):\n            if data[i, j] < 100:\n                autoMate(\"down\")\n                return",
        "detail": "mid-range.ChromeDinoGame",
        "documentation": {}
    },
    {
        "label": "collision",
        "kind": 2,
        "importPath": "mid-range.ChromeDinoGame",
        "description": "mid-range.ChromeDinoGame",
        "peekOfCode": "def collision(data):\n    # Check collision for birds\n    for i in range(170, 210):\n        for j in range(209, 374):\n            if data[i, j] < 100:\n                autoMate(\"down\")\n                return\n    # Check collision for cactus\n    for i in range(237, 275):\n        for j in range(376, 440):",
        "detail": "mid-range.ChromeDinoGame",
        "documentation": {}
    },
    {
        "label": "hit",
        "kind": 2,
        "importPath": "mid-range.Chrome_Dino_Automater",
        "description": "mid-range.Chrome_Dino_Automater",
        "peekOfCode": "def hit(key):\n    pyautogui.press(key)\n    return\ndef isCollide(data):\n    # for cactus\n    for i in range(329, 425):\n        for j in range(550, 650):\n            if data[i, j] < 100:\n                hit(\"up\")\n                return",
        "detail": "mid-range.Chrome_Dino_Automater",
        "documentation": {}
    },
    {
        "label": "isCollide",
        "kind": 2,
        "importPath": "mid-range.Chrome_Dino_Automater",
        "description": "mid-range.Chrome_Dino_Automater",
        "peekOfCode": "def isCollide(data):\n    # for cactus\n    for i in range(329, 425):\n        for j in range(550, 650):\n            if data[i, j] < 100:\n                hit(\"up\")\n                return\n    # Draw the rectangle for birds\n    # for i in range(310, 425):\n    #     for j in range(390, 550):",
        "detail": "mid-range.Chrome_Dino_Automater",
        "documentation": {}
    },
    {
        "label": "circleOfNumbers",
        "kind": 2,
        "importPath": "mid-range.circle_of_numbers",
        "description": "mid-range.circle_of_numbers",
        "peekOfCode": "def circleOfNumbers(n, firstNumber):\n\t\"\"\"\n\tReturn number that is radially opposite firstNumber\n\tin circle from 1 to n\n\t\"\"\"\n    return (firstNumber + (n / 2)) % n",
        "detail": "mid-range.circle_of_numbers",
        "documentation": {}
    },
    {
        "label": "circularArrayRotation",
        "kind": 2,
        "importPath": "mid-range.Circular-Array-Rotation",
        "description": "mid-range.Circular-Array-Rotation",
        "peekOfCode": "def circularArrayRotation(a, k, queries):\n    print(a)\n    print(k)\n    print(queries)\n    x = len(a)\n    A = [0] * x\n    for i in range(0, x):\n        A[(i + k) % x] = a[i]\n    a = []\n    for i in range(len(queries)):",
        "detail": "mid-range.Circular-Array-Rotation",
        "documentation": {}
    },
    {
        "label": "getTime",
        "kind": 2,
        "importPath": "mid-range.circular-printer",
        "description": "mid-range.circular-printer",
        "peekOfCode": "def getTime(s):\n    # Write your code here\n    d = dict(zip(string.ascii_uppercase, range(0, 26)))\n    dist = min(abs(d[\"A\"] - d[s[0]]), 26 - abs(d[\"A\"] - d[s[0]]))\n    for i in range(1, len(s)):\n        if abs(d[s[i]] - d[s[i - 1]]) > 13:\n            dist += 26 - abs(d[s[i]] - d[s[i - 1]])\n            print(dist)\n        else:\n            dist += abs(d[s[i]] - d[s[i - 1]])",
        "detail": "mid-range.circular-printer",
        "documentation": {}
    },
    {
        "label": "Animal",
        "kind": 6,
        "importPath": "mid-range.class",
        "description": "mid-range.class",
        "peekOfCode": "class Animal:\n    def __init__(self, kind, color, name):\n        # constructor method/a new instance of animal\n        # slef is like this from JS\n        self.kind = kind\n        self.name = name\n        self.color = color\n    def description(self):\n        print(\"%s is a %s with color %s\" % (self.name, self.kind, self.color))\n        # or f\"{self.name} is a {self.kind} with a color {self.color}\"",
        "detail": "mid-range.class",
        "documentation": {}
    },
    {
        "label": "cat",
        "kind": 5,
        "importPath": "mid-range.class",
        "description": "mid-range.class",
        "peekOfCode": "cat = Animal(\"cat\", \"orange\", \"CAty\")\ndog = Animal(\"dog\", \"black\", \"HIM\")\nprint(cat.kind)\nprint(dog.color)\ncat.description()",
        "detail": "mid-range.class",
        "documentation": {}
    },
    {
        "label": "dog",
        "kind": 5,
        "importPath": "mid-range.class",
        "description": "mid-range.class",
        "peekOfCode": "dog = Animal(\"dog\", \"black\", \"HIM\")\nprint(cat.kind)\nprint(dog.color)\ncat.description()",
        "detail": "mid-range.class",
        "documentation": {}
    },
    {
        "label": "Animal",
        "kind": 6,
        "importPath": "mid-range.class_animal_attributes_examples",
        "description": "mid-range.class_animal_attributes_examples",
        "peekOfCode": "class Animal:\n    def __init__(self, species, name, legs, color, voices):\n        self.species = species\n        self.name = name\n        self.legs = legs\n        self.color = color\n        self.voices = voices\ncat = Animal(\"Cat\", \"Pussy-Cat\", 4, \"white\", \"meow\")\ndog = Animal(\"Dog\", \"Cloudy\", 4, \"brownie\", \"bark\")\nprint(\"Species of animal : \", dog.species)",
        "detail": "mid-range.class_animal_attributes_examples",
        "documentation": {}
    },
    {
        "label": "cat",
        "kind": 5,
        "importPath": "mid-range.class_animal_attributes_examples",
        "description": "mid-range.class_animal_attributes_examples",
        "peekOfCode": "cat = Animal(\"Cat\", \"Pussy-Cat\", 4, \"white\", \"meow\")\ndog = Animal(\"Dog\", \"Cloudy\", 4, \"brownie\", \"bark\")\nprint(\"Species of animal : \", dog.species)\nprint(\"name of animal : \", dog.name)\nprint(\"no. of legs       : \", dog.legs)\nprint(\"color of animal : \", dog.color)\nprint(\"voice of animal : \", dog.voices)\nprint(\"  \")\nprint(\"Species of animal : \", cat.species)\nprint(\"name of animal : \", cat.name)",
        "detail": "mid-range.class_animal_attributes_examples",
        "documentation": {}
    },
    {
        "label": "dog",
        "kind": 5,
        "importPath": "mid-range.class_animal_attributes_examples",
        "description": "mid-range.class_animal_attributes_examples",
        "peekOfCode": "dog = Animal(\"Dog\", \"Cloudy\", 4, \"brownie\", \"bark\")\nprint(\"Species of animal : \", dog.species)\nprint(\"name of animal : \", dog.name)\nprint(\"no. of legs       : \", dog.legs)\nprint(\"color of animal : \", dog.color)\nprint(\"voice of animal : \", dog.voices)\nprint(\"  \")\nprint(\"Species of animal : \", cat.species)\nprint(\"name of animal : \", cat.name)\nprint(\"no. of legs        : \", cat.legs)",
        "detail": "mid-range.class_animal_attributes_examples",
        "documentation": {}
    },
    {
        "label": "movie",
        "kind": 6,
        "importPath": "mid-range.class_example_movies",
        "description": "mid-range.class_example_movies",
        "peekOfCode": "class movie:\n    def __init__(self, name, rating, director, budget, description):\n        self.name = name\n        self.rating = rating\n        self.director = director\n        self.budget = budget\n        self.description = description\n    def good_movie(self):\n        if self.rating >= 4:\n            return \"It's a good movie.\"",
        "detail": "mid-range.class_example_movies",
        "documentation": {}
    },
    {
        "label": "toy_story",
        "kind": 5,
        "importPath": "mid-range.class_example_movies",
        "description": "mid-range.class_example_movies",
        "peekOfCode": "toy_story = movie(\n    \"ToyStory2\",\n    4,\n    \"John Lasseter , Lee Unkrich , Ash Brannon\",\n    \"90 millon USD\",\n    \"\"\"When Woody is toy-napped by a greedy toy collector and is nowhere to be found, Buzz and his friends set out to rescue him.But Woody too is tempted by the idea of becoming immortal in a museum.\n\"\"\",\n)\nprint(\"Title : \" + str(toy_story.name))\nprint(\"Rating : \" + str(toy_story.rating))",
        "detail": "mid-range.class_example_movies",
        "documentation": {}
    },
    {
        "label": "Movie",
        "kind": 6,
        "importPath": "mid-range.class_movies",
        "description": "mid-range.class_movies",
        "peekOfCode": "class Movie:\n    def __init__(self, name, rating, director, budget, description):\n        self.name = name\n        self.rating = rating\n        self.director = director\n        self.budget = budget\n        self.description = description\n    def good_movie(self):\n        if self.rating >= 4:\n            return \"Good Movie\"",
        "detail": "mid-range.class_movies",
        "documentation": {}
    },
    {
        "label": "toy_story",
        "kind": 5,
        "importPath": "mid-range.class_movies",
        "description": "mid-range.class_movies",
        "peekOfCode": "toy_story = Movie(\n    \"ToyStory2\",\n    4,\n    \"John Lasseter , Lee Unkrich , Ash Brannon\",\n    \"90 millon USD\",\n    \"When Woody is toy-napped by a greedy toy collector and is nowhere to be found, \\nBuzz and his friends set out to rescue him.\\nBut Woody too is tempted by the idea of becoming immortal in a museum.\",\n)\nprint(\"Title : \" + toy_story.name)\nprint(\"Rating : \" + str(toy_story.rating))\nprint(\"Director : \" + toy_story.director)",
        "detail": "mid-range.class_movies",
        "documentation": {}
    },
    {
        "label": "ClearOutputPreprocessor",
        "kind": 6,
        "importPath": "mid-range.clearoutput",
        "description": "mid-range.clearoutput",
        "peekOfCode": "class ClearOutputPreprocessor(Preprocessor):\n    \"\"\"\n    Removes the output from all code cells in a notebook.\n    \"\"\"\n    remove_metadata_fields = Set({\"collapsed\", \"scrolled\"}).tag(config=True)\n    def preprocess_cell(self, cell, resources, cell_index):\n        \"\"\"\n        Apply a transformation on each cell. See base.py for details.\n        \"\"\"\n        if cell.cell_type == \"code\":",
        "detail": "mid-range.clearoutput",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "mid-range.clear_to_blur_image",
        "description": "mid-range.clear_to_blur_image",
        "peekOfCode": "path = input(\"Enter the path where the image is located:\")\nimg = Image.open(path)\nimg = img.filter(ImageFilter.BoxBlur(8))\nimg.save(\"blurredimage.jpg\")\nimg.show()",
        "detail": "mid-range.clear_to_blur_image",
        "documentation": {}
    },
    {
        "label": "img",
        "kind": 5,
        "importPath": "mid-range.clear_to_blur_image",
        "description": "mid-range.clear_to_blur_image",
        "peekOfCode": "img = Image.open(path)\nimg = img.filter(ImageFilter.BoxBlur(8))\nimg.save(\"blurredimage.jpg\")\nimg.show()",
        "detail": "mid-range.clear_to_blur_image",
        "documentation": {}
    },
    {
        "label": "img",
        "kind": 5,
        "importPath": "mid-range.clear_to_blur_image",
        "description": "mid-range.clear_to_blur_image",
        "peekOfCode": "img = img.filter(ImageFilter.BoxBlur(8))\nimg.save(\"blurredimage.jpg\")\nimg.show()",
        "detail": "mid-range.clear_to_blur_image",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.cli",
        "description": "mid-range.cli",
        "peekOfCode": "def main(argv=None):\n    # type: (Optional[List[str]]) -> None\n    \"\"\"Execute the main bit of the application.\n    This handles the creation of an instance of :class:`Application`, runs it,\n    and then exits the application.\n    :param list argv:\n        The arguments to be passed to the application for parsing.\n    \"\"\"\n    if argv is None:\n        argv = sys.argv[1:]",
        "detail": "mid-range.cli",
        "documentation": {}
    },
    {
        "label": "click.disable_unicode_literals_warning",
        "kind": 5,
        "importPath": "mid-range.click",
        "description": "mid-range.click",
        "peekOfCode": "click.disable_unicode_literals_warning = True",
        "detail": "mid-range.click",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.client",
        "description": "mid-range.client",
        "peekOfCode": "s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect((HOST, PORT))\ns.send(b\"Hello World\")\ndata = s.recv(1024)\ns.close()\nprint(repr(data.decode(\"ascii\")))",
        "detail": "mid-range.client",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.client",
        "description": "mid-range.client",
        "peekOfCode": "data = s.recv(1024)\ns.close()\nprint(repr(data.decode(\"ascii\")))",
        "detail": "mid-range.client",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.ClimbingStairs",
        "description": "mid-range.ClimbingStairs",
        "peekOfCode": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        def climb(i, n, memo):\n            if i > n:\n                return 0\n            if i == n:\n                return 1\n            if memo[i] > 0:\n                return memo[i]\n            memo[i] = climb(i + 1, n, memo) + climb(i + 2, n, memo)",
        "detail": "mid-range.ClimbingStairs",
        "documentation": {}
    },
    {
        "label": "climbing_staircase",
        "kind": 2,
        "importPath": "mid-range.climbing_staircase",
        "description": "mid-range.climbing_staircase",
        "peekOfCode": "def climbing_staircase(steps, height):\n    dp = [0 for i in range(height)]\n    # add all steps into dp\n    for s in steps:\n        if s <= height:\n            dp[s - 1] = 1\n    # for each position look how you can arrive there\n    for i in range(height):\n        for s in steps:\n            if i - s >= 0:",
        "detail": "mid-range.climbing_staircase",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.climbing_stairs",
        "description": "mid-range.climbing_stairs",
        "peekOfCode": "class Solution:\n    def climbStairs(self, n):\n        if n == 1:\n            return 1\n        first = 1\n        second = 2\n        for i in range(3, n + 1):\n            third = first + second\n            first = second\n            second = third",
        "detail": "mid-range.climbing_stairs",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 2,
        "importPath": "mid-range.clock",
        "description": "mid-range.clock",
        "peekOfCode": "def time():\n    string = strftime(\"%H:%M:%S %p\")\n    clockTime.config(text=string)\n    clockTime.after(1000, time)\nclockTime = tkinter.Label(\n    top, font=(\"calibri\", 40, \"bold\"), background=\"black\", foreground=\"white\"\n)\nclockTime.pack(anchor=\"center\")\ntime()\ntop.mainloop()",
        "detail": "mid-range.clock",
        "documentation": {}
    },
    {
        "label": "top",
        "kind": 5,
        "importPath": "mid-range.clock",
        "description": "mid-range.clock",
        "peekOfCode": "top = tkinter.Tk()\n# setting title of the App\ntop.title(\"Clock\")\n# restricting the resizable property\ntop.resizable(0, 0)\ndef time():\n    string = strftime(\"%H:%M:%S %p\")\n    clockTime.config(text=string)\n    clockTime.after(1000, time)\nclockTime = tkinter.Label(",
        "detail": "mid-range.clock",
        "documentation": {}
    },
    {
        "label": "clockTime",
        "kind": 5,
        "importPath": "mid-range.clock",
        "description": "mid-range.clock",
        "peekOfCode": "clockTime = tkinter.Label(\n    top, font=(\"calibri\", 40, \"bold\"), background=\"black\", foreground=\"white\"\n)\nclockTime.pack(anchor=\"center\")\ntime()\ntop.mainloop()",
        "detail": "mid-range.clock",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "mid-range.Clone_Binary_Tree",
        "description": "mid-range.Clone_Binary_Tree",
        "peekOfCode": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n    def __str__(self):\n        return str(self.val)\nclass Solution:\n    def findNode(self, a, b, node):\n        if a == node:",
        "detail": "mid-range.Clone_Binary_Tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Clone_Binary_Tree",
        "description": "mid-range.Clone_Binary_Tree",
        "peekOfCode": "class Solution:\n    def findNode(self, a, b, node):\n        if a == node:\n            return b\n        if a.left and b.left:\n            found = self.findNode(a.left, b.left, node)\n            if found:\n                return found\n        if a.right and b.right:\n            found = self.findNode(a.right, b.right, node)",
        "detail": "mid-range.Clone_Binary_Tree",
        "documentation": {}
    },
    {
        "label": "Cloning",
        "kind": 2,
        "importPath": "mid-range.cloning_a__list",
        "description": "mid-range.cloning_a__list",
        "peekOfCode": "def Cloning(li1):\n    li_copy = li1[:]\n    return li_copy\n# Driver Code\nli1 = [4, 8, 2, 10, 15, 18]\nli2 = Cloning(li1)\nprint(\"Original List:\", li1)\nprint(\"After Cloning:\", li2)",
        "detail": "mid-range.cloning_a__list",
        "documentation": {}
    },
    {
        "label": "li1",
        "kind": 5,
        "importPath": "mid-range.cloning_a__list",
        "description": "mid-range.cloning_a__list",
        "peekOfCode": "li1 = [4, 8, 2, 10, 15, 18]\nli2 = Cloning(li1)\nprint(\"Original List:\", li1)\nprint(\"After Cloning:\", li2)",
        "detail": "mid-range.cloning_a__list",
        "documentation": {}
    },
    {
        "label": "li2",
        "kind": 5,
        "importPath": "mid-range.cloning_a__list",
        "description": "mid-range.cloning_a__list",
        "peekOfCode": "li2 = Cloning(li1)\nprint(\"Original List:\", li1)\nprint(\"After Cloning:\", li2)",
        "detail": "mid-range.cloning_a__list",
        "documentation": {}
    },
    {
        "label": "closestNumbers",
        "kind": 2,
        "importPath": "mid-range.Closest-Numbers",
        "description": "mid-range.Closest-Numbers",
        "peekOfCode": "def closestNumbers(arr):\n    arr = sorted(arr)\n    mindif = math.inf\n    res = []\n    for i in range(1, len(arr)):\n        if (abs(arr[i - 1] - arr[i])) < mindif:\n            res.clear()\n            res.append(arr[i - 1])\n            res.append(arr[i])\n            mindif = abs(arr[i - 1] - arr[i])",
        "detail": "mid-range.Closest-Numbers",
        "documentation": {}
    },
    {
        "label": "HelloWorld",
        "kind": 6,
        "importPath": "mid-range.cmd_arguments",
        "description": "mid-range.cmd_arguments",
        "peekOfCode": "class HelloWorld(cmd.Cmd):\n    def do_greet(self, person):\n        \"\"\"greet [person]\n        Greet the named person\"\"\"\n        if person:\n            print(\"hi,\", person)\n        else:\n            print(\"hi\")\n    def do_EOF(self, line):\n        return True",
        "detail": "mid-range.cmd_arguments",
        "documentation": {}
    },
    {
        "label": "InteractiveOrCommandLine",
        "kind": 6,
        "importPath": "mid-range.cmd_argv",
        "description": "mid-range.cmd_argv",
        "peekOfCode": "class InteractiveOrCommandLine(cmd.Cmd):\n    \"\"\"Accepts commands via the normal interactive\n    prompt or on the command line.\n    \"\"\"\n    def do_greet(self, line):\n        print(\"hello,\", line)\n    def do_EOF(self, line):\n        return True\nif __name__ == \"__main__\":\n    import sys",
        "detail": "mid-range.cmd_argv",
        "documentation": {}
    },
    {
        "label": "HelloWorld",
        "kind": 6,
        "importPath": "mid-range.cmd_arg_completion",
        "description": "mid-range.cmd_arg_completion",
        "peekOfCode": "class HelloWorld(cmd.Cmd):\n    FRIENDS = [\"Alice\", \"Adam\", \"Barbara\", \"Bob\"]\n    def do_greet(self, person):\n        \"Greet the person\"\n        if person and person in self.FRIENDS:\n            greeting = \"hi, {}!\".format(person)\n        elif person:\n            greeting = \"hello, {}\".format(person)\n        else:\n            greeting = \"hello\"",
        "detail": "mid-range.cmd_arg_completion",
        "documentation": {}
    },
    {
        "label": "HelloWorld",
        "kind": 6,
        "importPath": "mid-range.cmd_attributes",
        "description": "mid-range.cmd_attributes",
        "peekOfCode": "class HelloWorld(cmd.Cmd):\n    prompt = \"prompt: \"\n    intro = \"Simple command processor example.\"\n    doc_header = \"doc_header\"\n    misc_header = \"misc_header\"\n    undoc_header = \"undoc_header\"\n    ruler = \"-\"\n    def do_prompt(self, line):\n        \"Change the interactive prompt\"\n        self.prompt = line + \": \"",
        "detail": "mid-range.cmd_attributes",
        "documentation": {}
    },
    {
        "label": "HelloWorld",
        "kind": 6,
        "importPath": "mid-range.cmd_do_help",
        "description": "mid-range.cmd_do_help",
        "peekOfCode": "class HelloWorld(cmd.Cmd):\n    def do_greet(self, person):\n        if person:\n            print(\"hi,\", person)\n        else:\n            print(\"hi\")\n    def help_greet(self):\n        print(\"\\n\".join([\"greet [person]\", \"Greet the named person\"]))\n    def do_EOF(self, line):\n        return True",
        "detail": "mid-range.cmd_do_help",
        "documentation": {}
    },
    {
        "label": "ShellEnabled",
        "kind": 6,
        "importPath": "mid-range.cmd_do_shell",
        "description": "mid-range.cmd_do_shell",
        "peekOfCode": "class ShellEnabled(cmd.Cmd):\n    last_output = \"\"\n    def do_shell(self, line):\n        \"Run a shell command\"\n        print(\"running shell command:\", line)\n        sub_cmd = subprocess.Popen(line, shell=True, stdout=subprocess.PIPE)\n        output = sub_cmd.communicate()[0].decode(\"utf-8\")\n        print(output)\n        self.last_output = output\n    def do_echo(self, line):",
        "detail": "mid-range.cmd_do_shell",
        "documentation": {}
    },
    {
        "label": "HelloWorld",
        "kind": 6,
        "importPath": "mid-range.cmd_file",
        "description": "mid-range.cmd_file",
        "peekOfCode": "class HelloWorld(cmd.Cmd):\n    # Disable rawinput module use\n    use_rawinput = False\n    # Do not show a prompt after each command read\n    prompt = \"\"\n    def do_greet(self, line):\n        print(\"hello,\", line)\n    def do_EOF(self, line):\n        return True\nif __name__ == \"__main__\":",
        "detail": "mid-range.cmd_file",
        "documentation": {}
    },
    {
        "label": "Illustrate",
        "kind": 6,
        "importPath": "mid-range.cmd_illustrate_methods",
        "description": "mid-range.cmd_illustrate_methods",
        "peekOfCode": "class Illustrate(cmd.Cmd):\n    \"Illustrate the base class method use.\"\n    def cmdloop(self, intro=None):\n        print(\"cmdloop({})\".format(intro))\n        return cmd.Cmd.cmdloop(self, intro)\n    def preloop(self):\n        print(\"preloop()\")\n    def postloop(self):\n        print(\"postloop()\")\n    def parseline(self, line):",
        "detail": "mid-range.cmd_illustrate_methods",
        "documentation": {}
    },
    {
        "label": "HelloWorld",
        "kind": 6,
        "importPath": "mid-range.cmd_simple",
        "description": "mid-range.cmd_simple",
        "peekOfCode": "class HelloWorld(cmd.Cmd):\n    def do_greet(self, line):\n        print(\"hello\")\n    def do_EOF(self, line):\n        return True\nif __name__ == \"__main__\":\n    HelloWorld().cmdloop()",
        "detail": "mid-range.cmd_simple",
        "documentation": {}
    },
    {
        "label": "fetch_last_half_hour",
        "kind": 2,
        "importPath": "mid-range.co2_emission",
        "description": "mid-range.co2_emission",
        "peekOfCode": "def fetch_last_half_hour() -> str:\n    last_half_hour = requests.get(BASE_URL).json()[\"data\"][0]\n    return last_half_hour[\"intensity\"][\"actual\"]\n# Emissions in a specific date range\ndef fetch_from_to(start, end) -> list:\n    return requests.get(f\"{BASE_URL}/{start}/{end}\").json()[\"data\"]\nif __name__ == \"__main__\":\n    for entry in fetch_from_to(start=date(2020, 10, 1), end=date(2020, 10, 3)):\n        print(\"from {from} to {to}: {intensity[actual]}\".format(**entry))\n    print(f\"{fetch_last_half_hour() = }\")",
        "detail": "mid-range.co2_emission",
        "documentation": {}
    },
    {
        "label": "fetch_from_to",
        "kind": 2,
        "importPath": "mid-range.co2_emission",
        "description": "mid-range.co2_emission",
        "peekOfCode": "def fetch_from_to(start, end) -> list:\n    return requests.get(f\"{BASE_URL}/{start}/{end}\").json()[\"data\"]\nif __name__ == \"__main__\":\n    for entry in fetch_from_to(start=date(2020, 10, 1), end=date(2020, 10, 3)):\n        print(\"from {from} to {to}: {intensity[actual]}\".format(**entry))\n    print(f\"{fetch_last_half_hour() = }\")",
        "detail": "mid-range.co2_emission",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "mid-range.co2_emission",
        "description": "mid-range.co2_emission",
        "peekOfCode": "BASE_URL = \"https://api.carbonintensity.org.uk/intensity\"\n# Emission in the last half hour\ndef fetch_last_half_hour() -> str:\n    last_half_hour = requests.get(BASE_URL).json()[\"data\"][0]\n    return last_half_hour[\"intensity\"][\"actual\"]\n# Emissions in a specific date range\ndef fetch_from_to(start, end) -> list:\n    return requests.get(f\"{BASE_URL}/{start}/{end}\").json()[\"data\"]\nif __name__ == \"__main__\":\n    for entry in fetch_from_to(start=date(2020, 10, 1), end=date(2020, 10, 3)):",
        "detail": "mid-range.co2_emission",
        "documentation": {}
    },
    {
        "label": "cocktail_shaker_sort",
        "kind": 2,
        "importPath": "mid-range.cocktail_shaker_sort",
        "description": "mid-range.cocktail_shaker_sort",
        "peekOfCode": "def cocktail_shaker_sort(arr):\n    \"\"\"\n    Cocktail_shaker_sort\n    Sorting a given array\n    mutation of bubble sort\n    reference: https://en.wikipedia.org/wiki/Cocktail_shaker_sort\n    Worst-case performance: O(N^2)\n    \"\"\"\n    def swap(i, j):\n        arr[i], arr[j] = arr[j], arr[i]",
        "detail": "mid-range.cocktail_shaker_sort",
        "documentation": {}
    },
    {
        "label": "cocktail_sort",
        "kind": 2,
        "importPath": "mid-range.cocktail_sort",
        "description": "mid-range.cocktail_sort",
        "peekOfCode": "def cocktail_sort(collection):\n    counter = 0\n    length = len(collection)\n    left, right = 0, length - 1\n    while left <= right:\n        for i in range(left, right, +1):\n            if collection[i] > collection[i + 1]:\n                collection[i], collection[i + 1] = collection[i + 1], collection[i]\n        right -= 1\n        for i in range(right, left, -1):",
        "detail": "mid-range.cocktail_sort",
        "documentation": {}
    },
    {
        "label": "visualization",
        "kind": 2,
        "importPath": "mid-range.cocktail_sort",
        "description": "mid-range.cocktail_sort",
        "peekOfCode": "def visualization():\n    length = 10\n    collection = [randint(0, length) for _ in range(length)]\n    print(\"Initial list:\", collection)\n    print(\"Visualization of algorithm work.\")\n    collection, counter = cocktail_sort(collection)\n    print(\"Final list:\", collection)\n    print(\"Total numbers of passages:\", counter)\ndef main():\n    elapsed_time = timeit.timeit(visualization, number=1)",
        "detail": "mid-range.cocktail_sort",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.cocktail_sort",
        "description": "mid-range.cocktail_sort",
        "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
        "detail": "mid-range.cocktail_sort",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "mid-range.code",
        "description": "mid-range.code",
        "peekOfCode": "names = []\nphone_numbers = []\nnum = int(input())\nfor i in range(num):\n    name = input(\"Name: \")\n    phone_number = input(\n        \"Phone Number: \"\n    )  # for convert to int => int(input(\"Phone Number: \"))\n    names.append(name)\n    phone_numbers.append(phone_number)",
        "detail": "mid-range.code",
        "documentation": {}
    },
    {
        "label": "phone_numbers",
        "kind": 5,
        "importPath": "mid-range.code",
        "description": "mid-range.code",
        "peekOfCode": "phone_numbers = []\nnum = int(input())\nfor i in range(num):\n    name = input(\"Name: \")\n    phone_number = input(\n        \"Phone Number: \"\n    )  # for convert to int => int(input(\"Phone Number: \"))\n    names.append(name)\n    phone_numbers.append(phone_number)\nprint(\"\\nName\\t\\t\\tPhone Number\\n\")",
        "detail": "mid-range.code",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "mid-range.code",
        "description": "mid-range.code",
        "peekOfCode": "num = int(input())\nfor i in range(num):\n    name = input(\"Name: \")\n    phone_number = input(\n        \"Phone Number: \"\n    )  # for convert to int => int(input(\"Phone Number: \"))\n    names.append(name)\n    phone_numbers.append(phone_number)\nprint(\"\\nName\\t\\t\\tPhone Number\\n\")\nfor i in range(num):",
        "detail": "mid-range.code",
        "documentation": {}
    },
    {
        "label": "search_term",
        "kind": 5,
        "importPath": "mid-range.code",
        "description": "mid-range.code",
        "peekOfCode": "search_term = input(\"\\nEnter search term: \")\nprint(\"Search result:\")\nif search_term in names:\n    index = names.index(search_term)\n    phone_number = phone_numbers[index]\n    print(\"Name: {}, Phone Number: {}\".format(search_term, phone_number))\nelse:\n    print(\"Name Not Found\")",
        "detail": "mid-range.code",
        "documentation": {}
    },
    {
        "label": "BOM_TYPES",
        "kind": 5,
        "importPath": "mid-range.codecs_bom",
        "description": "mid-range.codecs_bom",
        "peekOfCode": "BOM_TYPES = [\n    \"BOM\",\n    \"BOM_BE\",\n    \"BOM_LE\",\n    \"BOM_UTF8\",\n    \"BOM_UTF16\",\n    \"BOM_UTF16_BE\",\n    \"BOM_UTF16_LE\",\n    \"BOM_UTF32\",\n    \"BOM_UTF32_BE\",",
        "detail": "mid-range.codecs_bom",
        "documentation": {}
    },
    {
        "label": "encoded_text",
        "kind": 5,
        "importPath": "mid-range.codecs_bom_create_file",
        "description": "mid-range.codecs_bom_create_file",
        "peekOfCode": "encoded_text = \"français\".encode(encoding)\nprint(\"{:14}: {}\".format(encoding, to_hex(encoded_text, 2)))\nwith open(\"nonnative-encoded.txt\", mode=\"wb\") as f:\n    # Write the selected byte-order marker.  It is not included\n    # in the encoded text because the byte order was given\n    # explicitly when selecting the encoding.\n    f.write(bom)\n    # Write the byte string for the encoded text.\n    f.write(encoded_text)",
        "detail": "mid-range.codecs_bom_create_file",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "mid-range.codecs_decode",
        "description": "mid-range.codecs_decode",
        "peekOfCode": "text = \"français\"\nencoded = text.encode(\"utf-8\")\ndecoded = encoded.decode(\"utf-8\")\nprint(\"Original :\", repr(text))\nprint(\"Encoded  :\", to_hex(encoded, 1), type(encoded))\nprint(\"Decoded  :\", repr(decoded), type(decoded))",
        "detail": "mid-range.codecs_decode",
        "documentation": {}
    },
    {
        "label": "encoded",
        "kind": 5,
        "importPath": "mid-range.codecs_decode",
        "description": "mid-range.codecs_decode",
        "peekOfCode": "encoded = text.encode(\"utf-8\")\ndecoded = encoded.decode(\"utf-8\")\nprint(\"Original :\", repr(text))\nprint(\"Encoded  :\", to_hex(encoded, 1), type(encoded))\nprint(\"Decoded  :\", repr(decoded), type(decoded))",
        "detail": "mid-range.codecs_decode",
        "documentation": {}
    },
    {
        "label": "decoded",
        "kind": 5,
        "importPath": "mid-range.codecs_decode",
        "description": "mid-range.codecs_decode",
        "peekOfCode": "decoded = encoded.decode(\"utf-8\")\nprint(\"Original :\", repr(text))\nprint(\"Encoded  :\", to_hex(encoded, 1), type(encoded))\nprint(\"Decoded  :\", repr(decoded), type(decoded))",
        "detail": "mid-range.codecs_decode",
        "documentation": {}
    },
    {
        "label": "error_handling",
        "kind": 5,
        "importPath": "mid-range.codecs_decode_error",
        "description": "mid-range.codecs_decode_error",
        "peekOfCode": "error_handling = sys.argv[1]\ntext = \"français\"\nprint(\"Original     :\", repr(text))\n# Save the data with one encoding\nwith codecs.open(\"decode_error.txt\", \"w\", encoding=\"utf-16\") as f:\n    f.write(text)\n# Dump the bytes from the file\nwith open(\"decode_error.txt\", \"rb\") as f:\n    print(\"File contents:\", to_hex(f.read(), 1))\n# Try to read the data with the wrong encoding",
        "detail": "mid-range.codecs_decode_error",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "mid-range.codecs_decode_error",
        "description": "mid-range.codecs_decode_error",
        "peekOfCode": "text = \"français\"\nprint(\"Original     :\", repr(text))\n# Save the data with one encoding\nwith codecs.open(\"decode_error.txt\", \"w\", encoding=\"utf-16\") as f:\n    f.write(text)\n# Dump the bytes from the file\nwith open(\"decode_error.txt\", \"rb\") as f:\n    print(\"File contents:\", to_hex(f.read(), 1))\n# Try to read the data with the wrong encoding\nwith codecs.open(\"decode_error.txt\", \"r\", encoding=\"utf-8\", errors=error_handling) as f:",
        "detail": "mid-range.codecs_decode_error",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.codecs_encodedfile",
        "description": "mid-range.codecs_encodedfile",
        "peekOfCode": "data = \"français\"\n# Manually encode it as UTF-8.\nutf8 = data.encode(\"utf-8\")\nprint(\"Start as UTF-8   :\", to_hex(utf8, 1))\n# Set up an output buffer, then wrap it as an EncodedFile.\noutput = io.BytesIO()\nencoded_file = codecs.EncodedFile(output, data_encoding=\"utf-8\", file_encoding=\"utf-16\")\nencoded_file.write(utf8)\n# Fetch the buffer contents as a UTF-16 encoded byte string\nutf16 = output.getvalue()",
        "detail": "mid-range.codecs_encodedfile",
        "documentation": {}
    },
    {
        "label": "utf8",
        "kind": 5,
        "importPath": "mid-range.codecs_encodedfile",
        "description": "mid-range.codecs_encodedfile",
        "peekOfCode": "utf8 = data.encode(\"utf-8\")\nprint(\"Start as UTF-8   :\", to_hex(utf8, 1))\n# Set up an output buffer, then wrap it as an EncodedFile.\noutput = io.BytesIO()\nencoded_file = codecs.EncodedFile(output, data_encoding=\"utf-8\", file_encoding=\"utf-16\")\nencoded_file.write(utf8)\n# Fetch the buffer contents as a UTF-16 encoded byte string\nutf16 = output.getvalue()\nprint(\"Encoded to UTF-16:\", to_hex(utf16, 2))\n# Set up another buffer with the UTF-16 data for reading,",
        "detail": "mid-range.codecs_encodedfile",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "mid-range.codecs_encodedfile",
        "description": "mid-range.codecs_encodedfile",
        "peekOfCode": "output = io.BytesIO()\nencoded_file = codecs.EncodedFile(output, data_encoding=\"utf-8\", file_encoding=\"utf-16\")\nencoded_file.write(utf8)\n# Fetch the buffer contents as a UTF-16 encoded byte string\nutf16 = output.getvalue()\nprint(\"Encoded to UTF-16:\", to_hex(utf16, 2))\n# Set up another buffer with the UTF-16 data for reading,\n# and wrap it with another EncodedFile.\nbuffer = io.BytesIO(utf16)\nencoded_file = codecs.EncodedFile(buffer, data_encoding=\"utf-8\", file_encoding=\"utf-16\")",
        "detail": "mid-range.codecs_encodedfile",
        "documentation": {}
    },
    {
        "label": "encoded_file",
        "kind": 5,
        "importPath": "mid-range.codecs_encodedfile",
        "description": "mid-range.codecs_encodedfile",
        "peekOfCode": "encoded_file = codecs.EncodedFile(output, data_encoding=\"utf-8\", file_encoding=\"utf-16\")\nencoded_file.write(utf8)\n# Fetch the buffer contents as a UTF-16 encoded byte string\nutf16 = output.getvalue()\nprint(\"Encoded to UTF-16:\", to_hex(utf16, 2))\n# Set up another buffer with the UTF-16 data for reading,\n# and wrap it with another EncodedFile.\nbuffer = io.BytesIO(utf16)\nencoded_file = codecs.EncodedFile(buffer, data_encoding=\"utf-8\", file_encoding=\"utf-16\")\n# Read the UTF-8 encoded version of the data.",
        "detail": "mid-range.codecs_encodedfile",
        "documentation": {}
    },
    {
        "label": "utf16",
        "kind": 5,
        "importPath": "mid-range.codecs_encodedfile",
        "description": "mid-range.codecs_encodedfile",
        "peekOfCode": "utf16 = output.getvalue()\nprint(\"Encoded to UTF-16:\", to_hex(utf16, 2))\n# Set up another buffer with the UTF-16 data for reading,\n# and wrap it with another EncodedFile.\nbuffer = io.BytesIO(utf16)\nencoded_file = codecs.EncodedFile(buffer, data_encoding=\"utf-8\", file_encoding=\"utf-16\")\n# Read the UTF-8 encoded version of the data.\nrecoded = encoded_file.read()\nprint(\"Back to UTF-8    :\", to_hex(recoded, 1))",
        "detail": "mid-range.codecs_encodedfile",
        "documentation": {}
    },
    {
        "label": "buffer",
        "kind": 5,
        "importPath": "mid-range.codecs_encodedfile",
        "description": "mid-range.codecs_encodedfile",
        "peekOfCode": "buffer = io.BytesIO(utf16)\nencoded_file = codecs.EncodedFile(buffer, data_encoding=\"utf-8\", file_encoding=\"utf-16\")\n# Read the UTF-8 encoded version of the data.\nrecoded = encoded_file.read()\nprint(\"Back to UTF-8    :\", to_hex(recoded, 1))",
        "detail": "mid-range.codecs_encodedfile",
        "documentation": {}
    },
    {
        "label": "encoded_file",
        "kind": 5,
        "importPath": "mid-range.codecs_encodedfile",
        "description": "mid-range.codecs_encodedfile",
        "peekOfCode": "encoded_file = codecs.EncodedFile(buffer, data_encoding=\"utf-8\", file_encoding=\"utf-16\")\n# Read the UTF-8 encoded version of the data.\nrecoded = encoded_file.read()\nprint(\"Back to UTF-8    :\", to_hex(recoded, 1))",
        "detail": "mid-range.codecs_encodedfile",
        "documentation": {}
    },
    {
        "label": "recoded",
        "kind": 5,
        "importPath": "mid-range.codecs_encodedfile",
        "description": "mid-range.codecs_encodedfile",
        "peekOfCode": "recoded = encoded_file.read()\nprint(\"Back to UTF-8    :\", to_hex(recoded, 1))",
        "detail": "mid-range.codecs_encodedfile",
        "documentation": {}
    },
    {
        "label": "error_handling",
        "kind": 5,
        "importPath": "mid-range.codecs_encode_error",
        "description": "mid-range.codecs_encode_error",
        "peekOfCode": "error_handling = sys.argv[1]\ntext = \"français\"\ntry:\n    # Save the data, encoded as ASCII, using the error\n    # handling mode specified on the command line.\n    with codecs.open(\n        \"encode_error.txt\", \"w\", encoding=\"ascii\", errors=error_handling\n    ) as f:\n        f.write(text)\nexcept UnicodeEncodeError as err:",
        "detail": "mid-range.codecs_encode_error",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "mid-range.codecs_encode_error",
        "description": "mid-range.codecs_encode_error",
        "peekOfCode": "text = \"français\"\ntry:\n    # Save the data, encoded as ASCII, using the error\n    # handling mode specified on the command line.\n    with codecs.open(\n        \"encode_error.txt\", \"w\", encoding=\"ascii\", errors=error_handling\n    ) as f:\n        f.write(text)\nexcept UnicodeEncodeError as err:\n    print(\"ERROR:\", err)",
        "detail": "mid-range.codecs_encode_error",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "mid-range.codecs_encodings",
        "description": "mid-range.codecs_encodings",
        "peekOfCode": "text = \"français\"\nprint(\"Raw   : {!r}\".format(text))\nfor c in text:\n    print(\"  {!r}: {}\".format(c, unicodedata.name(c, c)))\nprint(\"UTF-8 : {!r}\".format(to_hex(text.encode(\"utf-8\"), 1)))\nprint(\"UTF-16: {!r}\".format(to_hex(text.encode(\"utf-16\"), 2)))",
        "detail": "mid-range.codecs_encodings",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "mid-range.codecs_incremental_bz2",
        "description": "mid-range.codecs_incremental_bz2",
        "peekOfCode": "text = b\"abcdefghijklmnopqrstuvwxyz\\n\"\nrepetitions = 50\nprint(\"Text length :\", len(text))\nprint(\"Repetitions :\", repetitions)\nprint(\"Expected len:\", len(text) * repetitions)\n# Encode the text several times to build up a\n# large amount of data\nencoder = codecs.getincrementalencoder(\"bz2\")()\nencoded = []\nprint()",
        "detail": "mid-range.codecs_incremental_bz2",
        "documentation": {}
    },
    {
        "label": "repetitions",
        "kind": 5,
        "importPath": "mid-range.codecs_incremental_bz2",
        "description": "mid-range.codecs_incremental_bz2",
        "peekOfCode": "repetitions = 50\nprint(\"Text length :\", len(text))\nprint(\"Repetitions :\", repetitions)\nprint(\"Expected len:\", len(text) * repetitions)\n# Encode the text several times to build up a\n# large amount of data\nencoder = codecs.getincrementalencoder(\"bz2\")()\nencoded = []\nprint()\nprint(\"Encoding:\", end=\" \")",
        "detail": "mid-range.codecs_incremental_bz2",
        "documentation": {}
    },
    {
        "label": "encoder",
        "kind": 5,
        "importPath": "mid-range.codecs_incremental_bz2",
        "description": "mid-range.codecs_incremental_bz2",
        "peekOfCode": "encoder = codecs.getincrementalencoder(\"bz2\")()\nencoded = []\nprint()\nprint(\"Encoding:\", end=\" \")\nlast = repetitions - 1\nfor i in range(repetitions):\n    en_c = encoder.encode(text, final=(i == last))\n    if en_c:\n        print(\"\\nEncoded : {} bytes\".format(len(en_c)))\n        encoded.append(en_c)",
        "detail": "mid-range.codecs_incremental_bz2",
        "documentation": {}
    },
    {
        "label": "encoded",
        "kind": 5,
        "importPath": "mid-range.codecs_incremental_bz2",
        "description": "mid-range.codecs_incremental_bz2",
        "peekOfCode": "encoded = []\nprint()\nprint(\"Encoding:\", end=\" \")\nlast = repetitions - 1\nfor i in range(repetitions):\n    en_c = encoder.encode(text, final=(i == last))\n    if en_c:\n        print(\"\\nEncoded : {} bytes\".format(len(en_c)))\n        encoded.append(en_c)\n    else:",
        "detail": "mid-range.codecs_incremental_bz2",
        "documentation": {}
    },
    {
        "label": "last",
        "kind": 5,
        "importPath": "mid-range.codecs_incremental_bz2",
        "description": "mid-range.codecs_incremental_bz2",
        "peekOfCode": "last = repetitions - 1\nfor i in range(repetitions):\n    en_c = encoder.encode(text, final=(i == last))\n    if en_c:\n        print(\"\\nEncoded : {} bytes\".format(len(en_c)))\n        encoded.append(en_c)\n    else:\n        sys.stdout.write(\".\")\nall_encoded = b\"\".join(encoded)\nprint()",
        "detail": "mid-range.codecs_incremental_bz2",
        "documentation": {}
    },
    {
        "label": "all_encoded",
        "kind": 5,
        "importPath": "mid-range.codecs_incremental_bz2",
        "description": "mid-range.codecs_incremental_bz2",
        "peekOfCode": "all_encoded = b\"\".join(encoded)\nprint()\nprint(\"Total encoded length:\", len(all_encoded))\nprint()\n# Decode the byte string one byte at a time\ndecoder = codecs.getincrementaldecoder(\"bz2\")()\ndecoded = []\nprint(\"Decoding:\", end=\" \")\nfor i, b in enumerate(all_encoded):\n    final = (i + 1) == len(text)",
        "detail": "mid-range.codecs_incremental_bz2",
        "documentation": {}
    },
    {
        "label": "decoder",
        "kind": 5,
        "importPath": "mid-range.codecs_incremental_bz2",
        "description": "mid-range.codecs_incremental_bz2",
        "peekOfCode": "decoder = codecs.getincrementaldecoder(\"bz2\")()\ndecoded = []\nprint(\"Decoding:\", end=\" \")\nfor i, b in enumerate(all_encoded):\n    final = (i + 1) == len(text)\n    c = decoder.decode(bytes([b]), final)\n    if c:\n        print(\"\\nDecoded : {} characters\".format(len(c)))\n        print(\"Decoding:\", end=\" \")\n        decoded.append(c)",
        "detail": "mid-range.codecs_incremental_bz2",
        "documentation": {}
    },
    {
        "label": "decoded",
        "kind": 5,
        "importPath": "mid-range.codecs_incremental_bz2",
        "description": "mid-range.codecs_incremental_bz2",
        "peekOfCode": "decoded = []\nprint(\"Decoding:\", end=\" \")\nfor i, b in enumerate(all_encoded):\n    final = (i + 1) == len(text)\n    c = decoder.decode(bytes([b]), final)\n    if c:\n        print(\"\\nDecoded : {} characters\".format(len(c)))\n        print(\"Decoding:\", end=\" \")\n        decoded.append(c)\n    else:",
        "detail": "mid-range.codecs_incremental_bz2",
        "documentation": {}
    },
    {
        "label": "restored",
        "kind": 5,
        "importPath": "mid-range.codecs_incremental_bz2",
        "description": "mid-range.codecs_incremental_bz2",
        "peekOfCode": "restored = b\"\".join(decoded)\nprint()\nprint(\"Total uncompressed length:\", len(restored))",
        "detail": "mid-range.codecs_incremental_bz2",
        "documentation": {}
    },
    {
        "label": "invertcaps",
        "kind": 2,
        "importPath": "mid-range.codecs_invertcaps",
        "description": "mid-range.codecs_invertcaps",
        "peekOfCode": "def invertcaps(text):\n    \"\"\"Return new string with the case of all letters switched.\n    \"\"\"\n    return \"\".join(\n        c.upper()\n        if c in string.ascii_lowercase\n        else c.lower()\n        if c in string.ascii_uppercase\n        else c\n        for c in text",
        "detail": "mid-range.codecs_invertcaps",
        "documentation": {}
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "mid-range.codecs_invertcaps_charmap",
        "description": "mid-range.codecs_invertcaps_charmap",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\n# Make a list of pairs of ordinal values for the lower\n# and uppercase letters\npairs = list(\n    zip(\n        [ord(c) for c in string.ascii_lowercase],\n        [ord(c) for c in string.ascii_uppercase],\n    )\n)\n# Modify the mapping to convert upper to lower and",
        "detail": "mid-range.codecs_invertcaps_charmap",
        "documentation": {}
    },
    {
        "label": "pairs",
        "kind": 5,
        "importPath": "mid-range.codecs_invertcaps_charmap",
        "description": "mid-range.codecs_invertcaps_charmap",
        "peekOfCode": "pairs = list(\n    zip(\n        [ord(c) for c in string.ascii_lowercase],\n        [ord(c) for c in string.ascii_uppercase],\n    )\n)\n# Modify the mapping to convert upper to lower and\n# lower to upper.\ndecoding_map.update({upper: lower for (lower, upper) in pairs})\ndecoding_map.update({lower: upper for (lower, upper) in pairs})",
        "detail": "mid-range.codecs_invertcaps_charmap",
        "documentation": {}
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "mid-range.codecs_invertcaps_charmap",
        "description": "mid-range.codecs_invertcaps_charmap",
        "peekOfCode": "encoding_map = codecs.make_encoding_map(decoding_map)\nif __name__ == \"__main__\":\n    print(codecs.charmap_encode(\"abcDEF\", \"strict\", encoding_map))\n    print(codecs.charmap_decode(b\"abcDEF\", \"strict\", decoding_map))\n    print(encoding_map == decoding_map)",
        "detail": "mid-range.codecs_invertcaps_charmap",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "mid-range.codecs_invertcaps_error",
        "description": "mid-range.codecs_invertcaps_error",
        "peekOfCode": "text = \"pi: \\u03c0\"\nfor error in [\"ignore\", \"replace\", \"strict\"]:\n    try:\n        encoded = codecs.charmap_encode(text, error, encoding_map)\n    except UnicodeEncodeError as err:\n        encoded = str(err)\n    print(\"{:7}: {}\".format(error, encoded))",
        "detail": "mid-range.codecs_invertcaps_error",
        "documentation": {}
    },
    {
        "label": "encoding",
        "kind": 5,
        "importPath": "mid-range.codecs_open_read",
        "description": "mid-range.codecs_open_read",
        "peekOfCode": "encoding = sys.argv[1]\nfilename = encoding + \".txt\"\nprint(\"Reading from\", filename)\nwith codecs.open(filename, mode=\"r\", encoding=encoding) as f:\n    print(repr(f.read()))",
        "detail": "mid-range.codecs_open_read",
        "documentation": {}
    },
    {
        "label": "filename",
        "kind": 5,
        "importPath": "mid-range.codecs_open_read",
        "description": "mid-range.codecs_open_read",
        "peekOfCode": "filename = encoding + \".txt\"\nprint(\"Reading from\", filename)\nwith codecs.open(filename, mode=\"r\", encoding=encoding) as f:\n    print(repr(f.read()))",
        "detail": "mid-range.codecs_open_read",
        "documentation": {}
    },
    {
        "label": "encoding",
        "kind": 5,
        "importPath": "mid-range.codecs_open_write",
        "description": "mid-range.codecs_open_write",
        "peekOfCode": "encoding = sys.argv[1]\nfilename = encoding + \".txt\"\nprint(\"Writing to\", filename)\nwith codecs.open(filename, mode=\"w\", encoding=encoding) as f:\n    f.write(\"français\")\n# Determine the byte grouping to use for to_hex()\nnbytes = {\"utf-8\": 1, \"utf-16\": 2, \"utf-32\": 4}.get(encoding, 1)\n# Show the raw bytes in the file\nprint(\"File contents:\")\nwith open(filename, mode=\"rb\") as f:",
        "detail": "mid-range.codecs_open_write",
        "documentation": {}
    },
    {
        "label": "filename",
        "kind": 5,
        "importPath": "mid-range.codecs_open_write",
        "description": "mid-range.codecs_open_write",
        "peekOfCode": "filename = encoding + \".txt\"\nprint(\"Writing to\", filename)\nwith codecs.open(filename, mode=\"w\", encoding=encoding) as f:\n    f.write(\"français\")\n# Determine the byte grouping to use for to_hex()\nnbytes = {\"utf-8\": 1, \"utf-16\": 2, \"utf-32\": 4}.get(encoding, 1)\n# Show the raw bytes in the file\nprint(\"File contents:\")\nwith open(filename, mode=\"rb\") as f:\n    print(to_hex(f.read(), nbytes))",
        "detail": "mid-range.codecs_open_write",
        "documentation": {}
    },
    {
        "label": "nbytes",
        "kind": 5,
        "importPath": "mid-range.codecs_open_write",
        "description": "mid-range.codecs_open_write",
        "peekOfCode": "nbytes = {\"utf-8\": 1, \"utf-16\": 2, \"utf-32\": 4}.get(encoding, 1)\n# Show the raw bytes in the file\nprint(\"File contents:\")\nwith open(filename, mode=\"rb\") as f:\n    print(to_hex(f.read(), nbytes))",
        "detail": "mid-range.codecs_open_write",
        "documentation": {}
    },
    {
        "label": "search1",
        "kind": 2,
        "importPath": "mid-range.codecs_register",
        "description": "mid-range.codecs_register",
        "peekOfCode": "def search1(encoding):\n    print(\"search1: Searching for:\", encoding)\n    return None\ndef search2(encoding):\n    print(\"search2: Searching for:\", encoding)\n    return None\ncodecs.register(search1)\ncodecs.register(search2)\nutf8 = codecs.lookup(\"utf-8\")\nprint(\"UTF-8:\", utf8)",
        "detail": "mid-range.codecs_register",
        "documentation": {}
    },
    {
        "label": "search2",
        "kind": 2,
        "importPath": "mid-range.codecs_register",
        "description": "mid-range.codecs_register",
        "peekOfCode": "def search2(encoding):\n    print(\"search2: Searching for:\", encoding)\n    return None\ncodecs.register(search1)\ncodecs.register(search2)\nutf8 = codecs.lookup(\"utf-8\")\nprint(\"UTF-8:\", utf8)\ntry:\n    unknown = codecs.lookup(\"no-such-encoding\")\nexcept LookupError as err:",
        "detail": "mid-range.codecs_register",
        "documentation": {}
    },
    {
        "label": "utf8",
        "kind": 5,
        "importPath": "mid-range.codecs_register",
        "description": "mid-range.codecs_register",
        "peekOfCode": "utf8 = codecs.lookup(\"utf-8\")\nprint(\"UTF-8:\", utf8)\ntry:\n    unknown = codecs.lookup(\"no-such-encoding\")\nexcept LookupError as err:\n    print(\"ERROR:\", err)",
        "detail": "mid-range.codecs_register",
        "documentation": {}
    },
    {
        "label": "buffer",
        "kind": 5,
        "importPath": "mid-range.codecs_rot13",
        "description": "mid-range.codecs_rot13",
        "peekOfCode": "buffer = io.StringIO()\nstream = codecs.getwriter(\"rot_13\")(buffer)\ntext = \"abcdefghijklmnopqrstuvwxyz\"\nstream.write(text)\nstream.flush()\nprint(\"Original:\", text)\nprint(\"ROT-13  :\", buffer.getvalue())",
        "detail": "mid-range.codecs_rot13",
        "documentation": {}
    },
    {
        "label": "stream",
        "kind": 5,
        "importPath": "mid-range.codecs_rot13",
        "description": "mid-range.codecs_rot13",
        "peekOfCode": "stream = codecs.getwriter(\"rot_13\")(buffer)\ntext = \"abcdefghijklmnopqrstuvwxyz\"\nstream.write(text)\nstream.flush()\nprint(\"Original:\", text)\nprint(\"ROT-13  :\", buffer.getvalue())",
        "detail": "mid-range.codecs_rot13",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "mid-range.codecs_rot13",
        "description": "mid-range.codecs_rot13",
        "peekOfCode": "text = \"abcdefghijklmnopqrstuvwxyz\"\nstream.write(text)\nstream.flush()\nprint(\"Original:\", text)\nprint(\"ROT-13  :\", buffer.getvalue())",
        "detail": "mid-range.codecs_rot13",
        "documentation": {}
    },
    {
        "label": "Echo",
        "kind": 6,
        "importPath": "mid-range.codecs_socket_fail",
        "description": "mid-range.codecs_socket_fail",
        "peekOfCode": "class Echo(socketserver.BaseRequestHandler):\n    def handle(self):\n        # Get some bytes and echo them back to the client.\n        data = self.request.recv(1024)\n        self.request.send(data)\n        return\nif __name__ == \"__main__\":\n    import codecs\n    import socket\n    import threading",
        "detail": "mid-range.codecs_socket_fail",
        "documentation": {}
    },
    {
        "label": "to_hex",
        "kind": 2,
        "importPath": "mid-range.codecs_to_hex",
        "description": "mid-range.codecs_to_hex",
        "peekOfCode": "def to_hex(t, nbytes):\n    \"\"\"Format text t as a sequence of nbyte long values\n    separated by spaces.\n    \"\"\"\n    chars_per_item = nbytes * 2\n    hex_version = binascii.hexlify(t)\n    return b\" \".join(\n        hex_version[start : start + chars_per_item]\n        for start in range(0, len(hex_version), chars_per_item)\n    )",
        "detail": "mid-range.codecs_to_hex",
        "documentation": {}
    },
    {
        "label": "buffer",
        "kind": 5,
        "importPath": "mid-range.codecs_zlib",
        "description": "mid-range.codecs_zlib",
        "peekOfCode": "buffer = io.BytesIO()\nstream = codecs.getwriter(\"zlib\")(buffer)\ntext = b\"abcdefghijklmnopqrstuvwxyz\\n\" * 50\nstream.write(text)\nstream.flush()\nprint(\"Original length :\", len(text))\ncompressed_data = buffer.getvalue()\nprint(\"ZIP compressed  :\", len(compressed_data))\nbuffer = io.BytesIO(compressed_data)\nstream = codecs.getreader(\"zlib\")(buffer)",
        "detail": "mid-range.codecs_zlib",
        "documentation": {}
    },
    {
        "label": "stream",
        "kind": 5,
        "importPath": "mid-range.codecs_zlib",
        "description": "mid-range.codecs_zlib",
        "peekOfCode": "stream = codecs.getwriter(\"zlib\")(buffer)\ntext = b\"abcdefghijklmnopqrstuvwxyz\\n\" * 50\nstream.write(text)\nstream.flush()\nprint(\"Original length :\", len(text))\ncompressed_data = buffer.getvalue()\nprint(\"ZIP compressed  :\", len(compressed_data))\nbuffer = io.BytesIO(compressed_data)\nstream = codecs.getreader(\"zlib\")(buffer)\nfirst_line = stream.readline()",
        "detail": "mid-range.codecs_zlib",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "mid-range.codecs_zlib",
        "description": "mid-range.codecs_zlib",
        "peekOfCode": "text = b\"abcdefghijklmnopqrstuvwxyz\\n\" * 50\nstream.write(text)\nstream.flush()\nprint(\"Original length :\", len(text))\ncompressed_data = buffer.getvalue()\nprint(\"ZIP compressed  :\", len(compressed_data))\nbuffer = io.BytesIO(compressed_data)\nstream = codecs.getreader(\"zlib\")(buffer)\nfirst_line = stream.readline()\nprint(\"Read first line :\", repr(first_line))",
        "detail": "mid-range.codecs_zlib",
        "documentation": {}
    },
    {
        "label": "compressed_data",
        "kind": 5,
        "importPath": "mid-range.codecs_zlib",
        "description": "mid-range.codecs_zlib",
        "peekOfCode": "compressed_data = buffer.getvalue()\nprint(\"ZIP compressed  :\", len(compressed_data))\nbuffer = io.BytesIO(compressed_data)\nstream = codecs.getreader(\"zlib\")(buffer)\nfirst_line = stream.readline()\nprint(\"Read first line :\", repr(first_line))\nuncompressed_data = first_line + stream.read()\nprint(\"Uncompressed    :\", len(uncompressed_data))\nprint(\"Same            :\", text == uncompressed_data)",
        "detail": "mid-range.codecs_zlib",
        "documentation": {}
    },
    {
        "label": "buffer",
        "kind": 5,
        "importPath": "mid-range.codecs_zlib",
        "description": "mid-range.codecs_zlib",
        "peekOfCode": "buffer = io.BytesIO(compressed_data)\nstream = codecs.getreader(\"zlib\")(buffer)\nfirst_line = stream.readline()\nprint(\"Read first line :\", repr(first_line))\nuncompressed_data = first_line + stream.read()\nprint(\"Uncompressed    :\", len(uncompressed_data))\nprint(\"Same            :\", text == uncompressed_data)",
        "detail": "mid-range.codecs_zlib",
        "documentation": {}
    },
    {
        "label": "stream",
        "kind": 5,
        "importPath": "mid-range.codecs_zlib",
        "description": "mid-range.codecs_zlib",
        "peekOfCode": "stream = codecs.getreader(\"zlib\")(buffer)\nfirst_line = stream.readline()\nprint(\"Read first line :\", repr(first_line))\nuncompressed_data = first_line + stream.read()\nprint(\"Uncompressed    :\", len(uncompressed_data))\nprint(\"Same            :\", text == uncompressed_data)",
        "detail": "mid-range.codecs_zlib",
        "documentation": {}
    },
    {
        "label": "first_line",
        "kind": 5,
        "importPath": "mid-range.codecs_zlib",
        "description": "mid-range.codecs_zlib",
        "peekOfCode": "first_line = stream.readline()\nprint(\"Read first line :\", repr(first_line))\nuncompressed_data = first_line + stream.read()\nprint(\"Uncompressed    :\", len(uncompressed_data))\nprint(\"Same            :\", text == uncompressed_data)",
        "detail": "mid-range.codecs_zlib",
        "documentation": {}
    },
    {
        "label": "uncompressed_data",
        "kind": 5,
        "importPath": "mid-range.codecs_zlib",
        "description": "mid-range.codecs_zlib",
        "peekOfCode": "uncompressed_data = first_line + stream.read()\nprint(\"Uncompressed    :\", len(uncompressed_data))\nprint(\"Same            :\", text == uncompressed_data)",
        "detail": "mid-range.codecs_zlib",
        "documentation": {}
    },
    {
        "label": "code_ctor",
        "kind": 2,
        "importPath": "mid-range.codeutil",
        "description": "mid-range.codeutil",
        "peekOfCode": "def code_ctor(*args):\n    return types.CodeType(*args)\ndef reduce_code(co):\n    args = [\n        co.co_argcount,\n        co.co_nlocals,\n        co.co_stacksize,\n        co.co_flags,\n        co.co_code,\n        co.co_consts,",
        "detail": "mid-range.codeutil",
        "documentation": {}
    },
    {
        "label": "reduce_code",
        "kind": 2,
        "importPath": "mid-range.codeutil",
        "description": "mid-range.codeutil",
        "peekOfCode": "def reduce_code(co):\n    args = [\n        co.co_argcount,\n        co.co_nlocals,\n        co.co_stacksize,\n        co.co_flags,\n        co.co_code,\n        co.co_consts,\n        co.co_names,\n        co.co_varnames,",
        "detail": "mid-range.codeutil",
        "documentation": {}
    },
    {
        "label": "coinFlip",
        "kind": 2,
        "importPath": "mid-range.Coin-Flip",
        "description": "mid-range.Coin-Flip",
        "peekOfCode": "def coinFlip(I, N, Q):\n    if N % 2 == 0:\n        return N // 2\n    else:\n        if I == 1:\n            if Q == 1:\n                return N // 2\n            else:\n                return (N // 2) + 1\n        else:",
        "detail": "mid-range.Coin-Flip",
        "documentation": {}
    },
    {
        "label": "dp_count",
        "kind": 2,
        "importPath": "mid-range.coin_change",
        "description": "mid-range.coin_change",
        "peekOfCode": "def dp_count(S, m, n):\n    table = [0] * (n + 1)\n    # Base case (If given value is 0)\n    table[0] = 1\n    # Pick all coins one by one and update table[] values\n    # after the index greater than or equal to the value of the\n    # picked coin\n    for i in range(0, m):\n        for j in range(S[i], n + 1):\n            table[j] += table[j - S[i]]",
        "detail": "mid-range.coin_change",
        "documentation": {}
    },
    {
        "label": "collatz_conjecture",
        "kind": 2,
        "importPath": "mid-range.collatz_sequence",
        "description": "mid-range.collatz_sequence",
        "peekOfCode": "def collatz_conjecture(n):\n    if n < 1: \n    \traise Exception(\"\\n  Expected a value greater than 1\")\n    while n != 1:\n\t\tif n % 2 == 0:\n\t\t\tn = n // 2\n\t\telse: n = 3*n + 1\n\t\tyield n\n# If n will be negative then\n# sequence will be infinite",
        "detail": "mid-range.collatz_sequence",
        "documentation": {}
    },
    {
        "label": "\t\t\tn",
        "kind": 5,
        "importPath": "mid-range.collatz_sequence",
        "description": "mid-range.collatz_sequence",
        "peekOfCode": "\t\t\tn = n // 2\n\t\telse: n = 3*n + 1\n\t\tyield n\n# If n will be negative then\n# sequence will be infinite\n# Interface\n# Test/Play\ni = 0\nwhile True:\n\tif raw_input(\"\\n[%i] Continue[Y/n]?: \" % i).strip().lower() == \"y\":",
        "detail": "mid-range.collatz_sequence",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "mid-range.collatz_sequence",
        "description": "mid-range.collatz_sequence",
        "peekOfCode": "i = 0\nwhile True:\n\tif raw_input(\"\\n[%i] Continue[Y/n]?: \" % i).strip().lower() == \"y\":\n\t\tfor v in collatz_conjecture(int(raw_input(\"N?: \"))):\n\t\t\tprint(\"  > \" + str(v))\n\t\ti += 1\n\telse:\n\t\tprint(\"\\nSee you soon!\")\n\t\tsys.exit(0)",
        "detail": "mid-range.collatz_sequence",
        "documentation": {}
    },
    {
        "label": "FakeCollectModule",
        "kind": 6,
        "importPath": "mid-range.collect",
        "description": "mid-range.collect",
        "peekOfCode": "class FakeCollectModule(ModuleType):\n    def __init__(self) -> None:\n        super().__init__(\"pytest.collect\")\n        self.__all__ = list(COLLECT_FAKEMODULE_ATTRIBUTES)\n        self.__pytest = pytest\n    def __dir__(self) -> List[str]:\n        return dir(super()) + self.__all__\n    def __getattr__(self, name: str) -> Any:\n        if name not in self.__all__:\n            raise AttributeError(name)",
        "detail": "mid-range.collect",
        "documentation": {}
    },
    {
        "label": "COLLECT_FAKEMODULE_ATTRIBUTES",
        "kind": 5,
        "importPath": "mid-range.collect",
        "description": "mid-range.collect",
        "peekOfCode": "COLLECT_FAKEMODULE_ATTRIBUTES = [\n    \"Collector\",\n    \"Module\",\n    \"Function\",\n    \"Instance\",\n    \"Session\",\n    \"Item\",\n    \"Class\",\n    \"File\",\n    \"_fillfuncargs\",",
        "detail": "mid-range.collect",
        "documentation": {}
    },
    {
        "label": "sys.modules[\"pytest.collect\"]",
        "kind": 5,
        "importPath": "mid-range.collect",
        "description": "mid-range.collect",
        "peekOfCode": "sys.modules[\"pytest.collect\"] = FakeCollectModule()",
        "detail": "mid-range.collect",
        "documentation": {}
    },
    {
        "label": "CollectingReporter",
        "kind": 6,
        "importPath": "mid-range.collecting_reporter",
        "description": "mid-range.collecting_reporter",
        "peekOfCode": "class CollectingReporter(BaseReporter):\n    \"\"\"collects messages\"\"\"\n    name = \"collector\"\n    def __init__(self):\n        BaseReporter.__init__(self)\n        self.messages = []\n    def reset(self):\n        self.messages = []\n    _display = None",
        "detail": "mid-range.collecting_reporter",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.collections_abc",
        "description": "mid-range.collections_abc",
        "peekOfCode": "__all__ = [\"Mapping\", \"Sequence\"]\ntry:\n    from collections.abc import Mapping, Sequence\nexcept ImportError:\n    from collections import Mapping, Sequence",
        "detail": "mid-range.collections_abc",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_new_child",
        "description": "mid-range.collections_chainmap_new_child",
        "peekOfCode": "a = {\"a\": \"A\", \"c\": \"C\"}\nb = {\"b\": \"B\", \"c\": \"D\"}\nm1 = collections.ChainMap(a, b)\nm2 = m1.new_child()\nprint(\"m1 before:\", m1)\nprint(\"m2 before:\", m2)\nm2[\"c\"] = \"E\"\nprint(\"m1 after:\", m1)\nprint(\"m2 after:\", m2)",
        "detail": "mid-range.collections_chainmap_new_child",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_new_child",
        "description": "mid-range.collections_chainmap_new_child",
        "peekOfCode": "b = {\"b\": \"B\", \"c\": \"D\"}\nm1 = collections.ChainMap(a, b)\nm2 = m1.new_child()\nprint(\"m1 before:\", m1)\nprint(\"m2 before:\", m2)\nm2[\"c\"] = \"E\"\nprint(\"m1 after:\", m1)\nprint(\"m2 after:\", m2)",
        "detail": "mid-range.collections_chainmap_new_child",
        "documentation": {}
    },
    {
        "label": "m1",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_new_child",
        "description": "mid-range.collections_chainmap_new_child",
        "peekOfCode": "m1 = collections.ChainMap(a, b)\nm2 = m1.new_child()\nprint(\"m1 before:\", m1)\nprint(\"m2 before:\", m2)\nm2[\"c\"] = \"E\"\nprint(\"m1 after:\", m1)\nprint(\"m2 after:\", m2)",
        "detail": "mid-range.collections_chainmap_new_child",
        "documentation": {}
    },
    {
        "label": "m2",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_new_child",
        "description": "mid-range.collections_chainmap_new_child",
        "peekOfCode": "m2 = m1.new_child()\nprint(\"m1 before:\", m1)\nprint(\"m2 before:\", m2)\nm2[\"c\"] = \"E\"\nprint(\"m1 after:\", m1)\nprint(\"m2 after:\", m2)",
        "detail": "mid-range.collections_chainmap_new_child",
        "documentation": {}
    },
    {
        "label": "m2[\"c\"]",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_new_child",
        "description": "mid-range.collections_chainmap_new_child",
        "peekOfCode": "m2[\"c\"] = \"E\"\nprint(\"m1 after:\", m1)\nprint(\"m2 after:\", m2)",
        "detail": "mid-range.collections_chainmap_new_child",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_new_child_explicit",
        "description": "mid-range.collections_chainmap_new_child_explicit",
        "peekOfCode": "a = {\"a\": \"A\", \"c\": \"C\"}\nb = {\"b\": \"B\", \"c\": \"D\"}\nc = {\"c\": \"E\"}\nm1 = collections.ChainMap(a, b)\nm2 = m1.new_child(c)\nprint('m1[\"c\"] = {}'.format(m1[\"c\"]))\nprint('m2[\"c\"] = {}'.format(m2[\"c\"]))",
        "detail": "mid-range.collections_chainmap_new_child_explicit",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_new_child_explicit",
        "description": "mid-range.collections_chainmap_new_child_explicit",
        "peekOfCode": "b = {\"b\": \"B\", \"c\": \"D\"}\nc = {\"c\": \"E\"}\nm1 = collections.ChainMap(a, b)\nm2 = m1.new_child(c)\nprint('m1[\"c\"] = {}'.format(m1[\"c\"]))\nprint('m2[\"c\"] = {}'.format(m2[\"c\"]))",
        "detail": "mid-range.collections_chainmap_new_child_explicit",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_new_child_explicit",
        "description": "mid-range.collections_chainmap_new_child_explicit",
        "peekOfCode": "c = {\"c\": \"E\"}\nm1 = collections.ChainMap(a, b)\nm2 = m1.new_child(c)\nprint('m1[\"c\"] = {}'.format(m1[\"c\"]))\nprint('m2[\"c\"] = {}'.format(m2[\"c\"]))",
        "detail": "mid-range.collections_chainmap_new_child_explicit",
        "documentation": {}
    },
    {
        "label": "m1",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_new_child_explicit",
        "description": "mid-range.collections_chainmap_new_child_explicit",
        "peekOfCode": "m1 = collections.ChainMap(a, b)\nm2 = m1.new_child(c)\nprint('m1[\"c\"] = {}'.format(m1[\"c\"]))\nprint('m2[\"c\"] = {}'.format(m2[\"c\"]))",
        "detail": "mid-range.collections_chainmap_new_child_explicit",
        "documentation": {}
    },
    {
        "label": "m2",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_new_child_explicit",
        "description": "mid-range.collections_chainmap_new_child_explicit",
        "peekOfCode": "m2 = m1.new_child(c)\nprint('m1[\"c\"] = {}'.format(m1[\"c\"]))\nprint('m2[\"c\"] = {}'.format(m2[\"c\"]))",
        "detail": "mid-range.collections_chainmap_new_child_explicit",
        "documentation": {}
    },
    {
        "label": "print('m1[\"c\"]",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_new_child_explicit",
        "description": "mid-range.collections_chainmap_new_child_explicit",
        "peekOfCode": "print('m1[\"c\"] = {}'.format(m1[\"c\"]))\nprint('m2[\"c\"] = {}'.format(m2[\"c\"]))",
        "detail": "mid-range.collections_chainmap_new_child_explicit",
        "documentation": {}
    },
    {
        "label": "print('m2[\"c\"]",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_new_child_explicit",
        "description": "mid-range.collections_chainmap_new_child_explicit",
        "peekOfCode": "print('m2[\"c\"] = {}'.format(m2[\"c\"]))",
        "detail": "mid-range.collections_chainmap_new_child_explicit",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_read",
        "description": "mid-range.collections_chainmap_read",
        "peekOfCode": "a = {\"a\": \"A\", \"c\": \"C\"}\nb = {\"b\": \"B\", \"c\": \"D\"}\nm = collections.ChainMap(a, b)\nprint(\"Individual Values\")\nprint(\"a = {}\".format(m[\"a\"]))\nprint(\"b = {}\".format(m[\"b\"]))\nprint(\"c = {}\".format(m[\"c\"]))\nprint()\nprint(\"Keys = {}\".format(list(m.keys())))\nprint(\"Values = {}\".format(list(m.values())))",
        "detail": "mid-range.collections_chainmap_read",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_read",
        "description": "mid-range.collections_chainmap_read",
        "peekOfCode": "b = {\"b\": \"B\", \"c\": \"D\"}\nm = collections.ChainMap(a, b)\nprint(\"Individual Values\")\nprint(\"a = {}\".format(m[\"a\"]))\nprint(\"b = {}\".format(m[\"b\"]))\nprint(\"c = {}\".format(m[\"c\"]))\nprint()\nprint(\"Keys = {}\".format(list(m.keys())))\nprint(\"Values = {}\".format(list(m.values())))\nprint()",
        "detail": "mid-range.collections_chainmap_read",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_read",
        "description": "mid-range.collections_chainmap_read",
        "peekOfCode": "m = collections.ChainMap(a, b)\nprint(\"Individual Values\")\nprint(\"a = {}\".format(m[\"a\"]))\nprint(\"b = {}\".format(m[\"b\"]))\nprint(\"c = {}\".format(m[\"c\"]))\nprint()\nprint(\"Keys = {}\".format(list(m.keys())))\nprint(\"Values = {}\".format(list(m.values())))\nprint()\nprint(\"Items:\")",
        "detail": "mid-range.collections_chainmap_read",
        "documentation": {}
    },
    {
        "label": "print(\"a",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_read",
        "description": "mid-range.collections_chainmap_read",
        "peekOfCode": "print(\"a = {}\".format(m[\"a\"]))\nprint(\"b = {}\".format(m[\"b\"]))\nprint(\"c = {}\".format(m[\"c\"]))\nprint()\nprint(\"Keys = {}\".format(list(m.keys())))\nprint(\"Values = {}\".format(list(m.values())))\nprint()\nprint(\"Items:\")\nfor k, v in m.items():\n    print(\"{} = {}\".format(k, v))",
        "detail": "mid-range.collections_chainmap_read",
        "documentation": {}
    },
    {
        "label": "print(\"b",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_read",
        "description": "mid-range.collections_chainmap_read",
        "peekOfCode": "print(\"b = {}\".format(m[\"b\"]))\nprint(\"c = {}\".format(m[\"c\"]))\nprint()\nprint(\"Keys = {}\".format(list(m.keys())))\nprint(\"Values = {}\".format(list(m.values())))\nprint()\nprint(\"Items:\")\nfor k, v in m.items():\n    print(\"{} = {}\".format(k, v))\nprint()",
        "detail": "mid-range.collections_chainmap_read",
        "documentation": {}
    },
    {
        "label": "print(\"c",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_read",
        "description": "mid-range.collections_chainmap_read",
        "peekOfCode": "print(\"c = {}\".format(m[\"c\"]))\nprint()\nprint(\"Keys = {}\".format(list(m.keys())))\nprint(\"Values = {}\".format(list(m.values())))\nprint()\nprint(\"Items:\")\nfor k, v in m.items():\n    print(\"{} = {}\".format(k, v))\nprint()\nprint('\"d\" in m: {}'.format((\"d\" in m)))",
        "detail": "mid-range.collections_chainmap_read",
        "documentation": {}
    },
    {
        "label": "print(\"Keys",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_read",
        "description": "mid-range.collections_chainmap_read",
        "peekOfCode": "print(\"Keys = {}\".format(list(m.keys())))\nprint(\"Values = {}\".format(list(m.values())))\nprint()\nprint(\"Items:\")\nfor k, v in m.items():\n    print(\"{} = {}\".format(k, v))\nprint()\nprint('\"d\" in m: {}'.format((\"d\" in m)))",
        "detail": "mid-range.collections_chainmap_read",
        "documentation": {}
    },
    {
        "label": "print(\"Values",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_read",
        "description": "mid-range.collections_chainmap_read",
        "peekOfCode": "print(\"Values = {}\".format(list(m.values())))\nprint()\nprint(\"Items:\")\nfor k, v in m.items():\n    print(\"{} = {}\".format(k, v))\nprint()\nprint('\"d\" in m: {}'.format((\"d\" in m)))",
        "detail": "mid-range.collections_chainmap_read",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_reorder",
        "description": "mid-range.collections_chainmap_reorder",
        "peekOfCode": "a = {\"a\": \"A\", \"c\": \"C\"}\nb = {\"b\": \"B\", \"c\": \"D\"}\nm = collections.ChainMap(a, b)\nprint(m.maps)\nprint(\"c = {}\\n\".format(m[\"c\"]))\n# reverse the list\nm.maps = list(reversed(m.maps))\nprint(m.maps)\nprint(\"c = {}\".format(m[\"c\"]))",
        "detail": "mid-range.collections_chainmap_reorder",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_reorder",
        "description": "mid-range.collections_chainmap_reorder",
        "peekOfCode": "b = {\"b\": \"B\", \"c\": \"D\"}\nm = collections.ChainMap(a, b)\nprint(m.maps)\nprint(\"c = {}\\n\".format(m[\"c\"]))\n# reverse the list\nm.maps = list(reversed(m.maps))\nprint(m.maps)\nprint(\"c = {}\".format(m[\"c\"]))",
        "detail": "mid-range.collections_chainmap_reorder",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_reorder",
        "description": "mid-range.collections_chainmap_reorder",
        "peekOfCode": "m = collections.ChainMap(a, b)\nprint(m.maps)\nprint(\"c = {}\\n\".format(m[\"c\"]))\n# reverse the list\nm.maps = list(reversed(m.maps))\nprint(m.maps)\nprint(\"c = {}\".format(m[\"c\"]))",
        "detail": "mid-range.collections_chainmap_reorder",
        "documentation": {}
    },
    {
        "label": "print(\"c",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_reorder",
        "description": "mid-range.collections_chainmap_reorder",
        "peekOfCode": "print(\"c = {}\\n\".format(m[\"c\"]))\n# reverse the list\nm.maps = list(reversed(m.maps))\nprint(m.maps)\nprint(\"c = {}\".format(m[\"c\"]))",
        "detail": "mid-range.collections_chainmap_reorder",
        "documentation": {}
    },
    {
        "label": "m.maps",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_reorder",
        "description": "mid-range.collections_chainmap_reorder",
        "peekOfCode": "m.maps = list(reversed(m.maps))\nprint(m.maps)\nprint(\"c = {}\".format(m[\"c\"]))",
        "detail": "mid-range.collections_chainmap_reorder",
        "documentation": {}
    },
    {
        "label": "print(\"c",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_reorder",
        "description": "mid-range.collections_chainmap_reorder",
        "peekOfCode": "print(\"c = {}\".format(m[\"c\"]))",
        "detail": "mid-range.collections_chainmap_reorder",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_update_behind",
        "description": "mid-range.collections_chainmap_update_behind",
        "peekOfCode": "a = {\"a\": \"A\", \"c\": \"C\"}\nb = {\"b\": \"B\", \"c\": \"D\"}\nm = collections.ChainMap(a, b)\nprint(\"Before: {}\".format(m[\"c\"]))\na[\"c\"] = \"E\"\nprint(\"After : {}\".format(m[\"c\"]))",
        "detail": "mid-range.collections_chainmap_update_behind",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_update_behind",
        "description": "mid-range.collections_chainmap_update_behind",
        "peekOfCode": "b = {\"b\": \"B\", \"c\": \"D\"}\nm = collections.ChainMap(a, b)\nprint(\"Before: {}\".format(m[\"c\"]))\na[\"c\"] = \"E\"\nprint(\"After : {}\".format(m[\"c\"]))",
        "detail": "mid-range.collections_chainmap_update_behind",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_update_behind",
        "description": "mid-range.collections_chainmap_update_behind",
        "peekOfCode": "m = collections.ChainMap(a, b)\nprint(\"Before: {}\".format(m[\"c\"]))\na[\"c\"] = \"E\"\nprint(\"After : {}\".format(m[\"c\"]))",
        "detail": "mid-range.collections_chainmap_update_behind",
        "documentation": {}
    },
    {
        "label": "a[\"c\"]",
        "kind": 5,
        "importPath": "mid-range.collections_chainmap_update_behind",
        "description": "mid-range.collections_chainmap_update_behind",
        "peekOfCode": "a[\"c\"] = \"E\"\nprint(\"After : {}\".format(m[\"c\"]))",
        "detail": "mid-range.collections_chainmap_update_behind",
        "documentation": {}
    },
    {
        "label": "c1",
        "kind": 5,
        "importPath": "mid-range.collections_counter_arithmetic",
        "description": "mid-range.collections_counter_arithmetic",
        "peekOfCode": "c1 = collections.Counter([\"a\", \"b\", \"c\", \"a\", \"b\", \"b\"])\nc2 = collections.Counter(\"alphabet\")\nprint(\"C1:\", c1)\nprint(\"C2:\", c2)\nprint(\"\\nCombined counts:\")\nprint(c1 + c2)\nprint(\"\\nSubtraction:\")\nprint(c1 - c2)\nprint(\"\\nIntersection (taking positive minimums):\")\nprint(c1 & c2)",
        "detail": "mid-range.collections_counter_arithmetic",
        "documentation": {}
    },
    {
        "label": "c2",
        "kind": 5,
        "importPath": "mid-range.collections_counter_arithmetic",
        "description": "mid-range.collections_counter_arithmetic",
        "peekOfCode": "c2 = collections.Counter(\"alphabet\")\nprint(\"C1:\", c1)\nprint(\"C2:\", c2)\nprint(\"\\nCombined counts:\")\nprint(c1 + c2)\nprint(\"\\nSubtraction:\")\nprint(c1 - c2)\nprint(\"\\nIntersection (taking positive minimums):\")\nprint(c1 & c2)\nprint(\"\\nUnion (taking maximums):\")",
        "detail": "mid-range.collections_counter_arithmetic",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.collections_counter_elements",
        "description": "mid-range.collections_counter_elements",
        "peekOfCode": "c = collections.Counter(\"extremely\")\nc[\"z\"] = 0\nprint(c)\nprint(list(c.elements()))",
        "detail": "mid-range.collections_counter_elements",
        "documentation": {}
    },
    {
        "label": "c[\"z\"]",
        "kind": 5,
        "importPath": "mid-range.collections_counter_elements",
        "description": "mid-range.collections_counter_elements",
        "peekOfCode": "c[\"z\"] = 0\nprint(c)\nprint(list(c.elements()))",
        "detail": "mid-range.collections_counter_elements",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.collections_counter_get_values",
        "description": "mid-range.collections_counter_get_values",
        "peekOfCode": "c = collections.Counter(\"abcdaab\")\nfor letter in \"abcde\":\n    print(\"{} : {}\".format(letter, c[letter]))",
        "detail": "mid-range.collections_counter_get_values",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.collections_counter_most_common",
        "description": "mid-range.collections_counter_most_common",
        "peekOfCode": "c = collections.Counter()\nwith open(\"/usr/share/dict/words\", \"rt\") as f:\n    for line in f:\n        c.update(line.rstrip().lower())\nprint(\"Most common:\")\nfor letter, count in c.most_common(3):\n    print(\"{}: {:>7}\".format(letter, count))",
        "detail": "mid-range.collections_counter_most_common",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.collections_counter_update",
        "description": "mid-range.collections_counter_update",
        "peekOfCode": "c = collections.Counter()\nprint(\"Initial :\", c)\nc.update(\"abcdaab\")\nprint(\"Sequence:\", c)\nc.update({\"a\": 1, \"d\": 5})\nprint(\"Dict    :\", c)",
        "detail": "mid-range.collections_counter_update",
        "documentation": {}
    },
    {
        "label": "default_factory",
        "kind": 2,
        "importPath": "mid-range.collections_defaultdict",
        "description": "mid-range.collections_defaultdict",
        "peekOfCode": "def default_factory():\n    return \"default value\"\nd = collections.defaultdict(default_factory, foo=\"bar\")\nprint(\"d:\", d)\nprint(\"foo =>\", d[\"foo\"])\nprint(\"bar =>\", d[\"bar\"])",
        "detail": "mid-range.collections_defaultdict",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.collections_defaultdict",
        "description": "mid-range.collections_defaultdict",
        "peekOfCode": "d = collections.defaultdict(default_factory, foo=\"bar\")\nprint(\"d:\", d)\nprint(\"foo =>\", d[\"foo\"])\nprint(\"bar =>\", d[\"bar\"])",
        "detail": "mid-range.collections_defaultdict",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.collections_deque",
        "description": "mid-range.collections_deque",
        "peekOfCode": "d = collections.deque(\"abcdefg\")\nprint(\"Deque:\", d)\nprint(\"Length:\", len(d))\nprint(\"Left end:\", d[0])\nprint(\"Right end:\", d[-1])\nd.remove(\"c\")\nprint(\"remove(c):\", d)",
        "detail": "mid-range.collections_deque",
        "documentation": {}
    },
    {
        "label": "burn",
        "kind": 2,
        "importPath": "mid-range.collections_deque_both_ends",
        "description": "mid-range.collections_deque_both_ends",
        "peekOfCode": "def burn(direction, nextSource):\n    while True:\n        try:\n            next = nextSource()\n        except IndexError:\n            break\n        else:\n            print(\"{:>8}: {}\".format(direction, next))\n            time.sleep(0.1)\n    print(\"{:>8} done\".format(direction))",
        "detail": "mid-range.collections_deque_both_ends",
        "documentation": {}
    },
    {
        "label": "candle",
        "kind": 5,
        "importPath": "mid-range.collections_deque_both_ends",
        "description": "mid-range.collections_deque_both_ends",
        "peekOfCode": "candle = collections.deque(range(5))\ndef burn(direction, nextSource):\n    while True:\n        try:\n            next = nextSource()\n        except IndexError:\n            break\n        else:\n            print(\"{:>8}: {}\".format(direction, next))\n            time.sleep(0.1)",
        "detail": "mid-range.collections_deque_both_ends",
        "documentation": {}
    },
    {
        "label": "left",
        "kind": 5,
        "importPath": "mid-range.collections_deque_both_ends",
        "description": "mid-range.collections_deque_both_ends",
        "peekOfCode": "left = threading.Thread(target=burn, args=(\"Left\", candle.popleft))\nright = threading.Thread(target=burn, args=(\"Right\", candle.pop))\nleft.start()\nright.start()\nleft.join()\nright.join()",
        "detail": "mid-range.collections_deque_both_ends",
        "documentation": {}
    },
    {
        "label": "right",
        "kind": 5,
        "importPath": "mid-range.collections_deque_both_ends",
        "description": "mid-range.collections_deque_both_ends",
        "peekOfCode": "right = threading.Thread(target=burn, args=(\"Right\", candle.pop))\nleft.start()\nright.start()\nleft.join()\nright.join()",
        "detail": "mid-range.collections_deque_both_ends",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.collections_deque_consuming",
        "description": "mid-range.collections_deque_consuming",
        "peekOfCode": "d = collections.deque(\"abcdefg\")\nwhile True:\n    try:\n        print(d.pop(), end=\"\")\n    except IndexError:\n        break\nprint()\nprint(\"\\nFrom the left:\")\nd = collections.deque(range(6))\nwhile True:",
        "detail": "mid-range.collections_deque_consuming",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.collections_deque_consuming",
        "description": "mid-range.collections_deque_consuming",
        "peekOfCode": "d = collections.deque(range(6))\nwhile True:\n    try:\n        print(d.popleft(), end=\"\")\n    except IndexError:\n        break\nprint()",
        "detail": "mid-range.collections_deque_consuming",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "mid-range.collections_deque_maxlen",
        "description": "mid-range.collections_deque_maxlen",
        "peekOfCode": "d1 = collections.deque(maxlen=3)\nd2 = collections.deque(maxlen=3)\nfor i in range(5):\n    n = random.randint(0, 100)\n    print(\"n =\", n)\n    d1.append(n)\n    d2.appendleft(n)\n    print(\"D1:\", d1)\n    print(\"D2:\", d2)",
        "detail": "mid-range.collections_deque_maxlen",
        "documentation": {}
    },
    {
        "label": "d2",
        "kind": 5,
        "importPath": "mid-range.collections_deque_maxlen",
        "description": "mid-range.collections_deque_maxlen",
        "peekOfCode": "d2 = collections.deque(maxlen=3)\nfor i in range(5):\n    n = random.randint(0, 100)\n    print(\"n =\", n)\n    d1.append(n)\n    d2.appendleft(n)\n    print(\"D1:\", d1)\n    print(\"D2:\", d2)",
        "detail": "mid-range.collections_deque_maxlen",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "mid-range.collections_deque_populating",
        "description": "mid-range.collections_deque_populating",
        "peekOfCode": "d1 = collections.deque()\nd1.extend(\"abcdefg\")\nprint(\"extend    :\", d1)\nd1.append(\"h\")\nprint(\"append    :\", d1)\n# Add to the left\nd2 = collections.deque()\nd2.extendleft(range(6))\nprint(\"extendleft:\", d2)\nd2.appendleft(6)",
        "detail": "mid-range.collections_deque_populating",
        "documentation": {}
    },
    {
        "label": "d2",
        "kind": 5,
        "importPath": "mid-range.collections_deque_populating",
        "description": "mid-range.collections_deque_populating",
        "peekOfCode": "d2 = collections.deque()\nd2.extendleft(range(6))\nprint(\"extendleft:\", d2)\nd2.appendleft(6)\nprint(\"appendleft:\", d2)",
        "detail": "mid-range.collections_deque_populating",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.collections_deque_rotate",
        "description": "mid-range.collections_deque_rotate",
        "peekOfCode": "d = collections.deque(range(10))\nprint(\"Normal        :\", d)\nd = collections.deque(range(10))\nd.rotate(2)\nprint(\"Right rotation:\", d)\nd = collections.deque(range(10))\nd.rotate(-2)\nprint(\"Left rotation :\", d)",
        "detail": "mid-range.collections_deque_rotate",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.collections_deque_rotate",
        "description": "mid-range.collections_deque_rotate",
        "peekOfCode": "d = collections.deque(range(10))\nd.rotate(2)\nprint(\"Right rotation:\", d)\nd = collections.deque(range(10))\nd.rotate(-2)\nprint(\"Left rotation :\", d)",
        "detail": "mid-range.collections_deque_rotate",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.collections_deque_rotate",
        "description": "mid-range.collections_deque_rotate",
        "peekOfCode": "d = collections.deque(range(10))\nd.rotate(-2)\nprint(\"Left rotation :\", d)",
        "detail": "mid-range.collections_deque_rotate",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 5,
        "importPath": "mid-range.collections_namedtuple_asdict",
        "description": "mid-range.collections_namedtuple_asdict",
        "peekOfCode": "Person = collections.namedtuple(\"Person\", \"name age\")\nbob = Person(name=\"Bob\", age=30)\nprint(\"Representation:\", bob)\nprint(\"As Dictionary:\", bob._asdict())",
        "detail": "mid-range.collections_namedtuple_asdict",
        "documentation": {}
    },
    {
        "label": "bob",
        "kind": 5,
        "importPath": "mid-range.collections_namedtuple_asdict",
        "description": "mid-range.collections_namedtuple_asdict",
        "peekOfCode": "bob = Person(name=\"Bob\", age=30)\nprint(\"Representation:\", bob)\nprint(\"As Dictionary:\", bob._asdict())",
        "detail": "mid-range.collections_namedtuple_asdict",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 5,
        "importPath": "mid-range.collections_namedtuple_fields",
        "description": "mid-range.collections_namedtuple_fields",
        "peekOfCode": "Person = collections.namedtuple(\"Person\", \"name age\")\nbob = Person(name=\"Bob\", age=30)\nprint(\"Representation:\", bob)\nprint(\"Fields:\", bob._fields)",
        "detail": "mid-range.collections_namedtuple_fields",
        "documentation": {}
    },
    {
        "label": "bob",
        "kind": 5,
        "importPath": "mid-range.collections_namedtuple_fields",
        "description": "mid-range.collections_namedtuple_fields",
        "peekOfCode": "bob = Person(name=\"Bob\", age=30)\nprint(\"Representation:\", bob)\nprint(\"Fields:\", bob._fields)",
        "detail": "mid-range.collections_namedtuple_fields",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 5,
        "importPath": "mid-range.collections_namedtuple_immutable",
        "description": "mid-range.collections_namedtuple_immutable",
        "peekOfCode": "Person = collections.namedtuple(\"Person\", \"name age\")\npat = Person(name=\"Pat\", age=12)\nprint(\"\\nRepresentation:\", pat)\npat.age = 21",
        "detail": "mid-range.collections_namedtuple_immutable",
        "documentation": {}
    },
    {
        "label": "pat",
        "kind": 5,
        "importPath": "mid-range.collections_namedtuple_immutable",
        "description": "mid-range.collections_namedtuple_immutable",
        "peekOfCode": "pat = Person(name=\"Pat\", age=12)\nprint(\"\\nRepresentation:\", pat)\npat.age = 21",
        "detail": "mid-range.collections_namedtuple_immutable",
        "documentation": {}
    },
    {
        "label": "pat.age",
        "kind": 5,
        "importPath": "mid-range.collections_namedtuple_immutable",
        "description": "mid-range.collections_namedtuple_immutable",
        "peekOfCode": "pat.age = 21",
        "detail": "mid-range.collections_namedtuple_immutable",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 5,
        "importPath": "mid-range.collections_namedtuple_person",
        "description": "mid-range.collections_namedtuple_person",
        "peekOfCode": "Person = collections.namedtuple(\"Person\", \"name age\")\nbob = Person(name=\"Bob\", age=30)\nprint(\"\\nRepresentation:\", bob)\njane = Person(name=\"Jane\", age=29)\nprint(\"\\nField by name:\", jane.name)\nprint(\"\\nFields by index:\")\nfor p in [bob, jane]:\n    print(\"{} is {} years old\".format(*p))",
        "detail": "mid-range.collections_namedtuple_person",
        "documentation": {}
    },
    {
        "label": "bob",
        "kind": 5,
        "importPath": "mid-range.collections_namedtuple_person",
        "description": "mid-range.collections_namedtuple_person",
        "peekOfCode": "bob = Person(name=\"Bob\", age=30)\nprint(\"\\nRepresentation:\", bob)\njane = Person(name=\"Jane\", age=29)\nprint(\"\\nField by name:\", jane.name)\nprint(\"\\nFields by index:\")\nfor p in [bob, jane]:\n    print(\"{} is {} years old\".format(*p))",
        "detail": "mid-range.collections_namedtuple_person",
        "documentation": {}
    },
    {
        "label": "jane",
        "kind": 5,
        "importPath": "mid-range.collections_namedtuple_person",
        "description": "mid-range.collections_namedtuple_person",
        "peekOfCode": "jane = Person(name=\"Jane\", age=29)\nprint(\"\\nField by name:\", jane.name)\nprint(\"\\nFields by index:\")\nfor p in [bob, jane]:\n    print(\"{} is {} years old\".format(*p))",
        "detail": "mid-range.collections_namedtuple_person",
        "documentation": {}
    },
    {
        "label": "with_class",
        "kind": 5,
        "importPath": "mid-range.collections_namedtuple_rename",
        "description": "mid-range.collections_namedtuple_rename",
        "peekOfCode": "with_class = collections.namedtuple(\"Person\", \"name class age\", rename=True)\nprint(with_class._fields)\ntwo_ages = collections.namedtuple(\"Person\", \"name age age\", rename=True)\nprint(two_ages._fields)",
        "detail": "mid-range.collections_namedtuple_rename",
        "documentation": {}
    },
    {
        "label": "two_ages",
        "kind": 5,
        "importPath": "mid-range.collections_namedtuple_rename",
        "description": "mid-range.collections_namedtuple_rename",
        "peekOfCode": "two_ages = collections.namedtuple(\"Person\", \"name age age\", rename=True)\nprint(two_ages._fields)",
        "detail": "mid-range.collections_namedtuple_rename",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 5,
        "importPath": "mid-range.collections_namedtuple_replace",
        "description": "mid-range.collections_namedtuple_replace",
        "peekOfCode": "Person = collections.namedtuple(\"Person\", \"name age\")\nbob = Person(name=\"Bob\", age=30)\nprint(\"\\nBefore:\", bob)\nbob2 = bob._replace(name=\"Robert\")\nprint(\"After:\", bob2)\nprint(\"Same?:\", bob is bob2)",
        "detail": "mid-range.collections_namedtuple_replace",
        "documentation": {}
    },
    {
        "label": "bob",
        "kind": 5,
        "importPath": "mid-range.collections_namedtuple_replace",
        "description": "mid-range.collections_namedtuple_replace",
        "peekOfCode": "bob = Person(name=\"Bob\", age=30)\nprint(\"\\nBefore:\", bob)\nbob2 = bob._replace(name=\"Robert\")\nprint(\"After:\", bob2)\nprint(\"Same?:\", bob is bob2)",
        "detail": "mid-range.collections_namedtuple_replace",
        "documentation": {}
    },
    {
        "label": "bob2",
        "kind": 5,
        "importPath": "mid-range.collections_namedtuple_replace",
        "description": "mid-range.collections_namedtuple_replace",
        "peekOfCode": "bob2 = bob._replace(name=\"Robert\")\nprint(\"After:\", bob2)\nprint(\"Same?:\", bob is bob2)",
        "detail": "mid-range.collections_namedtuple_replace",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_equality",
        "description": "mid-range.collections_ordereddict_equality",
        "peekOfCode": "d1 = {}\nd1[\"a\"] = \"A\"\nd1[\"b\"] = \"B\"\nd1[\"c\"] = \"C\"\nd2 = {}\nd2[\"c\"] = \"C\"\nd2[\"b\"] = \"B\"\nd2[\"a\"] = \"A\"\nprint(d1 == d2)\nprint(\"OrderedDict:\", end=\" \")",
        "detail": "mid-range.collections_ordereddict_equality",
        "documentation": {}
    },
    {
        "label": "d1[\"a\"]",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_equality",
        "description": "mid-range.collections_ordereddict_equality",
        "peekOfCode": "d1[\"a\"] = \"A\"\nd1[\"b\"] = \"B\"\nd1[\"c\"] = \"C\"\nd2 = {}\nd2[\"c\"] = \"C\"\nd2[\"b\"] = \"B\"\nd2[\"a\"] = \"A\"\nprint(d1 == d2)\nprint(\"OrderedDict:\", end=\" \")\nd1 = collections.OrderedDict()",
        "detail": "mid-range.collections_ordereddict_equality",
        "documentation": {}
    },
    {
        "label": "d1[\"b\"]",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_equality",
        "description": "mid-range.collections_ordereddict_equality",
        "peekOfCode": "d1[\"b\"] = \"B\"\nd1[\"c\"] = \"C\"\nd2 = {}\nd2[\"c\"] = \"C\"\nd2[\"b\"] = \"B\"\nd2[\"a\"] = \"A\"\nprint(d1 == d2)\nprint(\"OrderedDict:\", end=\" \")\nd1 = collections.OrderedDict()\nd1[\"a\"] = \"A\"",
        "detail": "mid-range.collections_ordereddict_equality",
        "documentation": {}
    },
    {
        "label": "d1[\"c\"]",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_equality",
        "description": "mid-range.collections_ordereddict_equality",
        "peekOfCode": "d1[\"c\"] = \"C\"\nd2 = {}\nd2[\"c\"] = \"C\"\nd2[\"b\"] = \"B\"\nd2[\"a\"] = \"A\"\nprint(d1 == d2)\nprint(\"OrderedDict:\", end=\" \")\nd1 = collections.OrderedDict()\nd1[\"a\"] = \"A\"\nd1[\"b\"] = \"B\"",
        "detail": "mid-range.collections_ordereddict_equality",
        "documentation": {}
    },
    {
        "label": "d2",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_equality",
        "description": "mid-range.collections_ordereddict_equality",
        "peekOfCode": "d2 = {}\nd2[\"c\"] = \"C\"\nd2[\"b\"] = \"B\"\nd2[\"a\"] = \"A\"\nprint(d1 == d2)\nprint(\"OrderedDict:\", end=\" \")\nd1 = collections.OrderedDict()\nd1[\"a\"] = \"A\"\nd1[\"b\"] = \"B\"\nd1[\"c\"] = \"C\"",
        "detail": "mid-range.collections_ordereddict_equality",
        "documentation": {}
    },
    {
        "label": "d2[\"c\"]",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_equality",
        "description": "mid-range.collections_ordereddict_equality",
        "peekOfCode": "d2[\"c\"] = \"C\"\nd2[\"b\"] = \"B\"\nd2[\"a\"] = \"A\"\nprint(d1 == d2)\nprint(\"OrderedDict:\", end=\" \")\nd1 = collections.OrderedDict()\nd1[\"a\"] = \"A\"\nd1[\"b\"] = \"B\"\nd1[\"c\"] = \"C\"\nd2 = collections.OrderedDict()",
        "detail": "mid-range.collections_ordereddict_equality",
        "documentation": {}
    },
    {
        "label": "d2[\"b\"]",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_equality",
        "description": "mid-range.collections_ordereddict_equality",
        "peekOfCode": "d2[\"b\"] = \"B\"\nd2[\"a\"] = \"A\"\nprint(d1 == d2)\nprint(\"OrderedDict:\", end=\" \")\nd1 = collections.OrderedDict()\nd1[\"a\"] = \"A\"\nd1[\"b\"] = \"B\"\nd1[\"c\"] = \"C\"\nd2 = collections.OrderedDict()\nd2[\"c\"] = \"C\"",
        "detail": "mid-range.collections_ordereddict_equality",
        "documentation": {}
    },
    {
        "label": "d2[\"a\"]",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_equality",
        "description": "mid-range.collections_ordereddict_equality",
        "peekOfCode": "d2[\"a\"] = \"A\"\nprint(d1 == d2)\nprint(\"OrderedDict:\", end=\" \")\nd1 = collections.OrderedDict()\nd1[\"a\"] = \"A\"\nd1[\"b\"] = \"B\"\nd1[\"c\"] = \"C\"\nd2 = collections.OrderedDict()\nd2[\"c\"] = \"C\"\nd2[\"b\"] = \"B\"",
        "detail": "mid-range.collections_ordereddict_equality",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_equality",
        "description": "mid-range.collections_ordereddict_equality",
        "peekOfCode": "d1 = collections.OrderedDict()\nd1[\"a\"] = \"A\"\nd1[\"b\"] = \"B\"\nd1[\"c\"] = \"C\"\nd2 = collections.OrderedDict()\nd2[\"c\"] = \"C\"\nd2[\"b\"] = \"B\"\nd2[\"a\"] = \"A\"\nprint(d1 == d2)",
        "detail": "mid-range.collections_ordereddict_equality",
        "documentation": {}
    },
    {
        "label": "d1[\"a\"]",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_equality",
        "description": "mid-range.collections_ordereddict_equality",
        "peekOfCode": "d1[\"a\"] = \"A\"\nd1[\"b\"] = \"B\"\nd1[\"c\"] = \"C\"\nd2 = collections.OrderedDict()\nd2[\"c\"] = \"C\"\nd2[\"b\"] = \"B\"\nd2[\"a\"] = \"A\"\nprint(d1 == d2)",
        "detail": "mid-range.collections_ordereddict_equality",
        "documentation": {}
    },
    {
        "label": "d1[\"b\"]",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_equality",
        "description": "mid-range.collections_ordereddict_equality",
        "peekOfCode": "d1[\"b\"] = \"B\"\nd1[\"c\"] = \"C\"\nd2 = collections.OrderedDict()\nd2[\"c\"] = \"C\"\nd2[\"b\"] = \"B\"\nd2[\"a\"] = \"A\"\nprint(d1 == d2)",
        "detail": "mid-range.collections_ordereddict_equality",
        "documentation": {}
    },
    {
        "label": "d1[\"c\"]",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_equality",
        "description": "mid-range.collections_ordereddict_equality",
        "peekOfCode": "d1[\"c\"] = \"C\"\nd2 = collections.OrderedDict()\nd2[\"c\"] = \"C\"\nd2[\"b\"] = \"B\"\nd2[\"a\"] = \"A\"\nprint(d1 == d2)",
        "detail": "mid-range.collections_ordereddict_equality",
        "documentation": {}
    },
    {
        "label": "d2",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_equality",
        "description": "mid-range.collections_ordereddict_equality",
        "peekOfCode": "d2 = collections.OrderedDict()\nd2[\"c\"] = \"C\"\nd2[\"b\"] = \"B\"\nd2[\"a\"] = \"A\"\nprint(d1 == d2)",
        "detail": "mid-range.collections_ordereddict_equality",
        "documentation": {}
    },
    {
        "label": "d2[\"c\"]",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_equality",
        "description": "mid-range.collections_ordereddict_equality",
        "peekOfCode": "d2[\"c\"] = \"C\"\nd2[\"b\"] = \"B\"\nd2[\"a\"] = \"A\"\nprint(d1 == d2)",
        "detail": "mid-range.collections_ordereddict_equality",
        "documentation": {}
    },
    {
        "label": "d2[\"b\"]",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_equality",
        "description": "mid-range.collections_ordereddict_equality",
        "peekOfCode": "d2[\"b\"] = \"B\"\nd2[\"a\"] = \"A\"\nprint(d1 == d2)",
        "detail": "mid-range.collections_ordereddict_equality",
        "documentation": {}
    },
    {
        "label": "d2[\"a\"]",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_equality",
        "description": "mid-range.collections_ordereddict_equality",
        "peekOfCode": "d2[\"a\"] = \"A\"\nprint(d1 == d2)",
        "detail": "mid-range.collections_ordereddict_equality",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_iter",
        "description": "mid-range.collections_ordereddict_iter",
        "peekOfCode": "d = {}\nd[\"a\"] = \"A\"\nd[\"b\"] = \"B\"\nd[\"c\"] = \"C\"\nfor k, v in d.items():\n    print(k, v)\nprint(\"\\nOrderedDict:\")\nd = collections.OrderedDict()\nd[\"a\"] = \"A\"\nd[\"b\"] = \"B\"",
        "detail": "mid-range.collections_ordereddict_iter",
        "documentation": {}
    },
    {
        "label": "d[\"a\"]",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_iter",
        "description": "mid-range.collections_ordereddict_iter",
        "peekOfCode": "d[\"a\"] = \"A\"\nd[\"b\"] = \"B\"\nd[\"c\"] = \"C\"\nfor k, v in d.items():\n    print(k, v)\nprint(\"\\nOrderedDict:\")\nd = collections.OrderedDict()\nd[\"a\"] = \"A\"\nd[\"b\"] = \"B\"\nd[\"c\"] = \"C\"",
        "detail": "mid-range.collections_ordereddict_iter",
        "documentation": {}
    },
    {
        "label": "d[\"b\"]",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_iter",
        "description": "mid-range.collections_ordereddict_iter",
        "peekOfCode": "d[\"b\"] = \"B\"\nd[\"c\"] = \"C\"\nfor k, v in d.items():\n    print(k, v)\nprint(\"\\nOrderedDict:\")\nd = collections.OrderedDict()\nd[\"a\"] = \"A\"\nd[\"b\"] = \"B\"\nd[\"c\"] = \"C\"\nfor k, v in d.items():",
        "detail": "mid-range.collections_ordereddict_iter",
        "documentation": {}
    },
    {
        "label": "d[\"c\"]",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_iter",
        "description": "mid-range.collections_ordereddict_iter",
        "peekOfCode": "d[\"c\"] = \"C\"\nfor k, v in d.items():\n    print(k, v)\nprint(\"\\nOrderedDict:\")\nd = collections.OrderedDict()\nd[\"a\"] = \"A\"\nd[\"b\"] = \"B\"\nd[\"c\"] = \"C\"\nfor k, v in d.items():\n    print(k, v)",
        "detail": "mid-range.collections_ordereddict_iter",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_iter",
        "description": "mid-range.collections_ordereddict_iter",
        "peekOfCode": "d = collections.OrderedDict()\nd[\"a\"] = \"A\"\nd[\"b\"] = \"B\"\nd[\"c\"] = \"C\"\nfor k, v in d.items():\n    print(k, v)",
        "detail": "mid-range.collections_ordereddict_iter",
        "documentation": {}
    },
    {
        "label": "d[\"a\"]",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_iter",
        "description": "mid-range.collections_ordereddict_iter",
        "peekOfCode": "d[\"a\"] = \"A\"\nd[\"b\"] = \"B\"\nd[\"c\"] = \"C\"\nfor k, v in d.items():\n    print(k, v)",
        "detail": "mid-range.collections_ordereddict_iter",
        "documentation": {}
    },
    {
        "label": "d[\"b\"]",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_iter",
        "description": "mid-range.collections_ordereddict_iter",
        "peekOfCode": "d[\"b\"] = \"B\"\nd[\"c\"] = \"C\"\nfor k, v in d.items():\n    print(k, v)",
        "detail": "mid-range.collections_ordereddict_iter",
        "documentation": {}
    },
    {
        "label": "d[\"c\"]",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_iter",
        "description": "mid-range.collections_ordereddict_iter",
        "peekOfCode": "d[\"c\"] = \"C\"\nfor k, v in d.items():\n    print(k, v)",
        "detail": "mid-range.collections_ordereddict_iter",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.collections_ordereddict_move_to_end",
        "description": "mid-range.collections_ordereddict_move_to_end",
        "peekOfCode": "d = collections.OrderedDict([(\"a\", \"A\"), (\"b\", \"B\"), (\"c\", \"C\")])\nprint(\"Before:\")\nfor k, v in d.items():\n    print(k, v)\nd.move_to_end(\"b\")\nprint(\"\\nmove_to_end():\")\nfor k, v in d.items():\n    print(k, v)\nd.move_to_end(\"b\", last=False)\nprint(\"\\nmove_to_end(last=False):\")",
        "detail": "mid-range.collections_ordereddict_move_to_end",
        "documentation": {}
    },
    {
        "label": "bob",
        "kind": 5,
        "importPath": "mid-range.collections_tuple",
        "description": "mid-range.collections_tuple",
        "peekOfCode": "bob = (\"Bob\", 30, \"male\")\nprint(\"Representation:\", bob)\njane = (\"Jane\", 29, \"female\")\nprint(\"\\nField by index:\", jane[0])\nprint(\"\\nFields by index:\")\nfor p in [bob, jane]:\n    print(\"{} is a {} year old {}\".format(*p))",
        "detail": "mid-range.collections_tuple",
        "documentation": {}
    },
    {
        "label": "jane",
        "kind": 5,
        "importPath": "mid-range.collections_tuple",
        "description": "mid-range.collections_tuple",
        "peekOfCode": "jane = (\"Jane\", 29, \"female\")\nprint(\"\\nField by index:\", jane[0])\nprint(\"\\nFields by index:\")\nfor p in [bob, jane]:\n    print(\"{} is a {} year old {}\".format(*p))",
        "detail": "mid-range.collections_tuple",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "mid-range.color",
        "description": "mid-range.color",
        "peekOfCode": "path = input(\"Please Enter the path of the image : \")\noriginalImage = cv2.imread(path)\ngrayImage = cv2.cvtColor(originalImage, cv2.COLOR_BGR2GRAY)\n(thresh, blackAndWhiteImage) = cv2.threshold(grayImage, 127, 255, cv2.THRESH_BINARY)\ncv2.imshow(\"Black white image\", blackAndWhiteImage)\ncv2.imshow(\"Original image\", originalImage)\ncv2.imshow(\"Gray image\", grayImage)\ncv2.waitKey(0)\ncv2.destroyAllWindows()",
        "detail": "mid-range.color",
        "documentation": {}
    },
    {
        "label": "originalImage",
        "kind": 5,
        "importPath": "mid-range.color",
        "description": "mid-range.color",
        "peekOfCode": "originalImage = cv2.imread(path)\ngrayImage = cv2.cvtColor(originalImage, cv2.COLOR_BGR2GRAY)\n(thresh, blackAndWhiteImage) = cv2.threshold(grayImage, 127, 255, cv2.THRESH_BINARY)\ncv2.imshow(\"Black white image\", blackAndWhiteImage)\ncv2.imshow(\"Original image\", originalImage)\ncv2.imshow(\"Gray image\", grayImage)\ncv2.waitKey(0)\ncv2.destroyAllWindows()",
        "detail": "mid-range.color",
        "documentation": {}
    },
    {
        "label": "grayImage",
        "kind": 5,
        "importPath": "mid-range.color",
        "description": "mid-range.color",
        "peekOfCode": "grayImage = cv2.cvtColor(originalImage, cv2.COLOR_BGR2GRAY)\n(thresh, blackAndWhiteImage) = cv2.threshold(grayImage, 127, 255, cv2.THRESH_BINARY)\ncv2.imshow(\"Black white image\", blackAndWhiteImage)\ncv2.imshow(\"Original image\", originalImage)\ncv2.imshow(\"Gray image\", grayImage)\ncv2.waitKey(0)\ncv2.destroyAllWindows()",
        "detail": "mid-range.color",
        "documentation": {}
    },
    {
        "label": "colorize",
        "kind": 2,
        "importPath": "mid-range.colorprint",
        "description": "mid-range.colorprint",
        "peekOfCode": "def colorize(text, color, is_bold=True):\n    if not os.isatty(sys.stdout.fileno()):\n        return text\n    t = ESCAPE_SEQ % COLORS[color]\n    if is_bold:\n        t += BOLD\n    t += text\n    t += RESET\n    return t",
        "detail": "mid-range.colorprint",
        "documentation": {}
    },
    {
        "label": "ESCAPE_SEQ",
        "kind": 5,
        "importPath": "mid-range.colorprint",
        "description": "mid-range.colorprint",
        "peekOfCode": "ESCAPE_SEQ = \"\\033[%dm\"\nBOLD = ESCAPE_SEQ % 1\nRESET = ESCAPE_SEQ % 0\nCOLORS = [\"black\", \"red\", \"green\", \"yellow\", \"blue\", \"magenta\", \"cyan\", \"white\"]\nCOLORS = dict((c, 30 + i) for i, c in enumerate(COLORS))\ndef colorize(text, color, is_bold=True):\n    if not os.isatty(sys.stdout.fileno()):\n        return text\n    t = ESCAPE_SEQ % COLORS[color]\n    if is_bold:",
        "detail": "mid-range.colorprint",
        "documentation": {}
    },
    {
        "label": "BOLD",
        "kind": 5,
        "importPath": "mid-range.colorprint",
        "description": "mid-range.colorprint",
        "peekOfCode": "BOLD = ESCAPE_SEQ % 1\nRESET = ESCAPE_SEQ % 0\nCOLORS = [\"black\", \"red\", \"green\", \"yellow\", \"blue\", \"magenta\", \"cyan\", \"white\"]\nCOLORS = dict((c, 30 + i) for i, c in enumerate(COLORS))\ndef colorize(text, color, is_bold=True):\n    if not os.isatty(sys.stdout.fileno()):\n        return text\n    t = ESCAPE_SEQ % COLORS[color]\n    if is_bold:\n        t += BOLD",
        "detail": "mid-range.colorprint",
        "documentation": {}
    },
    {
        "label": "RESET",
        "kind": 5,
        "importPath": "mid-range.colorprint",
        "description": "mid-range.colorprint",
        "peekOfCode": "RESET = ESCAPE_SEQ % 0\nCOLORS = [\"black\", \"red\", \"green\", \"yellow\", \"blue\", \"magenta\", \"cyan\", \"white\"]\nCOLORS = dict((c, 30 + i) for i, c in enumerate(COLORS))\ndef colorize(text, color, is_bold=True):\n    if not os.isatty(sys.stdout.fileno()):\n        return text\n    t = ESCAPE_SEQ % COLORS[color]\n    if is_bold:\n        t += BOLD\n    t += text",
        "detail": "mid-range.colorprint",
        "documentation": {}
    },
    {
        "label": "COLORS",
        "kind": 5,
        "importPath": "mid-range.colorprint",
        "description": "mid-range.colorprint",
        "peekOfCode": "COLORS = [\"black\", \"red\", \"green\", \"yellow\", \"blue\", \"magenta\", \"cyan\", \"white\"]\nCOLORS = dict((c, 30 + i) for i, c in enumerate(COLORS))\ndef colorize(text, color, is_bold=True):\n    if not os.isatty(sys.stdout.fileno()):\n        return text\n    t = ESCAPE_SEQ % COLORS[color]\n    if is_bold:\n        t += BOLD\n    t += text\n    t += RESET",
        "detail": "mid-range.colorprint",
        "documentation": {}
    },
    {
        "label": "COLORS",
        "kind": 5,
        "importPath": "mid-range.colorprint",
        "description": "mid-range.colorprint",
        "peekOfCode": "COLORS = dict((c, 30 + i) for i, c in enumerate(COLORS))\ndef colorize(text, color, is_bold=True):\n    if not os.isatty(sys.stdout.fileno()):\n        return text\n    t = ESCAPE_SEQ % COLORS[color]\n    if is_bold:\n        t += BOLD\n    t += text\n    t += RESET\n    return t",
        "detail": "mid-range.colorprint",
        "documentation": {}
    },
    {
        "label": "ColorDepth",
        "kind": 6,
        "importPath": "mid-range.color_depth",
        "description": "mid-range.color_depth",
        "peekOfCode": "class ColorDepth(str, Enum):\n    \"\"\"\n    Possible color depth values for the output.\n    \"\"\"\n    value: str\n    #: One color only.\n    DEPTH_1_BIT = \"DEPTH_1_BIT\"\n    #: ANSI Colors.\n    DEPTH_4_BIT = \"DEPTH_4_BIT\"\n    #: The default.",
        "detail": "mid-range.color_depth",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.color_depth",
        "description": "mid-range.color_depth",
        "peekOfCode": "__all__ = [\"ColorDepth\"]\nclass ColorDepth(str, Enum):\n    \"\"\"\n    Possible color depth values for the output.\n    \"\"\"\n    value: str\n    #: One color only.\n    DEPTH_1_BIT = \"DEPTH_1_BIT\"\n    #: ANSI Colors.\n    DEPTH_4_BIT = \"DEPTH_4_BIT\"",
        "detail": "mid-range.color_depth",
        "documentation": {}
    },
    {
        "label": "combinations",
        "kind": 2,
        "importPath": "mid-range.combinations",
        "description": "mid-range.combinations",
        "peekOfCode": "def combinations(n: int, k: int) -> int:\n    \"\"\"\n    Returns the number of different combinations of k length which can\n    be made from n values, where n >= k.\n    Examples:\n    >>> combinations(10,5)\n    252\n    >>> combinations(6,3)\n    20\n    >>> combinations(20,5)",
        "detail": "mid-range.combinations",
        "documentation": {}
    },
    {
        "label": "comb_sort",
        "kind": 2,
        "importPath": "mid-range.comb_sort",
        "description": "mid-range.comb_sort",
        "peekOfCode": "def comb_sort(arr):\n    def swap(i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n    n = len(arr)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:",
        "detail": "mid-range.comb_sort",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "mid-range.command",
        "description": "mid-range.command",
        "peekOfCode": "def install() -> None:\n    \"\"\"Download chromium if not install.\"\"\"\n    if not check_chromium():\n        download_chromium()\n    else:\n        logging.getLogger(__name__).warning(\"chromium is already installed.\")",
        "detail": "mid-range.command",
        "documentation": {}
    },
    {
        "label": "CommandContextMixIn",
        "kind": 6,
        "importPath": "mid-range.command_context",
        "description": "mid-range.command_context",
        "peekOfCode": "class CommandContextMixIn:\n    def __init__(self) -> None:\n        super().__init__()\n        self._in_main_context = False\n        self._main_context = ExitStack()\n    @contextmanager\n    def main_context(self) -> Iterator[None]:\n        assert not self._in_main_context\n        self._in_main_context = True\n        try:",
        "detail": "mid-range.command_context",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "mid-range.command_context",
        "description": "mid-range.command_context",
        "peekOfCode": "_T = TypeVar(\"_T\", covariant=True)\nclass CommandContextMixIn:\n    def __init__(self) -> None:\n        super().__init__()\n        self._in_main_context = False\n        self._main_context = ExitStack()\n    @contextmanager\n    def main_context(self) -> Iterator[None]:\n        assert not self._in_main_context\n        self._in_main_context = True",
        "detail": "mid-range.command_context",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "mid-range.comments",
        "description": "mid-range.comments",
        "peekOfCode": "def parse(line: str) -> Tuple[str, str]:\n    \"\"\"Parses import lines for comments and returns back the\n    import statement and the associated comment.\n    \"\"\"\n    comment_start = line.find(\"#\")\n    if comment_start != -1:\n        return (line[:comment_start], line[comment_start + 1 :].strip())\n    return (line, \"\")\ndef add_to_line(\n    comments: Optional[List[str]],",
        "detail": "mid-range.comments",
        "documentation": {}
    },
    {
        "label": "add_to_line",
        "kind": 2,
        "importPath": "mid-range.comments",
        "description": "mid-range.comments",
        "peekOfCode": "def add_to_line(\n    comments: Optional[List[str]],\n    original_string: str = \"\",\n    removed: bool = False,\n    comment_prefix: str = \"\",\n) -> str:\n    \"\"\"Returns a string with comments added if removed is not set.\"\"\"\n    if removed:\n        return parse(original_string)[0]\n    if not comments:",
        "detail": "mid-range.comments",
        "documentation": {}
    },
    {
        "label": "monkeypatch",
        "kind": 2,
        "importPath": "mid-range.common",
        "description": "mid-range.common",
        "peekOfCode": "def monkeypatch(obj, attribute_name, new_value):\n    \"\"\"\n    Like pytest's monkeypatch, but as a value manager.\n    \"\"\"\n    old_value = getattr(obj, attribute_name)\n    try:\n        setattr(obj, attribute_name, new_value)\n        yield\n    finally:\n        setattr(obj, attribute_name, old_value)",
        "detail": "mid-range.common",
        "documentation": {}
    },
    {
        "label": "indent_block",
        "kind": 2,
        "importPath": "mid-range.common",
        "description": "mid-range.common",
        "peekOfCode": "def indent_block(text, indention=\"    \"):\n    \"\"\"This function indents a text block with a default of four spaces.\"\"\"\n    temp = \"\"\n    while text and text[-1] == \"\\n\":\n        temp += text[-1]\n        text = text[:-1]\n    lines = text.split(\"\\n\")\n    return \"\\n\".join(map(lambda s: indention + s, lines)) + temp",
        "detail": "mid-range.common",
        "documentation": {}
    },
    {
        "label": "commonCharacterCount",
        "kind": 2,
        "importPath": "mid-range.common_character_count",
        "description": "mid-range.common_character_count",
        "peekOfCode": "def commonCharacterCount(s1, s2):\n    # To store the frequencies of characters\n    # of string s1 and s2\n    freq1 = [0] * 26\n    freq2 = [0] * 26\n    # To store the count of valid pairs\n    count = 0\n    # Update the frequencies of\n    # the characters of string s1\n    for i in range(len(s1)):",
        "detail": "mid-range.common_character_count",
        "documentation": {}
    },
    {
        "label": "compareTriplets",
        "kind": 2,
        "importPath": "mid-range.Compare-the-Triplets",
        "description": "mid-range.Compare-the-Triplets",
        "peekOfCode": "def compareTriplets(a, b):\n    pa = 0\n    pb = 0\n    x = 0\n    while x < len(a):\n        if a[x] > b[x]:\n            pa += 1\n        elif b[x] > a[x]:\n            pb += 1\n        else:",
        "detail": "mid-range.Compare-the-Triplets",
        "documentation": {}
    },
    {
        "label": "compare_lists",
        "kind": 2,
        "importPath": "mid-range.Compare-Two-Linked-Lists",
        "description": "mid-range.Compare-Two-Linked-Lists",
        "peekOfCode": "def compare_lists(llist1, llist2):\n    while llist1 and llist2:\n        if llist1.data == llist2.data:\n            llist1 = llist1.next\n            llist2 = llist2.next\n            continue\n        else:\n            return 0\n    if not llist1 and not llist2:\n        return 1",
        "detail": "mid-range.Compare-Two-Linked-Lists",
        "documentation": {}
    },
    {
        "label": "compare_array_elements",
        "kind": 2,
        "importPath": "mid-range.compare_array_elements",
        "description": "mid-range.compare_array_elements",
        "peekOfCode": "def compare_array_elements(arr1, arr2):\n    for l in range(len(arr1)):\n        if arr1[l] > arr2[l]:\n            yield (arr1[l], l, 1)\n        elif arr1[l] < arr2[l]:\n            yield (arr2[l], l, 2)\n        else:\n            yield (0)\n# Tests\ntests = [",
        "detail": "mid-range.compare_array_elements",
        "documentation": {}
    },
    {
        "label": "tests",
        "kind": 5,
        "importPath": "mid-range.compare_array_elements",
        "description": "mid-range.compare_array_elements",
        "peekOfCode": "tests = [\n    [[21, 3454, 12, 77, 21, 90, 235], [123, 54, 21, 7, 23, 987, 21312]],\n    [[1223, 8273, 17732, 7127], [12989, 2131223, 129, 10]],\n]\n# Does not test last condition of function\nfor test in tests:\n    for n, index, array_n in compare_array_elements(test[0], test[1]):\n        print(\n            \"  [ %i ] is biggest value at index(%i) from array(%i)\"\n            % (n, index, array_n)",
        "detail": "mid-range.compare_array_elements",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "mid-range.Comparison",
        "description": "mid-range.Comparison",
        "peekOfCode": "r = (a * d) / (b * c)\nreturn \"<\" if r < 1 else \">\" if r > 1 else \"=\"\n# 72 chars",
        "detail": "mid-range.Comparison",
        "documentation": {}
    },
    {
        "label": "_1",
        "kind": 5,
        "importPath": "mid-range.comparisons",
        "description": "mid-range.comparisons",
        "peekOfCode": "_1 = AR_i > str()  # E: Need type annotation\n_2 = AR_i > bytes()  # E: Need type annotation\n_3 = str() > AR_M  # E: Need type annotation\n_4 = bytes() > AR_M  # E: Need type annotation",
        "detail": "mid-range.comparisons",
        "documentation": {}
    },
    {
        "label": "_2",
        "kind": 5,
        "importPath": "mid-range.comparisons",
        "description": "mid-range.comparisons",
        "peekOfCode": "_2 = AR_i > bytes()  # E: Need type annotation\n_3 = str() > AR_M  # E: Need type annotation\n_4 = bytes() > AR_M  # E: Need type annotation",
        "detail": "mid-range.comparisons",
        "documentation": {}
    },
    {
        "label": "_3",
        "kind": 5,
        "importPath": "mid-range.comparisons",
        "description": "mid-range.comparisons",
        "peekOfCode": "_3 = str() > AR_M  # E: Need type annotation\n_4 = bytes() > AR_M  # E: Need type annotation",
        "detail": "mid-range.comparisons",
        "documentation": {}
    },
    {
        "label": "_4",
        "kind": 5,
        "importPath": "mid-range.comparisons",
        "description": "mid-range.comparisons",
        "peekOfCode": "_4 = bytes() > AR_M  # E: Need type annotation",
        "detail": "mid-range.comparisons",
        "documentation": {}
    },
    {
        "label": "ToASCII",
        "kind": 2,
        "importPath": "mid-range.compat",
        "description": "mid-range.compat",
        "peekOfCode": "def ToASCII(label):\n    # type: (str) -> bytes\n    return encode(label)\ndef ToUnicode(label):\n    # type: (Union[bytes, bytearray]) -> str\n    return decode(label)\ndef nameprep(s):\n    # type: (Any) -> None\n    raise NotImplementedError(\"IDNA 2008 does not utilise nameprep protocol\")",
        "detail": "mid-range.compat",
        "documentation": {}
    },
    {
        "label": "ToUnicode",
        "kind": 2,
        "importPath": "mid-range.compat",
        "description": "mid-range.compat",
        "peekOfCode": "def ToUnicode(label):\n    # type: (Union[bytes, bytearray]) -> str\n    return decode(label)\ndef nameprep(s):\n    # type: (Any) -> None\n    raise NotImplementedError(\"IDNA 2008 does not utilise nameprep protocol\")",
        "detail": "mid-range.compat",
        "documentation": {}
    },
    {
        "label": "nameprep",
        "kind": 2,
        "importPath": "mid-range.compat",
        "description": "mid-range.compat",
        "peekOfCode": "def nameprep(s):\n    # type: (Any) -> None\n    raise NotImplementedError(\"IDNA 2008 does not utilise nameprep protocol\")",
        "detail": "mid-range.compat",
        "documentation": {}
    },
    {
        "label": "show",
        "kind": 2,
        "importPath": "mid-range.compileall_compile_dir",
        "description": "mid-range.compileall_compile_dir",
        "peekOfCode": "def show(title):\n    print(title)\n    for filename in glob.glob(\"examples/**\", recursive=True):\n        print(\"  {}\".format(filename))\n    print()\nshow(\"Before\")\ncompileall.compile_dir(\"examples\")\nshow(\"\\nAfter\")",
        "detail": "mid-range.compileall_compile_dir",
        "documentation": {}
    },
    {
        "label": "show",
        "kind": 2,
        "importPath": "mid-range.compileall_compile_file",
        "description": "mid-range.compileall_compile_file",
        "peekOfCode": "def show(title):\n    print(title)\n    for filename in glob.glob(\"examples/**\", recursive=True):\n        print(\"  {}\".format(filename))\n    print()\nshow(\"Before\")\ncompileall.compile_file(\"examples/a.py\")\nshow(\"\\nAfter\")",
        "detail": "mid-range.compileall_compile_file",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "mid-range.compileall_path",
        "description": "mid-range.compileall_path",
        "peekOfCode": "sys.path[:] = [\"examples\", \"notthere\"]\nprint(\"sys.path =\", sys.path)\ncompileall.compile_path()",
        "detail": "mid-range.compileall_path",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.compiled",
        "description": "mid-range.compiled",
        "peekOfCode": "__all__ = []",
        "detail": "mid-range.compiled",
        "documentation": {}
    },
    {
        "label": "ZMQCompleter",
        "kind": 6,
        "importPath": "mid-range.completer",
        "description": "mid-range.completer",
        "peekOfCode": "class ZMQCompleter(Configurable):\n    \"\"\"Client-side completion machinery.\n    How it works: self.complete will be called multiple times, with\n    state=0,1,2,... When state=0 it should compute ALL the completion matches,\n    and then return them for each value of state.\"\"\"\n    timeout = Float(5.0, config=True, help=\"timeout before completion abort\")\n    def __init__(self, shell, client, config=None):\n        super(ZMQCompleter, self).__init__(config=config)\n        self.shell = shell\n        self.client = client",
        "detail": "mid-range.completer",
        "documentation": {}
    },
    {
        "label": "save_entry",
        "kind": 2,
        "importPath": "mid-range.completion_cache",
        "description": "mid-range.completion_cache",
        "peekOfCode": "def save_entry(module_name: str, name: str, cache: CacheValues) -> None:\n    try:\n        module_cache = _cache[module_name]\n    except KeyError:\n        module_cache = _cache[module_name] = {}\n    module_cache[name] = cache\ndef _create_get_from_cache(\n    number: int\n) -> Callable[[str, str, CacheValuesCallback], str]:\n    def _get_from_cache(",
        "detail": "mid-range.completion_cache",
        "documentation": {}
    },
    {
        "label": "CacheValues",
        "kind": 5,
        "importPath": "mid-range.completion_cache",
        "description": "mid-range.completion_cache",
        "peekOfCode": "CacheValues = Tuple[str, str, str]\nCacheValuesCallback = Callable[[], CacheValues]\n_cache: Dict[str, Dict[str, CacheValues]] = {}\ndef save_entry(module_name: str, name: str, cache: CacheValues) -> None:\n    try:\n        module_cache = _cache[module_name]\n    except KeyError:\n        module_cache = _cache[module_name] = {}\n    module_cache[name] = cache\ndef _create_get_from_cache(",
        "detail": "mid-range.completion_cache",
        "documentation": {}
    },
    {
        "label": "CacheValuesCallback",
        "kind": 5,
        "importPath": "mid-range.completion_cache",
        "description": "mid-range.completion_cache",
        "peekOfCode": "CacheValuesCallback = Callable[[], CacheValues]\n_cache: Dict[str, Dict[str, CacheValues]] = {}\ndef save_entry(module_name: str, name: str, cache: CacheValues) -> None:\n    try:\n        module_cache = _cache[module_name]\n    except KeyError:\n        module_cache = _cache[module_name] = {}\n    module_cache[name] = cache\ndef _create_get_from_cache(\n    number: int",
        "detail": "mid-range.completion_cache",
        "documentation": {}
    },
    {
        "label": "get_type",
        "kind": 5,
        "importPath": "mid-range.completion_cache",
        "description": "mid-range.completion_cache",
        "peekOfCode": "get_type = _create_get_from_cache(0)\nget_docstring_signature = _create_get_from_cache(1)\nget_docstring = _create_get_from_cache(2)",
        "detail": "mid-range.completion_cache",
        "documentation": {}
    },
    {
        "label": "get_docstring_signature",
        "kind": 5,
        "importPath": "mid-range.completion_cache",
        "description": "mid-range.completion_cache",
        "peekOfCode": "get_docstring_signature = _create_get_from_cache(1)\nget_docstring = _create_get_from_cache(2)",
        "detail": "mid-range.completion_cache",
        "documentation": {}
    },
    {
        "label": "get_docstring",
        "kind": 5,
        "importPath": "mid-range.completion_cache",
        "description": "mid-range.completion_cache",
        "peekOfCode": "get_docstring = _create_get_from_cache(2)",
        "detail": "mid-range.completion_cache",
        "documentation": {}
    },
    {
        "label": "complex_num",
        "kind": 5,
        "importPath": "mid-range.complex_to_polar",
        "description": "mid-range.complex_to_polar",
        "peekOfCode": "complex_num = complex(\n    int(input(\"Enter your x value : \")), int(input(\"Enter your y value: \"))\n)\n# using library converting the complex values into coordinates\nr = float(abs(complex_num))\ntheta = float(cmath.phase(complex_num))\n# printing the output\nprint(\"Your inputed complex number is :\", complex_num)\nprint(\"r : \", r)\nprint(\"theta :\", theta)",
        "detail": "mid-range.complex_to_polar",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "mid-range.complex_to_polar",
        "description": "mid-range.complex_to_polar",
        "peekOfCode": "r = float(abs(complex_num))\ntheta = float(cmath.phase(complex_num))\n# printing the output\nprint(\"Your inputed complex number is :\", complex_num)\nprint(\"r : \", r)\nprint(\"theta :\", theta)\nprint(\"Hence Polar co-ordinates are : {0:0.4f} + i{1:0.4f}\".format(r, theta))\n\"\"\"\nsample input 1 :\nx : 4 y : 3",
        "detail": "mid-range.complex_to_polar",
        "documentation": {}
    },
    {
        "label": "theta",
        "kind": 5,
        "importPath": "mid-range.complex_to_polar",
        "description": "mid-range.complex_to_polar",
        "peekOfCode": "theta = float(cmath.phase(complex_num))\n# printing the output\nprint(\"Your inputed complex number is :\", complex_num)\nprint(\"r : \", r)\nprint(\"theta :\", theta)\nprint(\"Hence Polar co-ordinates are : {0:0.4f} + i{1:0.4f}\".format(r, theta))\n\"\"\"\nsample input 1 :\nx : 4 y : 3\nsample output 1 :",
        "detail": "mid-range.complex_to_polar",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.comprehension",
        "description": "mid-range.comprehension",
        "peekOfCode": "def main():\n    # One interesting fact about data structures is that we can build\n    # them with comprehensions. Let's explain how the first one works:\n    # we just want to create zeros so our expression is set to `0`\n    # since no computing is required; because `0` is a constant value,\n    # we can set the item that we compute with to `_`; and we want to\n    # create five zeros so we set the iterator as `range(5)`\n    assert [0 for _ in range(5)] == [0] * 5 == [0, 0, 0, 0, 0]\n    # For the next comprehension operations, let's see what we can do\n    # with a list of 3-5 letter words",
        "detail": "mid-range.comprehension",
        "documentation": {}
    },
    {
        "label": "NotImplementedFuture",
        "kind": 6,
        "importPath": "mid-range.concurrent",
        "description": "mid-range.concurrent",
        "peekOfCode": "class NotImplementedFuture(object):\n    def __init__(self, *args, **kwargs):\n        raise NotImplementedError(\n            \"pyzmq does not ship tornado's Futures, \"\n            \"install tornado >= 3.0 for future support.\"\n        )\nFuture = TracebackFuture = NotImplementedFuture\ndef is_future(x):\n    return isinstance(x, Future)",
        "detail": "mid-range.concurrent",
        "documentation": {}
    },
    {
        "label": "is_future",
        "kind": 2,
        "importPath": "mid-range.concurrent",
        "description": "mid-range.concurrent",
        "peekOfCode": "def is_future(x):\n    return isinstance(x, Future)",
        "detail": "mid-range.concurrent",
        "documentation": {}
    },
    {
        "label": "Future",
        "kind": 5,
        "importPath": "mid-range.concurrent",
        "description": "mid-range.concurrent",
        "peekOfCode": "Future = TracebackFuture = NotImplementedFuture\ndef is_future(x):\n    return isinstance(x, Future)",
        "detail": "mid-range.concurrent",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "mid-range.condense_linked_list",
        "description": "mid-range.condense_linked_list",
        "peekOfCode": "class ListNode(object):\n  def __init__(self, x):\n    self.value = x\n    self.next = None\ndef condense_linked_list(node):\n   root = ListNode(0)\n   root.next = head\n         p1 = head\n            if p1 is None:\n            return root.next",
        "detail": "mid-range.condense_linked_list",
        "documentation": {}
    },
    {
        "label": "condense_linked_list",
        "kind": 2,
        "importPath": "mid-range.condense_linked_list",
        "description": "mid-range.condense_linked_list",
        "peekOfCode": "def condense_linked_list(node):\n   root = ListNode(0)\n   root.next = head\n         p1 = head\n            if p1 is None:\n            return root.next\n        p = p1.next\n        if p is None:\n            return root.next\n        while p:",
        "detail": "mid-range.condense_linked_list",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.conditional",
        "description": "mid-range.conditional",
        "peekOfCode": "def main():\n    x = 1\n    x_add_two = x + 2\n    # This condition is obviously true\n    ran_1 = False\n    if x_add_two == 3:  # skip: else\n        ran_1 = True  # run\n    assert ran_1 is True\n    # A negated condition can also be true\n    ran_2 = False",
        "detail": "mid-range.conditional",
        "documentation": {}
    },
    {
        "label": "maxPresentations",
        "kind": 2,
        "importPath": "mid-range.conference-schedule",
        "description": "mid-range.conference-schedule",
        "peekOfCode": "def maxPresentations(scheduleStart, scheduleEnd):\n    # Write your code here\n    sl = sorted((list(zip(*[scheduleStart, scheduleEnd]))), key=lambda x: x[1])\n    sl = list(zip(*sl))\n    lim = sl[1][0]\n    n = 1\n    for i in range(1, len(scheduleEnd)):\n        if sl[0][i] >= lim:\n            n += 1\n            lim = sl[1][i]",
        "detail": "mid-range.conference-schedule",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.configparser_allow_no_value",
        "description": "mid-range.configparser_allow_no_value",
        "peekOfCode": "parser = configparser.ConfigParser(allow_no_value=True)\nparser.read(\"allow_no_value.ini\")\nfor flag in [\"turn_feature_on\", \"turn_other_feature_on\"]:\n    print(\"\\n\", flag)\n    exists = parser.has_option(\"flags\", flag)\n    print(\"  has_option:\", exists)\n    if exists:\n        print(\"         get:\", parser.get(\"flags\", flag))",
        "detail": "mid-range.configparser_allow_no_value",
        "documentation": {}
    },
    {
        "label": "parse_iso_datetime",
        "kind": 2,
        "importPath": "mid-range.configparser_custom_types",
        "description": "mid-range.configparser_custom_types",
        "peekOfCode": "def parse_iso_datetime(s):\n    print(\"parse_iso_datetime({!r})\".format(s))\n    return datetime.datetime.strptime(s, \"%Y-%m-%dT%H:%M:%S.%f\")\nparser = ConfigParser(converters={\"datetime\": parse_iso_datetime})\nparser.read(\"custom_types.ini\")\nstring_value = parser[\"datetimes\"][\"due_date\"]\nvalue = parser.getdatetime(\"datetimes\", \"due_date\")\nprint(\"due_date : {!r} -> {!r}\".format(string_value, value))",
        "detail": "mid-range.configparser_custom_types",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.configparser_custom_types",
        "description": "mid-range.configparser_custom_types",
        "peekOfCode": "parser = ConfigParser(converters={\"datetime\": parse_iso_datetime})\nparser.read(\"custom_types.ini\")\nstring_value = parser[\"datetimes\"][\"due_date\"]\nvalue = parser.getdatetime(\"datetimes\", \"due_date\")\nprint(\"due_date : {!r} -> {!r}\".format(string_value, value))",
        "detail": "mid-range.configparser_custom_types",
        "documentation": {}
    },
    {
        "label": "string_value",
        "kind": 5,
        "importPath": "mid-range.configparser_custom_types",
        "description": "mid-range.configparser_custom_types",
        "peekOfCode": "string_value = parser[\"datetimes\"][\"due_date\"]\nvalue = parser.getdatetime(\"datetimes\", \"due_date\")\nprint(\"due_date : {!r} -> {!r}\".format(string_value, value))",
        "detail": "mid-range.configparser_custom_types",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "mid-range.configparser_custom_types",
        "description": "mid-range.configparser_custom_types",
        "peekOfCode": "value = parser.getdatetime(\"datetimes\", \"due_date\")\nprint(\"due_date : {!r} -> {!r}\".format(string_value, value))",
        "detail": "mid-range.configparser_custom_types",
        "documentation": {}
    },
    {
        "label": "filename",
        "kind": 5,
        "importPath": "mid-range.configparser_escape",
        "description": "mid-range.configparser_escape",
        "peekOfCode": "filename = \"escape.ini\"\nconfig = ConfigParser()\nconfig.read([filename])\nvalue = config.get(\"escape\", \"value\")\nprint(value)",
        "detail": "mid-range.configparser_escape",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "mid-range.configparser_escape",
        "description": "mid-range.configparser_escape",
        "peekOfCode": "config = ConfigParser()\nconfig.read([filename])\nvalue = config.get(\"escape\", \"value\")\nprint(value)",
        "detail": "mid-range.configparser_escape",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "mid-range.configparser_escape",
        "description": "mid-range.configparser_escape",
        "peekOfCode": "value = config.get(\"escape\", \"value\")\nprint(value)",
        "detail": "mid-range.configparser_escape",
        "documentation": {}
    },
    {
        "label": "filename",
        "kind": 5,
        "importPath": "mid-range.configparser_example",
        "description": "mid-range.configparser_example",
        "peekOfCode": "filename = \"approach.ini\"\nconfig = ConfigParser()\nconfig.read([filename])\nurl = config.get(\"portal\", \"url\")\nprint(url)",
        "detail": "mid-range.configparser_example",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "mid-range.configparser_example",
        "description": "mid-range.configparser_example",
        "peekOfCode": "config = ConfigParser()\nconfig.read([filename])\nurl = config.get(\"portal\", \"url\")\nprint(url)",
        "detail": "mid-range.configparser_example",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "mid-range.configparser_example",
        "description": "mid-range.configparser_example",
        "peekOfCode": "url = config.get(\"portal\", \"url\")\nprint(url)",
        "detail": "mid-range.configparser_example",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.configparser_extendedinterpolation",
        "description": "mid-range.configparser_extendedinterpolation",
        "peekOfCode": "parser = ConfigParser(interpolation=ExtendedInterpolation())\nparser.read(\"extended_interpolation.ini\")\nprint(\"Original value       :\", parser.get(\"bug_tracker\", \"url\"))\nparser.set(\"intranet\", \"port\", \"9090\")\nprint(\"Altered port value   :\", parser.get(\"bug_tracker\", \"url\"))\nprint(\"Without interpolation:\", parser.get(\"bug_tracker\", \"url\", raw=True))",
        "detail": "mid-range.configparser_extendedinterpolation",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.configparser_has_option",
        "description": "mid-range.configparser_has_option",
        "peekOfCode": "parser = ConfigParser()\nparser.read(\"multisection.ini\")\nSECTIONS = [\"wiki\", \"none\"]\nOPTIONS = [\"username\", \"password\", \"url\", \"description\"]\nfor section in SECTIONS:\n    has_section = parser.has_section(section)\n    print(\"{} section exists: {}\".format(section, has_section))\n    for candidate in OPTIONS:\n        has_option = parser.has_option(section, candidate)\n        print(\"{}.{:<12}  : {}\".format(section, candidate, has_option))",
        "detail": "mid-range.configparser_has_option",
        "documentation": {}
    },
    {
        "label": "SECTIONS",
        "kind": 5,
        "importPath": "mid-range.configparser_has_option",
        "description": "mid-range.configparser_has_option",
        "peekOfCode": "SECTIONS = [\"wiki\", \"none\"]\nOPTIONS = [\"username\", \"password\", \"url\", \"description\"]\nfor section in SECTIONS:\n    has_section = parser.has_section(section)\n    print(\"{} section exists: {}\".format(section, has_section))\n    for candidate in OPTIONS:\n        has_option = parser.has_option(section, candidate)\n        print(\"{}.{:<12}  : {}\".format(section, candidate, has_option))\n    print()",
        "detail": "mid-range.configparser_has_option",
        "documentation": {}
    },
    {
        "label": "OPTIONS",
        "kind": 5,
        "importPath": "mid-range.configparser_has_option",
        "description": "mid-range.configparser_has_option",
        "peekOfCode": "OPTIONS = [\"username\", \"password\", \"url\", \"description\"]\nfor section in SECTIONS:\n    has_section = parser.has_section(section)\n    print(\"{} section exists: {}\".format(section, has_section))\n    for candidate in OPTIONS:\n        has_option = parser.has_option(section, candidate)\n        print(\"{}.{:<12}  : {}\".format(section, candidate, has_option))\n    print()",
        "detail": "mid-range.configparser_has_option",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.configparser_has_section",
        "description": "mid-range.configparser_has_section",
        "peekOfCode": "parser = ConfigParser()\nparser.read(\"multisection.ini\")\nfor candidate in [\"wiki\", \"bug_tracker\", \"dvcs\"]:\n    print(\"{:<12}: {}\".format(candidate, parser.has_section(candidate)))",
        "detail": "mid-range.configparser_has_section",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.configparser_interpolation",
        "description": "mid-range.configparser_interpolation",
        "peekOfCode": "parser = ConfigParser()\nparser.read(\"interpolation.ini\")\nprint(\"Original value       :\", parser.get(\"bug_tracker\", \"url\"))\nparser.set(\"bug_tracker\", \"port\", \"9090\")\nprint(\"Altered port value   :\", parser.get(\"bug_tracker\", \"url\"))\nprint(\"Without interpolation:\", parser.get(\"bug_tracker\", \"url\", raw=True))",
        "detail": "mid-range.configparser_interpolation",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.configparser_interpolation_defaults",
        "description": "mid-range.configparser_interpolation_defaults",
        "peekOfCode": "parser = ConfigParser()\nparser.read(\"interpolation_defaults.ini\")\nprint(\"URL:\", parser.get(\"bug_tracker\", \"url\"))",
        "detail": "mid-range.configparser_interpolation_defaults",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.configparser_interpolation_error",
        "description": "mid-range.configparser_interpolation_error",
        "peekOfCode": "parser = configparser.ConfigParser()\nparser.add_section(\"bug_tracker\")\nparser.set(\"bug_tracker\", \"url\", \"http://%(server)s:%(port)s/bugs\")\ntry:\n    print(parser.get(\"bug_tracker\", \"url\"))\nexcept configparser.InterpolationMissingOptionError as err:\n    print(\"ERROR:\", err)",
        "detail": "mid-range.configparser_interpolation_error",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.configparser_interpolation_recursion",
        "description": "mid-range.configparser_interpolation_recursion",
        "peekOfCode": "parser = configparser.ConfigParser()\nparser.add_section(\"sect\")\nparser.set(\"sect\", \"opt\", \"%(opt)s\")\ntry:\n    print(parser.get(\"sect\", \"opt\"))\nexcept configparser.InterpolationDepthError as err:\n    print(\"ERROR:\", err)",
        "detail": "mid-range.configparser_interpolation_recursion",
        "documentation": {}
    },
    {
        "label": "filename",
        "kind": 5,
        "importPath": "mid-range.configparser_multiline",
        "description": "mid-range.configparser_multiline",
        "peekOfCode": "filename = \"multiline.ini\"\nconfig = ConfigParser()\nconfig.read([filename])\nmessage = config[\"example\"][\"message\"]\nprint(message)",
        "detail": "mid-range.configparser_multiline",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "mid-range.configparser_multiline",
        "description": "mid-range.configparser_multiline",
        "peekOfCode": "config = ConfigParser()\nconfig.read([filename])\nmessage = config[\"example\"][\"message\"]\nprint(message)",
        "detail": "mid-range.configparser_multiline",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "mid-range.configparser_multiline",
        "description": "mid-range.configparser_multiline",
        "peekOfCode": "message = config[\"example\"][\"message\"]\nprint(message)",
        "detail": "mid-range.configparser_multiline",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.configparser_nointerpolation",
        "description": "mid-range.configparser_nointerpolation",
        "peekOfCode": "parser = ConfigParser(interpolation=None)\nparser.read(\"interpolation.ini\")\nprint(\"Without interpolation:\", parser.get(\"bug_tracker\", \"url\"))",
        "detail": "mid-range.configparser_nointerpolation",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.configparser_populate",
        "description": "mid-range.configparser_populate",
        "peekOfCode": "parser = configparser.ConfigParser()\nparser.add_section(\"bug_tracker\")\nparser.set(\"bug_tracker\", \"url\", \"http://localhost:8080/bugs\")\nparser.set(\"bug_tracker\", \"username\", \"dhellmann\")\nparser.set(\"bug_tracker\", \"password\", \"secret\")\nfor section in parser.sections():\n    print(section)\n    for name, value in parser.items(section):\n        print(\"  {} = {!r}\".format(name, value))",
        "detail": "mid-range.configparser_populate",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.configparser_read",
        "description": "mid-range.configparser_read",
        "peekOfCode": "parser = ConfigParser()\nparser.read(\"simple.ini\")\nprint(parser.get(\"bug_tracker\", \"url\"))",
        "detail": "mid-range.configparser_read",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.configparser_read_many",
        "description": "mid-range.configparser_read_many",
        "peekOfCode": "parser = ConfigParser()\ncandidates = [\n    \"does_not_exist.ini\",\n    \"also-does-not-exist.ini\",\n    \"simple.ini\",\n    \"multisection.ini\",\n]\nfound = parser.read(candidates)\nmissing = set(candidates) - set(found)\nprint(\"Found config files:\", sorted(found))",
        "detail": "mid-range.configparser_read_many",
        "documentation": {}
    },
    {
        "label": "candidates",
        "kind": 5,
        "importPath": "mid-range.configparser_read_many",
        "description": "mid-range.configparser_read_many",
        "peekOfCode": "candidates = [\n    \"does_not_exist.ini\",\n    \"also-does-not-exist.ini\",\n    \"simple.ini\",\n    \"multisection.ini\",\n]\nfound = parser.read(candidates)\nmissing = set(candidates) - set(found)\nprint(\"Found config files:\", sorted(found))\nprint(\"Missing files     :\", sorted(missing))",
        "detail": "mid-range.configparser_read_many",
        "documentation": {}
    },
    {
        "label": "found",
        "kind": 5,
        "importPath": "mid-range.configparser_read_many",
        "description": "mid-range.configparser_read_many",
        "peekOfCode": "found = parser.read(candidates)\nmissing = set(candidates) - set(found)\nprint(\"Found config files:\", sorted(found))\nprint(\"Missing files     :\", sorted(missing))",
        "detail": "mid-range.configparser_read_many",
        "documentation": {}
    },
    {
        "label": "missing",
        "kind": 5,
        "importPath": "mid-range.configparser_read_many",
        "description": "mid-range.configparser_read_many",
        "peekOfCode": "missing = set(candidates) - set(found)\nprint(\"Found config files:\", sorted(found))\nprint(\"Missing files     :\", sorted(missing))",
        "detail": "mid-range.configparser_read_many",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.configparser_remove",
        "description": "mid-range.configparser_remove",
        "peekOfCode": "parser = ConfigParser()\nparser.read(\"multisection.ini\")\nprint(\"Read values:\\n\")\nfor section in parser.sections():\n    print(section)\n    for name, value in parser.items(section):\n        print(\"  {} = {!r}\".format(name, value))\nparser.remove_option(\"bug_tracker\", \"password\")\nparser.remove_section(\"wiki\")\nprint(\"\\nModified values:\\n\")",
        "detail": "mid-range.configparser_remove",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.configparser_structure",
        "description": "mid-range.configparser_structure",
        "peekOfCode": "parser = ConfigParser()\nparser.read(\"multisection.ini\")\nfor section_name in parser.sections():\n    print(\"Section:\", section_name)\n    print(\"  Options:\", parser.options(section_name))\n    for name, value in parser.items(section_name):\n        print(\"  {} = {}\".format(name, value))\n    print()",
        "detail": "mid-range.configparser_structure",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.configparser_structure_dict",
        "description": "mid-range.configparser_structure_dict",
        "peekOfCode": "parser = ConfigParser()\nparser.read(\"multisection.ini\")\nfor section_name in parser:\n    print(\"Section:\", section_name)\n    section = parser[section_name]\n    print(\"  Options:\", list(section.keys()))\n    for name in section:\n        print(\"  {} = {}\".format(name, section[name]))\n    print()",
        "detail": "mid-range.configparser_structure_dict",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.configparser_unicode",
        "description": "mid-range.configparser_unicode",
        "peekOfCode": "parser = ConfigParser()\n# Open the file with the correct encoding\nparser.read(\"unicode.ini\", encoding=\"utf-8\")\npassword = parser.get(\"bug_tracker\", \"password\")\nprint(\"Password:\", password.encode(\"utf-8\"))\nprint(\"Type    :\", type(password))\nprint(\"repr()  :\", repr(password))",
        "detail": "mid-range.configparser_unicode",
        "documentation": {}
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "mid-range.configparser_unicode",
        "description": "mid-range.configparser_unicode",
        "peekOfCode": "password = parser.get(\"bug_tracker\", \"password\")\nprint(\"Password:\", password.encode(\"utf-8\"))\nprint(\"Type    :\", type(password))\nprint(\"repr()  :\", repr(password))",
        "detail": "mid-range.configparser_unicode",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.configparser_value_types",
        "description": "mid-range.configparser_value_types",
        "peekOfCode": "parser = ConfigParser()\nparser.read(\"types.ini\")\nprint(\"Integers:\")\nfor name in parser.options(\"ints\"):\n    string_value = parser.get(\"ints\", name)\n    value = parser.getint(\"ints\", name)\n    print(\"  {:<12} : {!r:<7} -> {}\".format(name, string_value, value))\nprint(\"\\nFloats:\")\nfor name in parser.options(\"floats\"):\n    string_value = parser.get(\"floats\", name)",
        "detail": "mid-range.configparser_value_types",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.configparser_write",
        "description": "mid-range.configparser_write",
        "peekOfCode": "parser = configparser.ConfigParser()\nparser.add_section(\"bug_tracker\")\nparser.set(\"bug_tracker\", \"url\", \"http://localhost:8080/bugs\")\nparser.set(\"bug_tracker\", \"username\", \"dhellmann\")\nparser.set(\"bug_tracker\", \"password\", \"secret\")\nparser.write(sys.stdout)",
        "detail": "mid-range.configparser_write",
        "documentation": {}
    },
    {
        "label": "ConfigurationMixIn",
        "kind": 6,
        "importPath": "mid-range.configuration_mixin",
        "description": "mid-range.configuration_mixin",
        "peekOfCode": "class ConfigurationMixIn(OptionsManagerMixIn, OptionsProviderMixIn):\n    \"\"\"basic mixin for simple configurations which don't need the\n    manager / providers model\"\"\"\n    def __init__(self, *args, **kwargs):\n        if not args:\n            kwargs.setdefault(\"usage\", \"\")\n        OptionsManagerMixIn.__init__(self, *args, **kwargs)\n        OptionsProviderMixIn.__init__(self)\n        if not getattr(self, \"option_groups\", None):\n            self.option_groups = []",
        "detail": "mid-range.configuration_mixin",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "mid-range.connected_components",
        "description": "mid-range.connected_components",
        "peekOfCode": "def dfs(graph: dict, vert: int, visited: list) -> list:\n    \"\"\"\n    Use depth first search to find all vertices\n    being in the same component as initial vertex\n    >>> dfs(test_graph_1, 0, 5 * [False])\n    [0, 1, 3, 2]\n    >>> dfs(test_graph_2, 0, 6 * [False])\n    [0, 1, 3, 2]\n    \"\"\"\n    visited[vert] = True",
        "detail": "mid-range.connected_components",
        "documentation": {}
    },
    {
        "label": "connected_components",
        "kind": 2,
        "importPath": "mid-range.connected_components",
        "description": "mid-range.connected_components",
        "peekOfCode": "def connected_components(graph: dict) -> list:\n    \"\"\"\n    This function takes graph as a parameter\n    and then returns the list of connected components\n    >>> connected_components(test_graph_1)\n    [[0, 1, 3, 2], [4, 5, 6]]\n    >>> connected_components(test_graph_2)\n    [[0, 1, 3, 2], [4], [5]]\n    \"\"\"\n    graph_size = len(graph)",
        "detail": "mid-range.connected_components",
        "documentation": {}
    },
    {
        "label": "test_graph_1",
        "kind": 5,
        "importPath": "mid-range.connected_components",
        "description": "mid-range.connected_components",
        "peekOfCode": "test_graph_1 = {0: [1, 2], 1: [0, 3], 2: [0], 3: [1], 4: [5, 6], 5: [4, 6], 6: [4, 5]}\ntest_graph_2 = {0: [1, 2, 3], 1: [0, 3], 2: [0], 3: [0, 1], 4: [], 5: []}\ndef dfs(graph: dict, vert: int, visited: list) -> list:\n    \"\"\"\n    Use depth first search to find all vertices\n    being in the same component as initial vertex\n    >>> dfs(test_graph_1, 0, 5 * [False])\n    [0, 1, 3, 2]\n    >>> dfs(test_graph_2, 0, 6 * [False])\n    [0, 1, 3, 2]",
        "detail": "mid-range.connected_components",
        "documentation": {}
    },
    {
        "label": "test_graph_2",
        "kind": 5,
        "importPath": "mid-range.connected_components",
        "description": "mid-range.connected_components",
        "peekOfCode": "test_graph_2 = {0: [1, 2, 3], 1: [0, 3], 2: [0], 3: [0, 1], 4: [], 5: []}\ndef dfs(graph: dict, vert: int, visited: list) -> list:\n    \"\"\"\n    Use depth first search to find all vertices\n    being in the same component as initial vertex\n    >>> dfs(test_graph_1, 0, 5 * [False])\n    [0, 1, 3, 2]\n    >>> dfs(test_graph_2, 0, 6 * [False])\n    [0, 1, 3, 2]\n    \"\"\"",
        "detail": "mid-range.connected_components",
        "documentation": {}
    },
    {
        "label": "L,",
        "kind": 5,
        "importPath": "mid-range.Consecutive",
        "description": "mid-range.Consecutive",
        "peekOfCode": "L, = eval(dir()[0])\ns = 0\nwhile len(L) > 1:\n    L = (\n        numpy.add(L[:-1:2], L[1::2])\n        if s % 2 == 0\n        else numpy.multiply(L[:-1:2], L[1::2])\n    )\n    s += 1\nreturn L[0]",
        "detail": "mid-range.Consecutive",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.Consecutive",
        "description": "mid-range.Consecutive",
        "peekOfCode": "s = 0\nwhile len(L) > 1:\n    L = (\n        numpy.add(L[:-1:2], L[1::2])\n        if s % 2 == 0\n        else numpy.multiply(L[:-1:2], L[1::2])\n    )\n    s += 1\nreturn L[0]",
        "detail": "mid-range.Consecutive",
        "documentation": {}
    },
    {
        "label": "Context",
        "kind": 6,
        "importPath": "mid-range.const",
        "description": "mid-range.const",
        "peekOfCode": "class Context(enum.Enum):\n    Load = 1\n    Store = 2\n    Del = 3\n# TODO Remove in 3.0 in favor of Context\nLoad = Context.Load\nStore = Context.Store\nDel = Context.Del\nBUILTINS = builtins.__name__  # Could be just 'builtins' ?",
        "detail": "mid-range.const",
        "documentation": {}
    },
    {
        "label": "PY37_PLUS",
        "kind": 5,
        "importPath": "mid-range.const",
        "description": "mid-range.const",
        "peekOfCode": "PY37_PLUS = sys.version_info >= (3, 7)\nPY38_PLUS = sys.version_info >= (3, 8)\nPY39_PLUS = sys.version_info >= (3, 9)\nPY310_PLUS = sys.version_info >= (3, 10)\nclass Context(enum.Enum):\n    Load = 1\n    Store = 2\n    Del = 3\n# TODO Remove in 3.0 in favor of Context\nLoad = Context.Load",
        "detail": "mid-range.const",
        "documentation": {}
    },
    {
        "label": "PY38_PLUS",
        "kind": 5,
        "importPath": "mid-range.const",
        "description": "mid-range.const",
        "peekOfCode": "PY38_PLUS = sys.version_info >= (3, 8)\nPY39_PLUS = sys.version_info >= (3, 9)\nPY310_PLUS = sys.version_info >= (3, 10)\nclass Context(enum.Enum):\n    Load = 1\n    Store = 2\n    Del = 3\n# TODO Remove in 3.0 in favor of Context\nLoad = Context.Load\nStore = Context.Store",
        "detail": "mid-range.const",
        "documentation": {}
    },
    {
        "label": "PY39_PLUS",
        "kind": 5,
        "importPath": "mid-range.const",
        "description": "mid-range.const",
        "peekOfCode": "PY39_PLUS = sys.version_info >= (3, 9)\nPY310_PLUS = sys.version_info >= (3, 10)\nclass Context(enum.Enum):\n    Load = 1\n    Store = 2\n    Del = 3\n# TODO Remove in 3.0 in favor of Context\nLoad = Context.Load\nStore = Context.Store\nDel = Context.Del",
        "detail": "mid-range.const",
        "documentation": {}
    },
    {
        "label": "PY310_PLUS",
        "kind": 5,
        "importPath": "mid-range.const",
        "description": "mid-range.const",
        "peekOfCode": "PY310_PLUS = sys.version_info >= (3, 10)\nclass Context(enum.Enum):\n    Load = 1\n    Store = 2\n    Del = 3\n# TODO Remove in 3.0 in favor of Context\nLoad = Context.Load\nStore = Context.Store\nDel = Context.Del\nBUILTINS = builtins.__name__  # Could be just 'builtins' ?",
        "detail": "mid-range.const",
        "documentation": {}
    },
    {
        "label": "Load",
        "kind": 5,
        "importPath": "mid-range.const",
        "description": "mid-range.const",
        "peekOfCode": "Load = Context.Load\nStore = Context.Store\nDel = Context.Del\nBUILTINS = builtins.__name__  # Could be just 'builtins' ?",
        "detail": "mid-range.const",
        "documentation": {}
    },
    {
        "label": "Store",
        "kind": 5,
        "importPath": "mid-range.const",
        "description": "mid-range.const",
        "peekOfCode": "Store = Context.Store\nDel = Context.Del\nBUILTINS = builtins.__name__  # Could be just 'builtins' ?",
        "detail": "mid-range.const",
        "documentation": {}
    },
    {
        "label": "Del",
        "kind": 5,
        "importPath": "mid-range.const",
        "description": "mid-range.const",
        "peekOfCode": "Del = Context.Del\nBUILTINS = builtins.__name__  # Could be just 'builtins' ?",
        "detail": "mid-range.const",
        "documentation": {}
    },
    {
        "label": "BUILTINS",
        "kind": 5,
        "importPath": "mid-range.const",
        "description": "mid-range.const",
        "peekOfCode": "BUILTINS = builtins.__name__  # Could be just 'builtins' ?",
        "detail": "mid-range.const",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.ContainerWithMostWater",
        "description": "mid-range.ContainerWithMostWater",
        "peekOfCode": "class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        i = 0\n        j = len(height) - 1\n        maxarea = 0\n        while i != j:\n            a = (j - i) * (min(height[i], height[j]))\n            if a > maxarea:\n                maxarea = a\n            if height[i] > height[j]:",
        "detail": "mid-range.ContainerWithMostWater",
        "documentation": {}
    },
    {
        "label": "max_area",
        "kind": 2,
        "importPath": "mid-range.container_with_most_water",
        "description": "mid-range.container_with_most_water",
        "peekOfCode": "def max_area(height):\n    l = 0\n    r = len(height) - 1\n    max_height = 0\n    while l < r:\n        left = height[l]\n        right = height[r]\n        current_height = min(left, right) * (r - l)\n        max_height = max(max_height, current_height)\n        # take the smaller side and search for a bigger height on that side",
        "detail": "mid-range.container_with_most_water",
        "documentation": {}
    },
    {
        "label": "containsCloseNums",
        "kind": 2,
        "importPath": "mid-range.containsCloseNums",
        "description": "mid-range.containsCloseNums",
        "peekOfCode": "def containsCloseNums(nums, k):\n    num_dict = {}\n    # setup keys for each number seen, then list their indices\n    for i, item in enumerate(nums):\n        if item in num_dict:\n            num_dict[item].append(i)\n        else:\n            num_dict[item] = [i]\n    # remove all nums that are not repeated\n    # first make a set of keys to remove to prevent editing the dictionary size while iterating over it",
        "detail": "mid-range.containsCloseNums",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.ContainsDuplicate",
        "description": "mid-range.ContainsDuplicate",
        "peekOfCode": "class Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        return not len(nums) == len(set(nums))",
        "detail": "mid-range.ContainsDuplicate",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Contains_Duplicate_II",
        "description": "mid-range.Contains_Duplicate_II",
        "peekOfCode": "class Solution:\n    def containsNearbyDuplicate(self, nums, k):\n        dict = {}\n        for idx, num in enumerate(nums):\n            if num in dict:\n                if abs(dict[num] - idx) <= k:\n                    return True\n                elif abs(dict[num] - idx) > k:\n                    dict[num] = idx\n            else:",
        "detail": "mid-range.Contains_Duplicate_II",
        "documentation": {}
    },
    {
        "label": "nullcontext",
        "kind": 6,
        "importPath": "mid-range.contextlib",
        "description": "mid-range.contextlib",
        "peekOfCode": "class nullcontext(object):\n    \"\"\"Context manager that does no additional processing.\n    Used as a stand-in for a normal context manager, when a particular\n    block of code is only sometimes used with a normal context manager:\n    cm = optional_cm if condition else nullcontext()\n    with cm:\n        # Perform operation, using optional_cm if condition is True\n    \"\"\"\n    def __init__(self, enter_result=None):\n        self.enter_result = enter_result",
        "detail": "mid-range.contextlib",
        "documentation": {}
    },
    {
        "label": "Context",
        "kind": 6,
        "importPath": "mid-range.contextlib_api",
        "description": "mid-range.contextlib_api",
        "peekOfCode": "class Context:\n    def __init__(self):\n        print(\"__init__()\")\n    def __enter__(self):\n        print(\"__enter__()\")\n        return self\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        print(\"__exit__()\")\nwith Context():\n    print(\"Doing work in the context\")",
        "detail": "mid-range.contextlib_api",
        "documentation": {}
    },
    {
        "label": "Context",
        "kind": 6,
        "importPath": "mid-range.contextlib_api_error",
        "description": "mid-range.contextlib_api_error",
        "peekOfCode": "class Context:\n    def __init__(self, handle_error):\n        print(\"__init__({})\".format(handle_error))\n        self.handle_error = handle_error\n    def __enter__(self):\n        print(\"__enter__()\")\n        return self\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        print(\"__exit__()\")\n        print(\"  exc_type =\", exc_type)",
        "detail": "mid-range.contextlib_api_error",
        "documentation": {}
    },
    {
        "label": "WithinContext",
        "kind": 6,
        "importPath": "mid-range.contextlib_api_other_object",
        "description": "mid-range.contextlib_api_other_object",
        "peekOfCode": "class WithinContext:\n    def __init__(self, context):\n        print(\"WithinContext.__init__({})\".format(context))\n    def do_something(self):\n        print(\"WithinContext.do_something()\")\n    def __del__(self):\n        print(\"WithinContext.__del__\")\nclass Context:\n    def __init__(self):\n        print(\"Context.__init__()\")",
        "detail": "mid-range.contextlib_api_other_object",
        "documentation": {}
    },
    {
        "label": "Context",
        "kind": 6,
        "importPath": "mid-range.contextlib_api_other_object",
        "description": "mid-range.contextlib_api_other_object",
        "peekOfCode": "class Context:\n    def __init__(self):\n        print(\"Context.__init__()\")\n    def __enter__(self):\n        print(\"Context.__enter__()\")\n        return WithinContext(self)\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        print(\"Context.__exit__()\")\nwith Context() as c:\n    c.do_something()",
        "detail": "mid-range.contextlib_api_other_object",
        "documentation": {}
    },
    {
        "label": "Door",
        "kind": 6,
        "importPath": "mid-range.contextlib_closing",
        "description": "mid-range.contextlib_closing",
        "peekOfCode": "class Door:\n    def __init__(self):\n        print(\"  __init__()\")\n        self.status = \"open\"\n    def close(self):\n        print(\"  close()\")\n        self.status = \"closed\"\nprint(\"Normal Example:\")\nwith contextlib.closing(Door()) as door:\n    print(\"  inside with statement: {}\".format(door.status))",
        "detail": "mid-range.contextlib_closing",
        "documentation": {}
    },
    {
        "label": "make_context",
        "kind": 2,
        "importPath": "mid-range.contextlib_contextmanager",
        "description": "mid-range.contextlib_contextmanager",
        "peekOfCode": "def make_context():\n    print(\"  entering\")\n    try:\n        yield {}\n    except RuntimeError as err:\n        print(\"  ERROR:\", err)\n    finally:\n        print(\"  exiting\")\nprint(\"Normal:\")\nwith make_context() as value:",
        "detail": "mid-range.contextlib_contextmanager",
        "documentation": {}
    },
    {
        "label": "make_context",
        "kind": 2,
        "importPath": "mid-range.contextlib_contextmanager_decorator",
        "description": "mid-range.contextlib_contextmanager_decorator",
        "peekOfCode": "def make_context():\n    print(\"  entering\")\n    try:\n        # Yield control, but not a value, because any value\n        # yielded is not available when the context manager\n        # is used as a decorator.\n        yield\n    except RuntimeError as err:\n        print(\"  ERROR:\", err)\n    finally:",
        "detail": "mid-range.contextlib_contextmanager_decorator",
        "documentation": {}
    },
    {
        "label": "normal",
        "kind": 2,
        "importPath": "mid-range.contextlib_contextmanager_decorator",
        "description": "mid-range.contextlib_contextmanager_decorator",
        "peekOfCode": "def normal():\n    print(\"  inside with statement\")\n@make_context()\ndef throw_error(err):\n    raise err\nprint(\"Normal:\")\nnormal()\nprint(\"\\nHandled error:\")\nthrow_error(RuntimeError(\"showing example of handling an error\"))\nprint(\"\\nUnhandled error:\")",
        "detail": "mid-range.contextlib_contextmanager_decorator",
        "documentation": {}
    },
    {
        "label": "throw_error",
        "kind": 2,
        "importPath": "mid-range.contextlib_contextmanager_decorator",
        "description": "mid-range.contextlib_contextmanager_decorator",
        "peekOfCode": "def throw_error(err):\n    raise err\nprint(\"Normal:\")\nnormal()\nprint(\"\\nHandled error:\")\nthrow_error(RuntimeError(\"showing example of handling an error\"))\nprint(\"\\nUnhandled error:\")\nthrow_error(ValueError(\"this exception is not handled\"))",
        "detail": "mid-range.contextlib_contextmanager_decorator",
        "documentation": {}
    },
    {
        "label": "Tracker",
        "kind": 6,
        "importPath": "mid-range.contextlib_context_managers",
        "description": "mid-range.contextlib_context_managers",
        "peekOfCode": "class Tracker:\n    \"Base class for noisy context managers.\"\n    def __init__(self, i):\n        self.i = i\n    def msg(self, s):\n        print(\"  {}({}): {}\".format(self.__class__.__name__, self.i, s))\n    def __enter__(self):\n        self.msg(\"entering\")\nclass HandleError(Tracker):\n    \"If an exception is received, treat it as handled.\"",
        "detail": "mid-range.contextlib_context_managers",
        "documentation": {}
    },
    {
        "label": "HandleError",
        "kind": 6,
        "importPath": "mid-range.contextlib_context_managers",
        "description": "mid-range.contextlib_context_managers",
        "peekOfCode": "class HandleError(Tracker):\n    \"If an exception is received, treat it as handled.\"\n    def __exit__(self, *exc_details):\n        received_exc = exc_details[1] is not None\n        if received_exc:\n            self.msg(\"handling exception {!r}\".format(exc_details[1]))\n        self.msg(\"exiting {}\".format(received_exc))\n        # Return Boolean value indicating whether the exception\n        # was handled.\n        return received_exc",
        "detail": "mid-range.contextlib_context_managers",
        "documentation": {}
    },
    {
        "label": "PassError",
        "kind": 6,
        "importPath": "mid-range.contextlib_context_managers",
        "description": "mid-range.contextlib_context_managers",
        "peekOfCode": "class PassError(Tracker):\n    \"If an exception is received, propagate it.\"\n    def __exit__(self, *exc_details):\n        received_exc = exc_details[1] is not None\n        if received_exc:\n            self.msg(\"passing exception {!r}\".format(exc_details[1]))\n        self.msg(\"exiting\")\n        # Return False, indicating any exception was not handled.\n        return False\nclass ErrorOnExit(Tracker):",
        "detail": "mid-range.contextlib_context_managers",
        "documentation": {}
    },
    {
        "label": "ErrorOnExit",
        "kind": 6,
        "importPath": "mid-range.contextlib_context_managers",
        "description": "mid-range.contextlib_context_managers",
        "peekOfCode": "class ErrorOnExit(Tracker):\n    \"Cause an exception.\"\n    def __exit__(self, *exc_details):\n        self.msg(\"throwing error\")\n        raise RuntimeError(\"from {}\".format(self.i))\nclass ErrorOnEnter(Tracker):\n    \"Cause an exception.\"\n    def __enter__(self):\n        self.msg(\"throwing error on enter\")\n        raise RuntimeError(\"from {}\".format(self.i))",
        "detail": "mid-range.contextlib_context_managers",
        "documentation": {}
    },
    {
        "label": "ErrorOnEnter",
        "kind": 6,
        "importPath": "mid-range.contextlib_context_managers",
        "description": "mid-range.contextlib_context_managers",
        "peekOfCode": "class ErrorOnEnter(Tracker):\n    \"Cause an exception.\"\n    def __enter__(self):\n        self.msg(\"throwing error on enter\")\n        raise RuntimeError(\"from {}\".format(self.i))\n    def __exit__(self, *exc_info):\n        self.msg(\"exiting\")",
        "detail": "mid-range.contextlib_context_managers",
        "documentation": {}
    },
    {
        "label": "Context",
        "kind": 6,
        "importPath": "mid-range.contextlib_decorator",
        "description": "mid-range.contextlib_decorator",
        "peekOfCode": "class Context(contextlib.ContextDecorator):\n    def __init__(self, how_used):\n        self.how_used = how_used\n        print(\"__init__({})\".format(how_used))\n    def __enter__(self):\n        print(\"__enter__({})\".format(self.how_used))\n        return self\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        print(\"__exit__({})\".format(self.how_used))\n@Context(\"as decorator\")",
        "detail": "mid-range.contextlib_decorator",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "mid-range.contextlib_decorator",
        "description": "mid-range.contextlib_decorator",
        "peekOfCode": "def func(message):\n    print(message)\nprint()\nwith Context(\"as context manager\"):\n    print(\"Doing work in the context\")\nprint()\nfunc(\"Doing work in the wrapped function\")",
        "detail": "mid-range.contextlib_decorator",
        "documentation": {}
    },
    {
        "label": "callback",
        "kind": 2,
        "importPath": "mid-range.contextlib_exitstack_callbacks",
        "description": "mid-range.contextlib_exitstack_callbacks",
        "peekOfCode": "def callback(*args, **kwds):\n    print(\"closing callback({}, {})\".format(args, kwds))\nwith contextlib.ExitStack() as stack:\n    stack.callback(callback, \"arg1\", \"arg2\")\n    stack.callback(callback, arg3=\"val3\")",
        "detail": "mid-range.contextlib_exitstack_callbacks",
        "documentation": {}
    },
    {
        "label": "callback",
        "kind": 2,
        "importPath": "mid-range.contextlib_exitstack_callbacks_error",
        "description": "mid-range.contextlib_exitstack_callbacks_error",
        "peekOfCode": "def callback(*args, **kwds):\n    print(\"closing callback({}, {})\".format(args, kwds))\ntry:\n    with contextlib.ExitStack() as stack:\n        stack.callback(callback, \"arg1\", \"arg2\")\n        stack.callback(callback, arg3=\"val3\")\n        raise RuntimeError(\"thrown error\")\nexcept RuntimeError as err:\n    print(\"ERROR: {}\".format(err))",
        "detail": "mid-range.contextlib_exitstack_callbacks_error",
        "documentation": {}
    },
    {
        "label": "make_context",
        "kind": 2,
        "importPath": "mid-range.contextlib_exitstack_enter_context",
        "description": "mid-range.contextlib_exitstack_enter_context",
        "peekOfCode": "def make_context(i):\n    print(\"{} entering\".format(i))\n    yield {}\n    print(\"{} exiting\".format(i))\ndef variable_stack(n, msg):\n    with contextlib.ExitStack() as stack:\n        for i in range(n):\n            stack.enter_context(make_context(i))\n        print(msg)\nvariable_stack(2, \"inside context\")",
        "detail": "mid-range.contextlib_exitstack_enter_context",
        "documentation": {}
    },
    {
        "label": "variable_stack",
        "kind": 2,
        "importPath": "mid-range.contextlib_exitstack_enter_context",
        "description": "mid-range.contextlib_exitstack_enter_context",
        "peekOfCode": "def variable_stack(n, msg):\n    with contextlib.ExitStack() as stack:\n        for i in range(n):\n            stack.enter_context(make_context(i))\n        print(msg)\nvariable_stack(2, \"inside context\")",
        "detail": "mid-range.contextlib_exitstack_enter_context",
        "documentation": {}
    },
    {
        "label": "variable_stack",
        "kind": 2,
        "importPath": "mid-range.contextlib_exitstack_enter_context_errors",
        "description": "mid-range.contextlib_exitstack_enter_context_errors",
        "peekOfCode": "def variable_stack(contexts):\n    with contextlib.ExitStack() as stack:\n        for c in contexts:\n            stack.enter_context(c)\n    print(\"  outside of stack, any errors were handled\")\nprint(\"No errors:\")\nvariable_stack([HandleError(1), PassError(2)])\nprint(\"\\nError at the end of the context stack:\")\nvariable_stack([HandleError(1), HandleError(2), ErrorOnExit(3)])\nprint(\"\\nError in the middle of the context stack:\")",
        "detail": "mid-range.contextlib_exitstack_enter_context_errors",
        "documentation": {}
    },
    {
        "label": "variable_stack",
        "kind": 2,
        "importPath": "mid-range.contextlib_exitstack_pop_all",
        "description": "mid-range.contextlib_exitstack_pop_all",
        "peekOfCode": "def variable_stack(contexts):\n    with contextlib.ExitStack() as stack:\n        for c in contexts:\n            stack.enter_context(c)\n        # Return the close() method of a new stack as a clean-up\n        # function.\n        return stack.pop_all().close\n    # Explicitly return None, indicating that the ExitStack could\n    # not be initialized cleanly but that cleanup has already\n    # occurred.",
        "detail": "mid-range.contextlib_exitstack_pop_all",
        "documentation": {}
    },
    {
        "label": "cleaner",
        "kind": 5,
        "importPath": "mid-range.contextlib_exitstack_pop_all",
        "description": "mid-range.contextlib_exitstack_pop_all",
        "peekOfCode": "cleaner = variable_stack([HandleError(1), HandleError(2)])\ncleaner()\nprint(\"\\nHandled error building context manager stack:\")\ntry:\n    cleaner = variable_stack([HandleError(1), ErrorOnEnter(2)])\nexcept RuntimeError as err:\n    print(\"caught error {}\".format(err))\nelse:\n    if cleaner is not None:\n        cleaner()",
        "detail": "mid-range.contextlib_exitstack_pop_all",
        "documentation": {}
    },
    {
        "label": "NonFatalError",
        "kind": 6,
        "importPath": "mid-range.contextlib_ignore_error",
        "description": "mid-range.contextlib_ignore_error",
        "peekOfCode": "class NonFatalError(Exception):\n    pass\ndef non_idempotent_operation():\n    raise NonFatalError(\"The operation failed because of existing state\")\ntry:\n    print(\"trying non-idempotent operation\")\n    non_idempotent_operation()\n    print(\"succeeded!\")\nexcept NonFatalError:\n    pass",
        "detail": "mid-range.contextlib_ignore_error",
        "documentation": {}
    },
    {
        "label": "non_idempotent_operation",
        "kind": 2,
        "importPath": "mid-range.contextlib_ignore_error",
        "description": "mid-range.contextlib_ignore_error",
        "peekOfCode": "def non_idempotent_operation():\n    raise NonFatalError(\"The operation failed because of existing state\")\ntry:\n    print(\"trying non-idempotent operation\")\n    non_idempotent_operation()\n    print(\"succeeded!\")\nexcept NonFatalError:\n    pass\nprint(\"done\")",
        "detail": "mid-range.contextlib_ignore_error",
        "documentation": {}
    },
    {
        "label": "misbehaving_function",
        "kind": 2,
        "importPath": "mid-range.contextlib_redirect",
        "description": "mid-range.contextlib_redirect",
        "peekOfCode": "def misbehaving_function(a):\n    sys.stdout.write(\"(stdout) A: {!r}\\n\".format(a))\n    sys.stderr.write(\"(stderr) A: {!r}\\n\".format(a))\ncapture = io.StringIO()\nwith redirect_stdout(capture), redirect_stderr(capture):\n    misbehaving_function(5)\nprint(capture.getvalue())",
        "detail": "mid-range.contextlib_redirect",
        "documentation": {}
    },
    {
        "label": "capture",
        "kind": 5,
        "importPath": "mid-range.contextlib_redirect",
        "description": "mid-range.contextlib_redirect",
        "peekOfCode": "capture = io.StringIO()\nwith redirect_stdout(capture), redirect_stderr(capture):\n    misbehaving_function(5)\nprint(capture.getvalue())",
        "detail": "mid-range.contextlib_redirect",
        "documentation": {}
    },
    {
        "label": "NonFatalError",
        "kind": 6,
        "importPath": "mid-range.contextlib_suppress",
        "description": "mid-range.contextlib_suppress",
        "peekOfCode": "class NonFatalError(Exception):\n    pass\ndef non_idempotent_operation():\n    raise NonFatalError(\"The operation failed because of existing state\")\nwith contextlib.suppress(NonFatalError):\n    print(\"trying non-idempotent operation\")\n    non_idempotent_operation()\n    print(\"succeeded!\")\nprint(\"done\")",
        "detail": "mid-range.contextlib_suppress",
        "documentation": {}
    },
    {
        "label": "non_idempotent_operation",
        "kind": 2,
        "importPath": "mid-range.contextlib_suppress",
        "description": "mid-range.contextlib_suppress",
        "peekOfCode": "def non_idempotent_operation():\n    raise NonFatalError(\"The operation failed because of existing state\")\nwith contextlib.suppress(NonFatalError):\n    print(\"trying non-idempotent operation\")\n    non_idempotent_operation()\n    print(\"succeeded!\")\nprint(\"done\")",
        "detail": "mid-range.contextlib_suppress",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.ContiguousArray",
        "description": "mid-range.ContiguousArray",
        "peekOfCode": "class Solution:\n    def findMaxLength(self, nums: List[int]) -> int:\n        dic = {0: -1}\n        ps = 0\n        max_length = 0\n        for idx, number in enumerate(nums):\n            if number:\n                ps += 1\n            else:\n                ps -= 1",
        "detail": "mid-range.ContiguousArray",
        "documentation": {}
    },
    {
        "label": "findMaxLength",
        "kind": 2,
        "importPath": "mid-range.Contiguous_array",
        "description": "mid-range.Contiguous_array",
        "peekOfCode": "def findMaxLength(nums):\n    d = {}\n    subarr, count = 0, 0\n    for i, v in enumerate(nums):\n        count += 2 * v - 1\n        if count == 0:\n            subarr = i + 1\n        if count in d:\n            subarr = max(subarr, i - d[count])\n        else:",
        "detail": "mid-range.Contiguous_array",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.continuous-subarray-sum",
        "description": "mid-range.continuous-subarray-sum",
        "peekOfCode": "class Solution(object):\n    def checkSubarraySum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        sum, pre, s = 0, 0, set()\n        for item in nums:\n            sum += item",
        "detail": "mid-range.continuous-subarray-sum",
        "documentation": {}
    },
    {
        "label": "ControlThread",
        "kind": 6,
        "importPath": "mid-range.control",
        "description": "mid-range.control",
        "peekOfCode": "class ControlThread(Thread):\n    def __init__(self, **kwargs):\n        Thread.__init__(self, **kwargs)\n        self.io_loop = IOLoop(make_current=False)\n        self.pydev_do_not_trace = True\n        self.is_pydev_daemon_thread = True\n    def run(self):\n        self.io_loop.make_current()\n        try:\n            self.io_loop.start()",
        "detail": "mid-range.control",
        "documentation": {}
    },
    {
        "label": "L,",
        "kind": 5,
        "importPath": "mid-range.conversion",
        "description": "mid-range.conversion",
        "peekOfCode": "L, = eval(dir()[0])\ns = 0\nwhile len(L) > 1:\n    L = (\n        numpy.add(L[:-1:2], L[1::2])\n        if s % 2 == 0\n        else numpy.multiply(L[:-1:2], L[1::2])\n    )\n    s += 1\nreturn L[0]",
        "detail": "mid-range.conversion",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.conversion",
        "description": "mid-range.conversion",
        "peekOfCode": "s = 0\nwhile len(L) > 1:\n    L = (\n        numpy.add(L[:-1:2], L[1::2])\n        if s % 2 == 0\n        else numpy.multiply(L[:-1:2], L[1::2])\n    )\n    s += 1\nreturn L[0]",
        "detail": "mid-range.conversion",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "mid-range.convert-array",
        "description": "mid-range.convert-array",
        "peekOfCode": "def f(arr):\n    \"\"\"sorts the array by numbers in place using constant extra space\"\"\"\n    position = 0\n    for i in xrange(len(arr) / 3):\n        gap = (len(arr) - position) / 3\n        arr.insert(position + 1, arr.pop(position + gap * 1))\n        arr.insert(position + 2, arr.pop(position + gap * 2))\n        position += 3\n    return arr",
        "detail": "mid-range.convert-array",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.convert-bst-to-greater-tree",
        "description": "mid-range.convert-bst-to-greater-tree",
        "peekOfCode": "class Solution(object):\n    def convertBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        def dfs(node):\n            if node == None:\n                return\n            else:",
        "detail": "mid-range.convert-bst-to-greater-tree",
        "documentation": {}
    },
    {
        "label": "ConvertFiguresPreprocessor",
        "kind": 6,
        "importPath": "mid-range.convertfigures",
        "description": "mid-range.convertfigures",
        "peekOfCode": "class ConvertFiguresPreprocessor(Preprocessor):\n    \"\"\"\n    Converts all of the outputs in a notebook from one format to another.\n    \"\"\"\n    from_format = Unicode(help=\"Format the converter accepts\").tag(config=True)\n    to_format = Unicode(help=\"Format the converter writes\").tag(config=True)\n    def __init__(self, **kw):\n        \"\"\"\n        Public constructor\n        \"\"\"",
        "detail": "mid-range.convertfigures",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.Convert_Sorted_Array_to_Binary_Search_Tree",
        "description": "mid-range.Convert_Sorted_Array_to_Binary_Search_Tree",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    def sortedArrayToBST(self, nums):\n        def helper(left, right):\n            if left <= right:\n                mid = left + ((right - left) // 2)",
        "detail": "mid-range.Convert_Sorted_Array_to_Binary_Search_Tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Convert_Sorted_Array_to_Binary_Search_Tree",
        "description": "mid-range.Convert_Sorted_Array_to_Binary_Search_Tree",
        "peekOfCode": "class Solution:\n    def sortedArrayToBST(self, nums):\n        def helper(left, right):\n            if left <= right:\n                mid = left + ((right - left) // 2)\n                newnode = TreeNode(nums[mid])\n                newnode.left = helper(left, mid - 1)\n                newnode.right = helper(mid + 1, right)\n                return newnode\n        return helper(0, len(nums) - 1)",
        "detail": "mid-range.Convert_Sorted_Array_to_Binary_Search_Tree",
        "documentation": {}
    },
    {
        "label": "convert_to_negative",
        "kind": 2,
        "importPath": "mid-range.convert_to_negative",
        "description": "mid-range.convert_to_negative",
        "peekOfCode": "def convert_to_negative(img):\n    # getting number of pixels in the image\n    pixel_h, pixel_v = img.shape[0], img.shape[1]\n    # converting each pixel's color to its negative\n    for i in range(pixel_h):\n        for j in range(pixel_v):\n            img[i][j] = [255, 255, 255] - img[i][j]\n    return img\nif __name__ == \"__main__\":\n    # read original image",
        "detail": "mid-range.convert_to_negative",
        "documentation": {}
    },
    {
        "label": "im2col",
        "kind": 2,
        "importPath": "mid-range.convolve",
        "description": "mid-range.convolve",
        "peekOfCode": "def im2col(image, block_size):\n    rows, cols = image.shape\n    dst_height = cols - block_size[1] + 1\n    dst_width = rows - block_size[0] + 1\n    image_array = zeros((dst_height * dst_width, block_size[1] * block_size[0]))\n    row = 0\n    for i in range(0, dst_height):\n        for j in range(0, dst_width):\n            window = ravel(image[i : i + block_size[0], j : j + block_size[1]])\n            image_array[row, :] = window",
        "detail": "mid-range.convolve",
        "documentation": {}
    },
    {
        "label": "img_convolve",
        "kind": 2,
        "importPath": "mid-range.convolve",
        "description": "mid-range.convolve",
        "peekOfCode": "def img_convolve(image, filter_kernel):\n    height, width = image.shape[0], image.shape[1]\n    k_size = filter_kernel.shape[0]\n    pad_size = k_size // 2\n    # Pads image with the edge values of array.\n    image_tmp = pad(image, pad_size, mode=\"edge\")\n    # im2col, turn the k_size*k_size pixels into a row and np.vstack all rows\n    image_array = im2col(image_tmp, (k_size, k_size))\n    #  turn the kernel into shape(k*k, 1)\n    kernel_array = ravel(filter_kernel)",
        "detail": "mid-range.convolve",
        "documentation": {}
    },
    {
        "label": "host",
        "kind": 5,
        "importPath": "mid-range.con_file",
        "description": "mid-range.con_file",
        "peekOfCode": "host = \"localhost\"\nmongoPort = 27017\nSOCKS5_PROXY_PORT = 1080\nauth = \"\"\npasscode = \"\"\n# if proxy is not working please update the auth and passcode",
        "detail": "mid-range.con_file",
        "documentation": {}
    },
    {
        "label": "mongoPort",
        "kind": 5,
        "importPath": "mid-range.con_file",
        "description": "mid-range.con_file",
        "peekOfCode": "mongoPort = 27017\nSOCKS5_PROXY_PORT = 1080\nauth = \"\"\npasscode = \"\"\n# if proxy is not working please update the auth and passcode",
        "detail": "mid-range.con_file",
        "documentation": {}
    },
    {
        "label": "SOCKS5_PROXY_PORT",
        "kind": 5,
        "importPath": "mid-range.con_file",
        "description": "mid-range.con_file",
        "peekOfCode": "SOCKS5_PROXY_PORT = 1080\nauth = \"\"\npasscode = \"\"\n# if proxy is not working please update the auth and passcode",
        "detail": "mid-range.con_file",
        "documentation": {}
    },
    {
        "label": "auth",
        "kind": 5,
        "importPath": "mid-range.con_file",
        "description": "mid-range.con_file",
        "peekOfCode": "auth = \"\"\npasscode = \"\"\n# if proxy is not working please update the auth and passcode",
        "detail": "mid-range.con_file",
        "documentation": {}
    },
    {
        "label": "passcode",
        "kind": 5,
        "importPath": "mid-range.con_file",
        "description": "mid-range.con_file",
        "peekOfCode": "passcode = \"\"\n# if proxy is not working please update the auth and passcode",
        "detail": "mid-range.con_file",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "mid-range.copy_deep",
        "description": "mid-range.copy_deep",
        "peekOfCode": "class MyClass:\n    def __init__(self, name):\n        self.name = name\n    def __eq__(self, other):\n        return self.name == other.name\n    def __gt__(self, other):\n        return self.name > other.name\na = MyClass(\"a\")\nmy_list = [a]\ndup = copy.deepcopy(my_list)",
        "detail": "mid-range.copy_deep",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.copy_deep",
        "description": "mid-range.copy_deep",
        "peekOfCode": "a = MyClass(\"a\")\nmy_list = [a]\ndup = copy.deepcopy(my_list)\nprint(\"             my_list:\", my_list)\nprint(\"                 dup:\", dup)\nprint(\"      dup is my_list:\", (dup is my_list))\nprint(\"      dup == my_list:\", (dup == my_list))\nprint(\"dup[0] is my_list[0]:\", (dup[0] is my_list[0]))\nprint(\"dup[0] == my_list[0]:\", (dup[0] == my_list[0]))",
        "detail": "mid-range.copy_deep",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "mid-range.copy_deep",
        "description": "mid-range.copy_deep",
        "peekOfCode": "my_list = [a]\ndup = copy.deepcopy(my_list)\nprint(\"             my_list:\", my_list)\nprint(\"                 dup:\", dup)\nprint(\"      dup is my_list:\", (dup is my_list))\nprint(\"      dup == my_list:\", (dup == my_list))\nprint(\"dup[0] is my_list[0]:\", (dup[0] is my_list[0]))\nprint(\"dup[0] == my_list[0]:\", (dup[0] == my_list[0]))",
        "detail": "mid-range.copy_deep",
        "documentation": {}
    },
    {
        "label": "dup",
        "kind": 5,
        "importPath": "mid-range.copy_deep",
        "description": "mid-range.copy_deep",
        "peekOfCode": "dup = copy.deepcopy(my_list)\nprint(\"             my_list:\", my_list)\nprint(\"                 dup:\", dup)\nprint(\"      dup is my_list:\", (dup is my_list))\nprint(\"      dup == my_list:\", (dup == my_list))\nprint(\"dup[0] is my_list[0]:\", (dup[0] is my_list[0]))\nprint(\"dup[0] == my_list[0]:\", (dup[0] == my_list[0]))",
        "detail": "mid-range.copy_deep",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "mid-range.copy_hooks",
        "description": "mid-range.copy_hooks",
        "peekOfCode": "class MyClass:\n    def __init__(self, name):\n        self.name = name\n    def __eq__(self, other):\n        return self.name == other.name\n    def __gt__(self, other):\n        return self.name > other.name\n    def __copy__(self):\n        print(\"__copy__()\")\n        return MyClass(self.name)",
        "detail": "mid-range.copy_hooks",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.copy_hooks",
        "description": "mid-range.copy_hooks",
        "peekOfCode": "a = MyClass(\"a\")\nsc = copy.copy(a)\ndc = copy.deepcopy(a)",
        "detail": "mid-range.copy_hooks",
        "documentation": {}
    },
    {
        "label": "sc",
        "kind": 5,
        "importPath": "mid-range.copy_hooks",
        "description": "mid-range.copy_hooks",
        "peekOfCode": "sc = copy.copy(a)\ndc = copy.deepcopy(a)",
        "detail": "mid-range.copy_hooks",
        "documentation": {}
    },
    {
        "label": "dc",
        "kind": 5,
        "importPath": "mid-range.copy_hooks",
        "description": "mid-range.copy_hooks",
        "peekOfCode": "dc = copy.deepcopy(a)",
        "detail": "mid-range.copy_hooks",
        "documentation": {}
    },
    {
        "label": "my_hash",
        "kind": 2,
        "importPath": "mid-range.copy_of_dictionaries",
        "description": "mid-range.copy_of_dictionaries",
        "peekOfCode": "def my_hash(key):\n    sum = 0\n    c in key:\n        nc = ord(c)\n        print(c)\n        print(nc)\nmy_hash(\"A\")\n\"\"\"\nAdd \"Herb\" to the phonebook with the number 7653420789.\nRemove \"Bill\" from the phonebook.",
        "detail": "mid-range.copy_of_dictionaries",
        "documentation": {}
    },
    {
        "label": "phonebook",
        "kind": 5,
        "importPath": "mid-range.copy_of_dictionaries",
        "description": "mid-range.copy_of_dictionaries",
        "peekOfCode": "phonebook = {\n    \"Abe\": 4569874321,\n    \"Bill\": 7659803241,\n    \"Barry\": 6573214789\n}\n# YOUR CODE HERE\n# Should print Herb is in the phonebook.\nif \"Herb\" in phonebook:\n    print(\"Herb is in the phonebook.\")\n# Should print Bill is not in the phonebook.",
        "detail": "mid-range.copy_of_dictionaries",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "mid-range.copy_recursion",
        "description": "mid-range.copy_recursion",
        "peekOfCode": "class Graph:\n    def __init__(self, name, connections):\n        self.name = name\n        self.connections = connections\n    def add_connection(self, other):\n        self.connections.append(other)\n    def __repr__(self):\n        return \"Graph(name={}, id={})\".format(self.name, id(self))\n    def __deepcopy__(self, memo):\n        print(\"\\nCalling __deepcopy__ for {!r}\".format(self))",
        "detail": "mid-range.copy_recursion",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "mid-range.copy_recursion",
        "description": "mid-range.copy_recursion",
        "peekOfCode": "root = Graph(\"root\", [])\na = Graph(\"a\", [root])\nb = Graph(\"b\", [a, root])\nroot.add_connection(a)\nroot.add_connection(b)\ndup = copy.deepcopy(root)",
        "detail": "mid-range.copy_recursion",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.copy_recursion",
        "description": "mid-range.copy_recursion",
        "peekOfCode": "a = Graph(\"a\", [root])\nb = Graph(\"b\", [a, root])\nroot.add_connection(a)\nroot.add_connection(b)\ndup = copy.deepcopy(root)",
        "detail": "mid-range.copy_recursion",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.copy_recursion",
        "description": "mid-range.copy_recursion",
        "peekOfCode": "b = Graph(\"b\", [a, root])\nroot.add_connection(a)\nroot.add_connection(b)\ndup = copy.deepcopy(root)",
        "detail": "mid-range.copy_recursion",
        "documentation": {}
    },
    {
        "label": "dup",
        "kind": 5,
        "importPath": "mid-range.copy_recursion",
        "description": "mid-range.copy_recursion",
        "peekOfCode": "dup = copy.deepcopy(root)",
        "detail": "mid-range.copy_recursion",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "mid-range.copy_shallow",
        "description": "mid-range.copy_shallow",
        "peekOfCode": "class MyClass:\n    def __init__(self, name):\n        self.name = name\n    def __eq__(self, other):\n        return self.name == other.name\n    def __gt__(self, other):\n        return self.name > other.name\na = MyClass(\"a\")\nmy_list = [a]\ndup = copy.copy(my_list)",
        "detail": "mid-range.copy_shallow",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.copy_shallow",
        "description": "mid-range.copy_shallow",
        "peekOfCode": "a = MyClass(\"a\")\nmy_list = [a]\ndup = copy.copy(my_list)\nprint(\"             my_list:\", my_list)\nprint(\"                 dup:\", dup)\nprint(\"      dup is my_list:\", (dup is my_list))\nprint(\"      dup == my_list:\", (dup == my_list))\nprint(\"dup[0] is my_list[0]:\", (dup[0] is my_list[0]))\nprint(\"dup[0] == my_list[0]:\", (dup[0] == my_list[0]))",
        "detail": "mid-range.copy_shallow",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "mid-range.copy_shallow",
        "description": "mid-range.copy_shallow",
        "peekOfCode": "my_list = [a]\ndup = copy.copy(my_list)\nprint(\"             my_list:\", my_list)\nprint(\"                 dup:\", dup)\nprint(\"      dup is my_list:\", (dup is my_list))\nprint(\"      dup == my_list:\", (dup == my_list))\nprint(\"dup[0] is my_list[0]:\", (dup[0] is my_list[0]))\nprint(\"dup[0] == my_list[0]:\", (dup[0] == my_list[0]))",
        "detail": "mid-range.copy_shallow",
        "documentation": {}
    },
    {
        "label": "dup",
        "kind": 5,
        "importPath": "mid-range.copy_shallow",
        "description": "mid-range.copy_shallow",
        "peekOfCode": "dup = copy.copy(my_list)\nprint(\"             my_list:\", my_list)\nprint(\"                 dup:\", dup)\nprint(\"      dup is my_list:\", (dup is my_list))\nprint(\"      dup == my_list:\", (dup == my_list))\nprint(\"dup[0] is my_list[0]:\", (dup[0] is my_list[0]))\nprint(\"dup[0] == my_list[0]:\", (dup[0] == my_list[0]))",
        "detail": "mid-range.copy_shallow",
        "documentation": {}
    },
    {
        "label": "maxMultiple",
        "kind": 2,
        "importPath": "mid-range.Core 005 - maxMultiple",
        "description": "mid-range.Core 005 - maxMultiple",
        "peekOfCode": "def maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):\n        if num % divisor == 0:\n            return num\n    return 0",
        "detail": "mid-range.Core 005 - maxMultiple",
        "documentation": {}
    },
    {
        "label": "lateRide",
        "kind": 2,
        "importPath": "mid-range.Core 007 - lateRide",
        "description": "mid-range.Core 007 - lateRide",
        "peekOfCode": "def lateRide(n):\n    hours = n // 60\n    minutes = n % 60\n    return (hours // 10) + (hours % 10) + (minutes // 10) + (minutes % 10)",
        "detail": "mid-range.Core 007 - lateRide",
        "documentation": {}
    },
    {
        "label": "phoneCall",
        "kind": 2,
        "importPath": "mid-range.Core 008 - phoneCall",
        "description": "mid-range.Core 008 - phoneCall",
        "peekOfCode": "def phoneCall(min1, min2_10, min11, s):\n    if s < min1:\n        return 0\n    if s == min1:\n        return 1\n    if s <= min1 + (min2_10 * 9):\n        s -= min1\n        return (s // min2_10) + 1\n    s -= min1\n    s -= min2_10 * 9",
        "detail": "mid-range.Core 008 - phoneCall",
        "documentation": {}
    },
    {
        "label": "knapsackLight",
        "kind": 2,
        "importPath": "mid-range.Core 010 - knapsackLight",
        "description": "mid-range.Core 010 - knapsackLight",
        "peekOfCode": "def knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and weight2 <= maxW:\n        return max(value1, value2)\n    if weight1 <= maxW:\n        return value1\n    if weight2 <= maxW:\n        return value2\n    return 0",
        "detail": "mid-range.Core 010 - knapsackLight",
        "documentation": {}
    },
    {
        "label": "tennisSet",
        "kind": 2,
        "importPath": "mid-range.Core 014 - tennisSet",
        "description": "mid-range.Core 014 - tennisSet",
        "peekOfCode": "def tennisSet(score1, score2):\n    if max(score1, score2) == 6 and min(score1, score2) < 5:\n        return True\n    if 5 <= min(score1, score2) <= 6 and max(score1, score2) == 7:\n        return True\n    return False",
        "detail": "mid-range.Core 014 - tennisSet",
        "documentation": {}
    },
    {
        "label": "metroCard",
        "kind": 2,
        "importPath": "mid-range.Core 016 - metroCard",
        "description": "mid-range.Core 016 - metroCard",
        "peekOfCode": "def metroCard(lastNumberOfDays):\n    if lastNumberOfDays == 30 or lastNumberOfDays == 28:\n        return [31]\n    return [28, 30, 31]",
        "detail": "mid-range.Core 016 - metroCard",
        "documentation": {}
    },
    {
        "label": "arrayPacking",
        "kind": 2,
        "importPath": "mid-range.Core 018 - arrayPacking",
        "description": "mid-range.Core 018 - arrayPacking",
        "peekOfCode": "def arrayPacking(a):\n    binary_array = [bin(num)[2:].rjust(8, \"0\") for num in a]\n    out_string = \"\".join(binary_array[::-1])\n    return int(out_string, 2)",
        "detail": "mid-range.Core 018 - arrayPacking",
        "documentation": {}
    },
    {
        "label": "rangeBitCount",
        "kind": 2,
        "importPath": "mid-range.Core 019 - rangeBitCount",
        "description": "mid-range.Core 019 - rangeBitCount",
        "peekOfCode": "def rangeBitCount(a, b):\n    array = list(range(a, b + 1))\n    binary_array = [bin(num) for num in array]\n    count_array = [binary.count(\"1\") for binary in binary_array]\n    return sum(count_array)",
        "detail": "mid-range.Core 019 - rangeBitCount",
        "documentation": {}
    },
    {
        "label": "leastFactorial",
        "kind": 2,
        "importPath": "mid-range.Core 025 - leastFactorial",
        "description": "mid-range.Core 025 - leastFactorial",
        "peekOfCode": "def leastFactorial(n):\n    factorial = 1\n    index = 1\n    while factorial < n:\n        index += 1\n        factorial *= index\n    return factorial",
        "detail": "mid-range.Core 025 - leastFactorial",
        "documentation": {}
    },
    {
        "label": "countSumOfTwoRepresentations2",
        "kind": 2,
        "importPath": "mid-range.Core 026 - countSumOfTwoRepresentations2",
        "description": "mid-range.Core 026 - countSumOfTwoRepresentations2",
        "peekOfCode": "def countSumOfTwoRepresentations2(n, l, r):\n    count = 0\n    a = max(n - r, l)\n    b = n - a\n    while a <= r and a <= b:\n        count += 1\n        a += 1\n        b -= 1\n    return count",
        "detail": "mid-range.Core 026 - countSumOfTwoRepresentations2",
        "documentation": {}
    },
    {
        "label": "magicalWell",
        "kind": 2,
        "importPath": "mid-range.Core 027 - magicalWell",
        "description": "mid-range.Core 027 - magicalWell",
        "peekOfCode": "def magicalWell(a, b, n):\n    total = 0\n    for i in range(n):\n        total += a * b\n        a += 1\n        b += 1\n    return total",
        "detail": "mid-range.Core 027 - magicalWell",
        "documentation": {}
    },
    {
        "label": "lineUp",
        "kind": 2,
        "importPath": "mid-range.Core 028 - lineUp",
        "description": "mid-range.Core 028 - lineUp",
        "peekOfCode": "def lineUp(commands):\n    count = 0\n    smart_student = 0\n    dumb_student = 0\n    for command in commands:\n        if command == \"L\":\n            smart_student = (smart_student - 1) % 4\n            dumb_student = (dumb_student + 1) % 4\n        elif command == \"R\":\n            smart_student = (smart_student + 1) % 4",
        "detail": "mid-range.Core 028 - lineUp",
        "documentation": {}
    },
    {
        "label": "additionWithoutCarrying",
        "kind": 2,
        "importPath": "mid-range.Core 029 - additionWithoutCarrying",
        "description": "mid-range.Core 029 - additionWithoutCarrying",
        "peekOfCode": "def additionWithoutCarrying(param1, param2):\n    # Convert numbers to strings\n    str1 = str(param1)\n    str2 = str(param2)\n    # Pad both to the same length with zeroes (to the left of the numbers)\n    length = max(len(str2), len(str1))\n    str1 = str1.rjust(length, \"0\")\n    str2 = str2.rjust(length, \"0\")\n    output = []\n    for num1, num2 in zip(str1, str2):",
        "detail": "mid-range.Core 029 - additionWithoutCarrying",
        "documentation": {}
    },
    {
        "label": "appleBoxes",
        "kind": 2,
        "importPath": "mid-range.Core 030 - appleBoxes",
        "description": "mid-range.Core 030 - appleBoxes",
        "peekOfCode": "def appleBoxes(k):\n    red = 0\n    yellow = 0\n    for i in range(1, k + 1, 2):\n        yellow += i * i\n    for i in range(2, k + 1, 2):\n        red += i * i\n    return red - yellow",
        "detail": "mid-range.Core 030 - appleBoxes",
        "documentation": {}
    },
    {
        "label": "increaseNumberRoundness",
        "kind": 2,
        "importPath": "mid-range.Core 031 - increaseNumberRoundness",
        "description": "mid-range.Core 031 - increaseNumberRoundness",
        "peekOfCode": "def increaseNumberRoundness(n):\n    string = str(n)\n    # Check for immediate rejection\n    if \"0\" not in string or len(string) < 2:\n        return False\n    # Since we know there's a 0, if it's not on\n    # the left, then we know to accept\n    if string[-1] != \"0\":\n        return True\n    # If there is only one 0, it must be at the end, so reject.",
        "detail": "mid-range.Core 031 - increaseNumberRoundness",
        "documentation": {}
    },
    {
        "label": "rounders",
        "kind": 2,
        "importPath": "mid-range.Core 032 - rounders",
        "description": "mid-range.Core 032 - rounders",
        "peekOfCode": "def rounders(value):\n    length = len(str(value))\n    magnitude = length - 1\n    for i in range(length - 1):\n        value = int((value / 10) + 0.5)\n    return value * (10 ** magnitude)",
        "detail": "mid-range.Core 032 - rounders",
        "documentation": {}
    },
    {
        "label": "candles",
        "kind": 2,
        "importPath": "mid-range.Core 033 - candles",
        "description": "mid-range.Core 033 - candles",
        "peekOfCode": "def candles(candlesNumber, makeNew):\n    totalBurned = 0\n    leftovers = 0\n    while candlesNumber > 0:\n        totalBurned += candlesNumber\n        leftovers += candlesNumber\n        candlesNumber = 0\n        candlesNumber = leftovers // makeNew\n        leftovers = leftovers % makeNew\n    return totalBurned",
        "detail": "mid-range.Core 033 - candles",
        "documentation": {}
    },
    {
        "label": "countBlackCells",
        "kind": 2,
        "importPath": "mid-range.Core 034 - countBlackCells",
        "description": "mid-range.Core 034 - countBlackCells",
        "peekOfCode": "def countBlackCells(n, m):\n    gcd = find_gcd(n, m)\n    line_cells = n + m - gcd\n    line_corner_cells = (gcd - 1) * 2\n    return line_cells + line_corner_cells\ndef find_gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a",
        "detail": "mid-range.Core 034 - countBlackCells",
        "documentation": {}
    },
    {
        "label": "find_gcd",
        "kind": 2,
        "importPath": "mid-range.Core 034 - countBlackCells",
        "description": "mid-range.Core 034 - countBlackCells",
        "peekOfCode": "def find_gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a",
        "detail": "mid-range.Core 034 - countBlackCells",
        "documentation": {}
    },
    {
        "label": "arrayReplace",
        "kind": 2,
        "importPath": "mid-range.Core 036 - arrayReplace",
        "description": "mid-range.Core 036 - arrayReplace",
        "peekOfCode": "def arrayReplace(inputArray, elemToReplace, substitutionElem):\n    output = [\n        elem if elem != elemToReplace else substitutionElem for elem in inputArray\n    ]\n    return output",
        "detail": "mid-range.Core 036 - arrayReplace",
        "documentation": {}
    },
    {
        "label": "firstReverseTry",
        "kind": 2,
        "importPath": "mid-range.Core 037 - firstReverseTry",
        "description": "mid-range.Core 037 - firstReverseTry",
        "peekOfCode": "def firstReverseTry(arr):\n    if len(arr) < 2:\n        return arr\n    if len(arr) < 4:\n        return arr[::-1]\n    return arr[-1:] + arr[1:-1] + arr[:1]",
        "detail": "mid-range.Core 037 - firstReverseTry",
        "documentation": {}
    },
    {
        "label": "isSmooth",
        "kind": 2,
        "importPath": "mid-range.Core 040 - isSmooth",
        "description": "mid-range.Core 040 - isSmooth",
        "peekOfCode": "def isSmooth(arr):\n    if arr[0] != arr[-1]:\n        return False\n    if len(arr) % 2 == 0:\n        middle = arr[len(arr) // 2] + arr[(len(arr) // 2) - 1]\n    else:\n        middle = arr[len(arr) // 2]\n    return arr[0] == middle",
        "detail": "mid-range.Core 040 - isSmooth",
        "documentation": {}
    },
    {
        "label": "replaceMiddle",
        "kind": 2,
        "importPath": "mid-range.Core 041 - replaceMiddle",
        "description": "mid-range.Core 041 - replaceMiddle",
        "peekOfCode": "def replaceMiddle(arr):\n    if len(arr) % 2 != 0:\n        return arr\n    right_middle = len(arr) // 2\n    middle_value = arr[right_middle] + arr[right_middle - 1]\n    return arr[: right_middle - 1] + [middle_value] + arr[right_middle + 1 :]",
        "detail": "mid-range.Core 041 - replaceMiddle",
        "documentation": {}
    },
    {
        "label": "makeArrayConsecutive2",
        "kind": 2,
        "importPath": "mid-range.Core 042 - makeArrayConsecutive2",
        "description": "mid-range.Core 042 - makeArrayConsecutive2",
        "peekOfCode": "def makeArrayConsecutive2(statues):\n    count = 0\n    for i in range(min(statues), max(statues)):\n        if i not in statues:\n            count += 1\n    return count",
        "detail": "mid-range.Core 042 - makeArrayConsecutive2",
        "documentation": {}
    },
    {
        "label": "isPower",
        "kind": 2,
        "importPath": "mid-range.Core 043 - isPower",
        "description": "mid-range.Core 043 - isPower",
        "peekOfCode": "def isPower(n):\n    if n == 1:\n        return True\n    a = 2\n    b = 2\n    while a ** 2 <= n:\n        while a ** b <= n:\n            if a ** b == n:\n                return True\n            b += 1",
        "detail": "mid-range.Core 043 - isPower",
        "documentation": {}
    },
    {
        "label": "isSumOfConsecutive2",
        "kind": 2,
        "importPath": "mid-range.Core 044 - isSumOfConsecutive2",
        "description": "mid-range.Core 044 - isSumOfConsecutive2",
        "peekOfCode": "def isSumOfConsecutive2(n):\n    count = 0\n    right = 2\n    arr = [1, 2]\n    while right <= (n // 2) + 1:\n        total = sum(arr)\n        if total == n:\n            count += 1\n            del arr[0]\n        elif total < n:",
        "detail": "mid-range.Core 044 - isSumOfConsecutive2",
        "documentation": {}
    },
    {
        "label": "squareDigitsSequence",
        "kind": 2,
        "importPath": "mid-range.Core 045 - squareDigitsSequence",
        "description": "mid-range.Core 045 - squareDigitsSequence",
        "peekOfCode": "def squareDigitsSequence(a0):\n    sequence = [a0]\n    while sequence[-1] not in sequence[:-1]:\n        next_value = 0\n        for digit in str(sequence[-1]):\n            next_value += int(digit) ** 2\n        sequence.append(next_value)\n    return len(sequence)",
        "detail": "mid-range.Core 045 - squareDigitsSequence",
        "documentation": {}
    },
    {
        "label": "pagesNumberingWithInk",
        "kind": 2,
        "importPath": "mid-range.Core 046 - pagesNumberingWithInk",
        "description": "mid-range.Core 046 - pagesNumberingWithInk",
        "peekOfCode": "def pagesNumberingWithInk(current, numberOfDigits):\n    numberOfDigits -= len(str(current))\n    next_digits = len(str(current + 1))\n    while numberOfDigits >= next_digits:\n        current += 1\n        numberOfDigits -= next_digits\n        next_digits = len(str(current))\n    return current",
        "detail": "mid-range.Core 046 - pagesNumberingWithInk",
        "documentation": {}
    },
    {
        "label": "comfortableNumbers",
        "kind": 2,
        "importPath": "mid-range.Core 047 - comfortableNumbers",
        "description": "mid-range.Core 047 - comfortableNumbers",
        "peekOfCode": "def comfortableNumbers(l, r):\n    count = 0\n    for a in range(l, r):\n        for b in range(a + 1, r + 1):\n            a_sum = sum(int(digit) for digit in str(a))\n            b_sum = sum(int(digit) for digit in str(b))\n            if b <= a + a_sum and a >= b - b_sum:\n                count += 1\n    return count",
        "detail": "mid-range.Core 047 - comfortableNumbers",
        "documentation": {}
    },
    {
        "label": "weakNumbers",
        "kind": 2,
        "importPath": "mid-range.Core 048 - weakNumbers",
        "description": "mid-range.Core 048 - weakNumbers",
        "peekOfCode": "def weakNumbers(n):\n    all_factors = [count_factors(num) for num in range(1, n + 1)]\n    weaknesses = []\n    for num, num_factors in enumerate(all_factors, 1):\n        weakness = 0\n        for factor in all_factors[:num]:\n            if factor > num_factors:\n                weakness += 1\n        weaknesses.append(weakness)\n    weakest = max(weaknesses)",
        "detail": "mid-range.Core 048 - weakNumbers",
        "documentation": {}
    },
    {
        "label": "count_factors",
        "kind": 2,
        "importPath": "mid-range.Core 048 - weakNumbers",
        "description": "mid-range.Core 048 - weakNumbers",
        "peekOfCode": "def count_factors(n):\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\nprint(weakNumbers(500))",
        "detail": "mid-range.Core 048 - weakNumbers",
        "documentation": {}
    },
    {
        "label": "rectangleRotation",
        "kind": 2,
        "importPath": "mid-range.Core 049 - rectangleRotation",
        "description": "mid-range.Core 049 - rectangleRotation",
        "peekOfCode": "def rectangleRotation(a, b):\n    n = a / (2 ** 0.5)\n    m = b / (2 ** 0.5)\n    points = (math.floor(n) * math.floor(m)) + (math.ceil(n) * math.ceil(m))\n    if math.floor(n) % 2 != math.floor(m) % 2:\n        points -= 1\n    return points\n# rectangleRotation(6, 4)\nprint(rectangleRotation(8, 6))",
        "detail": "mid-range.Core 049 - rectangleRotation",
        "documentation": {}
    },
    {
        "label": "maxMultiple",
        "kind": 2,
        "importPath": "mid-range.Core_005_-_maxMultiple",
        "description": "mid-range.Core_005_-_maxMultiple",
        "peekOfCode": "def maxMultiple(divisor, bound):\n    for num in range(bound, 1, -1):\n        if num % divisor == 0:\n            return num\n    return 0",
        "detail": "mid-range.Core_005_-_maxMultiple",
        "documentation": {}
    },
    {
        "label": "lateRide",
        "kind": 2,
        "importPath": "mid-range.Core_007_-_lateRide",
        "description": "mid-range.Core_007_-_lateRide",
        "peekOfCode": "def lateRide(n):\n    hours = n // 60\n    minutes = n % 60\n    return (hours // 10) + (hours % 10) + (minutes // 10) + (minutes % 10)",
        "detail": "mid-range.Core_007_-_lateRide",
        "documentation": {}
    },
    {
        "label": "phoneCall",
        "kind": 2,
        "importPath": "mid-range.Core_008_-_phoneCall",
        "description": "mid-range.Core_008_-_phoneCall",
        "peekOfCode": "def phoneCall(min1, min2_10, min11, s):\n    if s < min1:\n        return 0\n    if s == min1:\n        return 1\n    if s <= min1 + (min2_10 * 9):\n        s -= min1\n        return (s // min2_10) + 1\n    s -= min1\n    s -= min2_10 * 9",
        "detail": "mid-range.Core_008_-_phoneCall",
        "documentation": {}
    },
    {
        "label": "knapsackLight",
        "kind": 2,
        "importPath": "mid-range.Core_010_-_knapsackLight",
        "description": "mid-range.Core_010_-_knapsackLight",
        "peekOfCode": "def knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if weight1 <= maxW and weight2 <= maxW:\n        return max(value1, value2)\n    if weight1 <= maxW:\n        return value1\n    if weight2 <= maxW:\n        return value2\n    return 0",
        "detail": "mid-range.Core_010_-_knapsackLight",
        "documentation": {}
    },
    {
        "label": "tennisSet",
        "kind": 2,
        "importPath": "mid-range.Core_014_-_tennisSet",
        "description": "mid-range.Core_014_-_tennisSet",
        "peekOfCode": "def tennisSet(score1, score2):\n    if max(score1, score2) == 6 and min(score1, score2) < 5:\n        return True\n    if 5 <= min(score1, score2) <= 6 and max(score1, score2) == 7:\n        return True\n    return False",
        "detail": "mid-range.Core_014_-_tennisSet",
        "documentation": {}
    },
    {
        "label": "metroCard",
        "kind": 2,
        "importPath": "mid-range.Core_016_-_metroCard",
        "description": "mid-range.Core_016_-_metroCard",
        "peekOfCode": "def metroCard(lastNumberOfDays):\n    if lastNumberOfDays == 30 or lastNumberOfDays == 28:\n        return [31]\n    return [28, 30, 31]",
        "detail": "mid-range.Core_016_-_metroCard",
        "documentation": {}
    },
    {
        "label": "arrayPacking",
        "kind": 2,
        "importPath": "mid-range.Core_018_-_arrayPacking",
        "description": "mid-range.Core_018_-_arrayPacking",
        "peekOfCode": "def arrayPacking(a):\n    binary_array = [bin(num)[2:].rjust(8, \"0\") for num in a]\n    out_string = \"\".join(binary_array[::-1])\n    return int(out_string, 2)",
        "detail": "mid-range.Core_018_-_arrayPacking",
        "documentation": {}
    },
    {
        "label": "rangeBitCount",
        "kind": 2,
        "importPath": "mid-range.Core_019_-_rangeBitCount",
        "description": "mid-range.Core_019_-_rangeBitCount",
        "peekOfCode": "def rangeBitCount(a, b):\n    array = list(range(a, b + 1))\n    binary_array = [bin(num) for num in array]\n    count_array = [binary.count(\"1\") for binary in binary_array]\n    return sum(count_array)",
        "detail": "mid-range.Core_019_-_rangeBitCount",
        "documentation": {}
    },
    {
        "label": "leastFactorial",
        "kind": 2,
        "importPath": "mid-range.Core_025_-_leastFactorial",
        "description": "mid-range.Core_025_-_leastFactorial",
        "peekOfCode": "def leastFactorial(n):\n    factorial = 1\n    index = 1\n    while factorial < n:\n        index += 1\n        factorial *= index\n    return factorial",
        "detail": "mid-range.Core_025_-_leastFactorial",
        "documentation": {}
    },
    {
        "label": "countSumOfTwoRepresentations2",
        "kind": 2,
        "importPath": "mid-range.Core_026_-_countSumOfTwoRepresentations2",
        "description": "mid-range.Core_026_-_countSumOfTwoRepresentations2",
        "peekOfCode": "def countSumOfTwoRepresentations2(n, l, r):\n    count = 0\n    a = max(n - r, l)\n    b = n - a\n    while a <= r and a <= b:\n        count += 1\n        a += 1\n        b -= 1\n    return count",
        "detail": "mid-range.Core_026_-_countSumOfTwoRepresentations2",
        "documentation": {}
    },
    {
        "label": "magicalWell",
        "kind": 2,
        "importPath": "mid-range.Core_027_-_magicalWell",
        "description": "mid-range.Core_027_-_magicalWell",
        "peekOfCode": "def magicalWell(a, b, n):\n    total = 0\n    for i in range(n):\n        total += a * b\n        a += 1\n        b += 1\n    return total",
        "detail": "mid-range.Core_027_-_magicalWell",
        "documentation": {}
    },
    {
        "label": "lineUp",
        "kind": 2,
        "importPath": "mid-range.Core_028_-_lineUp",
        "description": "mid-range.Core_028_-_lineUp",
        "peekOfCode": "def lineUp(commands):\n    count = 0\n    smart_student = 0\n    dumb_student = 0\n    for command in commands:\n        if command == \"L\":\n            smart_student = (smart_student - 1) % 4\n            dumb_student = (dumb_student + 1) % 4\n        elif command == \"R\":\n            smart_student = (smart_student + 1) % 4",
        "detail": "mid-range.Core_028_-_lineUp",
        "documentation": {}
    },
    {
        "label": "additionWithoutCarrying",
        "kind": 2,
        "importPath": "mid-range.Core_029_-_additionWithoutCarrying",
        "description": "mid-range.Core_029_-_additionWithoutCarrying",
        "peekOfCode": "def additionWithoutCarrying(param1, param2):\n    # Convert numbers to strings\n    str1 = str(param1)\n    str2 = str(param2)\n    # Pad both to the same length with zeroes (to the left of the numbers)\n    length = max(len(str2), len(str1))\n    str1 = str1.rjust(length, \"0\")\n    str2 = str2.rjust(length, \"0\")\n    output = []\n    for num1, num2 in zip(str1, str2):",
        "detail": "mid-range.Core_029_-_additionWithoutCarrying",
        "documentation": {}
    },
    {
        "label": "appleBoxes",
        "kind": 2,
        "importPath": "mid-range.Core_030_-_appleBoxes",
        "description": "mid-range.Core_030_-_appleBoxes",
        "peekOfCode": "def appleBoxes(k):\n    red = 0\n    yellow = 0\n    for i in range(1, k + 1, 2):\n        yellow += i * i\n    for i in range(2, k + 1, 2):\n        red += i * i\n    return red - yellow",
        "detail": "mid-range.Core_030_-_appleBoxes",
        "documentation": {}
    },
    {
        "label": "increaseNumberRoundness",
        "kind": 2,
        "importPath": "mid-range.Core_031_-_increaseNumberRoundness",
        "description": "mid-range.Core_031_-_increaseNumberRoundness",
        "peekOfCode": "def increaseNumberRoundness(n):\n    string = str(n)\n    # Check for immediate rejection\n    if \"0\" not in string or len(string) < 2:\n        return False\n    # Since we know there's a 0, if it's not on\n    # the left, then we know to accept\n    if string[-1] != \"0\":\n        return True\n    # If there is only one 0, it must be at the end, so reject.",
        "detail": "mid-range.Core_031_-_increaseNumberRoundness",
        "documentation": {}
    },
    {
        "label": "rounders",
        "kind": 2,
        "importPath": "mid-range.Core_032_-_rounders",
        "description": "mid-range.Core_032_-_rounders",
        "peekOfCode": "def rounders(value):\n    length = len(str(value))\n    magnitude = length - 1\n    for i in range(length - 1):\n        value = int((value / 10) + 0.5)\n    return value * (10 ** magnitude)",
        "detail": "mid-range.Core_032_-_rounders",
        "documentation": {}
    },
    {
        "label": "candles",
        "kind": 2,
        "importPath": "mid-range.Core_033_-_candles",
        "description": "mid-range.Core_033_-_candles",
        "peekOfCode": "def candles(candlesNumber, makeNew):\n    totalBurned = 0\n    leftovers = 0\n    while candlesNumber > 0:\n        totalBurned += candlesNumber\n        leftovers += candlesNumber\n        candlesNumber = 0\n        candlesNumber = leftovers // makeNew\n        leftovers = leftovers % makeNew\n    return totalBurned",
        "detail": "mid-range.Core_033_-_candles",
        "documentation": {}
    },
    {
        "label": "countBlackCells",
        "kind": 2,
        "importPath": "mid-range.Core_034_-_countBlackCells",
        "description": "mid-range.Core_034_-_countBlackCells",
        "peekOfCode": "def countBlackCells(n, m):\n    gcd = find_gcd(n, m)\n    line_cells = n + m - gcd\n    line_corner_cells = (gcd - 1) * 2\n    return line_cells + line_corner_cells\ndef find_gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a",
        "detail": "mid-range.Core_034_-_countBlackCells",
        "documentation": {}
    },
    {
        "label": "find_gcd",
        "kind": 2,
        "importPath": "mid-range.Core_034_-_countBlackCells",
        "description": "mid-range.Core_034_-_countBlackCells",
        "peekOfCode": "def find_gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a",
        "detail": "mid-range.Core_034_-_countBlackCells",
        "documentation": {}
    },
    {
        "label": "arrayReplace",
        "kind": 2,
        "importPath": "mid-range.Core_036_-_arrayReplace",
        "description": "mid-range.Core_036_-_arrayReplace",
        "peekOfCode": "def arrayReplace(inputArray, elemToReplace, substitutionElem):\n    output = [\n        elem if elem != elemToReplace else substitutionElem for elem in inputArray\n    ]\n    return output",
        "detail": "mid-range.Core_036_-_arrayReplace",
        "documentation": {}
    },
    {
        "label": "firstReverseTry",
        "kind": 2,
        "importPath": "mid-range.Core_037_-_firstReverseTry",
        "description": "mid-range.Core_037_-_firstReverseTry",
        "peekOfCode": "def firstReverseTry(arr):\n    if len(arr) < 2:\n        return arr\n    if len(arr) < 4:\n        return arr[::-1]\n    return arr[-1:] + arr[1:-1] + arr[:1]",
        "detail": "mid-range.Core_037_-_firstReverseTry",
        "documentation": {}
    },
    {
        "label": "isSmooth",
        "kind": 2,
        "importPath": "mid-range.Core_040_-_isSmooth",
        "description": "mid-range.Core_040_-_isSmooth",
        "peekOfCode": "def isSmooth(arr):\n    if arr[0] != arr[-1]:\n        return False\n    if len(arr) % 2 == 0:\n        middle = arr[len(arr) // 2] + arr[(len(arr) // 2) - 1]\n    else:\n        middle = arr[len(arr) // 2]\n    return arr[0] == middle",
        "detail": "mid-range.Core_040_-_isSmooth",
        "documentation": {}
    },
    {
        "label": "replaceMiddle",
        "kind": 2,
        "importPath": "mid-range.Core_041_-_replaceMiddle",
        "description": "mid-range.Core_041_-_replaceMiddle",
        "peekOfCode": "def replaceMiddle(arr):\n    if len(arr) % 2 != 0:\n        return arr\n    right_middle = len(arr) // 2\n    middle_value = arr[right_middle] + arr[right_middle - 1]\n    return arr[: right_middle - 1] + [middle_value] + arr[right_middle + 1 :]",
        "detail": "mid-range.Core_041_-_replaceMiddle",
        "documentation": {}
    },
    {
        "label": "makeArrayConsecutive2",
        "kind": 2,
        "importPath": "mid-range.Core_042_-_makeArrayConsecutive2",
        "description": "mid-range.Core_042_-_makeArrayConsecutive2",
        "peekOfCode": "def makeArrayConsecutive2(statues):\n    count = 0\n    for i in range(min(statues), max(statues)):\n        if i not in statues:\n            count += 1\n    return count",
        "detail": "mid-range.Core_042_-_makeArrayConsecutive2",
        "documentation": {}
    },
    {
        "label": "isPower",
        "kind": 2,
        "importPath": "mid-range.Core_043_-_isPower",
        "description": "mid-range.Core_043_-_isPower",
        "peekOfCode": "def isPower(n):\n    if n == 1:\n        return True\n    a = 2\n    b = 2\n    while a ** 2 <= n:\n        while a ** b <= n:\n            if a ** b == n:\n                return True\n            b += 1",
        "detail": "mid-range.Core_043_-_isPower",
        "documentation": {}
    },
    {
        "label": "isSumOfConsecutive2",
        "kind": 2,
        "importPath": "mid-range.Core_044_-_isSumOfConsecutive2",
        "description": "mid-range.Core_044_-_isSumOfConsecutive2",
        "peekOfCode": "def isSumOfConsecutive2(n):\n    count = 0\n    right = 2\n    arr = [1, 2]\n    while right <= (n // 2) + 1:\n        total = sum(arr)\n        if total == n:\n            count += 1\n            del arr[0]\n        elif total < n:",
        "detail": "mid-range.Core_044_-_isSumOfConsecutive2",
        "documentation": {}
    },
    {
        "label": "squareDigitsSequence",
        "kind": 2,
        "importPath": "mid-range.Core_045_-_squareDigitsSequence",
        "description": "mid-range.Core_045_-_squareDigitsSequence",
        "peekOfCode": "def squareDigitsSequence(a0):\n    sequence = [a0]\n    while sequence[-1] not in sequence[:-1]:\n        next_value = 0\n        for digit in str(sequence[-1]):\n            next_value += int(digit) ** 2\n        sequence.append(next_value)\n    return len(sequence)",
        "detail": "mid-range.Core_045_-_squareDigitsSequence",
        "documentation": {}
    },
    {
        "label": "pagesNumberingWithInk",
        "kind": 2,
        "importPath": "mid-range.Core_046_-_pagesNumberingWithInk",
        "description": "mid-range.Core_046_-_pagesNumberingWithInk",
        "peekOfCode": "def pagesNumberingWithInk(current, numberOfDigits):\n    numberOfDigits -= len(str(current))\n    next_digits = len(str(current + 1))\n    while numberOfDigits >= next_digits:\n        current += 1\n        numberOfDigits -= next_digits\n        next_digits = len(str(current))\n    return current",
        "detail": "mid-range.Core_046_-_pagesNumberingWithInk",
        "documentation": {}
    },
    {
        "label": "comfortableNumbers",
        "kind": 2,
        "importPath": "mid-range.Core_047_-_comfortableNumbers",
        "description": "mid-range.Core_047_-_comfortableNumbers",
        "peekOfCode": "def comfortableNumbers(l, r):\n    count = 0\n    for a in range(l, r):\n        for b in range(a + 1, r + 1):\n            a_sum = sum(int(digit) for digit in str(a))\n            b_sum = sum(int(digit) for digit in str(b))\n            if b <= a + a_sum and a >= b - b_sum:\n                count += 1\n    return count",
        "detail": "mid-range.Core_047_-_comfortableNumbers",
        "documentation": {}
    },
    {
        "label": "weakNumbers",
        "kind": 2,
        "importPath": "mid-range.Core_048_-_weakNumbers",
        "description": "mid-range.Core_048_-_weakNumbers",
        "peekOfCode": "def weakNumbers(n):\n    all_factors = [count_factors(num) for num in range(1, n + 1)]\n    weaknesses = []\n    for num, num_factors in enumerate(all_factors, 1):\n        weakness = 0\n        for factor in all_factors[:num]:\n            if factor > num_factors:\n                weakness += 1\n        weaknesses.append(weakness)\n        weakest = max(weaknesses)",
        "detail": "mid-range.Core_048_-_weakNumbers",
        "documentation": {}
    },
    {
        "label": "count_factors",
        "kind": 2,
        "importPath": "mid-range.Core_048_-_weakNumbers",
        "description": "mid-range.Core_048_-_weakNumbers",
        "peekOfCode": "def count_factors(n):\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\nprint(weakNumbers(500))",
        "detail": "mid-range.Core_048_-_weakNumbers",
        "documentation": {}
    },
    {
        "label": "rectangleRotation",
        "kind": 2,
        "importPath": "mid-range.Core_049_-_rectangleRotation",
        "description": "mid-range.Core_049_-_rectangleRotation",
        "peekOfCode": "def rectangleRotation(a, b):\n    n = a / (2 ** 0.5)\n    m = b / (2 ** 0.5)\n    points = (math.floor(n) * math.floor(m)) + (math.ceil(n) * math.ceil(m))\n    if math.floor(n) % 2 != math.floor(m) % 2:\n        points -= 1\n    return points\n# rectangleRotation(6, 4)\nprint(rectangleRotation(8, 6))",
        "detail": "mid-range.Core_049_-_rectangleRotation",
        "documentation": {}
    },
    {
        "label": "consumer",
        "kind": 2,
        "importPath": "mid-range.coroutine",
        "description": "mid-range.coroutine",
        "peekOfCode": "def consumer():\n    r = \"\"\n    while True:\n        n = yield r\n        if not n:\n            return\n        print(\"[CONSUMER] Consuming %s...\" % n)\n        r = \"200 OK\"\ndef produce(c):\n    c.send(None)",
        "detail": "mid-range.coroutine",
        "documentation": {}
    },
    {
        "label": "produce",
        "kind": 2,
        "importPath": "mid-range.coroutine",
        "description": "mid-range.coroutine",
        "peekOfCode": "def produce(c):\n    c.send(None)\n    n = 0\n    while n < 5:\n        n = n + 1\n        print(\"[PRODUCER] Producing %s...\" % n)\n        r = c.send(n)\n        print(\"[PRODUCER] Consumer return: %s\" % r)\n    c.close()\nc = consumer()",
        "detail": "mid-range.coroutine",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.coroutine",
        "description": "mid-range.coroutine",
        "peekOfCode": "c = consumer()\nproduce(c)",
        "detail": "mid-range.coroutine",
        "documentation": {}
    },
    {
        "label": "CountChar",
        "kind": 2,
        "importPath": "mid-range.Count the characters ",
        "description": "mid-range.Count the characters ",
        "peekOfCode": "def CountChar(String, Occurance):\n    STROCR = {}\n    RESULT = []\n    for i in range(len(String)):\n        if String[i] in STROCR.keys():\n            STROCR[String[i]] += 1\n        else:\n            STROCR[String[i]] = 1\n    for j in STROCR.keys():\n        if STROCR[j] == Occurance:",
        "detail": "mid-range.Count the characters ",
        "documentation": {}
    },
    {
        "label": "String",
        "kind": 5,
        "importPath": "mid-range.Count the characters ",
        "description": "mid-range.Count the characters ",
        "peekOfCode": "String = \"geeksforgeeks\"\nOccurance = 2\nCountChar(String, Occurance)",
        "detail": "mid-range.Count the characters ",
        "documentation": {}
    },
    {
        "label": "Occurance",
        "kind": 5,
        "importPath": "mid-range.Count the characters ",
        "description": "mid-range.Count the characters ",
        "peekOfCode": "Occurance = 2\nCountChar(String, Occurance)",
        "detail": "mid-range.Count the characters ",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 2,
        "importPath": "mid-range.count",
        "description": "mid-range.count",
        "peekOfCode": "def count(ar, n):\n    count = 0\n    for element in ar:\n        # More complex condition could be\n        # => (not element != n)\n        if element == n:\n            count += 1\n    return count\n# Testing\n# add your test cases in list below",
        "detail": "mid-range.count",
        "documentation": {}
    },
    {
        "label": "test_cases",
        "kind": 5,
        "importPath": "mid-range.count",
        "description": "mid-range.count",
        "peekOfCode": "test_cases = [([1, 1, 2, 3, 5, 8, 13, 21, 1], 1), (\"Captain America\", \"a\")]\nfor test_case in test_cases:\n    print(\"TestCase: {}, {}\".format(test_case[0], test_case[1]))\n    print(\"Results: {}\\n\".format(count(test_case[0], test_case[1])))\n# You can add condition to check weather output is correct\n# or not",
        "detail": "mid-range.count",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.CountCompleteTreeNode",
        "description": "mid-range.CountCompleteTreeNode",
        "peekOfCode": "class Solution:\n    def countNodes(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n        self.c = 0\n        def count(node):\n            if node:\n                if node.left:\n                    count(node.left)\n                if node.right:",
        "detail": "mid-range.CountCompleteTreeNode",
        "documentation": {}
    },
    {
        "label": "times",
        "kind": 5,
        "importPath": "mid-range.countdown_clock_and_timer",
        "description": "mid-range.countdown_clock_and_timer",
        "peekOfCode": "times = time.ctime()\nprint(\"\\nCurrent Time: \", times)\nprint(\"\\n     Welcome to CountdownTimer!\\n\\n     Let's set up the countdown timer...\\n\")\n# User input for the timer\nhours = int(input(\"     How many hours? \"))\nminutes = int(input(\"     How many minutes? \"))\nseconds = int(input(\"     How many seconds? \"))\n# To display message when the given value is not a number\nif hours or minutes or seconds == \"\":\n    print(\"\\n Invalid entry. You must enter a number.\")",
        "detail": "mid-range.countdown_clock_and_timer",
        "documentation": {}
    },
    {
        "label": "hours",
        "kind": 5,
        "importPath": "mid-range.countdown_clock_and_timer",
        "description": "mid-range.countdown_clock_and_timer",
        "peekOfCode": "hours = int(input(\"     How many hours? \"))\nminutes = int(input(\"     How many minutes? \"))\nseconds = int(input(\"     How many seconds? \"))\n# To display message when the given value is not a number\nif hours or minutes or seconds == \"\":\n    print(\"\\n Invalid entry. You must enter a number.\")\n# Conversion of hours amd minutes into seconds\nhrsToSec = (hours * 60) * 60\nmnsToSec = minutes * 60\nseconds = seconds",
        "detail": "mid-range.countdown_clock_and_timer",
        "documentation": {}
    },
    {
        "label": "minutes",
        "kind": 5,
        "importPath": "mid-range.countdown_clock_and_timer",
        "description": "mid-range.countdown_clock_and_timer",
        "peekOfCode": "minutes = int(input(\"     How many minutes? \"))\nseconds = int(input(\"     How many seconds? \"))\n# To display message when the given value is not a number\nif hours or minutes or seconds == \"\":\n    print(\"\\n Invalid entry. You must enter a number.\")\n# Conversion of hours amd minutes into seconds\nhrsToSec = (hours * 60) * 60\nmnsToSec = minutes * 60\nseconds = seconds\nseconds = hrsToSec + mnsToSec + seconds",
        "detail": "mid-range.countdown_clock_and_timer",
        "documentation": {}
    },
    {
        "label": "seconds",
        "kind": 5,
        "importPath": "mid-range.countdown_clock_and_timer",
        "description": "mid-range.countdown_clock_and_timer",
        "peekOfCode": "seconds = int(input(\"     How many seconds? \"))\n# To display message when the given value is not a number\nif hours or minutes or seconds == \"\":\n    print(\"\\n Invalid entry. You must enter a number.\")\n# Conversion of hours amd minutes into seconds\nhrsToSec = (hours * 60) * 60\nmnsToSec = minutes * 60\nseconds = seconds\nseconds = hrsToSec + mnsToSec + seconds\nprint(\"\\n Timer has been set for \" + str(seconds) + \" seconds.\")",
        "detail": "mid-range.countdown_clock_and_timer",
        "documentation": {}
    },
    {
        "label": "hrsToSec",
        "kind": 5,
        "importPath": "mid-range.countdown_clock_and_timer",
        "description": "mid-range.countdown_clock_and_timer",
        "peekOfCode": "hrsToSec = (hours * 60) * 60\nmnsToSec = minutes * 60\nseconds = seconds\nseconds = hrsToSec + mnsToSec + seconds\nprint(\"\\n Timer has been set for \" + str(seconds) + \" seconds.\")\n# Loop for displaying the timer\nfor i in range(seconds, -1, -1):\n    displayHours = int(seconds / 3600)\n    displayMinutes = int(seconds / 60)\n    if displayMinutes >= 60:",
        "detail": "mid-range.countdown_clock_and_timer",
        "documentation": {}
    },
    {
        "label": "mnsToSec",
        "kind": 5,
        "importPath": "mid-range.countdown_clock_and_timer",
        "description": "mid-range.countdown_clock_and_timer",
        "peekOfCode": "mnsToSec = minutes * 60\nseconds = seconds\nseconds = hrsToSec + mnsToSec + seconds\nprint(\"\\n Timer has been set for \" + str(seconds) + \" seconds.\")\n# Loop for displaying the timer\nfor i in range(seconds, -1, -1):\n    displayHours = int(seconds / 3600)\n    displayMinutes = int(seconds / 60)\n    if displayMinutes >= 60:\n        displayMinutes = displayMinutes - (displayHours * 60)",
        "detail": "mid-range.countdown_clock_and_timer",
        "documentation": {}
    },
    {
        "label": "seconds",
        "kind": 5,
        "importPath": "mid-range.countdown_clock_and_timer",
        "description": "mid-range.countdown_clock_and_timer",
        "peekOfCode": "seconds = seconds\nseconds = hrsToSec + mnsToSec + seconds\nprint(\"\\n Timer has been set for \" + str(seconds) + \" seconds.\")\n# Loop for displaying the timer\nfor i in range(seconds, -1, -1):\n    displayHours = int(seconds / 3600)\n    displayMinutes = int(seconds / 60)\n    if displayMinutes >= 60:\n        displayMinutes = displayMinutes - (displayHours * 60)\n    else:",
        "detail": "mid-range.countdown_clock_and_timer",
        "documentation": {}
    },
    {
        "label": "seconds",
        "kind": 5,
        "importPath": "mid-range.countdown_clock_and_timer",
        "description": "mid-range.countdown_clock_and_timer",
        "peekOfCode": "seconds = hrsToSec + mnsToSec + seconds\nprint(\"\\n Timer has been set for \" + str(seconds) + \" seconds.\")\n# Loop for displaying the timer\nfor i in range(seconds, -1, -1):\n    displayHours = int(seconds / 3600)\n    displayMinutes = int(seconds / 60)\n    if displayMinutes >= 60:\n        displayMinutes = displayMinutes - (displayHours * 60)\n    else:\n        displayMinutes = displayMinutes",
        "detail": "mid-range.countdown_clock_and_timer",
        "documentation": {}
    },
    {
        "label": "Counter",
        "kind": 6,
        "importPath": "mid-range.counter",
        "description": "mid-range.counter",
        "peekOfCode": "class Counter(Infinite):\n    def update(self):\n        self.write(str(self.index))\nclass Countdown(Progress):\n    def update(self):\n        self.write(str(self.remaining))\nclass Stack(Progress):\n    phases = (\" \", \"▁\", \"▂\", \"▃\", \"▄\", \"▅\", \"▆\", \"▇\", \"█\")\n    def update(self):\n        nphases = len(self.phases)",
        "detail": "mid-range.counter",
        "documentation": {}
    },
    {
        "label": "Countdown",
        "kind": 6,
        "importPath": "mid-range.counter",
        "description": "mid-range.counter",
        "peekOfCode": "class Countdown(Progress):\n    def update(self):\n        self.write(str(self.remaining))\nclass Stack(Progress):\n    phases = (\" \", \"▁\", \"▂\", \"▃\", \"▄\", \"▅\", \"▆\", \"▇\", \"█\")\n    def update(self):\n        nphases = len(self.phases)\n        i = min(nphases - 1, int(self.progress * nphases))\n        self.write(self.phases[i])\nclass Pie(Stack):",
        "detail": "mid-range.counter",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "mid-range.counter",
        "description": "mid-range.counter",
        "peekOfCode": "class Stack(Progress):\n    phases = (\" \", \"▁\", \"▂\", \"▃\", \"▄\", \"▅\", \"▆\", \"▇\", \"█\")\n    def update(self):\n        nphases = len(self.phases)\n        i = min(nphases - 1, int(self.progress * nphases))\n        self.write(self.phases[i])\nclass Pie(Stack):\n    phases = (\"○\", \"◔\", \"◑\", \"◕\", \"●\")",
        "detail": "mid-range.counter",
        "documentation": {}
    },
    {
        "label": "Pie",
        "kind": 6,
        "importPath": "mid-range.counter",
        "description": "mid-range.counter",
        "peekOfCode": "class Pie(Stack):\n    phases = (\"○\", \"◔\", \"◑\", \"◕\", \"●\")",
        "detail": "mid-range.counter",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.CountingBits",
        "description": "mid-range.CountingBits",
        "peekOfCode": "class Solution:\n    def countBits(self, num: int) -> List[int]:\n        ans = [0]\n        offset = 1\n        for i in range(1, num + 1):\n            if offset * 2 == i:\n                offset = i\n            ans.append(ans[i - offset] + 1)\n        return ans",
        "detail": "mid-range.CountingBits",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.CountingElements",
        "description": "mid-range.CountingElements",
        "peekOfCode": "class Solution:\n    def countElements(self, arr: List[int]) -> int:\n        s = set()\n        s = set(arr)\n        c = 0\n        for i in range(len(arr)):\n            if arr[i] + 1 in s:\n                c += 1\n        return c",
        "detail": "mid-range.CountingElements",
        "documentation": {}
    },
    {
        "label": "countSort",
        "kind": 2,
        "importPath": "mid-range.countingsort",
        "description": "mid-range.countingsort",
        "peekOfCode": "def countSort(arr):\n    # The output character array that will have sorted arr\n    output = [0 for i in range(256)]\n    # Create a count array to store count of inidividul\n    # characters and initialize count array as 0\n    count = [0 for i in range(256)]\n    # For storing the resulting answer since the\n    # string is immutable\n    ans = [\"\" for _ in arr]\n    # Store count of each character",
        "detail": "mid-range.countingsort",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.countingsort",
        "description": "mid-range.countingsort",
        "peekOfCode": "arr = \"thisisthestring\"\nans = countSort(arr)\nprint(\"Sorted string array is %s\" % (\"\".join(ans)))",
        "detail": "mid-range.countingsort",
        "documentation": {}
    },
    {
        "label": "ans",
        "kind": 5,
        "importPath": "mid-range.countingsort",
        "description": "mid-range.countingsort",
        "peekOfCode": "ans = countSort(arr)\nprint(\"Sorted string array is %s\" % (\"\".join(ans)))",
        "detail": "mid-range.countingsort",
        "documentation": {}
    },
    {
        "label": "countElements",
        "kind": 2,
        "importPath": "mid-range.counting_elements",
        "description": "mid-range.counting_elements",
        "peekOfCode": "def countElements(arr):\n    # use a set to store all unique elements in the array\n    in_arr = set(arr)\n    ans = 0\n    # loop through all elements in the array because duplicated are counted separately\n    for n in arr:\n        # if the number + 1 in the set (checking an element in a set takes O(1) time)\n        if n + 1 in in_arr:\n            ans += 1\n    return ans",
        "detail": "mid-range.counting_elements",
        "documentation": {}
    },
    {
        "label": "sort",
        "kind": 2,
        "importPath": "mid-range.counting_sort",
        "description": "mid-range.counting_sort",
        "peekOfCode": "def sort(_list):\n    \"\"\"\n    counting sort algorithm\n    :param _list: list of values to sort\n    :return: sorted values\n    \"\"\"\n    try:\n        max_value = 0\n        for i in range(len(_list)):\n            if _list[i] > max_value:",
        "detail": "mid-range.counting_sort",
        "documentation": {}
    },
    {
        "label": "time_complexities",
        "kind": 2,
        "importPath": "mid-range.counting_sort",
        "description": "mid-range.counting_sort",
        "peekOfCode": "def time_complexities():\n    \"\"\"\n    Return information on functions\n    time complexity\n    :return: string\n    \"\"\"\n    return \"Best Case: O(n + k), Average Case: O(n + k), Worst Case: O(n + k)\"\ndef get_code():\n    \"\"\"\n    easily retrieve the source code",
        "detail": "mid-range.counting_sort",
        "documentation": {}
    },
    {
        "label": "get_code",
        "kind": 2,
        "importPath": "mid-range.counting_sort",
        "description": "mid-range.counting_sort",
        "peekOfCode": "def get_code():\n    \"\"\"\n    easily retrieve the source code\n    of the sort function\n    :return: source code\n    \"\"\"\n    return inspect.getsource(sort)",
        "detail": "mid-range.counting_sort",
        "documentation": {}
    },
    {
        "label": "counting_sort_dict",
        "kind": 2,
        "importPath": "mid-range.counting_sort_dict",
        "description": "mid-range.counting_sort_dict",
        "peekOfCode": "def counting_sort_dict(\n    items: Iterable[T], key: Callable[[T], int] = lambda x: x\n) -> Iterable[T]:\n    groups = defaultdict(list)\n    for item in items:\n        groups[key(item)].append(item)\n    for k in range(min(groups), max(groups) + 1):\n        yield from groups[k]",
        "detail": "mid-range.counting_sort_dict",
        "documentation": {}
    },
    {
        "label": "counting_sort_dict",
        "kind": 2,
        "importPath": "mid-range.counting_sort_dict_(1)",
        "description": "mid-range.counting_sort_dict_(1)",
        "peekOfCode": "def counting_sort_dict(\n    items: Iterable[T], key: Callable[[T], int] = lambda x: x\n) -> Iterable[T]:\n    groups = defaultdict(list)\n    for item in items:\n        groups[key(item)].append(item)\n    for k in range(min(groups), max(groups) + 1):\n        yield from groups[k]",
        "detail": "mid-range.counting_sort_dict_(1)",
        "documentation": {}
    },
    {
        "label": "counting_sort_dict",
        "kind": 2,
        "importPath": "mid-range.counting_sort_dict_(2)",
        "description": "mid-range.counting_sort_dict_(2)",
        "peekOfCode": "def counting_sort_dict(\n    items: Iterable[T], key: Callable[[T], int] = lambda x: x\n) -> Iterable[T]:\n    groups = defaultdict(list)\n    for item in items:\n        groups[key(item)].append(item)\n    for k in range(min(groups), max(groups) + 1):\n        yield from groups[k]",
        "detail": "mid-range.counting_sort_dict_(2)",
        "documentation": {}
    },
    {
        "label": "counting_sort_list",
        "kind": 2,
        "importPath": "mid-range.counting_sort_list",
        "description": "mid-range.counting_sort_list",
        "peekOfCode": "def counting_sort_list(items: Sequence[T], key: Callable[[T], int] = lambda x: x):\n    max_value = max(map(key, items))\n    count = [0] * (max_value + 1)\n    for item in items:\n        count[key(item)] += 1\n    count = list(accumulate(count, initial=0))\n    ret = [None] * len(items)\n    for item in items:\n        i = count[key(item)]\n        ret[i] = item",
        "detail": "mid-range.counting_sort_list",
        "documentation": {}
    },
    {
        "label": "counting_sort_list",
        "kind": 2,
        "importPath": "mid-range.counting_sort_list_(1)",
        "description": "mid-range.counting_sort_list_(1)",
        "peekOfCode": "def counting_sort_list(items: Sequence[T], key: Callable[[T], int] = lambda x: x):\n    max_value = max(map(key, items))\n    count = [0] * (max_value + 1)\n    for item in items:\n        count[key(item)] += 1\n    count = list(accumulate(count, initial=0))\n    ret = [None] * len(items)\n    for item in items:\n        i = count[key(item)]\n        ret[i] = item",
        "detail": "mid-range.counting_sort_list_(1)",
        "documentation": {}
    },
    {
        "label": "counting_sort_list",
        "kind": 2,
        "importPath": "mid-range.counting_sort_list_(2)",
        "description": "mid-range.counting_sort_list_(2)",
        "peekOfCode": "def counting_sort_list(items: Sequence[T], key: Callable[[T], int] = lambda x: x):\n    max_value = max(map(key, items))\n    count = [0] * (max_value + 1)\n    for item in items:\n        count[key(item)] += 1\n    count = list(accumulate(count, initial=0))\n    ret = [None] * len(items)\n    for item in items:\n        i = count[key(item)]\n        ret[i] = item",
        "detail": "mid-range.counting_sort_list_(2)",
        "documentation": {}
    },
    {
        "label": "countingValleys",
        "kind": 2,
        "importPath": "mid-range.Counting_Valleys",
        "description": "mid-range.Counting_Valleys",
        "peekOfCode": "def countingValleys(steps, path):\n    # Write your code here\n    path = list(path)\n    sealevel = valley = 0\n    for paths in path:\n        if paths == \"U\":\n            sealevel += 1\n        else:\n            sealevel -= 1\n        if paths == \"U\" and sealevel == 0:",
        "detail": "mid-range.Counting_Valleys",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "mid-range.Counting_Valleys",
        "description": "mid-range.Counting_Valleys",
        "peekOfCode": "path = \"UDDDUDUU\"\nsteps = 8\nprint(countingValleys(steps, path))",
        "detail": "mid-range.Counting_Valleys",
        "documentation": {}
    },
    {
        "label": "steps",
        "kind": 5,
        "importPath": "mid-range.Counting_Valleys",
        "description": "mid-range.Counting_Valleys",
        "peekOfCode": "steps = 8\nprint(countingValleys(steps, path))",
        "detail": "mid-range.Counting_Valleys",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "mid-range.CountofDigits",
        "description": "mid-range.CountofDigits",
        "peekOfCode": "number = int(input())\ncounter = 0\nwhile number > 0:\n    number = number // 10\n    print(number)\n    counter += 1\nprint(\"number of digits :\", counter)",
        "detail": "mid-range.CountofDigits",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": "mid-range.CountofDigits",
        "description": "mid-range.CountofDigits",
        "peekOfCode": "counter = 0\nwhile number > 0:\n    number = number // 10\n    print(number)\n    counter += 1\nprint(\"number of digits :\", counter)",
        "detail": "mid-range.CountofDigits",
        "documentation": {}
    },
    {
        "label": "get_population",
        "kind": 2,
        "importPath": "mid-range.countpop",
        "description": "mid-range.countpop",
        "peekOfCode": "def get_population(filename):\n    import os\n    import csv\n    import statistics\n    fp = os.path.join(os.getcwd(), filename)\n    with open(fp, \"r\") as data:\n        csv_reader = csv.DictReader(data)\n        country = []\n        population = []\n        for line in csv_reader:",
        "detail": "mid-range.countpop",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "mid-range.countpop",
        "description": "mid-range.countpop",
        "peekOfCode": "file = \"population.csv\"\nget_population(file)",
        "detail": "mid-range.countpop",
        "documentation": {}
    },
    {
        "label": "count_cpu_microtime",
        "kind": 2,
        "importPath": "mid-range.count_algorithm_execution_time",
        "description": "mid-range.count_algorithm_execution_time",
        "peekOfCode": "def count_cpu_microtime(func_name, *args):\n    tmp = [i for i in args]\n    t1 = datetime.now().microsecond\n    func_name(*tmp)\n    time_took = datetime.now().microsecond - t1\n    return round(time_took, 5)\n# Testing\n# \"Test\" algorithm\ndef binary_search(array, n):\n    arr = sorted(array)",
        "detail": "mid-range.count_algorithm_execution_time",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "mid-range.count_algorithm_execution_time",
        "description": "mid-range.count_algorithm_execution_time",
        "peekOfCode": "def binary_search(array, n):\n    arr = sorted(array)\n    to_return = False\n    first_elem = 0\n    last_elem = len(arr) - 1\n    while first_elem <= last_elem:\n        mid = (first_elem + last_elem) // 2\n        if arr[mid] == n:\n            to_return = True\n            break",
        "detail": "mid-range.count_algorithm_execution_time",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "mid-range.count_algorithm_execution_time",
        "description": "mid-range.count_algorithm_execution_time",
        "peekOfCode": "result = count_cpu_microtime(binary_search, [12, 324, 23, 213, 3, 2, 1], 1)\nprint(str(result) + \" microsecs\")",
        "detail": "mid-range.count_algorithm_execution_time",
        "documentation": {}
    },
    {
        "label": "count_binary_substring",
        "kind": 2,
        "importPath": "mid-range.count_binary_substring",
        "description": "mid-range.count_binary_substring",
        "peekOfCode": "def count_binary_substring(s):\n    cur = 1\n    pre = 0\n    count = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            count = count + min(pre, cur)\n            pre = cur\n            cur = 1\n        else:",
        "detail": "mid-range.count_binary_substring",
        "documentation": {}
    },
    {
        "label": "count_consecutive_sums",
        "kind": 2,
        "importPath": "mid-range.count_consecutive_sums",
        "description": "mid-range.count_consecutive_sums",
        "peekOfCode": "def count_consecutive_sums(n):\n    start = 1\n    curr_sum = count = 0\n    for end in range(1, n + 1):\n        curr_sum += end\n        while curr_sum > n:\n            # remove all numbers from the front\n            curr_sum -= start\n            start += 1\n        if curr_sum == n:",
        "detail": "mid-range.count_consecutive_sums",
        "documentation": {}
    },
    {
        "label": "matrix",
        "kind": 6,
        "importPath": "mid-range.count_islands_in_matrix",
        "description": "mid-range.count_islands_in_matrix",
        "peekOfCode": "class matrix:  # Public class to implement a graph\n    def __init__(self, row: int, col: int, graph: list):\n        self.ROW = row\n        self.COL = col\n        self.graph = graph\n    def is_safe(self, i, j, visited) -> bool:\n        return (\n            0 <= i < self.ROW\n            and 0 <= j < self.COL\n            and not visited[i][j]",
        "detail": "mid-range.count_islands_in_matrix",
        "documentation": {}
    },
    {
        "label": "get_set_bits_count",
        "kind": 2,
        "importPath": "mid-range.count_number_of_one_bits",
        "description": "mid-range.count_number_of_one_bits",
        "peekOfCode": "def get_set_bits_count(number: int) -> int:\n    \"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count(25)\n    3\n    >>> get_set_bits_count(37)\n    3\n    >>> get_set_bits_count(21)\n    3\n    >>> get_set_bits_count(58)",
        "detail": "mid-range.count_number_of_one_bits",
        "documentation": {}
    },
    {
        "label": "count_positives",
        "kind": 2,
        "importPath": "mid-range.count_positives",
        "description": "mid-range.count_positives",
        "peekOfCode": "def count_positives(numbers):\n    results = set()\n    results.add(0)\n    # make all combinations\n    for num in numbers:\n        temp = set()  # use a temporary hashset for the newest results\n        for res in results:\n            temp.add(res + num)\n            temp.add(res - num)\n        results = temp  # replace the results",
        "detail": "mid-range.count_positives",
        "documentation": {}
    },
    {
        "label": "count_th",
        "kind": 2,
        "importPath": "mid-range.count_th",
        "description": "mid-range.count_th",
        "peekOfCode": "def count_th(word):\n    if len(word) < 2:\n        return 0\n    if word[:2] == \"th\":\n        return 1 + count_th(word[2:])\n    else:\n        return count_th(word[1:])\nprint(count_th(\"worhit\"))",
        "detail": "mid-range.count_th",
        "documentation": {}
    },
    {
        "label": "CountChar",
        "kind": 2,
        "importPath": "mid-range.Count_the_characters_",
        "description": "mid-range.Count_the_characters_",
        "peekOfCode": "def CountChar(String, Occurance):\n    STROCR = {}\n    RESULT = []\n    for i in range(len(String)):\n        if String[i] in STROCR.keys():\n            STROCR[String[i]] += 1\n        else:\n            STROCR[String[i]] = 1\n    for j in STROCR.keys():\n        if STROCR[j] == Occurance:",
        "detail": "mid-range.Count_the_characters_",
        "documentation": {}
    },
    {
        "label": "String",
        "kind": 5,
        "importPath": "mid-range.Count_the_characters_",
        "description": "mid-range.Count_the_characters_",
        "peekOfCode": "String = \"geeksforgeeks\"\nOccurance = 2\nCountChar(String, Occurance)",
        "detail": "mid-range.Count_the_characters_",
        "documentation": {}
    },
    {
        "label": "Occurance",
        "kind": 5,
        "importPath": "mid-range.Count_the_characters_",
        "description": "mid-range.Count_the_characters_",
        "peekOfCode": "Occurance = 2\nCountChar(String, Occurance)",
        "detail": "mid-range.Count_the_characters_",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.CourseSchedule",
        "description": "mid-range.CourseSchedule",
        "peekOfCode": "class Solution:\n    def canFinish(self, numCourses, prerequisites) -> bool:\n        adjList = [[] for _ in range(numCourses)]\n        inDegree = [0 for _ in range(numCourses)]\n        queue = deque()\n        visited = 0\n        for i in range(len(prerequisites)):\n            adjList[prerequisites[i][0]].append(prerequisites[i][1])\n        for i in range(numCourses):\n            for j in adjList[i]:",
        "detail": "mid-range.CourseSchedule",
        "documentation": {}
    },
    {
        "label": "covid_stats",
        "kind": 2,
        "importPath": "mid-range.covid_stats_via_xpath",
        "description": "mid-range.covid_stats_via_xpath",
        "peekOfCode": "def covid_stats(url: str = \"https://www.worldometers.info/coronavirus/\") -> covid_data:\n    xpath_str = '//div[@class = \"maincounter-number\"]/span/text()'\n    return covid_data(*html.fromstring(requests.get(url).content).xpath(xpath_str))\nfmt = \"\"\"Total COVID-19 cases in the world: {}\nTotal deaths due to COVID-19 in the world: {}\nTotal COVID-19 patients recovered in the world: {}\"\"\"\nprint(fmt.format(*covid_stats()))",
        "detail": "mid-range.covid_stats_via_xpath",
        "documentation": {}
    },
    {
        "label": "covid_data",
        "kind": 5,
        "importPath": "mid-range.covid_stats_via_xpath",
        "description": "mid-range.covid_stats_via_xpath",
        "peekOfCode": "covid_data = namedtuple(\"covid_data\", \"cases deaths recovered\")\ndef covid_stats(url: str = \"https://www.worldometers.info/coronavirus/\") -> covid_data:\n    xpath_str = '//div[@class = \"maincounter-number\"]/span/text()'\n    return covid_data(*html.fromstring(requests.get(url).content).xpath(xpath_str))\nfmt = \"\"\"Total COVID-19 cases in the world: {}\nTotal deaths due to COVID-19 in the world: {}\nTotal COVID-19 patients recovered in the world: {}\"\"\"\nprint(fmt.format(*covid_stats()))",
        "detail": "mid-range.covid_stats_via_xpath",
        "documentation": {}
    },
    {
        "label": "fmt",
        "kind": 5,
        "importPath": "mid-range.covid_stats_via_xpath",
        "description": "mid-range.covid_stats_via_xpath",
        "peekOfCode": "fmt = \"\"\"Total COVID-19 cases in the world: {}\nTotal deaths due to COVID-19 in the world: {}\nTotal COVID-19 patients recovered in the world: {}\"\"\"\nprint(fmt.format(*covid_stats()))",
        "detail": "mid-range.covid_stats_via_xpath",
        "documentation": {}
    },
    {
        "label": "load_cpr_bindings",
        "kind": 2,
        "importPath": "mid-range.cpr",
        "description": "mid-range.cpr",
        "peekOfCode": "def load_cpr_bindings() -> KeyBindings:\n    key_bindings = KeyBindings()\n    @key_bindings.add(Keys.CPRResponse, save_before=lambda e: False)\n    def _(event: E) -> None:\n        \"\"\"\n        Handle incoming Cursor-Position-Request response.\n        \"\"\"\n        # The incoming data looks like u'\\x1b[35;1R'\n        # Parse row/col information.\n        row, col = map(int, event.data[2:-1].split(\";\"))",
        "detail": "mid-range.cpr",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.cpr",
        "description": "mid-range.cpr",
        "peekOfCode": "__all__ = [\"load_cpr_bindings\"]\nE = KeyPressEvent\ndef load_cpr_bindings() -> KeyBindings:\n    key_bindings = KeyBindings()\n    @key_bindings.add(Keys.CPRResponse, save_before=lambda e: False)\n    def _(event: E) -> None:\n        \"\"\"\n        Handle incoming Cursor-Position-Request response.\n        \"\"\"\n        # The incoming data looks like u'\\x1b[35;1R'",
        "detail": "mid-range.cpr",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 5,
        "importPath": "mid-range.cpr",
        "description": "mid-range.cpr",
        "peekOfCode": "E = KeyPressEvent\ndef load_cpr_bindings() -> KeyBindings:\n    key_bindings = KeyBindings()\n    @key_bindings.add(Keys.CPRResponse, save_before=lambda e: False)\n    def _(event: E) -> None:\n        \"\"\"\n        Handle incoming Cursor-Position-Request response.\n        \"\"\"\n        # The incoming data looks like u'\\x1b[35;1R'\n        # Parse row/col information.",
        "detail": "mid-range.cpr",
        "documentation": {}
    },
    {
        "label": "get_citation",
        "kind": 2,
        "importPath": "mid-range.crawl_google_scholar_citation",
        "description": "mid-range.crawl_google_scholar_citation",
        "peekOfCode": "def get_citation(base_url: str, params: dict) -> str:\n    \"\"\"\n    Return the citation number.\n    \"\"\"\n    soup = BeautifulSoup(requests.get(base_url, params=params).content, \"html.parser\")\n    div = soup.find(\"div\", attrs={\"class\": \"gs_ri\"})\n    anchors = div.find(\"div\", attrs={\"class\": \"gs_fl\"}).find_all(\"a\")\n    return anchors[2].get_text()\nif __name__ == \"__main__\":\n    params = {",
        "detail": "mid-range.crawl_google_scholar_citation",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.create_BST_from_preorder",
        "description": "mid-range.create_BST_from_preorder",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    def bstFromPreorder(self, preorder):\n        if not preorder:\n            return None\n        root = TreeNode(preorder[0])",
        "detail": "mid-range.create_BST_from_preorder",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.create_BST_from_preorder",
        "description": "mid-range.create_BST_from_preorder",
        "peekOfCode": "class Solution:\n    def bstFromPreorder(self, preorder):\n        if not preorder:\n            return None\n        root = TreeNode(preorder[0])\n        i = 1\n        while i < len(preorder) and preorder[i] < root.val:\n            i += 1\n        root.left = self.bstFromPreorder(preorder[1:i])\n        root.right = self.bstFromPreorder(preorder[i:])",
        "detail": "mid-range.create_BST_from_preorder",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 5,
        "importPath": "mid-range.create_BST_from_preorder",
        "description": "mid-range.create_BST_from_preorder",
        "peekOfCode": "preorder = [19, 4, 8, 11]\nbst = Solution()\nbst.bstFromPreorder(preorder)",
        "detail": "mid-range.create_BST_from_preorder",
        "documentation": {}
    },
    {
        "label": "bst",
        "kind": 5,
        "importPath": "mid-range.create_BST_from_preorder",
        "description": "mid-range.create_BST_from_preorder",
        "peekOfCode": "bst = Solution()\nbst.bstFromPreorder(preorder)",
        "detail": "mid-range.create_BST_from_preorder",
        "documentation": {}
    },
    {
        "label": "fn",
        "kind": 2,
        "importPath": "mid-range.create_class_on_the_fly",
        "description": "mid-range.create_class_on_the_fly",
        "peekOfCode": "def fn(self, name=\"world\"):  #\n    print(\"Hello, %s.\" % name)\nHello = type(\"Hello\", (object,), dict(hello=fn))  # Hello class\nh = Hello()\nprint(\"call h.hello():\")\nh.hello()\nprint(\"type(Hello) =\", type(Hello))\nprint(\"type(h) =\", type(h))",
        "detail": "mid-range.create_class_on_the_fly",
        "documentation": {}
    },
    {
        "label": "Hello",
        "kind": 5,
        "importPath": "mid-range.create_class_on_the_fly",
        "description": "mid-range.create_class_on_the_fly",
        "peekOfCode": "Hello = type(\"Hello\", (object,), dict(hello=fn))  # Hello class\nh = Hello()\nprint(\"call h.hello():\")\nh.hello()\nprint(\"type(Hello) =\", type(Hello))\nprint(\"type(h) =\", type(h))",
        "detail": "mid-range.create_class_on_the_fly",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "mid-range.create_class_on_the_fly",
        "description": "mid-range.create_class_on_the_fly",
        "peekOfCode": "h = Hello()\nprint(\"call h.hello():\")\nh.hello()\nprint(\"type(Hello) =\", type(Hello))\nprint(\"type(h) =\", type(h))",
        "detail": "mid-range.create_class_on_the_fly",
        "documentation": {}
    },
    {
        "label": "execute_query",
        "kind": 2,
        "importPath": "mid-range.create_db",
        "description": "mid-range.create_db",
        "peekOfCode": "def execute_query(sql_query):\n    with sqlite3.connect(\"todo.db\") as conn:\n        cur = conn.cursor()\n        result = cur.execute(sql_query)\n        conn.commit()\n    return result\nif __name__ == \"__main__\":\n    execute_query(sql_query)",
        "detail": "mid-range.create_db",
        "documentation": {}
    },
    {
        "label": "sql_query",
        "kind": 5,
        "importPath": "mid-range.create_db",
        "description": "mid-range.create_db",
        "peekOfCode": "sql_query = \"\"\"\n    CREATE TABLE IF NOT EXISTS Todo(\n        id INTEGER PRIMARY KEY,\n        task TEXT,\n        complete boolean\n    );\n\"\"\"\ndef execute_query(sql_query):\n    with sqlite3.connect(\"todo.db\") as conn:\n        cur = conn.cursor()",
        "detail": "mid-range.create_db",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "mid-range.cryptomath_module",
        "description": "mid-range.cryptomath_module",
        "peekOfCode": "def gcd(a, b):\n    while a != 0:\n        a, b = b % a, a\n    return b\ndef findModInverse(a, m):\n    if gcd(a, m) != 1:\n        return None\n    u1, u2, u3 = 1, 0, a\n    v1, v2, v3 = 0, 1, m\n    while v3 != 0:",
        "detail": "mid-range.cryptomath_module",
        "documentation": {}
    },
    {
        "label": "findModInverse",
        "kind": 2,
        "importPath": "mid-range.cryptomath_module",
        "description": "mid-range.cryptomath_module",
        "peekOfCode": "def findModInverse(a, m):\n    if gcd(a, m) != 1:\n        return None\n    u1, u2, u3 = 1, 0, a\n    v1, v2, v3 = 0, 1, m\n    while v3 != 0:\n        q = u3 // v3\n        v1, v2, v3, u1, u2, u3 = (u1 - q * v1), (u2 - q * v2), (u3 - q * v3), v1, v2, v3\n    return u1 % m",
        "detail": "mid-range.cryptomath_module",
        "documentation": {}
    },
    {
        "label": "csRaindrops",
        "kind": 2,
        "importPath": "mid-range.cs-raindrops",
        "description": "mid-range.cs-raindrops",
        "peekOfCode": "def csRaindrops(number):\n    output = \"\"\n    if number % 3 == 0:\n        output += \"Pling\"\n    if number % 5 == 0:\n        output += \"Plang\"\n    if number % 7 == 0:\n        output += \"Plong\"\n    if output is \"\":\n        return str(number)",
        "detail": "mid-range.cs-raindrops",
        "documentation": {}
    },
    {
        "label": "Tree",
        "kind": 6,
        "importPath": "mid-range.csBinaryTreelnvert",
        "description": "mid-range.csBinaryTreelnvert",
        "peekOfCode": "class Tree(object):\n    def __init__(self, x):\n        self.value = x\n        self.left = None\n        self.right = None\ndef csBinaryTreeInvert(root):\n    if not root or (not root.left and not root.right):\n        return root\n    tmp = root.left\n    root.left = root.right",
        "detail": "mid-range.csBinaryTreelnvert",
        "documentation": {}
    },
    {
        "label": "csBinaryTreeInvert",
        "kind": 2,
        "importPath": "mid-range.csBinaryTreelnvert",
        "description": "mid-range.csBinaryTreelnvert",
        "peekOfCode": "def csBinaryTreeInvert(root):\n    if not root or (not root.left and not root.right):\n        return root\n    tmp = root.left\n    root.left = root.right\n    root.right = tmp\n    csBinaryTreeInvert(root.left)\n    csBinaryTreeInvert(root.right)\n    return root",
        "detail": "mid-range.csBinaryTreelnvert",
        "documentation": {}
    },
    {
        "label": "Tree",
        "kind": 6,
        "importPath": "mid-range.csBSTRangeSum",
        "description": "mid-range.csBSTRangeSum",
        "peekOfCode": "class Tree(object):\n    def __init__(self, x):\n        self.value = x\n        self.left = None\n        self.right = None\ndef csBSTRangeSum(root, lower, upper):\n    if not root:\n        return 0\n    res = 0\n    if lower <= root.value <= upper:",
        "detail": "mid-range.csBSTRangeSum",
        "documentation": {}
    },
    {
        "label": "csBSTRangeSum",
        "kind": 2,
        "importPath": "mid-range.csBSTRangeSum",
        "description": "mid-range.csBSTRangeSum",
        "peekOfCode": "def csBSTRangeSum(root, lower, upper):\n    if not root:\n        return 0\n    res = 0\n    if lower <= root.value <= upper:\n        res += root.value\n        res += csBSTRangeSum(root.left, lower, upper)\n        res += csBSTRangeSum(root.right, lower, upper)\n    elif root.value < lower:\n        res += csBSTRangeSum(root.right, lower, upper)",
        "detail": "mid-range.csBSTRangeSum",
        "documentation": {}
    },
    {
        "label": "thm",
        "kind": 5,
        "importPath": "mid-range.cscan",
        "description": "mid-range.cscan",
        "peekOfCode": "thm = int(0)\nprint(\"Enter the Number of Requests : \")  # Number of I/O Requets\nreq = int(input())\nprint(\"Enter the Initial Head Position : \")  # Initial position of Disk Head\nhp = int(input())\npos = hp\nprint(\"Enter the Seek Rate : \")\nsrate = int(input())\nprint(\"Enter the Requests : \")\narr = [int(input()) for i in range(req)]",
        "detail": "mid-range.cscan",
        "documentation": {}
    },
    {
        "label": "req",
        "kind": 5,
        "importPath": "mid-range.cscan",
        "description": "mid-range.cscan",
        "peekOfCode": "req = int(input())\nprint(\"Enter the Initial Head Position : \")  # Initial position of Disk Head\nhp = int(input())\npos = hp\nprint(\"Enter the Seek Rate : \")\nsrate = int(input())\nprint(\"Enter the Requests : \")\narr = [int(input()) for i in range(req)]\nstart = 0\nend = 199  # Start and End of Head Positions",
        "detail": "mid-range.cscan",
        "documentation": {}
    },
    {
        "label": "hp",
        "kind": 5,
        "importPath": "mid-range.cscan",
        "description": "mid-range.cscan",
        "peekOfCode": "hp = int(input())\npos = hp\nprint(\"Enter the Seek Rate : \")\nsrate = int(input())\nprint(\"Enter the Requests : \")\narr = [int(input()) for i in range(req)]\nstart = 0\nend = 199  # Start and End of Head Positions\nprint(hp, end=\"\")\nif hp < 100:",
        "detail": "mid-range.cscan",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "mid-range.cscan",
        "description": "mid-range.cscan",
        "peekOfCode": "pos = hp\nprint(\"Enter the Seek Rate : \")\nsrate = int(input())\nprint(\"Enter the Requests : \")\narr = [int(input()) for i in range(req)]\nstart = 0\nend = 199  # Start and End of Head Positions\nprint(hp, end=\"\")\nif hp < 100:\n    for i in range(",
        "detail": "mid-range.cscan",
        "documentation": {}
    },
    {
        "label": "srate",
        "kind": 5,
        "importPath": "mid-range.cscan",
        "description": "mid-range.cscan",
        "peekOfCode": "srate = int(input())\nprint(\"Enter the Requests : \")\narr = [int(input()) for i in range(req)]\nstart = 0\nend = 199  # Start and End of Head Positions\nprint(hp, end=\"\")\nif hp < 100:\n    for i in range(\n        pos, start - 1, -1\n    ):  # Iterates the movement from initial to start of track",
        "detail": "mid-range.cscan",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.cscan",
        "description": "mid-range.cscan",
        "peekOfCode": "arr = [int(input()) for i in range(req)]\nstart = 0\nend = 199  # Start and End of Head Positions\nprint(hp, end=\"\")\nif hp < 100:\n    for i in range(\n        pos, start - 1, -1\n    ):  # Iterates the movement from initial to start of track\n        if i in arr:\n            thm += abs(pos - i)",
        "detail": "mid-range.cscan",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "mid-range.cscan",
        "description": "mid-range.cscan",
        "peekOfCode": "start = 0\nend = 199  # Start and End of Head Positions\nprint(hp, end=\"\")\nif hp < 100:\n    for i in range(\n        pos, start - 1, -1\n    ):  # Iterates the movement from initial to start of track\n        if i in arr:\n            thm += abs(pos - i)\n            pos = i",
        "detail": "mid-range.cscan",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "mid-range.cscan",
        "description": "mid-range.cscan",
        "peekOfCode": "end = 199  # Start and End of Head Positions\nprint(hp, end=\"\")\nif hp < 100:\n    for i in range(\n        pos, start - 1, -1\n    ):  # Iterates the movement from initial to start of track\n        if i in arr:\n            thm += abs(pos - i)\n            pos = i\n            print(\" -> \", i, end=\"\")",
        "detail": "mid-range.cscan",
        "documentation": {}
    },
    {
        "label": "stime",
        "kind": 5,
        "importPath": "mid-range.cscan",
        "description": "mid-range.cscan",
        "peekOfCode": "stime = thm * srate\nprint(\"\\nThe Total Head Movement is\", thm)\nprint(\"The Seek Time is\", stime)",
        "detail": "mid-range.cscan",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "mid-range.csFindAllPathsFromAToB",
        "description": "mid-range.csFindAllPathsFromAToB",
        "peekOfCode": "def dfs(s):\n    # Append the node in path\n    # and set visited\n    path.append(s)\n    visited[s] = True\n    # Path started with a node\n    # having in-degree 0 and\n    # current node has out-degree 0,\n    # print current path\n    if outdeg0[s] and indeg0[path[0]]:",
        "detail": "mid-range.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "csFindAllPathsFromAToB",
        "kind": 2,
        "importPath": "mid-range.csFindAllPathsFromAToB",
        "description": "mid-range.csFindAllPathsFromAToB",
        "peekOfCode": "def csFindAllPathsFromAToB(graph):\n    for i in range(graph):\n        # for each node with in-degree 0\n        # print all possible paths\n        if indeg0[i] and adj[i]:\n            path = []\n            visited = [False] * (graph + 1)\n            dfs(i)\n# Driver code\ngraph = 6",
        "detail": "mid-range.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "mid-range.csFindAllPathsFromAToB",
        "description": "mid-range.csFindAllPathsFromAToB",
        "peekOfCode": "graph = 6\n# set all nodes unvisited\nvisited = [False] * (graph + 1)\npath = []\n# edges = (a, b): a -> b\nedges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph",
        "detail": "mid-range.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "mid-range.csFindAllPathsFromAToB",
        "description": "mid-range.csFindAllPathsFromAToB",
        "peekOfCode": "visited = [False] * (graph + 1)\npath = []\n# edges = (a, b): a -> b\nedges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:",
        "detail": "mid-range.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "mid-range.csFindAllPathsFromAToB",
        "description": "mid-range.csFindAllPathsFromAToB",
        "peekOfCode": "path = []\n# edges = (a, b): a -> b\nedges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]",
        "detail": "mid-range.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "mid-range.csFindAllPathsFromAToB",
        "description": "mid-range.csFindAllPathsFromAToB",
        "peekOfCode": "edges = [(5, 0), (5, 2), (2, 3), (4, 0), (4, 1), (3, 1)]\n# adjacency list for nodes\nadj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)",
        "detail": "mid-range.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "adj",
        "kind": 5,
        "importPath": "mid-range.csFindAllPathsFromAToB",
        "description": "mid-range.csFindAllPathsFromAToB",
        "peekOfCode": "adj = defaultdict(list)\n# indeg0 and outdeg0 arrays\nindeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)\n    # set indeg0[v] <- false\n    indeg0[v] = False",
        "detail": "mid-range.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "indeg0",
        "kind": 5,
        "importPath": "mid-range.csFindAllPathsFromAToB",
        "description": "mid-range.csFindAllPathsFromAToB",
        "peekOfCode": "indeg0 = [True] * graph\noutdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)\n    # set indeg0[v] <- false\n    indeg0[v] = False\n    # set outdeg0[u] <- false\n    outdeg0[u] = False",
        "detail": "mid-range.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "outdeg0",
        "kind": 5,
        "importPath": "mid-range.csFindAllPathsFromAToB",
        "description": "mid-range.csFindAllPathsFromAToB",
        "peekOfCode": "outdeg0 = [True] * graph\nfor edge in edges:\n    u, v = edge[0], edge[1]\n    # u -> v\n    adj[u].append(v)\n    # set indeg0[v] <- false\n    indeg0[v] = False\n    # set outdeg0[u] <- false\n    outdeg0[u] = False\n# print('All possible paths:')",
        "detail": "mid-range.csFindAllPathsFromAToB",
        "documentation": {}
    },
    {
        "label": "csReverseIntegerBits",
        "kind": 2,
        "importPath": "mid-range.csReverseBits",
        "description": "mid-range.csReverseBits",
        "peekOfCode": "def csReverseIntegerBits(n):\n    rev = 0\n    # traversing bits of 'n' from the right\n    while n > 0:\n        # bitwise left shift 'rev' by 1\n        rev = rev << 1\n        # if current bit is '1'\n        if n & 1 == 1:\n            rev = rev ^ 1\n        # bitwise right shift 'n' by 1",
        "detail": "mid-range.csReverseBits",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.csReverseBits",
        "description": "mid-range.csReverseBits",
        "peekOfCode": "n = 267\nprint(csReverseIntegerBits(n))",
        "detail": "mid-range.csReverseBits",
        "documentation": {}
    },
    {
        "label": "convert_to_number",
        "kind": 2,
        "importPath": "mid-range.csv-parsing",
        "description": "mid-range.csv-parsing",
        "peekOfCode": "def convert_to_number(value):\n    \"\"\"converts the passed over string to a number, if possible\"\"\"\n    try:\n        return int(value)\n    except ValueError:\n        pass\n    return value\ndef csv_parsing(csv):\n    \"\"\"returns list of string/numeric csv values\"\"\"\n    count = 0",
        "detail": "mid-range.csv-parsing",
        "documentation": {}
    },
    {
        "label": "csv_parsing",
        "kind": 2,
        "importPath": "mid-range.csv-parsing",
        "description": "mid-range.csv-parsing",
        "peekOfCode": "def csv_parsing(csv):\n    \"\"\"returns list of string/numeric csv values\"\"\"\n    count = 0\n    values = []\n    pos = 0\n    while pos < len(csv):\n        if csv[pos] == \",\":  # skip comma from previous iteration\n            pos += 1\n        values.insert(count, \"\")\n        while pos < len(csv) and csv[pos] != \",\":",
        "detail": "mid-range.csv-parsing",
        "documentation": {}
    },
    {
        "label": "samples",
        "kind": 5,
        "importPath": "mid-range.csv_dialect_sniffer",
        "description": "mid-range.csv_dialect_sniffer",
        "peekOfCode": "samples = []\nfor name in sorted(csv.list_dialects()):\n    buffer = StringIO()\n    dialect = csv.get_dialect(name)\n    writer = csv.writer(buffer, dialect=dialect)\n    writer.writerow(\n        (\n            \"col1\",\n            1,\n            \"10/01/2010\",",
        "detail": "mid-range.csv_dialect_sniffer",
        "documentation": {}
    },
    {
        "label": "sniffer",
        "kind": 5,
        "importPath": "mid-range.csv_dialect_sniffer",
        "description": "mid-range.csv_dialect_sniffer",
        "peekOfCode": "sniffer = csv.Sniffer()\nfor name, expected, sample in samples:\n    print('Dialect: \"{}\"'.format(name))\n    print(\"In: {}\".format(sample.rstrip()))\n    dialect = sniffer.sniff(sample, delimiters=\",\\t\")\n    reader = csv.reader(StringIO(sample), dialect=dialect)\n    print(\"Parsed:\\n  {}\\n\".format(\"\\n  \".join(repr(r) for r in next(reader))))",
        "detail": "mid-range.csv_dialect_sniffer",
        "documentation": {}
    },
    {
        "label": "quoting_modes",
        "kind": 5,
        "importPath": "mid-range.csv_dialect_variations",
        "description": "mid-range.csv_dialect_variations",
        "peekOfCode": "quoting_modes = {getattr(csv, n): n for n in dir(csv) if n.startswith(\"QUOTE_\")}\nTEMPLATE = \"\"\"\\\nDialect: \"{name}\"\n  delimiter   = {dl!r:<6}    skipinitialspace = {si!r}\n  doublequote = {dq!r:<6}    quoting          = {qu}\n  quotechar   = {qc!r:<6}    lineterminator   = {lt!r}\n  escapechar  = {ec!r:<6}\n\"\"\"\nfor name in sorted(csv.list_dialects()):\n    dialect = csv.get_dialect(name)",
        "detail": "mid-range.csv_dialect_variations",
        "documentation": {}
    },
    {
        "label": "TEMPLATE",
        "kind": 5,
        "importPath": "mid-range.csv_dialect_variations",
        "description": "mid-range.csv_dialect_variations",
        "peekOfCode": "TEMPLATE = \"\"\"\\\nDialect: \"{name}\"\n  delimiter   = {dl!r:<6}    skipinitialspace = {si!r}\n  doublequote = {dq!r:<6}    quoting          = {qu}\n  quotechar   = {qc!r:<6}    lineterminator   = {lt!r}\n  escapechar  = {ec!r:<6}\n\"\"\"\nfor name in sorted(csv.list_dialects()):\n    dialect = csv.get_dialect(name)\n    print(",
        "detail": "mid-range.csv_dialect_variations",
        "documentation": {}
    },
    {
        "label": "fieldnames",
        "kind": 5,
        "importPath": "mid-range.csv_dictwriter",
        "description": "mid-range.csv_dictwriter",
        "peekOfCode": "fieldnames = (\"Title 1\", \"Title 2\", \"Title 3\", \"Title 4\")\nheaders = {n: n for n in fieldnames}\nunicode_chars = \"å∫ç\"\nwith open(sys.argv[1], \"wt\") as f:\n    writer = csv.DictWriter(f, fieldnames=fieldnames)\n    writer.writeheader()\n    for i in range(3):\n        writer.writerow(\n            {\n                \"Title 1\": i + 1,",
        "detail": "mid-range.csv_dictwriter",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "mid-range.csv_dictwriter",
        "description": "mid-range.csv_dictwriter",
        "peekOfCode": "headers = {n: n for n in fieldnames}\nunicode_chars = \"å∫ç\"\nwith open(sys.argv[1], \"wt\") as f:\n    writer = csv.DictWriter(f, fieldnames=fieldnames)\n    writer.writeheader()\n    for i in range(3):\n        writer.writerow(\n            {\n                \"Title 1\": i + 1,\n                \"Title 2\": chr(ord(\"a\") + i),",
        "detail": "mid-range.csv_dictwriter",
        "documentation": {}
    },
    {
        "label": "unicode_chars",
        "kind": 5,
        "importPath": "mid-range.csv_dictwriter",
        "description": "mid-range.csv_dictwriter",
        "peekOfCode": "unicode_chars = \"å∫ç\"\nwith open(sys.argv[1], \"wt\") as f:\n    writer = csv.DictWriter(f, fieldnames=fieldnames)\n    writer.writeheader()\n    for i in range(3):\n        writer.writerow(\n            {\n                \"Title 1\": i + 1,\n                \"Title 2\": chr(ord(\"a\") + i),\n                \"Title 3\": \"08/{:02d}/07\".format(i + 1),",
        "detail": "mid-range.csv_dictwriter",
        "documentation": {}
    },
    {
        "label": "input_path",
        "kind": 5,
        "importPath": "mid-range.csv_to_md",
        "description": "mid-range.csv_to_md",
        "peekOfCode": "input_path = input(\"Input full path of the csv file:\")\n# takes input of the type of delimiter in CSV file\ntype_del = input(\n    \"Enter the type of delemiter example ',' '|' ';' for space enter 'space' for tab enter 'tab' or any other : \"\n)\nif type_del == \"space\":\n    type_del = \" \"\nif type_del == \"tab\":\n    type_del = \"\\t\"\n# creating a string with .md extension for the output file",
        "detail": "mid-range.csv_to_md",
        "documentation": {}
    },
    {
        "label": "type_del",
        "kind": 5,
        "importPath": "mid-range.csv_to_md",
        "description": "mid-range.csv_to_md",
        "peekOfCode": "type_del = input(\n    \"Enter the type of delemiter example ',' '|' ';' for space enter 'space' for tab enter 'tab' or any other : \"\n)\nif type_del == \"space\":\n    type_del = \" \"\nif type_del == \"tab\":\n    type_del = \"\\t\"\n# creating a string with .md extension for the output file\noutput_file = input_path.replace(\".csv\", \".md\")\n# I used encoding UTF-8 as we won't have to worry about errors while decoding contents of a csv file",
        "detail": "mid-range.csv_to_md",
        "documentation": {}
    },
    {
        "label": "output_file",
        "kind": 5,
        "importPath": "mid-range.csv_to_md",
        "description": "mid-range.csv_to_md",
        "peekOfCode": "output_file = input_path.replace(\".csv\", \".md\")\n# I used encoding UTF-8 as we won't have to worry about errors while decoding contents of a csv file\ncsv_dict = csv.DictReader(open(input_path, encoding=\"UTF-8\"), delimiter=type_del)\n# storing the content of csv file in a list_of_rows. Each row is a dict.\nlist_of_rows = [dict_row for dict_row in csv_dict]\n# For Headers of the csv file.\nheaders = list(list_of_rows[0].keys())\n# The below code block makes md_string as per the required format of a markdown file.\nmd_string = \" | \"\nfor header in headers:",
        "detail": "mid-range.csv_to_md",
        "documentation": {}
    },
    {
        "label": "csv_dict",
        "kind": 5,
        "importPath": "mid-range.csv_to_md",
        "description": "mid-range.csv_to_md",
        "peekOfCode": "csv_dict = csv.DictReader(open(input_path, encoding=\"UTF-8\"), delimiter=type_del)\n# storing the content of csv file in a list_of_rows. Each row is a dict.\nlist_of_rows = [dict_row for dict_row in csv_dict]\n# For Headers of the csv file.\nheaders = list(list_of_rows[0].keys())\n# The below code block makes md_string as per the required format of a markdown file.\nmd_string = \" | \"\nfor header in headers:\n    md_string += header + \" |\"\nmd_string += \"\\n |\"",
        "detail": "mid-range.csv_to_md",
        "documentation": {}
    },
    {
        "label": "list_of_rows",
        "kind": 5,
        "importPath": "mid-range.csv_to_md",
        "description": "mid-range.csv_to_md",
        "peekOfCode": "list_of_rows = [dict_row for dict_row in csv_dict]\n# For Headers of the csv file.\nheaders = list(list_of_rows[0].keys())\n# The below code block makes md_string as per the required format of a markdown file.\nmd_string = \" | \"\nfor header in headers:\n    md_string += header + \" |\"\nmd_string += \"\\n |\"\nfor i in range(len(headers)):\n    md_string += \"--- | \"",
        "detail": "mid-range.csv_to_md",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "mid-range.csv_to_md",
        "description": "mid-range.csv_to_md",
        "peekOfCode": "headers = list(list_of_rows[0].keys())\n# The below code block makes md_string as per the required format of a markdown file.\nmd_string = \" | \"\nfor header in headers:\n    md_string += header + \" |\"\nmd_string += \"\\n |\"\nfor i in range(len(headers)):\n    md_string += \"--- | \"\nmd_string += \"\\n\"\nfor row in list_of_rows[1:]:",
        "detail": "mid-range.csv_to_md",
        "documentation": {}
    },
    {
        "label": "md_string",
        "kind": 5,
        "importPath": "mid-range.csv_to_md",
        "description": "mid-range.csv_to_md",
        "peekOfCode": "md_string = \" | \"\nfor header in headers:\n    md_string += header + \" |\"\nmd_string += \"\\n |\"\nfor i in range(len(headers)):\n    md_string += \"--- | \"\nmd_string += \"\\n\"\nfor row in list_of_rows[1:]:\n    md_string += \" | \"\n    for header in headers:",
        "detail": "mid-range.csv_to_md",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "mid-range.csv_to_md",
        "description": "mid-range.csv_to_md",
        "peekOfCode": "file = open(output_file, \"w\", encoding=\"UTF-8\")\nfile.write(md_string)\nfile.close()\nprint(\"The markdown file has been created!!!\")",
        "detail": "mid-range.csv_to_md",
        "documentation": {}
    },
    {
        "label": "unicode_chars",
        "kind": 5,
        "importPath": "mid-range.csv_writer",
        "description": "mid-range.csv_writer",
        "peekOfCode": "unicode_chars = \"å∫ç\"\nwith open(sys.argv[1], \"wt\") as f:\n    writer = csv.writer(f)\n    writer.writerow((\"Title 1\", \"Title 2\", \"Title 3\", \"Title 4\"))\n    for i in range(3):\n        row = (i + 1, chr(ord(\"a\") + i), \"08/{:02d}/07\".format(i + 1), unicode_chars[i])\n        writer.writerow(row)\nprint(open(sys.argv[1], \"rt\").read())",
        "detail": "mid-range.csv_writer",
        "documentation": {}
    },
    {
        "label": "unicode_chars",
        "kind": 5,
        "importPath": "mid-range.csv_writer_quoted",
        "description": "mid-range.csv_writer_quoted",
        "peekOfCode": "unicode_chars = \"å∫ç\"\nwith open(sys.argv[1], \"wt\") as f:\n    writer = csv.writer(f, quoting=csv.QUOTE_NONNUMERIC)\n    writer.writerow((\"Title 1\", \"Title 2\", \"Title 3\", \"Title 4\"))\n    for i in range(3):\n        row = (i + 1, chr(ord(\"a\") + i), \"08/{:02d}/07\".format(i + 1), unicode_chars[i])\n        writer.writerow(row)\nprint(open(sys.argv[1], \"rt\").read())",
        "detail": "mid-range.csv_writer_quoted",
        "documentation": {}
    },
    {
        "label": "currencyDict",
        "kind": 5,
        "importPath": "mid-range.currency_converter",
        "description": "mid-range.currency_converter",
        "peekOfCode": "currencyDict = {}\n# fetching all data\nfor line in lines:\n    parsed = line.split(\"\\t\")\n    currencyDict[parsed[0]] = parsed[1]\nprint(currencyDict)\namount = int(input(\"enter the amount: \\n\"))\nprint(\"Enter the name of the country of which you want to convert currency\")\nprint(\"Available options for conversion is: \\n\")\n[print(item) for item in currencyDict.keys()]",
        "detail": "mid-range.currency_converter",
        "documentation": {}
    },
    {
        "label": "amount",
        "kind": 5,
        "importPath": "mid-range.currency_converter",
        "description": "mid-range.currency_converter",
        "peekOfCode": "amount = int(input(\"enter the amount: \\n\"))\nprint(\"Enter the name of the country of which you want to convert currency\")\nprint(\"Available options for conversion is: \\n\")\n[print(item) for item in currencyDict.keys()]\ncurrency = input(\"Please enter the currency you want to convert\")\nprint(f\"{amount} INR is equal to  {amount*float(currencyDict[currency])}\" f\"{currency}\")",
        "detail": "mid-range.currency_converter",
        "documentation": {}
    },
    {
        "label": "currency",
        "kind": 5,
        "importPath": "mid-range.currency_converter",
        "description": "mid-range.currency_converter",
        "peekOfCode": "currency = input(\"Please enter the currency you want to convert\")\nprint(f\"{amount} INR is equal to  {amount*float(currencyDict[currency])}\" f\"{currency}\")",
        "detail": "mid-range.currency_converter",
        "documentation": {}
    },
    {
        "label": "stock_price",
        "kind": 2,
        "importPath": "mid-range.current_stock_price",
        "description": "mid-range.current_stock_price",
        "peekOfCode": "def stock_price(symbol: str = \"AAPL\") -> str:\n    url = f\"https://in.finance.yahoo.com/quote/{symbol}?s={symbol}\"\n    soup = BeautifulSoup(requests.get(url).text, \"html.parser\")\n    class_ = \"My(6px) Pos(r) smartphone_Mt(6px)\"\n    return soup.find(\"div\", class_=class_).find(\"span\").text\nif __name__ == \"__main__\":\n    for symbol in \"AAPL AMZN IBM GOOG MSFT ORCL\".split():\n        print(f\"Current {symbol:<4} stock price is {stock_price(symbol):>8}\")",
        "detail": "mid-range.current_stock_price",
        "documentation": {}
    },
    {
        "label": "current_weather",
        "kind": 2,
        "importPath": "mid-range.current_weather",
        "description": "mid-range.current_weather",
        "peekOfCode": "def current_weather(q: str = \"Chicago\", appid: str = APPID) -> dict:\n    \"\"\"https://openweathermap.org/api\"\"\"\n    return requests.get(URL_BASE + \"weather\", params=locals()).json()\ndef weather_forecast(q: str = \"Kolkata, India\", appid: str = APPID) -> dict:\n    \"\"\"https://openweathermap.org/forecast5\"\"\"\n    return requests.get(URL_BASE + \"forecast\", params=locals()).json()\ndef weather_onecall(lat: float = 55.68, lon: float = 12.57, appid: str = APPID) -> dict:\n    \"\"\"https://openweathermap.org/api/one-call-api\"\"\"\n    return requests.get(URL_BASE + \"onecall\", params=locals()).json()\nif __name__ == \"__main__\":",
        "detail": "mid-range.current_weather",
        "documentation": {}
    },
    {
        "label": "weather_forecast",
        "kind": 2,
        "importPath": "mid-range.current_weather",
        "description": "mid-range.current_weather",
        "peekOfCode": "def weather_forecast(q: str = \"Kolkata, India\", appid: str = APPID) -> dict:\n    \"\"\"https://openweathermap.org/forecast5\"\"\"\n    return requests.get(URL_BASE + \"forecast\", params=locals()).json()\ndef weather_onecall(lat: float = 55.68, lon: float = 12.57, appid: str = APPID) -> dict:\n    \"\"\"https://openweathermap.org/api/one-call-api\"\"\"\n    return requests.get(URL_BASE + \"onecall\", params=locals()).json()\nif __name__ == \"__main__\":\n    from pprint import pprint\n    while True:\n        location = input(\"Enter a location:\").strip()",
        "detail": "mid-range.current_weather",
        "documentation": {}
    },
    {
        "label": "weather_onecall",
        "kind": 2,
        "importPath": "mid-range.current_weather",
        "description": "mid-range.current_weather",
        "peekOfCode": "def weather_onecall(lat: float = 55.68, lon: float = 12.57, appid: str = APPID) -> dict:\n    \"\"\"https://openweathermap.org/api/one-call-api\"\"\"\n    return requests.get(URL_BASE + \"onecall\", params=locals()).json()\nif __name__ == \"__main__\":\n    from pprint import pprint\n    while True:\n        location = input(\"Enter a location:\").strip()\n        if location:\n            pprint(current_weather(location))\n        else:",
        "detail": "mid-range.current_weather",
        "documentation": {}
    },
    {
        "label": "APPID",
        "kind": 5,
        "importPath": "mid-range.current_weather",
        "description": "mid-range.current_weather",
        "peekOfCode": "APPID = \"\"  # <-- Put your OpenWeatherMap appid here!\nURL_BASE = \"http://api.openweathermap.org/data/2.5/\"\ndef current_weather(q: str = \"Chicago\", appid: str = APPID) -> dict:\n    \"\"\"https://openweathermap.org/api\"\"\"\n    return requests.get(URL_BASE + \"weather\", params=locals()).json()\ndef weather_forecast(q: str = \"Kolkata, India\", appid: str = APPID) -> dict:\n    \"\"\"https://openweathermap.org/forecast5\"\"\"\n    return requests.get(URL_BASE + \"forecast\", params=locals()).json()\ndef weather_onecall(lat: float = 55.68, lon: float = 12.57, appid: str = APPID) -> dict:\n    \"\"\"https://openweathermap.org/api/one-call-api\"\"\"",
        "detail": "mid-range.current_weather",
        "documentation": {}
    },
    {
        "label": "URL_BASE",
        "kind": 5,
        "importPath": "mid-range.current_weather",
        "description": "mid-range.current_weather",
        "peekOfCode": "URL_BASE = \"http://api.openweathermap.org/data/2.5/\"\ndef current_weather(q: str = \"Chicago\", appid: str = APPID) -> dict:\n    \"\"\"https://openweathermap.org/api\"\"\"\n    return requests.get(URL_BASE + \"weather\", params=locals()).json()\ndef weather_forecast(q: str = \"Kolkata, India\", appid: str = APPID) -> dict:\n    \"\"\"https://openweathermap.org/forecast5\"\"\"\n    return requests.get(URL_BASE + \"forecast\", params=locals()).json()\ndef weather_onecall(lat: float = 55.68, lon: float = 12.57, appid: str = APPID) -> dict:\n    \"\"\"https://openweathermap.org/api/one-call-api\"\"\"\n    return requests.get(URL_BASE + \"onecall\", params=locals()).json()",
        "detail": "mid-range.current_weather",
        "documentation": {}
    },
    {
        "label": "get_stream_handle",
        "kind": 2,
        "importPath": "mid-range.cursor",
        "description": "mid-range.cursor",
        "peekOfCode": "def get_stream_handle(stream=sys.stdout):\n    \"\"\"\n    Get the OS appropriate handle for the corresponding output stream.\n    :param str stream: The the stream to get the handle for\n    :return: A handle to the appropriate stream, either a ctypes buffer\n             or **sys.stdout** or **sys.stderr**.\n    \"\"\"\n    handle = stream\n    if os.name == \"nt\":\n        from ._winconsole import get_stream_handle as get_win_stream_handle",
        "detail": "mid-range.cursor",
        "documentation": {}
    },
    {
        "label": "hide_cursor",
        "kind": 2,
        "importPath": "mid-range.cursor",
        "description": "mid-range.cursor",
        "peekOfCode": "def hide_cursor(stream=sys.stdout):\n    \"\"\"\n    Hide the console cursor on the given stream\n    :param stream: The name of the stream to get the handle for\n    :return: None\n    :rtype: None\n    \"\"\"\n    handle = get_stream_handle(stream=stream)\n    if os.name == \"nt\":\n        from ._winconsole import hide_cursor",
        "detail": "mid-range.cursor",
        "documentation": {}
    },
    {
        "label": "show_cursor",
        "kind": 2,
        "importPath": "mid-range.cursor",
        "description": "mid-range.cursor",
        "peekOfCode": "def show_cursor(stream=sys.stdout):\n    \"\"\"\n    Show the console cursor on the given stream\n    :param stream: The name of the stream to get the handle for\n    :return: None\n    :rtype: None\n    \"\"\"\n    handle = get_stream_handle(stream=stream)\n    if os.name == \"nt\":\n        from ._winconsole import show_cursor",
        "detail": "mid-range.cursor",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.cursor",
        "description": "mid-range.cursor",
        "peekOfCode": "__all__ = [\"hide_cursor\", \"show_cursor\", \"get_stream_handle\"]\ndef get_stream_handle(stream=sys.stdout):\n    \"\"\"\n    Get the OS appropriate handle for the corresponding output stream.\n    :param str stream: The the stream to get the handle for\n    :return: A handle to the appropriate stream, either a ctypes buffer\n             or **sys.stdout** or **sys.stderr**.\n    \"\"\"\n    handle = stream\n    if os.name == \"nt\":",
        "detail": "mid-range.cursor",
        "documentation": {}
    },
    {
        "label": "has_cycle",
        "kind": 2,
        "importPath": "mid-range.Cycle-Detection",
        "description": "mid-range.Cycle-Detection",
        "peekOfCode": "def has_cycle(head):\n    if not head:\n        return 0\n    fast = slow = head\n    while fast and fast.next:\n        fast = fast.next.next\n        slow = slow.next\n        if fast == slow:\n            return 1\n    return 0",
        "detail": "mid-range.Cycle-Detection",
        "documentation": {}
    },
    {
        "label": "cycle_sort",
        "kind": 2,
        "importPath": "mid-range.cyclesort",
        "description": "mid-range.cyclesort",
        "peekOfCode": "def cycle_sort(array):\n    ans = 0\n    # Pass through the array to find cycles to rotate.\n    for cycleStart in range(0, len(array) - 1):\n        item = array[cycleStart]\n        # finding the position for putting the item.\n        pos = cycleStart\n        for i in range(cycleStart + 1, len(array)):\n            if array[i] < item:\n                pos += 1",
        "detail": "mid-range.cyclesort",
        "documentation": {}
    },
    {
        "label": "user_input",
        "kind": 5,
        "importPath": "mid-range.cyclesort",
        "description": "mid-range.cyclesort",
        "peekOfCode": "user_input = raw_input(\"Enter numbers separated by a comma:\\n\")\nunsorted = [int(item) for item in user_input.split(\",\")]\nn = len(unsorted)\ncycle_sort(unsorted)\nprint(\"After sort : \")\nfor i in range(0, n):\n    print(unsorted[i], end=\" \")",
        "detail": "mid-range.cyclesort",
        "documentation": {}
    },
    {
        "label": "unsorted",
        "kind": 5,
        "importPath": "mid-range.cyclesort",
        "description": "mid-range.cyclesort",
        "peekOfCode": "unsorted = [int(item) for item in user_input.split(\",\")]\nn = len(unsorted)\ncycle_sort(unsorted)\nprint(\"After sort : \")\nfor i in range(0, n):\n    print(unsorted[i], end=\" \")",
        "detail": "mid-range.cyclesort",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.cyclesort",
        "description": "mid-range.cyclesort",
        "peekOfCode": "n = len(unsorted)\ncycle_sort(unsorted)\nprint(\"After sort : \")\nfor i in range(0, n):\n    print(unsorted[i], end=\" \")",
        "detail": "mid-range.cyclesort",
        "documentation": {}
    },
    {
        "label": "cycle_sort",
        "kind": 2,
        "importPath": "mid-range.cycle_sort",
        "description": "mid-range.cycle_sort",
        "peekOfCode": "def cycle_sort(array: list) -> list:\n    \"\"\"\n    >>> cycle_sort([4, 3, 2, 1])\n    [1, 2, 3, 4]\n    >>> cycle_sort([-4, 20, 0, -50, 100, -1])\n    [-50, -4, -1, 0, 20, 100]\n    >>> cycle_sort([-.1, -.2, 1.3, -.8])\n    [-0.8, -0.2, -0.1, 1.3]\n    >>> cycle_sort([])\n    []",
        "detail": "mid-range.cycle_sort",
        "documentation": {}
    },
    {
        "label": "cyclic_rotation",
        "kind": 2,
        "importPath": "mid-range.cyclic_rotation",
        "description": "mid-range.cyclic_rotation",
        "peekOfCode": "def cyclic_rotation(arr, n):\n    temp = arr[n - 1]\n    for i in range(n - 1, 0, -1):\n        arr[i] = arr[i - 1]\n    arr[0] = temp\ndef print_array(arr, n):\n    for i in range(n):\n        print(arr[i])\narr = [1, 2, 3, 4, 5]\ncyclic_rotation(arr, 5)",
        "detail": "mid-range.cyclic_rotation",
        "documentation": {}
    },
    {
        "label": "print_array",
        "kind": 2,
        "importPath": "mid-range.cyclic_rotation",
        "description": "mid-range.cyclic_rotation",
        "peekOfCode": "def print_array(arr, n):\n    for i in range(n):\n        print(arr[i])\narr = [1, 2, 3, 4, 5]\ncyclic_rotation(arr, 5)\nprint_array(arr, 5)",
        "detail": "mid-range.cyclic_rotation",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.cyclic_rotation",
        "description": "mid-range.cyclic_rotation",
        "peekOfCode": "arr = [1, 2, 3, 4, 5]\ncyclic_rotation(arr, 5)\nprint_array(arr, 5)",
        "detail": "mid-range.cyclic_rotation",
        "documentation": {}
    },
    {
        "label": "my_hash",
        "kind": 2,
        "importPath": "mid-range.d3",
        "description": "mid-range.d3",
        "peekOfCode": "def my_hash(key):\n    sum = 0\n    for c in key:\n        nc = ord(c)\n        sum += nc\n    return sum\nstorage = [None] * 10\nh = my_hash(\"CBA\")\nprint(h)\nn = h % len(storage)",
        "detail": "mid-range.d3",
        "documentation": {}
    },
    {
        "label": "put",
        "kind": 2,
        "importPath": "mid-range.d3",
        "description": "mid-range.d3",
        "peekOfCode": "def put(key, value):\n    idx = my_hash(key) % len(storage)\n    storage[idx] = value\ndef get(key):\n    idx = my_hash(key) % len(storage)\n    return storage[idx]\nput(\"Tom\", 41)\n# bryan@LAPTOP-9LGJ3JGS:/c/Lambda/CIRRICULUMN/_NOTES/CS-python-notes/WEEKS/wk17/d3$ python3 d3.py\n# 198\n# 8",
        "detail": "mid-range.d3",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "mid-range.d3",
        "description": "mid-range.d3",
        "peekOfCode": "def get(key):\n    idx = my_hash(key) % len(storage)\n    return storage[idx]\nput(\"Tom\", 41)\n# bryan@LAPTOP-9LGJ3JGS:/c/Lambda/CIRRICULUMN/_NOTES/CS-python-notes/WEEKS/wk17/d3$ python3 d3.py\n# 198\n# 8\n# bryan@LAPTOP-9LGJ3JGS:/c/Lambda/CIRRICULUMN/_NOTES/CS-python-notes/WEEKS/wk17/d3$",
        "detail": "mid-range.d3",
        "documentation": {}
    },
    {
        "label": "storage",
        "kind": 5,
        "importPath": "mid-range.d3",
        "description": "mid-range.d3",
        "peekOfCode": "storage = [None] * 10\nh = my_hash(\"CBA\")\nprint(h)\nn = h % len(storage)\nprint(n)\ndef put(key, value):\n    idx = my_hash(key) % len(storage)\n    storage[idx] = value\ndef get(key):\n    idx = my_hash(key) % len(storage)",
        "detail": "mid-range.d3",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "mid-range.d3",
        "description": "mid-range.d3",
        "peekOfCode": "h = my_hash(\"CBA\")\nprint(h)\nn = h % len(storage)\nprint(n)\ndef put(key, value):\n    idx = my_hash(key) % len(storage)\n    storage[idx] = value\ndef get(key):\n    idx = my_hash(key) % len(storage)\n    return storage[idx]",
        "detail": "mid-range.d3",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.d3",
        "description": "mid-range.d3",
        "peekOfCode": "n = h % len(storage)\nprint(n)\ndef put(key, value):\n    idx = my_hash(key) % len(storage)\n    storage[idx] = value\ndef get(key):\n    idx = my_hash(key) % len(storage)\n    return storage[idx]\nput(\"Tom\", 41)\n# bryan@LAPTOP-9LGJ3JGS:/c/Lambda/CIRRICULUMN/_NOTES/CS-python-notes/WEEKS/wk17/d3$ python3 d3.py",
        "detail": "mid-range.d3",
        "documentation": {}
    },
    {
        "label": "daemonize",
        "kind": 2,
        "importPath": "mid-range.daemonize",
        "description": "mid-range.daemonize",
        "peekOfCode": "def daemonize():\n    # See http://www.erlenstar.demon.co.uk/unix/faq_toc.html#TOC16\n    if os.fork():  # launch child and...\n        os._exit(0)  # kill off parent\n    os.setsid()\n    if os.fork():  # launch child and...\n        os._exit(0)  # kill off parent again.\n    null = os.open(\"/dev/null\", os.O_RDWR)\n    for i in range(3):\n        try:",
        "detail": "mid-range.daemonize",
        "documentation": {}
    },
    {
        "label": "horoscope",
        "kind": 2,
        "importPath": "mid-range.daily_horoscope",
        "description": "mid-range.daily_horoscope",
        "peekOfCode": "def horoscope(zodiac_sign: int, day: str) -> str:\n    url = (\n        \"https://www.horoscope.com/us/horoscopes/general/\"\n        f\"horoscope-general-daily-{day}.aspx?sign={zodiac_sign}\"\n    )\n    soup = BeautifulSoup(requests.get(url).content, \"html.parser\")\n    return soup.find(\"div\", class_=\"main-horoscope\").p.text\nif __name__ == \"__main__\":\n    print(\"Daily Horoscope. \\n\")\n    print(",
        "detail": "mid-range.daily_horoscope",
        "documentation": {}
    },
    {
        "label": "TqdmCallback",
        "kind": 6,
        "importPath": "mid-range.dask",
        "description": "mid-range.dask",
        "peekOfCode": "class TqdmCallback(Callback):\n    \"\"\"Dask callback for task progress.\"\"\"\n    def __init__(self, start=None, pretask=None, tqdm_class=tqdm_auto, **tqdm_kwargs):\n        \"\"\"\n        Parameters\n        ----------\n        tqdm_class  : optional\n            `tqdm` class to use for bars [default: `tqdm.auto.tqdm`].\n        tqdm_kwargs  : optional\n            Any other arguments used for all bars.",
        "detail": "mid-range.dask",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "mid-range.dask",
        "description": "mid-range.dask",
        "peekOfCode": "__author__ = {\"github.com/\": [\"casperdcl\"]}\n__all__ = [\"TqdmCallback\"]\nclass TqdmCallback(Callback):\n    \"\"\"Dask callback for task progress.\"\"\"\n    def __init__(self, start=None, pretask=None, tqdm_class=tqdm_auto, **tqdm_kwargs):\n        \"\"\"\n        Parameters\n        ----------\n        tqdm_class  : optional\n            `tqdm` class to use for bars [default: `tqdm.auto.tqdm`].",
        "detail": "mid-range.dask",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.dask",
        "description": "mid-range.dask",
        "peekOfCode": "__all__ = [\"TqdmCallback\"]\nclass TqdmCallback(Callback):\n    \"\"\"Dask callback for task progress.\"\"\"\n    def __init__(self, start=None, pretask=None, tqdm_class=tqdm_auto, **tqdm_kwargs):\n        \"\"\"\n        Parameters\n        ----------\n        tqdm_class  : optional\n            `tqdm` class to use for bars [default: `tqdm.auto.tqdm`].\n        tqdm_kwargs  : optional",
        "detail": "mid-range.dask",
        "documentation": {}
    },
    {
        "label": "BookData",
        "kind": 6,
        "importPath": "mid-range.database",
        "description": "mid-range.database",
        "peekOfCode": "class BookData:\n    def __init__(self):\n        self.conn = sqlite3.connect(\"books.db\")\n        self.cur = self.conn.cursor()\n        self.cur.execute(\n            \"create table if not exists book (id INTEGER PRIMARY KEY,title TEXT,author TEXT,year INTEGER,isbn INTEGER)\"\n        )\n        self.conn.commit()\n    def insert_in_database(self, title, author, year, isbn):\n        self.cur.execute(",
        "detail": "mid-range.database",
        "documentation": {}
    },
    {
        "label": "DataTypeFilter",
        "kind": 6,
        "importPath": "mid-range.datatypefilter",
        "description": "mid-range.datatypefilter",
        "peekOfCode": "class DataTypeFilter(NbConvertBase):\n    \"\"\" Returns the preferred display format \"\"\"\n    def __call__(self, output):\n        \"\"\" Return the first available format in the priority.\n        Produces a UserWarning if no compatible mimetype is found.\n        `output` is dict with structure {mimetype-of-element: value-of-element}\n        \"\"\"\n        for fmt in self.display_data_priority:\n            if fmt in output:\n                return [fmt]",
        "detail": "mid-range.datatypefilter",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.datatypefilter",
        "description": "mid-range.datatypefilter",
        "peekOfCode": "__all__ = [\"DataTypeFilter\"]\nclass DataTypeFilter(NbConvertBase):\n    \"\"\" Returns the preferred display format \"\"\"\n    def __call__(self, output):\n        \"\"\" Return the first available format in the priority.\n        Produces a UserWarning if no compatible mimetype is found.\n        `output` is dict with structure {mimetype-of-element: value-of-element}\n        \"\"\"\n        for fmt in self.display_data_priority:\n            if fmt in output:",
        "detail": "mid-range.datatypefilter",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.data_structures",
        "description": "mid-range.data_structures",
        "peekOfCode": "__all__ = [\"Point\", \"Size\"]\nPoint = NamedTuple(\"Point\", [(\"x\", int), (\"y\", int)])\nSize = NamedTuple(\"Size\", [(\"rows\", int), (\"columns\", int)])",
        "detail": "mid-range.data_structures",
        "documentation": {}
    },
    {
        "label": "Point",
        "kind": 5,
        "importPath": "mid-range.data_structures",
        "description": "mid-range.data_structures",
        "peekOfCode": "Point = NamedTuple(\"Point\", [(\"x\", int), (\"y\", int)])\nSize = NamedTuple(\"Size\", [(\"rows\", int), (\"columns\", int)])",
        "detail": "mid-range.data_structures",
        "documentation": {}
    },
    {
        "label": "Size",
        "kind": 5,
        "importPath": "mid-range.data_structures",
        "description": "mid-range.data_structures",
        "peekOfCode": "Size = NamedTuple(\"Size\", [(\"rows\", int), (\"columns\", int)])",
        "detail": "mid-range.data_structures",
        "documentation": {}
    },
    {
        "label": "today_is_later_than",
        "kind": 2,
        "importPath": "mid-range.datetime",
        "description": "mid-range.datetime",
        "peekOfCode": "def today_is_later_than(year: int, month: int, day: int) -> bool:\n    today = datetime.date.today()\n    given = datetime.date(year, month, day)\n    return today > given",
        "detail": "mid-range.datetime",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "mid-range.datetime_comparing",
        "description": "mid-range.datetime_comparing",
        "peekOfCode": "t1 = datetime.time(12, 55, 0)\nprint(\"  t1:\", t1)\nt2 = datetime.time(13, 5, 0)\nprint(\"  t2:\", t2)\nprint(\"  t1 < t2:\", t1 < t2)\nprint()\nprint(\"Dates:\")\nd1 = datetime.date.today()\nprint(\"  d1:\", d1)\nd2 = datetime.date.today() + datetime.timedelta(days=1)",
        "detail": "mid-range.datetime_comparing",
        "documentation": {}
    },
    {
        "label": "t2",
        "kind": 5,
        "importPath": "mid-range.datetime_comparing",
        "description": "mid-range.datetime_comparing",
        "peekOfCode": "t2 = datetime.time(13, 5, 0)\nprint(\"  t2:\", t2)\nprint(\"  t1 < t2:\", t1 < t2)\nprint()\nprint(\"Dates:\")\nd1 = datetime.date.today()\nprint(\"  d1:\", d1)\nd2 = datetime.date.today() + datetime.timedelta(days=1)\nprint(\"  d2:\", d2)\nprint(\"  d1 > d2:\", d1 > d2)",
        "detail": "mid-range.datetime_comparing",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "mid-range.datetime_comparing",
        "description": "mid-range.datetime_comparing",
        "peekOfCode": "d1 = datetime.date.today()\nprint(\"  d1:\", d1)\nd2 = datetime.date.today() + datetime.timedelta(days=1)\nprint(\"  d2:\", d2)\nprint(\"  d1 > d2:\", d1 > d2)",
        "detail": "mid-range.datetime_comparing",
        "documentation": {}
    },
    {
        "label": "d2",
        "kind": 5,
        "importPath": "mid-range.datetime_comparing",
        "description": "mid-range.datetime_comparing",
        "peekOfCode": "d2 = datetime.date.today() + datetime.timedelta(days=1)\nprint(\"  d2:\", d2)\nprint(\"  d1 > d2:\", d1 > d2)",
        "detail": "mid-range.datetime_comparing",
        "documentation": {}
    },
    {
        "label": "today",
        "kind": 5,
        "importPath": "mid-range.datetime_date",
        "description": "mid-range.datetime_date",
        "peekOfCode": "today = datetime.date.today()\nprint(today)\nprint(\"ctime  :\", today.ctime())\ntt = today.timetuple()\nprint(\"tuple  : tm_year  =\", tt.tm_year)\nprint(\"         tm_mon   =\", tt.tm_mon)\nprint(\"         tm_mday  =\", tt.tm_mday)\nprint(\"         tm_hour  =\", tt.tm_hour)\nprint(\"         tm_min   =\", tt.tm_min)\nprint(\"         tm_sec   =\", tt.tm_sec)",
        "detail": "mid-range.datetime_date",
        "documentation": {}
    },
    {
        "label": "tt",
        "kind": 5,
        "importPath": "mid-range.datetime_date",
        "description": "mid-range.datetime_date",
        "peekOfCode": "tt = today.timetuple()\nprint(\"tuple  : tm_year  =\", tt.tm_year)\nprint(\"         tm_mon   =\", tt.tm_mon)\nprint(\"         tm_mday  =\", tt.tm_mday)\nprint(\"         tm_hour  =\", tt.tm_hour)\nprint(\"         tm_min   =\", tt.tm_min)\nprint(\"         tm_sec   =\", tt.tm_sec)\nprint(\"         tm_wday  =\", tt.tm_wday)\nprint(\"         tm_yday  =\", tt.tm_yday)\nprint(\"         tm_isdst =\", tt.tm_isdst)",
        "detail": "mid-range.datetime_date",
        "documentation": {}
    },
    {
        "label": "FIELDS",
        "kind": 5,
        "importPath": "mid-range.datetime_datetime",
        "description": "mid-range.datetime_datetime",
        "peekOfCode": "FIELDS = [\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"microsecond\"]\nd = datetime.datetime.now()\nfor attr in FIELDS:\n    print(\"{:15}: {}\".format(attr, getattr(d, attr)))",
        "detail": "mid-range.datetime_datetime",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.datetime_datetime",
        "description": "mid-range.datetime_datetime",
        "peekOfCode": "d = datetime.datetime.now()\nfor attr in FIELDS:\n    print(\"{:15}: {}\".format(attr, getattr(d, attr)))",
        "detail": "mid-range.datetime_datetime",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "mid-range.datetime_datetime_combine",
        "description": "mid-range.datetime_datetime_combine",
        "peekOfCode": "t = datetime.time(1, 2, 3)\nprint(\"t :\", t)\nd = datetime.date.today()\nprint(\"d :\", d)\ndt = datetime.datetime.combine(d, t)\nprint(\"dt:\", dt)",
        "detail": "mid-range.datetime_datetime_combine",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.datetime_datetime_combine",
        "description": "mid-range.datetime_datetime_combine",
        "peekOfCode": "d = datetime.date.today()\nprint(\"d :\", d)\ndt = datetime.datetime.combine(d, t)\nprint(\"dt:\", dt)",
        "detail": "mid-range.datetime_datetime_combine",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "mid-range.datetime_datetime_combine",
        "description": "mid-range.datetime_datetime_combine",
        "peekOfCode": "dt = datetime.datetime.combine(d, t)\nprint(\"dt:\", dt)",
        "detail": "mid-range.datetime_datetime_combine",
        "documentation": {}
    },
    {
        "label": "today",
        "kind": 5,
        "importPath": "mid-range.datetime_datetime_math",
        "description": "mid-range.datetime_datetime_math",
        "peekOfCode": "today = datetime.datetime.today()\nprint(\"Today    :\", today)\nyesterday = today - datetime.timedelta(days=1)\nprint(\"Yesterday:\", yesterday)\ntomorrow = today + datetime.timedelta(days=1)\nprint(\"Tomorrow :\", tomorrow)\nprint(\"tomorrow - yesterday:\", tomorrow - yesterday)\nprint(\"yesterday - tomorrow:\", yesterday - tomorrow)\nprint(\"tomorrow > yesterday:\", tomorrow > yesterday)",
        "detail": "mid-range.datetime_datetime_math",
        "documentation": {}
    },
    {
        "label": "yesterday",
        "kind": 5,
        "importPath": "mid-range.datetime_datetime_math",
        "description": "mid-range.datetime_datetime_math",
        "peekOfCode": "yesterday = today - datetime.timedelta(days=1)\nprint(\"Yesterday:\", yesterday)\ntomorrow = today + datetime.timedelta(days=1)\nprint(\"Tomorrow :\", tomorrow)\nprint(\"tomorrow - yesterday:\", tomorrow - yesterday)\nprint(\"yesterday - tomorrow:\", yesterday - tomorrow)\nprint(\"tomorrow > yesterday:\", tomorrow > yesterday)",
        "detail": "mid-range.datetime_datetime_math",
        "documentation": {}
    },
    {
        "label": "tomorrow",
        "kind": 5,
        "importPath": "mid-range.datetime_datetime_math",
        "description": "mid-range.datetime_datetime_math",
        "peekOfCode": "tomorrow = today + datetime.timedelta(days=1)\nprint(\"Tomorrow :\", tomorrow)\nprint(\"tomorrow - yesterday:\", tomorrow - yesterday)\nprint(\"yesterday - tomorrow:\", yesterday - tomorrow)\nprint(\"tomorrow > yesterday:\", tomorrow > yesterday)",
        "detail": "mid-range.datetime_datetime_math",
        "documentation": {}
    },
    {
        "label": "format",
        "kind": 5,
        "importPath": "mid-range.datetime_datetime_strptime",
        "description": "mid-range.datetime_datetime_strptime",
        "peekOfCode": "format = \"%a %b %d %H:%M:%S %Y\"\ntoday = datetime.datetime.today()\nprint(\"ISO     :\", today)\ns = today.strftime(format)\nprint(\"strftime:\", s)\nd = datetime.datetime.strptime(s, format)\nprint(\"strptime:\", d.strftime(format))",
        "detail": "mid-range.datetime_datetime_strptime",
        "documentation": {}
    },
    {
        "label": "today",
        "kind": 5,
        "importPath": "mid-range.datetime_datetime_strptime",
        "description": "mid-range.datetime_datetime_strptime",
        "peekOfCode": "today = datetime.datetime.today()\nprint(\"ISO     :\", today)\ns = today.strftime(format)\nprint(\"strftime:\", s)\nd = datetime.datetime.strptime(s, format)\nprint(\"strptime:\", d.strftime(format))",
        "detail": "mid-range.datetime_datetime_strptime",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.datetime_datetime_strptime",
        "description": "mid-range.datetime_datetime_strptime",
        "peekOfCode": "s = today.strftime(format)\nprint(\"strftime:\", s)\nd = datetime.datetime.strptime(s, format)\nprint(\"strptime:\", d.strftime(format))",
        "detail": "mid-range.datetime_datetime_strptime",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.datetime_datetime_strptime",
        "description": "mid-range.datetime_datetime_strptime",
        "peekOfCode": "d = datetime.datetime.strptime(s, format)\nprint(\"strptime:\", d.strftime(format))",
        "detail": "mid-range.datetime_datetime_strptime",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "mid-range.datetime_date_fromordinal",
        "description": "mid-range.datetime_date_fromordinal",
        "peekOfCode": "o = 733114\nprint(\"o               :\", o)\nprint(\"fromordinal(o)  :\", datetime.date.fromordinal(o))\nt = time.time()\nprint(\"t               :\", t)\nprint(\"fromtimestamp(t):\", datetime.date.fromtimestamp(t))",
        "detail": "mid-range.datetime_date_fromordinal",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "mid-range.datetime_date_fromordinal",
        "description": "mid-range.datetime_date_fromordinal",
        "peekOfCode": "t = time.time()\nprint(\"t               :\", t)\nprint(\"fromtimestamp(t):\", datetime.date.fromtimestamp(t))",
        "detail": "mid-range.datetime_date_fromordinal",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "mid-range.datetime_date_fromothervalue",
        "description": "mid-range.datetime_date_fromothervalue",
        "peekOfCode": "o = 733114\nprint(\"o:\", o)\nprint(\"fromordinal(o):\", datetime.date.fromordinal(o))\nt = time.time()\nprint(\"t:\", t)\nprint(\"fromtimestamp(t):\", datetime.date.fromtimestamp(t))",
        "detail": "mid-range.datetime_date_fromothervalue",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "mid-range.datetime_date_fromothervalue",
        "description": "mid-range.datetime_date_fromothervalue",
        "peekOfCode": "t = time.time()\nprint(\"t:\", t)\nprint(\"fromtimestamp(t):\", datetime.date.fromtimestamp(t))",
        "detail": "mid-range.datetime_date_fromothervalue",
        "documentation": {}
    },
    {
        "label": "day_names",
        "kind": 5,
        "importPath": "mid-range.datetime_date_isocalendar",
        "description": "mid-range.datetime_date_isocalendar",
        "peekOfCode": "day_names = [\n    locale.nl_langinfo(x)\n    for x in (\n        locale.DAY_1,\n        locale.DAY_2,\n        locale.DAY_3,\n        locale.DAY_4,\n        locale.DAY_5,\n        locale.DAY_6,\n        locale.DAY_7,",
        "detail": "mid-range.datetime_date_isocalendar",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.datetime_date_isocalendar",
        "description": "mid-range.datetime_date_isocalendar",
        "peekOfCode": "d = datetime.date(2007, 12, 30)\nfor i in range(7):\n    delta = datetime.timedelta(days=i)\n    date = d + delta\n    print()\n    print(day_names[date.weekday()], date)\n    print(\"  ISO Weekday:\", day_names[date.isoweekday()])\n    print(\"  ISO Calendar:\", date.isocalendar())",
        "detail": "mid-range.datetime_date_isocalendar",
        "documentation": {}
    },
    {
        "label": "today",
        "kind": 5,
        "importPath": "mid-range.datetime_date_math",
        "description": "mid-range.datetime_date_math",
        "peekOfCode": "today = datetime.date.today()\nprint(\"Today    :\", today)\none_day = datetime.timedelta(days=1)\nprint(\"One day  :\", one_day)\nyesterday = today - one_day\nprint(\"Yesterday:\", yesterday)\ntomorrow = today + one_day\nprint(\"Tomorrow :\", tomorrow)\nprint()\nprint(\"tomorrow - yesterday:\", tomorrow - yesterday)",
        "detail": "mid-range.datetime_date_math",
        "documentation": {}
    },
    {
        "label": "one_day",
        "kind": 5,
        "importPath": "mid-range.datetime_date_math",
        "description": "mid-range.datetime_date_math",
        "peekOfCode": "one_day = datetime.timedelta(days=1)\nprint(\"One day  :\", one_day)\nyesterday = today - one_day\nprint(\"Yesterday:\", yesterday)\ntomorrow = today + one_day\nprint(\"Tomorrow :\", tomorrow)\nprint()\nprint(\"tomorrow - yesterday:\", tomorrow - yesterday)\nprint(\"yesterday - tomorrow:\", yesterday - tomorrow)",
        "detail": "mid-range.datetime_date_math",
        "documentation": {}
    },
    {
        "label": "yesterday",
        "kind": 5,
        "importPath": "mid-range.datetime_date_math",
        "description": "mid-range.datetime_date_math",
        "peekOfCode": "yesterday = today - one_day\nprint(\"Yesterday:\", yesterday)\ntomorrow = today + one_day\nprint(\"Tomorrow :\", tomorrow)\nprint()\nprint(\"tomorrow - yesterday:\", tomorrow - yesterday)\nprint(\"yesterday - tomorrow:\", yesterday - tomorrow)",
        "detail": "mid-range.datetime_date_math",
        "documentation": {}
    },
    {
        "label": "tomorrow",
        "kind": 5,
        "importPath": "mid-range.datetime_date_math",
        "description": "mid-range.datetime_date_math",
        "peekOfCode": "tomorrow = today + one_day\nprint(\"Tomorrow :\", tomorrow)\nprint()\nprint(\"tomorrow - yesterday:\", tomorrow - yesterday)\nprint(\"yesterday - tomorrow:\", yesterday - tomorrow)",
        "detail": "mid-range.datetime_date_math",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "mid-range.datetime_date_replace",
        "description": "mid-range.datetime_date_replace",
        "peekOfCode": "d1 = datetime.date(2008, 3, 29)\nprint(\"d1:\", d1.ctime())\nd2 = d1.replace(year=2009)\nprint(\"d2:\", d2.ctime())",
        "detail": "mid-range.datetime_date_replace",
        "documentation": {}
    },
    {
        "label": "d2",
        "kind": 5,
        "importPath": "mid-range.datetime_date_replace",
        "description": "mid-range.datetime_date_replace",
        "peekOfCode": "d2 = d1.replace(year=2009)\nprint(\"d2:\", d2.ctime())",
        "detail": "mid-range.datetime_date_replace",
        "documentation": {}
    },
    {
        "label": "today",
        "kind": 5,
        "importPath": "mid-range.datetime_format",
        "description": "mid-range.datetime_format",
        "peekOfCode": "today = datetime.datetime.today()\nprint(\"ISO     :\", today)\nprint(\"format(): {:%a %b %d %H:%M:%S %Y}\".format(today))",
        "detail": "mid-range.datetime_format",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "mid-range.datetime_time",
        "description": "mid-range.datetime_time",
        "peekOfCode": "t = datetime.time(1, 2, 3)\nprint(t)\nprint(\"hour       :\", t.hour)\nprint(\"minute     :\", t.minute)\nprint(\"second     :\", t.second)\nprint(\"microsecond:\", t.microsecond)\nprint(\"tzinfo     :\", t.tzinfo)",
        "detail": "mid-range.datetime_time",
        "documentation": {}
    },
    {
        "label": "one_day",
        "kind": 5,
        "importPath": "mid-range.datetime_timedelta_math",
        "description": "mid-range.datetime_timedelta_math",
        "peekOfCode": "one_day = datetime.timedelta(days=1)\nprint(\"1 day    :\", one_day)\nprint(\"5 days   :\", one_day * 5)\nprint(\"1.5 days :\", one_day * 1.5)\nprint(\"1/4 day  :\", one_day / 4)\n# assume an hour for lunch\nwork_day = datetime.timedelta(hours=7)\nmeeting_length = datetime.timedelta(hours=1)\nprint(\"meetings per day :\", work_day / meeting_length)",
        "detail": "mid-range.datetime_timedelta_math",
        "documentation": {}
    },
    {
        "label": "work_day",
        "kind": 5,
        "importPath": "mid-range.datetime_timedelta_math",
        "description": "mid-range.datetime_timedelta_math",
        "peekOfCode": "work_day = datetime.timedelta(hours=7)\nmeeting_length = datetime.timedelta(hours=1)\nprint(\"meetings per day :\", work_day / meeting_length)",
        "detail": "mid-range.datetime_timedelta_math",
        "documentation": {}
    },
    {
        "label": "meeting_length",
        "kind": 5,
        "importPath": "mid-range.datetime_timedelta_math",
        "description": "mid-range.datetime_timedelta_math",
        "peekOfCode": "meeting_length = datetime.timedelta(hours=1)\nprint(\"meetings per day :\", work_day / meeting_length)",
        "detail": "mid-range.datetime_timedelta_math",
        "documentation": {}
    },
    {
        "label": "min6",
        "kind": 5,
        "importPath": "mid-range.datetime_timezone",
        "description": "mid-range.datetime_timezone",
        "peekOfCode": "min6 = datetime.timezone(datetime.timedelta(hours=-6))\nplus6 = datetime.timezone(datetime.timedelta(hours=6))\nd = datetime.datetime.now(min6)\nprint(min6, \":\", d)\nprint(datetime.timezone.utc, \":\", d.astimezone(datetime.timezone.utc))\nprint(plus6, \":\", d.astimezone(plus6))\n# convert to the current system timezone\nd_system = d.astimezone()\nprint(d_system.tzinfo, \"      :\", d_system)",
        "detail": "mid-range.datetime_timezone",
        "documentation": {}
    },
    {
        "label": "plus6",
        "kind": 5,
        "importPath": "mid-range.datetime_timezone",
        "description": "mid-range.datetime_timezone",
        "peekOfCode": "plus6 = datetime.timezone(datetime.timedelta(hours=6))\nd = datetime.datetime.now(min6)\nprint(min6, \":\", d)\nprint(datetime.timezone.utc, \":\", d.astimezone(datetime.timezone.utc))\nprint(plus6, \":\", d.astimezone(plus6))\n# convert to the current system timezone\nd_system = d.astimezone()\nprint(d_system.tzinfo, \"      :\", d_system)",
        "detail": "mid-range.datetime_timezone",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.datetime_timezone",
        "description": "mid-range.datetime_timezone",
        "peekOfCode": "d = datetime.datetime.now(min6)\nprint(min6, \":\", d)\nprint(datetime.timezone.utc, \":\", d.astimezone(datetime.timezone.utc))\nprint(plus6, \":\", d.astimezone(plus6))\n# convert to the current system timezone\nd_system = d.astimezone()\nprint(d_system.tzinfo, \"      :\", d_system)",
        "detail": "mid-range.datetime_timezone",
        "documentation": {}
    },
    {
        "label": "d_system",
        "kind": 5,
        "importPath": "mid-range.datetime_timezone",
        "description": "mid-range.datetime_timezone",
        "peekOfCode": "d_system = d.astimezone()\nprint(d_system.tzinfo, \"      :\", d_system)",
        "detail": "mid-range.datetime_timezone",
        "documentation": {}
    },
    {
        "label": "Trie",
        "kind": 6,
        "importPath": "mid-range.datrie",
        "description": "mid-range.datrie",
        "peekOfCode": "class Trie(ABCTrie):\n    def __init__(self, data):\n        chars = set()\n        for key in data.keys():\n            if not isinstance(key, text_type):\n                raise TypeError(\"All keys must be strings\")\n            for char in key:\n                chars.add(char)\n        self._data = DATrie(\"\".join(chars))\n        for key, value in data.items():",
        "detail": "mid-range.datrie",
        "documentation": {}
    },
    {
        "label": "matrix",
        "kind": 5,
        "importPath": "mid-range.day11_2darrays",
        "description": "mid-range.day11_2darrays",
        "peekOfCode": "matrix = []\nfor x in range(6):\n    matrix.append([int(x) for x in input().split()])\nhourglass = []\nfor i, row in enumerate(matrix):\n    if i >= (len(matrix) - 2):\n        break\n    for j, e in enumerate(row):\n        if j >= (len(row) - 2):\n            break",
        "detail": "mid-range.day11_2darrays",
        "documentation": {}
    },
    {
        "label": "hourglass",
        "kind": 5,
        "importPath": "mid-range.day11_2darrays",
        "description": "mid-range.day11_2darrays",
        "peekOfCode": "hourglass = []\nfor i, row in enumerate(matrix):\n    if i >= (len(matrix) - 2):\n        break\n    for j, e in enumerate(row):\n        if j >= (len(row) - 2):\n            break\n        templist = []\n        templist = templist + [matrix[i][j], matrix[i][j + 1], matrix[i][j + 2]]\n        templist = templist + [matrix[i + 1][j + 1]]",
        "detail": "mid-range.day11_2darrays",
        "documentation": {}
    },
    {
        "label": "hourglasssums",
        "kind": 5,
        "importPath": "mid-range.day11_2darrays",
        "description": "mid-range.day11_2darrays",
        "peekOfCode": "hourglasssums = [sum(eachglass) for eachglass in hourglass]\nprint(max(hourglasssums))",
        "detail": "mid-range.day11_2darrays",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "mid-range.day12_inheritance",
        "description": "mid-range.day12_inheritance",
        "peekOfCode": "class Student(Person):\n    def __init__(self, firstName, lastName, idNumber, scores):\n        Person.__init__(self, firstName, lastName, idNumber)\n        self.scores = scores\n    def calculate(self):\n        average = sum(scores) / len(scores)\n        if 90 <= average <= 100:\n            return \"O\"\n        if 80 <= average <= 90:\n            return \"E\"",
        "detail": "mid-range.day12_inheritance",
        "documentation": {}
    },
    {
        "label": "Book",
        "kind": 6,
        "importPath": "mid-range.day13_abstractclasses",
        "description": "mid-range.day13_abstractclasses",
        "peekOfCode": "class Book(object, metaclass=ABCMeta):\n    def __init__(self,title,author):\n        self.title=title\n        self.author=author   \n    @abstractmethod\n    def display(): pass\nclass MyBook(Book):\ntitle=input()\nauthor=input()\nprice=int(input())",
        "detail": "mid-range.day13_abstractclasses",
        "documentation": {}
    },
    {
        "label": "MyBook",
        "kind": 6,
        "importPath": "mid-range.day13_abstractclasses",
        "description": "mid-range.day13_abstractclasses",
        "peekOfCode": "class MyBook(Book):\ntitle=input()\nauthor=input()\nprice=int(input())\nnew_novel=MyBook(title,author,price)\nnew_novel.display()",
        "detail": "mid-range.day13_abstractclasses",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "mid-range.day1_datatypes",
        "description": "mid-range.day1_datatypes",
        "peekOfCode": "i = 4\nd = 4.0\ns = \"HackerRank\"\n# Declare second integer, double, and String variables.\n# Read and save an integer, double, and String to your variables.\ni2 = int(input())\nd2 = float(input())\ns2 = str(input())\n# Print the sum of both integer variables on a new line.\nprint(i + i2)",
        "detail": "mid-range.day1_datatypes",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.day1_datatypes",
        "description": "mid-range.day1_datatypes",
        "peekOfCode": "d = 4.0\ns = \"HackerRank\"\n# Declare second integer, double, and String variables.\n# Read and save an integer, double, and String to your variables.\ni2 = int(input())\nd2 = float(input())\ns2 = str(input())\n# Print the sum of both integer variables on a new line.\nprint(i + i2)\n# Print the sum of the double variables on a new line.",
        "detail": "mid-range.day1_datatypes",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.day1_datatypes",
        "description": "mid-range.day1_datatypes",
        "peekOfCode": "s = \"HackerRank\"\n# Declare second integer, double, and String variables.\n# Read and save an integer, double, and String to your variables.\ni2 = int(input())\nd2 = float(input())\ns2 = str(input())\n# Print the sum of both integer variables on a new line.\nprint(i + i2)\n# Print the sum of the double variables on a new line.\nprint(d + d2)",
        "detail": "mid-range.day1_datatypes",
        "documentation": {}
    },
    {
        "label": "i2",
        "kind": 5,
        "importPath": "mid-range.day1_datatypes",
        "description": "mid-range.day1_datatypes",
        "peekOfCode": "i2 = int(input())\nd2 = float(input())\ns2 = str(input())\n# Print the sum of both integer variables on a new line.\nprint(i + i2)\n# Print the sum of the double variables on a new line.\nprint(d + d2)\n# Concatenate and print the String variables on a new line\n# The 's' variable above should be printed first.\nprint(s + s2)",
        "detail": "mid-range.day1_datatypes",
        "documentation": {}
    },
    {
        "label": "d2",
        "kind": 5,
        "importPath": "mid-range.day1_datatypes",
        "description": "mid-range.day1_datatypes",
        "peekOfCode": "d2 = float(input())\ns2 = str(input())\n# Print the sum of both integer variables on a new line.\nprint(i + i2)\n# Print the sum of the double variables on a new line.\nprint(d + d2)\n# Concatenate and print the String variables on a new line\n# The 's' variable above should be printed first.\nprint(s + s2)",
        "detail": "mid-range.day1_datatypes",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "mid-range.day1_datatypes",
        "description": "mid-range.day1_datatypes",
        "peekOfCode": "s2 = str(input())\n# Print the sum of both integer variables on a new line.\nprint(i + i2)\n# Print the sum of the double variables on a new line.\nprint(d + d2)\n# Concatenate and print the String variables on a new line\n# The 's' variable above should be printed first.\nprint(s + s2)",
        "detail": "mid-range.day1_datatypes",
        "documentation": {}
    },
    {
        "label": "mealCost",
        "kind": 5,
        "importPath": "mid-range.day2_operators",
        "description": "mid-range.day2_operators",
        "peekOfCode": "mealCost = float(input())\ntipPercent = int(input())\ntaxPercent = int(input())\ntotalCost = mealCost + (mealCost * (tipPercent / 100)) + (mealCost * (taxPercent / 100))\nprint(\"The total meal cost is\", round(totalCost), \"dollars.\")",
        "detail": "mid-range.day2_operators",
        "documentation": {}
    },
    {
        "label": "tipPercent",
        "kind": 5,
        "importPath": "mid-range.day2_operators",
        "description": "mid-range.day2_operators",
        "peekOfCode": "tipPercent = int(input())\ntaxPercent = int(input())\ntotalCost = mealCost + (mealCost * (tipPercent / 100)) + (mealCost * (taxPercent / 100))\nprint(\"The total meal cost is\", round(totalCost), \"dollars.\")",
        "detail": "mid-range.day2_operators",
        "documentation": {}
    },
    {
        "label": "taxPercent",
        "kind": 5,
        "importPath": "mid-range.day2_operators",
        "description": "mid-range.day2_operators",
        "peekOfCode": "taxPercent = int(input())\ntotalCost = mealCost + (mealCost * (tipPercent / 100)) + (mealCost * (taxPercent / 100))\nprint(\"The total meal cost is\", round(totalCost), \"dollars.\")",
        "detail": "mid-range.day2_operators",
        "documentation": {}
    },
    {
        "label": "totalCost",
        "kind": 5,
        "importPath": "mid-range.day2_operators",
        "description": "mid-range.day2_operators",
        "peekOfCode": "totalCost = mealCost + (mealCost * (tipPercent / 100)) + (mealCost * (taxPercent / 100))\nprint(\"The total meal cost is\", round(totalCost), \"dollars.\")",
        "detail": "mid-range.day2_operators",
        "documentation": {}
    },
    {
        "label": "BinarySearchTree",
        "kind": 6,
        "importPath": "mid-range.day4",
        "description": "mid-range.day4",
        "peekOfCode": "class BinarySearchTree:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n    def insert(self, value):\n        if value < self.value:\n            if not self.left:\n                self.left = BinarySearchTree(value)\n            else:",
        "detail": "mid-range.day4",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "mid-range.day4_classvsinstance",
        "description": "mid-range.day4_classvsinstance",
        "peekOfCode": "class Person:\n    def __init__(self, initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge < 0:\n            self.age = 0\n            print(\"Age is not valid, setting age to 0.\")\n        else:\n            self.age = initialAge\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console",
        "detail": "mid-range.day4_classvsinstance",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "mid-range.day4_classvsinstance",
        "description": "mid-range.day4_classvsinstance",
        "peekOfCode": "t = int(input())\nfor i in range(0, t):\n    age = int(input())\n    p = Person(age)\n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()\n    p.amIOld()\n    print(\"\")\nclass Person:",
        "detail": "mid-range.day4_classvsinstance",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "mid-range.day6_review",
        "description": "mid-range.day6_review",
        "peekOfCode": "t = int(input())\nfor i in range(t):\n    s = input()\n    s1 = \"\".join([s[i] for i in range(len(s)) if i % 2 == 0])\n    s2 = \"\".join([s[i] for i in range(len(s)) if i % 2 != 0])\n    print(s1, s2)",
        "detail": "mid-range.day6_review",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.day7_arrays",
        "description": "mid-range.day7_arrays",
        "peekOfCode": "n = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(\" \")]\narr.reverse()\narrstring = \" \".join(str(e) for e in arr)\nprint(arrstring)",
        "detail": "mid-range.day7_arrays",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.day7_arrays",
        "description": "mid-range.day7_arrays",
        "peekOfCode": "arr = [int(arr_temp) for arr_temp in input().strip().split(\" \")]\narr.reverse()\narrstring = \" \".join(str(e) for e in arr)\nprint(arrstring)",
        "detail": "mid-range.day7_arrays",
        "documentation": {}
    },
    {
        "label": "arrstring",
        "kind": 5,
        "importPath": "mid-range.day7_arrays",
        "description": "mid-range.day7_arrays",
        "peekOfCode": "arrstring = \" \".join(str(e) for e in arr)\nprint(arrstring)",
        "detail": "mid-range.day7_arrays",
        "documentation": {}
    },
    {
        "label": "getphonebook",
        "kind": 2,
        "importPath": "mid-range.day8_dictionariesmaps",
        "description": "mid-range.day8_dictionariesmaps",
        "peekOfCode": "def getphonebook(n):\n    phonebook = {}\n    for x in range(n):\n        line = input().strip().split(\" \")\n        name = line[0]\n        number = line[1]\n        phonebook[name] = number\n    return phonebook\nif __name__ == \"__main__\":\n    numberofentries = int(input())",
        "detail": "mid-range.day8_dictionariesmaps",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "mid-range.day9_recursion",
        "description": "mid-range.day9_recursion",
        "peekOfCode": "def factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\nif __name__ == \"__main__\":\n    n = factorial(int(input()))\n    print(n)",
        "detail": "mid-range.day9_recursion",
        "documentation": {}
    },
    {
        "label": "daysBetweenDates",
        "kind": 2,
        "importPath": "mid-range.days_you_lived",
        "description": "mid-range.days_you_lived",
        "peekOfCode": "def daysBetweenDates(year1, month1, day1, year2, month2, day2):\n    dom = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    domleap = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if isleap(year1) and isleap(year2):\n        e1 = sum(domleap) + sum(domleap[: month1 - 1]) + day1\n        e2 = sum(domleap) + sum(domleap[: month2 - 1]) + day2\n        return e2 - e1\n    days = 0\n    if isleap(year1):\n        days += (sum(domleap[month1 - 1 :]) - day1) + sum(dom[: month2 - 1]) + day2",
        "detail": "mid-range.days_you_lived",
        "documentation": {}
    },
    {
        "label": "findDay",
        "kind": 2,
        "importPath": "mid-range.Day_of_week",
        "description": "mid-range.Day_of_week",
        "peekOfCode": "def findDay(date):\n    born = datetime.datetime.strptime(\n        date, \"%d %m %Y\"\n    ).weekday()  # this statement returns an integer corresponding to the day of the week\n    return calendar.day_name[\n        born\n    ]  # this statement returns the corresponding day name to the integer generated in the previous statement\n# Driver program\ndate = input()  # this is the input date\nprint(",
        "detail": "mid-range.Day_of_week",
        "documentation": {}
    },
    {
        "label": "date",
        "kind": 5,
        "importPath": "mid-range.Day_of_week",
        "description": "mid-range.Day_of_week",
        "peekOfCode": "date = input()  # this is the input date\nprint(\n    findDay(date)\n)  # here we print the final output after calling the fucntion findday\n# __author__ = Gautam Kumar Jaiswal",
        "detail": "mid-range.Day_of_week",
        "documentation": {}
    },
    {
        "label": "execute_query",
        "kind": 2,
        "importPath": "mid-range.dbfunctions",
        "description": "mid-range.dbfunctions",
        "peekOfCode": "def execute_query(sql_query):\n    with sqlite3.connect(\"todo.db\") as conn:\n        cur = conn.cursor()\n        result = cur.execute(sql_query)\n        conn.commit()\n    return result\ndef add_new_task(task):\n    sql_query = \"INSERT INTO Todo(task, complete) VALUES('%s', %s) \" % (task, 0)\n    execute_query(sql_query)\ndef get_complete_tasks():",
        "detail": "mid-range.dbfunctions",
        "documentation": {}
    },
    {
        "label": "add_new_task",
        "kind": 2,
        "importPath": "mid-range.dbfunctions",
        "description": "mid-range.dbfunctions",
        "peekOfCode": "def add_new_task(task):\n    sql_query = \"INSERT INTO Todo(task, complete) VALUES('%s', %s) \" % (task, 0)\n    execute_query(sql_query)\ndef get_complete_tasks():\n    sql_query = \"SELECT task FROM Todo WHERE complete=%s \" % (1)\n    complete = execute_query(sql_query)\n    return [task[0] for task in complete.fetchall()]\ndef get_incomplete_tasks():\n    sql_query = \"SELECT task FROM Todo WHERE complete=%s \" % (0)\n    incomplete = execute_query(sql_query)",
        "detail": "mid-range.dbfunctions",
        "documentation": {}
    },
    {
        "label": "get_complete_tasks",
        "kind": 2,
        "importPath": "mid-range.dbfunctions",
        "description": "mid-range.dbfunctions",
        "peekOfCode": "def get_complete_tasks():\n    sql_query = \"SELECT task FROM Todo WHERE complete=%s \" % (1)\n    complete = execute_query(sql_query)\n    return [task[0] for task in complete.fetchall()]\ndef get_incomplete_tasks():\n    sql_query = \"SELECT task FROM Todo WHERE complete=%s \" % (0)\n    incomplete = execute_query(sql_query)\n    return [task[0] for task in incomplete.fetchall()]\ndef mark_task_complete(task):\n    sql_query = \"UPDATE Todo SET complete=%s WHERE task='%s' and complete=%s\" % (",
        "detail": "mid-range.dbfunctions",
        "documentation": {}
    },
    {
        "label": "get_incomplete_tasks",
        "kind": 2,
        "importPath": "mid-range.dbfunctions",
        "description": "mid-range.dbfunctions",
        "peekOfCode": "def get_incomplete_tasks():\n    sql_query = \"SELECT task FROM Todo WHERE complete=%s \" % (0)\n    incomplete = execute_query(sql_query)\n    return [task[0] for task in incomplete.fetchall()]\ndef mark_task_complete(task):\n    sql_query = \"UPDATE Todo SET complete=%s WHERE task='%s' and complete=%s\" % (\n        1,\n        task,\n        0,\n    )",
        "detail": "mid-range.dbfunctions",
        "documentation": {}
    },
    {
        "label": "mark_task_complete",
        "kind": 2,
        "importPath": "mid-range.dbfunctions",
        "description": "mid-range.dbfunctions",
        "peekOfCode": "def mark_task_complete(task):\n    sql_query = \"UPDATE Todo SET complete=%s WHERE task='%s' and complete=%s\" % (\n        1,\n        task,\n        0,\n    )\n    execute_query(sql_query)",
        "detail": "mid-range.dbfunctions",
        "documentation": {}
    },
    {
        "label": "__docformat__",
        "kind": 5,
        "importPath": "mid-range.de",
        "description": "mid-range.de",
        "peekOfCode": "__docformat__ = \"reStructuredText\"\nlabels = {\n    \"author\": \"Autor\",\n    \"authors\": \"Autoren\",\n    \"organization\": \"Organisation\",\n    \"address\": \"Adresse\",\n    \"contact\": \"Kontakt\",\n    \"version\": \"Version\",\n    \"revision\": \"Revision\",\n    \"status\": \"Status\",",
        "detail": "mid-range.de",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "mid-range.de",
        "description": "mid-range.de",
        "peekOfCode": "labels = {\n    \"author\": \"Autor\",\n    \"authors\": \"Autoren\",\n    \"organization\": \"Organisation\",\n    \"address\": \"Adresse\",\n    \"contact\": \"Kontakt\",\n    \"version\": \"Version\",\n    \"revision\": \"Revision\",\n    \"status\": \"Status\",\n    \"date\": \"Datum\",",
        "detail": "mid-range.de",
        "documentation": {}
    },
    {
        "label": "bibliographic_fields",
        "kind": 5,
        "importPath": "mid-range.de",
        "description": "mid-range.de",
        "peekOfCode": "bibliographic_fields = {\n    \"autor\": \"author\",\n    \"autoren\": \"authors\",\n    \"organisation\": \"organization\",\n    \"adresse\": \"address\",\n    \"kontakt\": \"contact\",\n    \"version\": \"version\",\n    \"revision\": \"revision\",\n    \"status\": \"status\",\n    \"datum\": \"date\",",
        "detail": "mid-range.de",
        "documentation": {}
    },
    {
        "label": "author_separators",
        "kind": 5,
        "importPath": "mid-range.de",
        "description": "mid-range.de",
        "peekOfCode": "author_separators = [\";\", \",\"]\n\"\"\"List of separator strings for the 'Authors' bibliographic field. Tried in\norder.\"\"\"",
        "detail": "mid-range.de",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "mid-range.debug",
        "description": "mid-range.debug",
        "peekOfCode": "DEBUG = os.environ.get(\"DISTUTILS_DEBUG\")",
        "detail": "mid-range.debug",
        "documentation": {}
    },
    {
        "label": "fmt",
        "kind": 5,
        "importPath": "mid-range.decimal_create",
        "description": "mid-range.decimal_create",
        "peekOfCode": "fmt = \"{0:<25} {1:<25}\"\nprint(fmt.format(\"Input\", \"Output\"))\nprint(fmt.format(\"-\" * 25, \"-\" * 25))\n# Integer\nprint(fmt.format(5, decimal.Decimal(5)))\n# String\nprint(fmt.format(\"3.14\", decimal.Decimal(\"3.14\")))\n# Float\nf = 0.1\nprint(fmt.format(repr(f), decimal.Decimal(str(f))))",
        "detail": "mid-range.decimal_create",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "mid-range.decimal_create",
        "description": "mid-range.decimal_create",
        "peekOfCode": "f = 0.1\nprint(fmt.format(repr(f), decimal.Decimal(str(f))))\nprint(\"{:<0.23g} {:<25}\".format(f, str(decimal.Decimal.from_float(f))[:25]))",
        "detail": "mid-range.decimal_create",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.decimal_format",
        "description": "mid-range.decimal_format",
        "peekOfCode": "d = decimal.Decimal(1.1)\nprint(\"Precision:\")\nprint(\"{:.1}\".format(d))\nprint(\"{:.2}\".format(d))\nprint(\"{:.3}\".format(d))\nprint(\"{:.18}\".format(d))\nprint(\"\\nWidth and precision combined:\")\nprint(\"{:5.1f} {:5.1g}\".format(d, d))\nprint(\"{:5.2f} {:5.2g}\".format(d, d))\nprint(\"{:5.2f} {:5.2g}\".format(d, d))",
        "detail": "mid-range.decimal_format",
        "documentation": {}
    },
    {
        "label": "context",
        "kind": 5,
        "importPath": "mid-range.decimal_getcontext",
        "description": "mid-range.decimal_getcontext",
        "peekOfCode": "context = decimal.getcontext()\nprint(\"Emax     =\", context.Emax)\nprint(\"Emin     =\", context.Emin)\nprint(\"capitals =\", context.capitals)\nprint(\"prec     =\", context.prec)\nprint(\"rounding =\", context.rounding)\nprint(\"flags    =\")\nfor f, v in context.flags.items():\n    print(\"  {}: {}\".format(f, v))\nprint(\"traps    =\")",
        "detail": "mid-range.decimal_getcontext",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.decimal_instance_context",
        "description": "mid-range.decimal_instance_context",
        "peekOfCode": "c = decimal.getcontext().copy()\nc.prec = 3\n# Create our constant\npi = c.create_decimal(\"3.1415\")\n# The constant value is rounded off\nprint(\"PI    :\", pi)\n# The result of using the constant uses the global context\nprint(\"RESULT:\", decimal.Decimal(\"2.01\") * pi)",
        "detail": "mid-range.decimal_instance_context",
        "documentation": {}
    },
    {
        "label": "c.prec",
        "kind": 5,
        "importPath": "mid-range.decimal_instance_context",
        "description": "mid-range.decimal_instance_context",
        "peekOfCode": "c.prec = 3\n# Create our constant\npi = c.create_decimal(\"3.1415\")\n# The constant value is rounded off\nprint(\"PI    :\", pi)\n# The result of using the constant uses the global context\nprint(\"RESULT:\", decimal.Decimal(\"2.01\") * pi)",
        "detail": "mid-range.decimal_instance_context",
        "documentation": {}
    },
    {
        "label": "pi",
        "kind": 5,
        "importPath": "mid-range.decimal_instance_context",
        "description": "mid-range.decimal_instance_context",
        "peekOfCode": "pi = c.create_decimal(\"3.1415\")\n# The constant value is rounded off\nprint(\"PI    :\", pi)\n# The result of using the constant uses the global context\nprint(\"RESULT:\", decimal.Decimal(\"2.01\") * pi)",
        "detail": "mid-range.decimal_instance_context",
        "documentation": {}
    },
    {
        "label": "decimal_isolate",
        "kind": 2,
        "importPath": "mid-range.decimal_isolate",
        "description": "mid-range.decimal_isolate",
        "peekOfCode": "def decimal_isolate(number, digitAmount):\n    \"\"\"\n    Isolates the decimal part of a number.\n    If digitAmount > 0 round to that decimal place, else print the entire decimal.\n    >>> decimal_isolate(1.53, 0)\n    0.53\n    >>> decimal_isolate(35.345, 1)\n    0.3\n    >>> decimal_isolate(35.345, 2)\n    0.34",
        "detail": "mid-range.decimal_isolate",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.decimal_log",
        "description": "mid-range.decimal_log",
        "peekOfCode": "d = decimal.Decimal(100)\nprint(\"d     :\", d)\nprint(\"log10 :\", d.log10())\nprint(\"ln    :\", d.ln())",
        "detail": "mid-range.decimal_log",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.decimal_operators",
        "description": "mid-range.decimal_operators",
        "peekOfCode": "a = decimal.Decimal(\"5.1\")\nb = decimal.Decimal(\"3.14\")\nc = 4\nd = 3.14\nprint(\"a     =\", repr(a))\nprint(\"b     =\", repr(b))\nprint(\"c     =\", repr(c))\nprint(\"d     =\", repr(d))\nprint()\nprint(\"a + b =\", a + b)",
        "detail": "mid-range.decimal_operators",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.decimal_operators",
        "description": "mid-range.decimal_operators",
        "peekOfCode": "b = decimal.Decimal(\"3.14\")\nc = 4\nd = 3.14\nprint(\"a     =\", repr(a))\nprint(\"b     =\", repr(b))\nprint(\"c     =\", repr(c))\nprint(\"d     =\", repr(d))\nprint()\nprint(\"a + b =\", a + b)\nprint(\"a - b =\", a - b)",
        "detail": "mid-range.decimal_operators",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.decimal_operators",
        "description": "mid-range.decimal_operators",
        "peekOfCode": "c = 4\nd = 3.14\nprint(\"a     =\", repr(a))\nprint(\"b     =\", repr(b))\nprint(\"c     =\", repr(c))\nprint(\"d     =\", repr(d))\nprint()\nprint(\"a + b =\", a + b)\nprint(\"a - b =\", a - b)\nprint(\"a * b =\", a * b)",
        "detail": "mid-range.decimal_operators",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.decimal_operators",
        "description": "mid-range.decimal_operators",
        "peekOfCode": "d = 3.14\nprint(\"a     =\", repr(a))\nprint(\"b     =\", repr(b))\nprint(\"c     =\", repr(c))\nprint(\"d     =\", repr(d))\nprint()\nprint(\"a + b =\", a + b)\nprint(\"a - b =\", a - b)\nprint(\"a * b =\", a * b)\nprint(\"a / b =\", a / b)",
        "detail": "mid-range.decimal_operators",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.decimal_precision",
        "description": "mid-range.decimal_precision",
        "peekOfCode": "d = decimal.Decimal(\"0.123456\")\nfor i in range(1, 5):\n    decimal.getcontext().prec = i\n    print(i, \":\", d, d * 1)",
        "detail": "mid-range.decimal_precision",
        "documentation": {}
    },
    {
        "label": "context",
        "kind": 5,
        "importPath": "mid-range.decimal_rounding",
        "description": "mid-range.decimal_rounding",
        "peekOfCode": "context = decimal.getcontext()\nROUNDING_MODES = [\n    \"ROUND_CEILING\",\n    \"ROUND_DOWN\",\n    \"ROUND_FLOOR\",\n    \"ROUND_HALF_DOWN\",\n    \"ROUND_HALF_EVEN\",\n    \"ROUND_HALF_UP\",\n    \"ROUND_UP\",\n    \"ROUND_05UP\",",
        "detail": "mid-range.decimal_rounding",
        "documentation": {}
    },
    {
        "label": "ROUNDING_MODES",
        "kind": 5,
        "importPath": "mid-range.decimal_rounding",
        "description": "mid-range.decimal_rounding",
        "peekOfCode": "ROUNDING_MODES = [\n    \"ROUND_CEILING\",\n    \"ROUND_DOWN\",\n    \"ROUND_FLOOR\",\n    \"ROUND_HALF_DOWN\",\n    \"ROUND_HALF_EVEN\",\n    \"ROUND_HALF_UP\",\n    \"ROUND_UP\",\n    \"ROUND_05UP\",\n]",
        "detail": "mid-range.decimal_rounding",
        "documentation": {}
    },
    {
        "label": "header_fmt",
        "kind": 5,
        "importPath": "mid-range.decimal_rounding",
        "description": "mid-range.decimal_rounding",
        "peekOfCode": "header_fmt = \"{:10} \" + \" \".join([\"{:^8}\"] * 6)\nprint(\n    header_fmt.format(\n        \" \", \"1/8 (1)\", \"-1/8 (1)\", \"1/8 (2)\", \"-1/8 (2)\", \"1/8 (3)\", \"-1/8 (3)\"\n    )\n)\nfor rounding_mode in ROUNDING_MODES:\n    print(\"{0:10}\".format(rounding_mode.partition(\"_\")[-1]), end=\" \")\n    for precision in [1, 2, 3]:\n        context.prec = precision",
        "detail": "mid-range.decimal_rounding",
        "documentation": {}
    },
    {
        "label": "Multiplier",
        "kind": 6,
        "importPath": "mid-range.decimal_thread_context",
        "description": "mid-range.decimal_thread_context",
        "peekOfCode": "class Multiplier(threading.Thread):\n    def __init__(self, a, b, prec, q):\n        self.a = a\n        self.b = b\n        self.prec = prec\n        self.q = q\n        threading.Thread.__init__(self)\n    def run(self):\n        c = decimal.getcontext().copy()\n        c.prec = self.prec",
        "detail": "mid-range.decimal_thread_context",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.decimal_thread_context",
        "description": "mid-range.decimal_thread_context",
        "peekOfCode": "a = decimal.Decimal(\"3.14\")\nb = decimal.Decimal(\"1.234\")\n# A PriorityQueue will return values sorted by precision,\n# no matter what order the threads finish.\nq = PriorityQueue()\nthreads = [Multiplier(a, b, i, q) for i in range(1, 6)]\nfor t in threads:\n    t.start()\nfor t in threads:\n    t.join()",
        "detail": "mid-range.decimal_thread_context",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.decimal_thread_context",
        "description": "mid-range.decimal_thread_context",
        "peekOfCode": "b = decimal.Decimal(\"1.234\")\n# A PriorityQueue will return values sorted by precision,\n# no matter what order the threads finish.\nq = PriorityQueue()\nthreads = [Multiplier(a, b, i, q) for i in range(1, 6)]\nfor t in threads:\n    t.start()\nfor t in threads:\n    t.join()\nfor i in range(5):",
        "detail": "mid-range.decimal_thread_context",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "mid-range.decimal_thread_context",
        "description": "mid-range.decimal_thread_context",
        "peekOfCode": "q = PriorityQueue()\nthreads = [Multiplier(a, b, i, q) for i in range(1, 6)]\nfor t in threads:\n    t.start()\nfor t in threads:\n    t.join()\nfor i in range(5):\n    prec, value = q.get()\n    print(\"{}  {}\".format(prec, value))",
        "detail": "mid-range.decimal_thread_context",
        "documentation": {}
    },
    {
        "label": "threads",
        "kind": 5,
        "importPath": "mid-range.decimal_thread_context",
        "description": "mid-range.decimal_thread_context",
        "peekOfCode": "threads = [Multiplier(a, b, i, q) for i in range(1, 6)]\nfor t in threads:\n    t.start()\nfor t in threads:\n    t.join()\nfor i in range(5):\n    prec, value = q.get()\n    print(\"{}  {}\".format(prec, value))",
        "detail": "mid-range.decimal_thread_context",
        "documentation": {}
    },
    {
        "label": "decimal_to_binary",
        "kind": 2,
        "importPath": "mid-range.decimal_to_binary",
        "description": "mid-range.decimal_to_binary",
        "peekOfCode": "def decimal_to_binary(num: int) -> str:\n    \"\"\"\n    Convert an Integer Decimal Number to a Binary Number as str.\n    >>> decimal_to_binary(0)\n    '0b0'\n    >>> decimal_to_binary(2)\n    '0b10'\n    >>> decimal_to_binary(7)\n    '0b111'\n    >>> decimal_to_binary(35)",
        "detail": "mid-range.decimal_to_binary",
        "documentation": {}
    },
    {
        "label": "concat",
        "kind": 2,
        "importPath": "mid-range.decimal_to_binary_converter",
        "description": "mid-range.decimal_to_binary_converter",
        "peekOfCode": "def concat(S):\n    res = \"\"\n    for i in S:\n        if not isinstance(i, str):\n            res += str(i)\n        else:\n            res += i\n    return res\n# Simple Base 10 number(Decimal) number converter to Base 2 number(binary) number\n# Function returns answer in str datatype",
        "detail": "mid-range.decimal_to_binary_converter",
        "documentation": {}
    },
    {
        "label": "decimal_to_binary",
        "kind": 2,
        "importPath": "mid-range.decimal_to_binary_converter",
        "description": "mid-range.decimal_to_binary_converter",
        "peekOfCode": "def decimal_to_binary(n):\n    res = []\n    while n != 0:\n        res.append(n % 2)\n        n = n // 2\n    final = concat(res) + \"0\"\n    return final[::-1]\n# Test\ncases = [123, 23455, 253552, 87985, 3479434, 76, 246572, 231, 69, 2, 7, 2, 543]\nfor case in cases:",
        "detail": "mid-range.decimal_to_binary_converter",
        "documentation": {}
    },
    {
        "label": "cases",
        "kind": 5,
        "importPath": "mid-range.decimal_to_binary_converter",
        "description": "mid-range.decimal_to_binary_converter",
        "peekOfCode": "cases = [123, 23455, 253552, 87985, 3479434, 76, 246572, 231, 69, 2, 7, 2, 543]\nfor case in cases:\n    built_in = str(bin(case))[2:]\n    my_func = decimal_to_binary(case)[1:]  # For test purposes\n    if built_in == my_func:\n        print(\"Decimal: \" + str(case))\n        print(\"Binary: \" + my_func + \"\\nTest Passed!\\n\")\n    else:\n        print(\"Test Failed! Badly!!\\n\")",
        "detail": "mid-range.decimal_to_binary_converter",
        "documentation": {}
    },
    {
        "label": "binary_recursive",
        "kind": 2,
        "importPath": "mid-range.decimal_to_binary_recursion",
        "description": "mid-range.decimal_to_binary_recursion",
        "peekOfCode": "def binary_recursive(decimal: int) -> str:\n    \"\"\"\n    Take a positive integer value and return its binary equivalent.\n    >>> binary_recursive(1000)\n    '1111101000'\n    >>> binary_recursive(\"72\")\n    '1001000'\n    >>> binary_recursive(\"number\")\n    Traceback (most recent call last):\n    ...",
        "detail": "mid-range.decimal_to_binary_recursion",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.decimal_to_binary_recursion",
        "description": "mid-range.decimal_to_binary_recursion",
        "peekOfCode": "def main(number: str) -> str:\n    \"\"\"\n    Take an integer value and raise ValueError for wrong inputs,\n    call the function above and return the output with prefix \"0b\" & \"-0b\"\n    for positive and negative integers respectively.\n    >>> main(0)\n    '0b0'\n    >>> main(40)\n    '0b101000'\n    >>> main(-40)",
        "detail": "mid-range.decimal_to_binary_recursion",
        "documentation": {}
    },
    {
        "label": "decimal_to_octal",
        "kind": 2,
        "importPath": "mid-range.decimal_to_octal",
        "description": "mid-range.decimal_to_octal",
        "peekOfCode": "def decimal_to_octal(num: int) -> str:\n    \"\"\"Convert a Decimal Number to an Octal Number.\n    >>> all(decimal_to_octal(i) == oct(i) for i\n    ...     in (0, 2, 8, 64, 65, 216, 255, 256, 512))\n    True\n    \"\"\"\n    octal = 0\n    counter = 0\n    while num > 0:\n        remainder = num % 8",
        "detail": "mid-range.decimal_to_octal",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.decimal_to_octal",
        "description": "mid-range.decimal_to_octal",
        "peekOfCode": "def main() -> None:\n    \"\"\"Print octal equivalents of decimal numbers.\"\"\"\n    print(\"\\n2 in octal is:\")\n    print(decimal_to_octal(2))  # = 2\n    print(\"\\n8 in octal is:\")\n    print(decimal_to_octal(8))  # = 10\n    print(\"\\n65 in octal is:\")\n    print(decimal_to_octal(65))  # = 101\n    print(\"\\n216 in octal is:\")\n    print(decimal_to_octal(216))  # = 330",
        "detail": "mid-range.decimal_to_octal",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "mid-range.decimal_tuple",
        "description": "mid-range.decimal_tuple",
        "peekOfCode": "t = (1, (1, 1), -2)\nprint(\"Input  :\", t)\nprint(\"Decimal:\", decimal.Decimal(t))",
        "detail": "mid-range.decimal_tuple",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 2,
        "importPath": "mid-range.decorator",
        "description": "mid-range.decorator",
        "peekOfCode": "def log(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kw):\n        print(\"call %s():\" % func.__name__)\n        return func(*args, **kw)\n    return wrapper\n@log\ndef now():\n    print(\"2015-3-25\")\nnow()",
        "detail": "mid-range.decorator",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 2,
        "importPath": "mid-range.decorator",
        "description": "mid-range.decorator",
        "peekOfCode": "def now():\n    print(\"2015-3-25\")\nnow()\ndef logger(text):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            print(\"%s %s():\" % (text, func.__name__))\n            return func(*args, **kw)\n        return wrapper",
        "detail": "mid-range.decorator",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 2,
        "importPath": "mid-range.decorator",
        "description": "mid-range.decorator",
        "peekOfCode": "def logger(text):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            print(\"%s %s():\" % (text, func.__name__))\n            return func(*args, **kw)\n        return wrapper\n    return decorator\n@logger(\"DEBUG\")\ndef today():",
        "detail": "mid-range.decorator",
        "documentation": {}
    },
    {
        "label": "today",
        "kind": 2,
        "importPath": "mid-range.decorator",
        "description": "mid-range.decorator",
        "peekOfCode": "def today():\n    print(\"2015-3-25\")\ntoday()\nprint(today.__name__)",
        "detail": "mid-range.decorator",
        "documentation": {}
    },
    {
        "label": "decrypt",
        "kind": 2,
        "importPath": "mid-range.decrypt",
        "description": "mid-range.decrypt",
        "peekOfCode": "def decrypt(msg, MORSE_CODE_DICTIONARY):\n    li1 = list(MORSE_CODE_DICTIONARY.keys())\n    li2 = list(MORSE_CODE_DICTIONARY.values())\n    dic = dict()\n    for i, j in zip(li1, li2):\n        dic[j] = i\n    if msg[len(msg) - 1] == \" \":\n        msg = msg[:-1]\n    wordlist = msg.split(\" / \")\n    LetterList = list()",
        "detail": "mid-range.decrypt",
        "documentation": {}
    },
    {
        "label": "concat_elements",
        "kind": 2,
        "importPath": "mid-range.decrypting_caesars_cipher",
        "description": "mid-range.decrypting_caesars_cipher",
        "peekOfCode": "def concat_elements(n):\n    res = \"\"\n    for i in n:\n        res += i\n    return res\ndef decrypt(message, key):\n    string_chars = (\n        list(string.ascii_uppercase)\n        + list(string.ascii_lowercase)\n        + list(string.digits)",
        "detail": "mid-range.decrypting_caesars_cipher",
        "documentation": {}
    },
    {
        "label": "decrypt",
        "kind": 2,
        "importPath": "mid-range.decrypting_caesars_cipher",
        "description": "mid-range.decrypting_caesars_cipher",
        "peekOfCode": "def decrypt(message, key):\n    string_chars = (\n        list(string.ascii_uppercase)\n        + list(string.ascii_lowercase)\n        + list(string.digits)\n        + list(string.punctuation)\n        + [\" \"]\n    )\n    try:\n        splitted_message = list(message)",
        "detail": "mid-range.decrypting_caesars_cipher",
        "documentation": {}
    },
    {
        "label": "decrypt_generator",
        "kind": 2,
        "importPath": "mid-range.decrypting_caesars_cipher",
        "description": "mid-range.decrypting_caesars_cipher",
        "peekOfCode": "def decrypt_generator(message, n):\n    # range(0, 96) because len(string_chars) == 95\n    for i in range(0, n + 1):\n        case = decrypt(message, i)\n        yield case\n# Test\ntest_case = \"lq01Ir1I2xyI1ncrn2*\"\nresult = decrypt(test_case, 9)\nprint(\"Decrypted Text: \" + result, \"\\n\")\n_result = list(decrypt_generator(test_case, 95))",
        "detail": "mid-range.decrypting_caesars_cipher",
        "documentation": {}
    },
    {
        "label": "test_case",
        "kind": 5,
        "importPath": "mid-range.decrypting_caesars_cipher",
        "description": "mid-range.decrypting_caesars_cipher",
        "peekOfCode": "test_case = \"lq01Ir1I2xyI1ncrn2*\"\nresult = decrypt(test_case, 9)\nprint(\"Decrypted Text: \" + result, \"\\n\")\n_result = list(decrypt_generator(test_case, 95))\nfor res in _result:\n    print(\"Possible text: \" + res)\n# Look at ninth result",
        "detail": "mid-range.decrypting_caesars_cipher",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "mid-range.decrypting_caesars_cipher",
        "description": "mid-range.decrypting_caesars_cipher",
        "peekOfCode": "result = decrypt(test_case, 9)\nprint(\"Decrypted Text: \" + result, \"\\n\")\n_result = list(decrypt_generator(test_case, 95))\nfor res in _result:\n    print(\"Possible text: \" + res)\n# Look at ninth result",
        "detail": "mid-range.decrypting_caesars_cipher",
        "documentation": {}
    },
    {
        "label": "_result",
        "kind": 5,
        "importPath": "mid-range.decrypting_caesars_cipher",
        "description": "mid-range.decrypting_caesars_cipher",
        "peekOfCode": "_result = list(decrypt_generator(test_case, 95))\nfor res in _result:\n    print(\"Possible text: \" + res)\n# Look at ninth result",
        "detail": "mid-range.decrypting_caesars_cipher",
        "documentation": {}
    },
    {
        "label": "DeduplicateCompleter",
        "kind": 6,
        "importPath": "mid-range.deduplicate",
        "description": "mid-range.deduplicate",
        "peekOfCode": "class DeduplicateCompleter(Completer):\n    \"\"\"\n    Wrapper around a completer that removes duplicates. Only the first unique\n    completions are kept.\n    Completions are considered to be a duplicate if they result in the same\n    document text when they would be applied.\n    \"\"\"\n    def __init__(self, completer: Completer) -> None:\n        self.completer = completer\n    def get_completions(",
        "detail": "mid-range.deduplicate",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.deduplicate",
        "description": "mid-range.deduplicate",
        "peekOfCode": "__all__ = [\"DeduplicateCompleter\"]\nclass DeduplicateCompleter(Completer):\n    \"\"\"\n    Wrapper around a completer that removes duplicates. Only the first unique\n    completions are kept.\n    Completions are considered to be a duplicate if they result in the same\n    document text when they would be applied.\n    \"\"\"\n    def __init__(self, completer: Completer) -> None:\n        self.completer = completer",
        "detail": "mid-range.deduplicate",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "mid-range.deep",
        "description": "mid-range.deep",
        "peekOfCode": "def func():\n    print(\"This func() comes from the installed \" \"version of nested.second.deep\")",
        "detail": "mid-range.deep",
        "documentation": {}
    },
    {
        "label": "BLOCK_START_STRING",
        "kind": 5,
        "importPath": "mid-range.defaults",
        "description": "mid-range.defaults",
        "peekOfCode": "BLOCK_START_STRING = \"{%\"\nBLOCK_END_STRING = \"%}\"\nVARIABLE_START_STRING = \"{{\"\nVARIABLE_END_STRING = \"}}\"\nCOMMENT_START_STRING = \"{#\"\nCOMMENT_END_STRING = \"#}\"\nLINE_STATEMENT_PREFIX = None\nLINE_COMMENT_PREFIX = None\nTRIM_BLOCKS = False\nLSTRIP_BLOCKS = False",
        "detail": "mid-range.defaults",
        "documentation": {}
    },
    {
        "label": "BLOCK_END_STRING",
        "kind": 5,
        "importPath": "mid-range.defaults",
        "description": "mid-range.defaults",
        "peekOfCode": "BLOCK_END_STRING = \"%}\"\nVARIABLE_START_STRING = \"{{\"\nVARIABLE_END_STRING = \"}}\"\nCOMMENT_START_STRING = \"{#\"\nCOMMENT_END_STRING = \"#}\"\nLINE_STATEMENT_PREFIX = None\nLINE_COMMENT_PREFIX = None\nTRIM_BLOCKS = False\nLSTRIP_BLOCKS = False\nNEWLINE_SEQUENCE = \"\\n\"",
        "detail": "mid-range.defaults",
        "documentation": {}
    },
    {
        "label": "VARIABLE_START_STRING",
        "kind": 5,
        "importPath": "mid-range.defaults",
        "description": "mid-range.defaults",
        "peekOfCode": "VARIABLE_START_STRING = \"{{\"\nVARIABLE_END_STRING = \"}}\"\nCOMMENT_START_STRING = \"{#\"\nCOMMENT_END_STRING = \"#}\"\nLINE_STATEMENT_PREFIX = None\nLINE_COMMENT_PREFIX = None\nTRIM_BLOCKS = False\nLSTRIP_BLOCKS = False\nNEWLINE_SEQUENCE = \"\\n\"\nKEEP_TRAILING_NEWLINE = False",
        "detail": "mid-range.defaults",
        "documentation": {}
    },
    {
        "label": "VARIABLE_END_STRING",
        "kind": 5,
        "importPath": "mid-range.defaults",
        "description": "mid-range.defaults",
        "peekOfCode": "VARIABLE_END_STRING = \"}}\"\nCOMMENT_START_STRING = \"{#\"\nCOMMENT_END_STRING = \"#}\"\nLINE_STATEMENT_PREFIX = None\nLINE_COMMENT_PREFIX = None\nTRIM_BLOCKS = False\nLSTRIP_BLOCKS = False\nNEWLINE_SEQUENCE = \"\\n\"\nKEEP_TRAILING_NEWLINE = False\n# default filters, tests and namespace",
        "detail": "mid-range.defaults",
        "documentation": {}
    },
    {
        "label": "COMMENT_START_STRING",
        "kind": 5,
        "importPath": "mid-range.defaults",
        "description": "mid-range.defaults",
        "peekOfCode": "COMMENT_START_STRING = \"{#\"\nCOMMENT_END_STRING = \"#}\"\nLINE_STATEMENT_PREFIX = None\nLINE_COMMENT_PREFIX = None\nTRIM_BLOCKS = False\nLSTRIP_BLOCKS = False\nNEWLINE_SEQUENCE = \"\\n\"\nKEEP_TRAILING_NEWLINE = False\n# default filters, tests and namespace\nDEFAULT_NAMESPACE = {",
        "detail": "mid-range.defaults",
        "documentation": {}
    },
    {
        "label": "COMMENT_END_STRING",
        "kind": 5,
        "importPath": "mid-range.defaults",
        "description": "mid-range.defaults",
        "peekOfCode": "COMMENT_END_STRING = \"#}\"\nLINE_STATEMENT_PREFIX = None\nLINE_COMMENT_PREFIX = None\nTRIM_BLOCKS = False\nLSTRIP_BLOCKS = False\nNEWLINE_SEQUENCE = \"\\n\"\nKEEP_TRAILING_NEWLINE = False\n# default filters, tests and namespace\nDEFAULT_NAMESPACE = {\n    \"range\": range_type,",
        "detail": "mid-range.defaults",
        "documentation": {}
    },
    {
        "label": "LINE_STATEMENT_PREFIX",
        "kind": 5,
        "importPath": "mid-range.defaults",
        "description": "mid-range.defaults",
        "peekOfCode": "LINE_STATEMENT_PREFIX = None\nLINE_COMMENT_PREFIX = None\nTRIM_BLOCKS = False\nLSTRIP_BLOCKS = False\nNEWLINE_SEQUENCE = \"\\n\"\nKEEP_TRAILING_NEWLINE = False\n# default filters, tests and namespace\nDEFAULT_NAMESPACE = {\n    \"range\": range_type,\n    \"dict\": dict,",
        "detail": "mid-range.defaults",
        "documentation": {}
    },
    {
        "label": "LINE_COMMENT_PREFIX",
        "kind": 5,
        "importPath": "mid-range.defaults",
        "description": "mid-range.defaults",
        "peekOfCode": "LINE_COMMENT_PREFIX = None\nTRIM_BLOCKS = False\nLSTRIP_BLOCKS = False\nNEWLINE_SEQUENCE = \"\\n\"\nKEEP_TRAILING_NEWLINE = False\n# default filters, tests and namespace\nDEFAULT_NAMESPACE = {\n    \"range\": range_type,\n    \"dict\": dict,\n    \"lipsum\": generate_lorem_ipsum,",
        "detail": "mid-range.defaults",
        "documentation": {}
    },
    {
        "label": "TRIM_BLOCKS",
        "kind": 5,
        "importPath": "mid-range.defaults",
        "description": "mid-range.defaults",
        "peekOfCode": "TRIM_BLOCKS = False\nLSTRIP_BLOCKS = False\nNEWLINE_SEQUENCE = \"\\n\"\nKEEP_TRAILING_NEWLINE = False\n# default filters, tests and namespace\nDEFAULT_NAMESPACE = {\n    \"range\": range_type,\n    \"dict\": dict,\n    \"lipsum\": generate_lorem_ipsum,\n    \"cycler\": Cycler,",
        "detail": "mid-range.defaults",
        "documentation": {}
    },
    {
        "label": "LSTRIP_BLOCKS",
        "kind": 5,
        "importPath": "mid-range.defaults",
        "description": "mid-range.defaults",
        "peekOfCode": "LSTRIP_BLOCKS = False\nNEWLINE_SEQUENCE = \"\\n\"\nKEEP_TRAILING_NEWLINE = False\n# default filters, tests and namespace\nDEFAULT_NAMESPACE = {\n    \"range\": range_type,\n    \"dict\": dict,\n    \"lipsum\": generate_lorem_ipsum,\n    \"cycler\": Cycler,\n    \"joiner\": Joiner,",
        "detail": "mid-range.defaults",
        "documentation": {}
    },
    {
        "label": "NEWLINE_SEQUENCE",
        "kind": 5,
        "importPath": "mid-range.defaults",
        "description": "mid-range.defaults",
        "peekOfCode": "NEWLINE_SEQUENCE = \"\\n\"\nKEEP_TRAILING_NEWLINE = False\n# default filters, tests and namespace\nDEFAULT_NAMESPACE = {\n    \"range\": range_type,\n    \"dict\": dict,\n    \"lipsum\": generate_lorem_ipsum,\n    \"cycler\": Cycler,\n    \"joiner\": Joiner,\n    \"namespace\": Namespace,",
        "detail": "mid-range.defaults",
        "documentation": {}
    },
    {
        "label": "KEEP_TRAILING_NEWLINE",
        "kind": 5,
        "importPath": "mid-range.defaults",
        "description": "mid-range.defaults",
        "peekOfCode": "KEEP_TRAILING_NEWLINE = False\n# default filters, tests and namespace\nDEFAULT_NAMESPACE = {\n    \"range\": range_type,\n    \"dict\": dict,\n    \"lipsum\": generate_lorem_ipsum,\n    \"cycler\": Cycler,\n    \"joiner\": Joiner,\n    \"namespace\": Namespace,\n}",
        "detail": "mid-range.defaults",
        "documentation": {}
    },
    {
        "label": "DEFAULT_NAMESPACE",
        "kind": 5,
        "importPath": "mid-range.defaults",
        "description": "mid-range.defaults",
        "peekOfCode": "DEFAULT_NAMESPACE = {\n    \"range\": range_type,\n    \"dict\": dict,\n    \"lipsum\": generate_lorem_ipsum,\n    \"cycler\": Cycler,\n    \"joiner\": Joiner,\n    \"namespace\": Namespace,\n}\n# default policies\nDEFAULT_POLICIES = {",
        "detail": "mid-range.defaults",
        "documentation": {}
    },
    {
        "label": "DEFAULT_POLICIES",
        "kind": 5,
        "importPath": "mid-range.defaults",
        "description": "mid-range.defaults",
        "peekOfCode": "DEFAULT_POLICIES = {\n    \"compiler.ascii_str\": True,\n    \"urlize.rel\": \"noopener\",\n    \"urlize.target\": None,\n    \"truncate.leeway\": 5,\n    \"json.dumps_function\": None,\n    \"json.dumps_kwargs\": {\"sort_keys\": True},\n    \"ext.i18n.trimmed\": False,\n}",
        "detail": "mid-range.defaults",
        "documentation": {}
    },
    {
        "label": "my_abs",
        "kind": 2,
        "importPath": "mid-range.def_func",
        "description": "mid-range.def_func",
        "peekOfCode": "def my_abs(x):\n    if not isinstance(x, (int, float)):\n        raise TypeError(\"bad operand type\")\n    if x >= 0:\n        return x\n    else:\n        return -x\ndef move(x, y, step, angle=0):\n    nx = x + step * math.cos(angle)\n    ny = y - step * math.sin(angle)",
        "detail": "mid-range.def_func",
        "documentation": {}
    },
    {
        "label": "move",
        "kind": 2,
        "importPath": "mid-range.def_func",
        "description": "mid-range.def_func",
        "peekOfCode": "def move(x, y, step, angle=0):\n    nx = x + step * math.cos(angle)\n    ny = y - step * math.sin(angle)\n    return nx, ny\nn = my_abs(-20)\nprint(n)\nx, y = move(100, 100, 60, math.pi / 6)\nprint(x, y)\n# TypeError: bad operand type:\nmy_abs(\"123\")",
        "detail": "mid-range.def_func",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.def_func",
        "description": "mid-range.def_func",
        "peekOfCode": "n = my_abs(-20)\nprint(n)\nx, y = move(100, 100, 60, math.pi / 6)\nprint(x, y)\n# TypeError: bad operand type:\nmy_abs(\"123\")",
        "detail": "mid-range.def_func",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.degree-of-an-array",
        "description": "mid-range.degree-of-an-array",
        "peekOfCode": "class Solution:\n    def findShortestSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        dic = {}\n        degreeLen = 0\n        for index, item in enumerate(nums):\n            if not item in dic:",
        "detail": "mid-range.degree-of-an-array",
        "documentation": {}
    },
    {
        "label": "digitDegree",
        "kind": 2,
        "importPath": "mid-range.Degree",
        "description": "mid-range.Degree",
        "peekOfCode": "def digitDegree(n):\n    degree = 0\n    while 10 <= n:\n        num = str(n)\n        n = sum(int(i) for i in num)\n        degree += 1\n    return degree",
        "detail": "mid-range.Degree",
        "documentation": {}
    },
    {
        "label": "deleteNode",
        "kind": 2,
        "importPath": "mid-range.Delete-A-Node",
        "description": "mid-range.Delete-A-Node",
        "peekOfCode": "def deleteNode(head, position):\n    if position == 0:\n        return head.next\n    temp = head\n    ptr = 1\n    while ptr != position:\n        temp = temp.next\n        ptr += 1\n    temp.next = temp.next.next\n    return head",
        "detail": "mid-range.Delete-A-Node",
        "documentation": {}
    },
    {
        "label": "removeDuplicates",
        "kind": 2,
        "importPath": "mid-range.Delete-Duplicate-Nodes",
        "description": "mid-range.Delete-Duplicate-Nodes",
        "peekOfCode": "def removeDuplicates(head):\n    dummy = head\n    while dummy and dummy.next:\n        if dummy.data == dummy.next.data:\n            dummy.next = dummy.next.next\n            continue\n        dummy = dummy.next\n    return head",
        "detail": "mid-range.Delete-Duplicate-Nodes",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.DeleteColumnsToMakeSorted",
        "description": "mid-range.DeleteColumnsToMakeSorted",
        "peekOfCode": "class Solution:\n    def minDeletionSize(self, A: List[str]) -> int:\n        s = 0\n        for col in zip(*A):\n            if any(col[i] > col[i + 1] for i in range(len(col) - 1)):\n                s += 1\n        return s",
        "detail": "mid-range.DeleteColumnsToMakeSorted",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.DeleteNodeInABST",
        "description": "mid-range.DeleteNodeInABST",
        "peekOfCode": "class Solution:\n    def deleteNode(self, root, key):\n        if not root:\n            return\n        if key > root.val:\n            root.right = self.deleteNode(root.right, key)\n        elif key < root.val:\n            root.left = self.deleteNode(root.left, key)\n        else:\n            if not root.left:",
        "detail": "mid-range.DeleteNodeInABST",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.DeleteNodeInALinkedList",
        "description": "mid-range.DeleteNodeInALinkedList",
        "peekOfCode": "class Solution:\n    def deleteNode(self, node):\n        node.val = node.next.val\n        node.next = node.next.next",
        "detail": "mid-range.DeleteNodeInALinkedList",
        "documentation": {}
    },
    {
        "label": "deleteDigit",
        "kind": 2,
        "importPath": "mid-range.delete_digit",
        "description": "mid-range.delete_digit",
        "peekOfCode": "def deleteDigit(n):\n    digits = str(n)\n    values = []\n    for i in range(len(digits)):\n        value = int(digits[:i] + digits[(i + 1) :])\n        values.append(int(value))\n    return max(values)",
        "detail": "mid-range.delete_digit",
        "documentation": {}
    },
    {
        "label": "deleteDuplicates",
        "kind": 2,
        "importPath": "mid-range.delete_duplicates_from_linked_list",
        "description": "mid-range.delete_duplicates_from_linked_list",
        "peekOfCode": "def deleteDuplicates(self, head):\n    current = head\n    while current:\n        # case_1 if the head is duplicate\n        if current.next and current.val == current.next.val:\n            head = current.next.next\n            while head and current.val == head.val:\n                head = head.next\n            current = head\n        # case_2 if nodes are duplicate after the head",
        "detail": "mid-range.delete_duplicates_from_linked_list",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "mid-range.Delete_Elements_LinkedList",
        "description": "mid-range.Delete_Elements_LinkedList",
        "peekOfCode": "class ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\nclass Solution:\n    def remove(self, head, val):\n        sentinel = ListNode(0)\n        sentinel.next = head\n        prev, curr = sentinel, head\n        while curr:",
        "detail": "mid-range.Delete_Elements_LinkedList",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Delete_Elements_LinkedList",
        "description": "mid-range.Delete_Elements_LinkedList",
        "peekOfCode": "class Solution:\n    def remove(self, head, val):\n        sentinel = ListNode(0)\n        sentinel.next = head\n        prev, curr = sentinel, head\n        while curr:\n            if curr.val == val:\n                prev.next = curr.next\n            else:\n                prev = curr",
        "detail": "mid-range.Delete_Elements_LinkedList",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "mid-range.Delete_Node_Linked_List",
        "description": "mid-range.Delete_Node_Linked_List",
        "peekOfCode": "class ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\nclass Solution:\n    def delete(self, node):\n        node.val = node.next.val\n        node.next = node.next.next\nif __name__ == \"__main__\":\n    node = ListNode(4)",
        "detail": "mid-range.Delete_Node_Linked_List",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Delete_Node_Linked_List",
        "description": "mid-range.Delete_Node_Linked_List",
        "peekOfCode": "class Solution:\n    def delete(self, node):\n        node.val = node.next.val\n        node.next = node.next.next\nif __name__ == \"__main__\":\n    node = ListNode(4)\n    node.next = ListNode(5)\n    node.next.next = ListNode(1)\n    node.next.next.next = ListNode(9)\n    test = node",
        "detail": "mid-range.Delete_Node_Linked_List",
        "documentation": {}
    },
    {
        "label": "GraphNode",
        "kind": 6,
        "importPath": "mid-range.demo1",
        "description": "mid-range.demo1",
        "peekOfCode": "class GraphNode:\n    def __init__(self, label):\n        self.label = label\n        self.neighbors = set()\n        self.color = None\ndef color_graph(graph, colors):\n    # Your code here\n    # iterate over each node of the graph\n    for node in graph:\n        # handle if an infinite loop is occuring",
        "detail": "mid-range.demo1",
        "documentation": {}
    },
    {
        "label": "color_graph",
        "kind": 2,
        "importPath": "mid-range.demo1",
        "description": "mid-range.demo1",
        "peekOfCode": "def color_graph(graph, colors):\n    # Your code here\n    # iterate over each node of the graph\n    for node in graph:\n        # handle if an infinite loop is occuring\n        if node in node.neighbors:\n            raise Exception(\"impossible to find a legal solution\")\n        # get the node's neighbors colors\n        # check if a color is illegal?\n        illegal_colors = set(",
        "detail": "mid-range.demo1",
        "documentation": {}
    },
    {
        "label": "find_judge",
        "kind": 2,
        "importPath": "mid-range.demo2",
        "description": "mid-range.demo2",
        "peekOfCode": "def find_judge(N, trust):\n    \"\"\"\n    Inputs:\n    N -> int\n    trust -> List[List[int]]\n    Output:\n    int\n    \"\"\"\n    # Your code here\n    # base case",
        "detail": "mid-range.demo2",
        "documentation": {}
    },
    {
        "label": "addition",
        "kind": 2,
        "importPath": "mid-range.demonstration_01",
        "description": "mid-range.demonstration_01",
        "peekOfCode": "def addition(a, b):\n    # Your code here\n    print(\"i am inside the function\")\n    return a + b\nprint(\"this lives outside the function\")\nprint(addition(-3, -1))",
        "detail": "mid-range.demonstration_01",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "mid-range.demonstration_02",
        "description": "mid-range.demonstration_02",
        "peekOfCode": "def convert(minutes):\n    # Your code here\n    seconds = minutes * 60\n    return seconds\nprint(convert(5))",
        "detail": "mid-range.demonstration_02",
        "documentation": {}
    },
    {
        "label": "string_int",
        "kind": 2,
        "importPath": "mid-range.demonstration_03",
        "description": "mid-range.demonstration_03",
        "peekOfCode": "def string_int(txt):\n    # Your code here\n    return int(txt)\nprint(string_int(\"1000\"))\nprint(type(string_int(\"100\")))",
        "detail": "mid-range.demonstration_03",
        "documentation": {}
    },
    {
        "label": "find_perimeter",
        "kind": 2,
        "importPath": "mid-range.demonstration_04",
        "description": "mid-range.demonstration_04",
        "peekOfCode": "def find_perimeter(length, width):\n    # Your code here\n    return 2 * length + 2 * width",
        "detail": "mid-range.demonstration_04",
        "documentation": {}
    },
    {
        "label": "sort_by_length",
        "kind": 2,
        "importPath": "mid-range.demonstration_05",
        "description": "mid-range.demonstration_05",
        "peekOfCode": "def sort_by_length(lst):\n    # Your code here\n    # sorted_list = sorted(lst, key=lambda str_item: len(str_item))\n    return sorted(lst, key=len)\nprint(sort_by_length([\"a\", \"ccc\", \"dddd\", \"bb\"]))\n# .sort() it changes the original array\n# sorted() creates a copy of the original array and changes it",
        "detail": "mid-range.demonstration_05",
        "documentation": {}
    },
    {
        "label": "get_count",
        "kind": 2,
        "importPath": "mid-range.demonstration_06",
        "description": "mid-range.demonstration_06",
        "peekOfCode": "def get_count(input_str):\n    # Your code here\n    vowel_counts = {}  # this is a dictionary to store the vowels\n    for vowel in \"aeiou\":\n        count = input_str.count(vowel)\n        vowel_counts[vowel] = count\n        print(vowel_counts)\n        counts = vowel_counts.values()\n    return sum(counts)\nprint(get_count(\"adela are mere\"))",
        "detail": "mid-range.demonstration_06",
        "documentation": {}
    },
    {
        "label": "nth_smallest",
        "kind": 2,
        "importPath": "mid-range.demonstration_07",
        "description": "mid-range.demonstration_07",
        "peekOfCode": "def nth_smallest(lst, n):\n    # Your code here\n    if len(lst) >= n:\n        sorted_list = sorted(lst)  # sorts the array accendetly\n        return sorted_list[n - 1]\nprint(nth_smallest([7, 5, 3, 1], 1))\nprint(nth_smallest([1, 3, 5, 7], 5))",
        "detail": "mid-range.demonstration_07",
        "documentation": {}
    },
    {
        "label": "parity",
        "kind": 2,
        "importPath": "mid-range.demonstration_08",
        "description": "mid-range.demonstration_08",
        "peekOfCode": "def parity(input_int):\n    # Your code here\n    if input_int % 2 is 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\nprint(parity(0))\nprint(parity(1))\nprint(parity(2))",
        "detail": "mid-range.demonstration_08",
        "documentation": {}
    },
    {
        "label": "get_middle",
        "kind": 2,
        "importPath": "mid-range.demonstration_09",
        "description": "mid-range.demonstration_09",
        "peekOfCode": "def get_middle(input_str):\n    # Your code here\n    return input_str[(len(input_str) - 1) // 2 : (len(input_str) + 2) // 2]\nprint(get_middle(\"test\"))\nprint(get_middle(\"testing\"))\nprint(get_middle(\"middle\"))\nprint(get_middle(\"A\"))\nprint(get_middle(\"beyoudre\"))\nprint(get_middle(\"you\"))",
        "detail": "mid-range.demonstration_09",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.demonstration_1",
        "description": "mid-range.demonstration_1",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef inorder_traversal(root):\n    # Your code here",
        "detail": "mid-range.demonstration_1",
        "documentation": {}
    },
    {
        "label": "inorder_traversal",
        "kind": 2,
        "importPath": "mid-range.demonstration_1",
        "description": "mid-range.demonstration_1",
        "peekOfCode": "def inorder_traversal(root):\n    # Your code here",
        "detail": "mid-range.demonstration_1",
        "documentation": {}
    },
    {
        "label": "max_and_min",
        "kind": 2,
        "importPath": "mid-range.demonstration_10",
        "description": "mid-range.demonstration_10",
        "peekOfCode": "def max_and_min(input_str):\n    # Your code here\n    new_list = list(map(int, input_str.split()))\n    new_string = str(max(new_list)) + \" \" + str(min(new_list))\n    print(type(new_string))\n    return new_string\nprint(max_and_min(\"1 2 3 4 5\"))\nprint(max_and_min(\"1 2 -3 4 5\"))\nprint(max_and_min(\"1 9 3 4 -5\"))",
        "detail": "mid-range.demonstration_10",
        "documentation": {}
    },
    {
        "label": "BinaryTreeNode",
        "kind": 6,
        "importPath": "mid-range.demonstration_1_copy",
        "description": "mid-range.demonstration_1_copy",
        "peekOfCode": "class BinaryTreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\ndef maxDepth(root):\n    # Your code here\n    if root.left is None and root.right is None:\n        # this is a leaf so depth is just 1\n        return 1",
        "detail": "mid-range.demonstration_1_copy",
        "documentation": {}
    },
    {
        "label": "maxDepth",
        "kind": 2,
        "importPath": "mid-range.demonstration_1_copy",
        "description": "mid-range.demonstration_1_copy",
        "peekOfCode": "def maxDepth(root):\n    # Your code here\n    if root.left is None and root.right is None:\n        # this is a leaf so depth is just 1\n        return 1\n    left_depth = 0\n    right_depth = 0\n    if root.left:\n        left_depth = maxDepth(root.left)\n    if root.right:",
        "detail": "mid-range.demonstration_1_copy",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.demonstration_2",
        "description": "mid-range.demonstration_2",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef build_tree(preorder, inorder):\n    # Your code here",
        "detail": "mid-range.demonstration_2",
        "documentation": {}
    },
    {
        "label": "build_tree",
        "kind": 2,
        "importPath": "mid-range.demonstration_2",
        "description": "mid-range.demonstration_2",
        "peekOfCode": "def build_tree(preorder, inorder):\n    # Your code here",
        "detail": "mid-range.demonstration_2",
        "documentation": {}
    },
    {
        "label": "preorder",
        "kind": 5,
        "importPath": "mid-range.demonstration_2",
        "description": "mid-range.demonstration_2",
        "peekOfCode": "preorder = [5,7,22,13,9]\ninorder = [7,5,13,22,9]\nOutput:\n    5\n   / \\\n  7  22\n    /  \\\n   13   9\n\"\"\"\n# Definition for a binary tree node.",
        "detail": "mid-range.demonstration_2",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 5,
        "importPath": "mid-range.demonstration_2",
        "description": "mid-range.demonstration_2",
        "peekOfCode": "inorder = [7,5,13,22,9]\nOutput:\n    5\n   / \\\n  7  22\n    /  \\\n   13   9\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:",
        "detail": "mid-range.demonstration_2",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.demonstration_2_copy",
        "description": "mid-range.demonstration_2_copy",
        "peekOfCode": "class TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\ndef is_valid_BST(root):\n    # Your code here\n    if root is None:\n        return False\n    if root.left is None and root.right is None:",
        "detail": "mid-range.demonstration_2_copy",
        "documentation": {}
    },
    {
        "label": "is_valid_BST",
        "kind": 2,
        "importPath": "mid-range.demonstration_2_copy",
        "description": "mid-range.demonstration_2_copy",
        "peekOfCode": "def is_valid_BST(root):\n    # Your code here\n    if root is None:\n        return False\n    if root.left is None and root.right is None:\n        return False\n    if root.left.value < root.value:\n        is_valid_BST(root.left)\n    if root.right.value > root.value:\n        is_valid_BST(root.right)",
        "detail": "mid-range.demonstration_2_copy",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.deMorgans_law",
        "description": "mid-range.deMorgans_law",
        "peekOfCode": "a = {1, 23, 55, 76, 13, 90, 34, 78}\nb = {12, 345, 8, 4, 0, 7, 4, 3, 53, 4, 6, 3}\nabInteraction = a & b  # & operator interacts two sets\nabUnion = a | b  # | operator makes union of two sets\neqn = len(a) + len(b) - len(abInteraction)\nprint(str(eqn) + \" = \" + str(len(abUnion)))",
        "detail": "mid-range.deMorgans_law",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.deMorgans_law",
        "description": "mid-range.deMorgans_law",
        "peekOfCode": "b = {12, 345, 8, 4, 0, 7, 4, 3, 53, 4, 6, 3}\nabInteraction = a & b  # & operator interacts two sets\nabUnion = a | b  # | operator makes union of two sets\neqn = len(a) + len(b) - len(abInteraction)\nprint(str(eqn) + \" = \" + str(len(abUnion)))",
        "detail": "mid-range.deMorgans_law",
        "documentation": {}
    },
    {
        "label": "abInteraction",
        "kind": 5,
        "importPath": "mid-range.deMorgans_law",
        "description": "mid-range.deMorgans_law",
        "peekOfCode": "abInteraction = a & b  # & operator interacts two sets\nabUnion = a | b  # | operator makes union of two sets\neqn = len(a) + len(b) - len(abInteraction)\nprint(str(eqn) + \" = \" + str(len(abUnion)))",
        "detail": "mid-range.deMorgans_law",
        "documentation": {}
    },
    {
        "label": "abUnion",
        "kind": 5,
        "importPath": "mid-range.deMorgans_law",
        "description": "mid-range.deMorgans_law",
        "peekOfCode": "abUnion = a | b  # | operator makes union of two sets\neqn = len(a) + len(b) - len(abInteraction)\nprint(str(eqn) + \" = \" + str(len(abUnion)))",
        "detail": "mid-range.deMorgans_law",
        "documentation": {}
    },
    {
        "label": "eqn",
        "kind": 5,
        "importPath": "mid-range.deMorgans_law",
        "description": "mid-range.deMorgans_law",
        "peekOfCode": "eqn = len(a) + len(b) - len(abInteraction)\nprint(str(eqn) + \" = \" + str(len(abUnion)))",
        "detail": "mid-range.deMorgans_law",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "mid-range.demo_2",
        "description": "mid-range.demo_2",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef reverse(head_of_list):\n    # Your code here\n    pass",
        "detail": "mid-range.demo_2",
        "documentation": {}
    },
    {
        "label": "reverse",
        "kind": 2,
        "importPath": "mid-range.demo_2",
        "description": "mid-range.demo_2",
        "peekOfCode": "def reverse(head_of_list):\n    # Your code here\n    pass",
        "detail": "mid-range.demo_2",
        "documentation": {}
    },
    {
        "label": "Department",
        "kind": 6,
        "importPath": "mid-range.Department",
        "description": "mid-range.Department",
        "peekOfCode": "class Department:\n    def __init__(self, name, products=[]):\n        # this is a string\n        self.name = name\n        # this takes in a list of products (has_a) / (has_many)\n        self.products = products\n    def __str__(self):\n        output = f\"  {self.name}\\n\"\n        if len(self.products) < 1:\n            output = f\"No products found in {self.name}\"",
        "detail": "mid-range.Department",
        "documentation": {}
    },
    {
        "label": "depositProfit",
        "kind": 2,
        "importPath": "mid-range.depositProfit",
        "description": "mid-range.depositProfit",
        "peekOfCode": "def depositProfit(deposit, rate, threshold):\n    i = 0\n    while deposit < threshold:\n        deposit += deposit * rate * 0.01\n        i += 1\n    return i",
        "detail": "mid-range.depositProfit",
        "documentation": {}
    },
    {
        "label": "depositProfit",
        "kind": 2,
        "importPath": "mid-range.deposit_profit",
        "description": "mid-range.deposit_profit",
        "peekOfCode": "def depositProfit(deposit, rate, threshold):\n    years = 0\n    while deposit < threshold:\n        deposit += deposit * (rate / 100)\n        years += 1\n    return years",
        "detail": "mid-range.deposit_profit",
        "documentation": {}
    },
    {
        "label": "DeprecatedTest",
        "kind": 6,
        "importPath": "mid-range.deprecated",
        "description": "mid-range.deprecated",
        "peekOfCode": "class DeprecatedTest(Exception):\n    \"\"\"Raise this exception to mark a test as deprecated.\n    \"\"\"\n    pass\nclass Deprecated(ErrorClassPlugin):\n    \"\"\"\n    Installs a DEPRECATED error class for the DeprecatedTest exception. Enabled\n    by default.\n    \"\"\"\n    enabled = True",
        "detail": "mid-range.deprecated",
        "documentation": {}
    },
    {
        "label": "Deprecated",
        "kind": 6,
        "importPath": "mid-range.deprecated",
        "description": "mid-range.deprecated",
        "peekOfCode": "class Deprecated(ErrorClassPlugin):\n    \"\"\"\n    Installs a DEPRECATED error class for the DeprecatedTest exception. Enabled\n    by default.\n    \"\"\"\n    enabled = True\n    deprecated = ErrorClass(DeprecatedTest, label=\"DEPRECATED\", isfailure=False)\n    def options(self, parser, env):\n        \"\"\"Register commandline options.\n        \"\"\"",
        "detail": "mid-range.deprecated",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "mid-range.DepthFirstSearch",
        "description": "mid-range.DepthFirstSearch",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertex = {}\n    # for printing the Graph vertexes\n    def printGraph(self):\n        print(self.vertex)\n        for i in self.vertex.keys():\n            print(i, \" -> \", \" -> \".join([str(j) for j in self.vertex[i]]))\n    # for adding the edge beween two vertexes\n    def addEdge(self, fromVertex, toVertex):",
        "detail": "mid-range.DepthFirstSearch",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "mid-range.depth_first_search",
        "description": "mid-range.depth_first_search",
        "peekOfCode": "def search(graph, start, path=[]):\n    \"\"\"\n    depth first search algorithm\n    :param graph:\n    :param start:\n    :param path:\n    :return:\n    \"\"\"\n    # check if graph is empty or start vertex is none\n    if start not in graph or graph[start] is None or graph[start] == []:",
        "detail": "mid-range.depth_first_search",
        "documentation": {}
    },
    {
        "label": "time_complexities",
        "kind": 2,
        "importPath": "mid-range.depth_first_search",
        "description": "mid-range.depth_first_search",
        "peekOfCode": "def time_complexities():\n    \"\"\"\n    Return information on functions\n    time complexity\n    :return: string\n    \"\"\"\n    return \"O(V + E) where V = Number of vertices and E = Number of Edges\"\ndef get_code():\n    \"\"\"\n    easily retrieve the source code",
        "detail": "mid-range.depth_first_search",
        "documentation": {}
    },
    {
        "label": "get_code",
        "kind": 2,
        "importPath": "mid-range.depth_first_search",
        "description": "mid-range.depth_first_search",
        "peekOfCode": "def get_code():\n    \"\"\"\n    easily retrieve the source code\n    of the function\n    :return: source code\n    \"\"\"\n    return inspect.getsource(search)",
        "detail": "mid-range.depth_first_search",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "mid-range.depth_first_search_2",
        "description": "mid-range.depth_first_search_2",
        "peekOfCode": "class Graph:\n    def __init__(self):\n        self.vertex = {}\n    # for printing the Graph vertices\n    def print_graph(self) -> None:\n        print(self.vertex)\n        for i in self.vertex:\n            print(i, \" -> \", \" -> \".join([str(j) for j in self.vertex[i]]))\n    # for adding the edge between two vertices\n    def add_edge(self, from_vertex: int, to_vertex: int) -> None:",
        "detail": "mid-range.depth_first_search_2",
        "documentation": {}
    },
    {
        "label": "newer_pairwise_group",
        "kind": 2,
        "importPath": "mid-range.dep_util",
        "description": "mid-range.dep_util",
        "peekOfCode": "def newer_pairwise_group(sources_groups, targets):\n    \"\"\"Walk both arguments in parallel, testing if each source group is newer\n    than its corresponding target. Returns a pair of lists (sources_groups,\n    targets) where sources is newer than target, according to the semantics\n    of 'newer_group()'.\n    \"\"\"\n    if len(sources_groups) != len(targets):\n        raise ValueError(\"'sources_group' and 'targets' must be the same length\")\n    # build a pair of lists (sources_groups, targets) where source is newer\n    n_sources = []",
        "detail": "mid-range.dep_util",
        "documentation": {}
    },
    {
        "label": "de",
        "kind": 5,
        "importPath": "mid-range.DeQueue",
        "description": "mid-range.DeQueue",
        "peekOfCode": "de = collections.deque([1, 2, 3])\n# using extend() to add numbers to right end\n# adds 4,5,6 to right end\nde.extend([4, 5, 6])\n# printing modified deque\nprint(\"The deque after extending deque at end is : \")\nprint(de)\n# using extendleft() to add numbers to left end\n# adds 7,8,9 to right end\nde.extendleft([7, 8, 9])",
        "detail": "mid-range.DeQueue",
        "documentation": {}
    },
    {
        "label": "MyCircularQueue",
        "kind": 6,
        "importPath": "mid-range.DesignCircularQueue",
        "description": "mid-range.DesignCircularQueue",
        "peekOfCode": "class MyCircularQueue:\n    def __init__(self, k: int):\n        self.size = 0\n        self.maxsize = k\n        self.cq = [0] * k\n        self.front = self.rear = -1\n    def enQueue(self, value: int) -> bool:\n        if self.size == self.maxsize:\n            return False\n        else:",
        "detail": "mid-range.DesignCircularQueue",
        "documentation": {}
    },
    {
        "label": "PhoneDirectory",
        "kind": 6,
        "importPath": "mid-range.Design_Phone_Directory",
        "description": "mid-range.Design_Phone_Directory",
        "peekOfCode": "class PhoneDirectory:\n    def __init__(self, maxNumbers: int):\n        self.num = maxNumbers\n        self.queue = deque([])\n        for i in range(self.num):\n            self.queue.append(i)\n    def get(self) -> int:\n        if len(self.queue) == 0:\n            return -1\n        num = self.queue.popleft()",
        "detail": "mid-range.Design_Phone_Directory",
        "documentation": {}
    },
    {
        "label": "loadDictionary",
        "kind": 2,
        "importPath": "mid-range.detecting_english_programmatically",
        "description": "mid-range.detecting_english_programmatically",
        "peekOfCode": "def loadDictionary():\n    path = os.path.split(os.path.realpath(__file__))\n    dictionaryFile = open(path[0] + \"/Dictionary.txt\")\n    englishWords = {}\n    for word in dictionaryFile.read().split(\"\\n\"):\n        englishWords[word] = None\n    dictionaryFile.close()\n    return englishWords\nENGLISH_WORDS = loadDictionary()\ndef getEnglishCount(message):",
        "detail": "mid-range.detecting_english_programmatically",
        "documentation": {}
    },
    {
        "label": "getEnglishCount",
        "kind": 2,
        "importPath": "mid-range.detecting_english_programmatically",
        "description": "mid-range.detecting_english_programmatically",
        "peekOfCode": "def getEnglishCount(message):\n    message = message.upper()\n    message = removeNonLetters(message)\n    possibleWords = message.split()\n    if possibleWords == []:\n        return 0.0\n    matches = 0\n    for word in possibleWords:\n        if word in ENGLISH_WORDS:\n            matches += 1",
        "detail": "mid-range.detecting_english_programmatically",
        "documentation": {}
    },
    {
        "label": "removeNonLetters",
        "kind": 2,
        "importPath": "mid-range.detecting_english_programmatically",
        "description": "mid-range.detecting_english_programmatically",
        "peekOfCode": "def removeNonLetters(message):\n    lettersOnly = []\n    for symbol in message:\n        if symbol in LETTERS_AND_SPACE:\n            lettersOnly.append(symbol)\n    return \"\".join(lettersOnly)\ndef isEnglish(message, wordPercentage=20, letterPercentage=85):\n    \"\"\"\n    >>> isEnglish('Hello World')\n    True",
        "detail": "mid-range.detecting_english_programmatically",
        "documentation": {}
    },
    {
        "label": "isEnglish",
        "kind": 2,
        "importPath": "mid-range.detecting_english_programmatically",
        "description": "mid-range.detecting_english_programmatically",
        "peekOfCode": "def isEnglish(message, wordPercentage=20, letterPercentage=85):\n    \"\"\"\n    >>> isEnglish('Hello World')\n    True\n    >>> isEnglish('llold HorWd')\n    False\n    \"\"\"\n    wordsMatch = getEnglishCount(message) * 100 >= wordPercentage\n    numLetters = len(removeNonLetters(message))\n    messageLettersPercentage = (float(numLetters) / len(message)) * 100",
        "detail": "mid-range.detecting_english_programmatically",
        "documentation": {}
    },
    {
        "label": "UPPERLETTERS",
        "kind": 5,
        "importPath": "mid-range.detecting_english_programmatically",
        "description": "mid-range.detecting_english_programmatically",
        "peekOfCode": "UPPERLETTERS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nLETTERS_AND_SPACE = UPPERLETTERS + UPPERLETTERS.lower() + \" \\t\\n\"\ndef loadDictionary():\n    path = os.path.split(os.path.realpath(__file__))\n    dictionaryFile = open(path[0] + \"/Dictionary.txt\")\n    englishWords = {}\n    for word in dictionaryFile.read().split(\"\\n\"):\n        englishWords[word] = None\n    dictionaryFile.close()\n    return englishWords",
        "detail": "mid-range.detecting_english_programmatically",
        "documentation": {}
    },
    {
        "label": "LETTERS_AND_SPACE",
        "kind": 5,
        "importPath": "mid-range.detecting_english_programmatically",
        "description": "mid-range.detecting_english_programmatically",
        "peekOfCode": "LETTERS_AND_SPACE = UPPERLETTERS + UPPERLETTERS.lower() + \" \\t\\n\"\ndef loadDictionary():\n    path = os.path.split(os.path.realpath(__file__))\n    dictionaryFile = open(path[0] + \"/Dictionary.txt\")\n    englishWords = {}\n    for word in dictionaryFile.read().split(\"\\n\"):\n        englishWords[word] = None\n    dictionaryFile.close()\n    return englishWords\nENGLISH_WORDS = loadDictionary()",
        "detail": "mid-range.detecting_english_programmatically",
        "documentation": {}
    },
    {
        "label": "ENGLISH_WORDS",
        "kind": 5,
        "importPath": "mid-range.detecting_english_programmatically",
        "description": "mid-range.detecting_english_programmatically",
        "peekOfCode": "ENGLISH_WORDS = loadDictionary()\ndef getEnglishCount(message):\n    message = message.upper()\n    message = removeNonLetters(message)\n    possibleWords = message.split()\n    if possibleWords == []:\n        return 0.0\n    matches = 0\n    for word in possibleWords:\n        if word in ENGLISH_WORDS:",
        "detail": "mid-range.detecting_english_programmatically",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "mid-range.Determine_Cycle_LinkedList",
        "description": "mid-range.Determine_Cycle_LinkedList",
        "peekOfCode": "class ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\nclass Solution:\n    def isCycle(self, head):\n        pointer1 = head\n        pointer2 = head.next\n        while pointer1 != pointer2:\n            if pointer2 is None or pointer2.next is None:",
        "detail": "mid-range.Determine_Cycle_LinkedList",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Determine_Cycle_LinkedList",
        "description": "mid-range.Determine_Cycle_LinkedList",
        "peekOfCode": "class Solution:\n    def isCycle(self, head):\n        pointer1 = head\n        pointer2 = head.next\n        while pointer1 != pointer2:\n            if pointer2 is None or pointer2.next is None:\n                return False\n            pointer1 = pointer1.next\n            pointer2 = pointer2.next.next\n        return True",
        "detail": "mid-range.Determine_Cycle_LinkedList",
        "documentation": {}
    },
    {
        "label": "device",
        "kind": 2,
        "importPath": "mid-range.device",
        "description": "mid-range.device",
        "peekOfCode": "def device(device_type, isocket, osocket):\n    \"\"\"Start a zeromq device (gevent-compatible).\n    Unlike the true zmq.device, this does not release the GIL.\n    Parameters\n    ----------\n    device_type : (QUEUE, FORWARDER, STREAMER)\n        The type of device to start (ignored).\n    isocket : Socket\n        The Socket instance for the incoming traffic.\n    osocket : Socket",
        "detail": "mid-range.device",
        "documentation": {}
    },
    {
        "label": "InputDevice",
        "kind": 6,
        "importPath": "mid-range.devices",
        "description": "mid-range.devices",
        "peekOfCode": "class InputDevice:\n    def __init__(self):\n        self.name = \"\"\n        self.handler = \"\"\n    def __str__(self):\n        return \"<Input Device: name=%s, handler=%s>\" % (self.name, self.handler)\n    def setName(self, name):\n        if len(name) >= 2 and name.startswith('\"') and name.endswith('\"'):\n            name = name[1 : len(name) - 1]\n        self.name = name",
        "detail": "mid-range.devices",
        "documentation": {}
    },
    {
        "label": "listDevices",
        "kind": 2,
        "importPath": "mid-range.devices",
        "description": "mid-range.devices",
        "peekOfCode": "def listDevices():\n    devices = []\n    with open(\"/proc/bus/input/devices\", \"r\") as f:\n        device = None\n        while True:\n            s = f.readline()\n            if s == \"\":\n                break\n            s = s.strip()\n            if s == \"\":",
        "detail": "mid-range.devices",
        "documentation": {}
    },
    {
        "label": "detectJoystick",
        "kind": 2,
        "importPath": "mid-range.devices",
        "description": "mid-range.devices",
        "peekOfCode": "def detectJoystick(joystickNames):\n    for device in listDevices():\n        for joystickName in joystickNames:\n            if joystickName in device.name:\n                return \"/dev/input/%s\" % device.handler\n    return None",
        "detail": "mid-range.devices",
        "documentation": {}
    },
    {
        "label": "dfs_components_grid",
        "kind": 2,
        "importPath": "mid-range.dfs_components_grid",
        "description": "mid-range.dfs_components_grid",
        "peekOfCode": "def dfs_components_grid(\n    grid: Sequence[Sequence[int]]\n) -> Iterable[set[tuple[int, int]]]:\n    \"\"\"On a grid of 0s and 1s, find all the components of 1s.\"\"\"\n    unseen = {(r, c) for r, row in enumerate(grid) for c, n in enumerate(row) if n}\n    while unseen:\n        start = unseen.pop()\n        component = {start}\n        to_visit = [start]\n        while to_visit:",
        "detail": "mid-range.dfs_components_grid",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict",
        "kind": 2,
        "importPath": "mid-range.dfs_component_dict",
        "description": "mid-range.dfs_component_dict",
        "peekOfCode": "def dfs_component_dict(graph: Mapping[Node, Set[Node]], start: Node) -> Iterable[Node]:\n    \"\"\"Find all the nodes connected to the starting node, using DFS on a dict.\"\"\"\n    component = {start}\n    to_visit = [start]\n    while to_visit:\n        node = to_visit.pop()\n        new_nodes = graph[node] - component\n        to_visit.extend(new_nodes)\n        component |= new_nodes\n        yield node",
        "detail": "mid-range.dfs_component_dict",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict",
        "kind": 2,
        "importPath": "mid-range.dfs_component_dict_(1)",
        "description": "mid-range.dfs_component_dict_(1)",
        "peekOfCode": "def dfs_component_dict(graph: Mapping[Node, Set[Node]], start: Node) -> Iterable[Node]:\n    \"\"\"Find all the nodes connected to the starting node, using DFS on a dict.\"\"\"\n    component = {start}\n    to_visit = [start]\n    while to_visit:\n        node = to_visit.pop()\n        new_nodes = graph[node] - component\n        to_visit.extend(new_nodes)\n        component |= new_nodes\n        yield node",
        "detail": "mid-range.dfs_component_dict_(1)",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict",
        "kind": 2,
        "importPath": "mid-range.dfs_component_dict_(2)",
        "description": "mid-range.dfs_component_dict_(2)",
        "peekOfCode": "def dfs_component_dict(graph: Mapping[Node, Set[Node]], start: Node) -> Iterable[Node]:\n    \"\"\"Find all the nodes connected to the starting node, using DFS on a dict.\"\"\"\n    component = {start}\n    to_visit = [start]\n    while to_visit:\n        node = to_visit.pop()\n        new_nodes = graph[node] - component\n        to_visit.extend(new_nodes)\n        component |= new_nodes\n        yield node",
        "detail": "mid-range.dfs_component_dict_(2)",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict_recur",
        "kind": 2,
        "importPath": "mid-range.dfs_component_dict_recur",
        "description": "mid-range.dfs_component_dict_recur",
        "peekOfCode": "def dfs_component_dict_recur(\n    graph: Mapping[Node, Set[Node]], start: Node, component: Optional[Set[Node]] = None\n) -> set[Node]:\n    \"\"\"Recursively find all the nodes connected to start.\"\"\"\n    if component is None:\n        component = set()\n    component.add(start)\n    for new_node in graph[start] - component:\n        dfs_component_dict_recur(graph, new_node, component)\n    return component",
        "detail": "mid-range.dfs_component_dict_recur",
        "documentation": {}
    },
    {
        "label": "dfs_component_dict_recur",
        "kind": 2,
        "importPath": "mid-range.dfs_component_dict_recur_(1)",
        "description": "mid-range.dfs_component_dict_recur_(1)",
        "peekOfCode": "def dfs_component_dict_recur(\n    graph: Mapping[Node, Set[Node]], start: Node, component: Optional[Set[Node]] = None\n) -> set[Node]:\n    \"\"\"Recursively find all the nodes connected to start.\"\"\"\n    if component is None:\n        component = set()\n    component.add(start)\n    for new_node in graph[start] - component:\n        dfs_component_dict_recur(graph, new_node, component)\n    return component",
        "detail": "mid-range.dfs_component_dict_recur_(1)",
        "documentation": {}
    },
    {
        "label": "dfs_paths_dict_recur",
        "kind": 2,
        "importPath": "mid-range.dfs_paths_dict_recur",
        "description": "mid-range.dfs_paths_dict_recur",
        "peekOfCode": "def dfs_paths_dict_recur(\n    graph: Mapping[Node, set[Node]],\n    start: Node,\n    goal: Node,\n    path: Optional[list[Node]] = None,\n) -> Iterable[list[Node]]:\n    \"\"\"Find all the paths from start to goal recursively on a dict.\"\"\"\n    if path is None:\n        path = [start]\n    if start == goal:",
        "detail": "mid-range.dfs_paths_dict_recur",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.DiameterOfBinaryTree",
        "description": "mid-range.DiameterOfBinaryTree",
        "peekOfCode": "class Solution:\n    def diameterOfBinaryTree(self, root: TreeNode) -> int:\n        self.depth = 1\n        def findDepth(first):\n            if not first:\n                return 0\n            ld = findDepth(first.left)\n            rd = findDepth(first.right)\n            self.depth = max(self.depth, ld + rd + 1)\n            return max(ld, rd) + 1",
        "detail": "mid-range.DiameterOfBinaryTree",
        "documentation": {}
    },
    {
        "label": "diameterOfBinaryTree",
        "kind": 2,
        "importPath": "mid-range.diameter_of_binary_tree",
        "description": "mid-range.diameter_of_binary_tree",
        "peekOfCode": "def diameterOfBinaryTree(root):\n    find_height(root, diameter)\n    return diameter\ndef find_height(root, diameter):\n    if root == None:\n        return 0\n    if root.left == None and root.right == None:\n        return 1\n    l_height = find_height(root.left, diameter)\n    r_height = find_height(root.right, diameter)",
        "detail": "mid-range.diameter_of_binary_tree",
        "documentation": {}
    },
    {
        "label": "find_height",
        "kind": 2,
        "importPath": "mid-range.diameter_of_binary_tree",
        "description": "mid-range.diameter_of_binary_tree",
        "peekOfCode": "def find_height(root, diameter):\n    if root == None:\n        return 0\n    if root.left == None and root.right == None:\n        return 1\n    l_height = find_height(root.left, diameter)\n    r_height = find_height(root.right, diameter)\n    total = l_height + r_height\n    if total > diameter:\n        diameter = total",
        "detail": "mid-range.diameter_of_binary_tree",
        "documentation": {}
    },
    {
        "label": "diameter",
        "kind": 5,
        "importPath": "mid-range.diameter_of_binary_tree",
        "description": "mid-range.diameter_of_binary_tree",
        "peekOfCode": "diameter = 0\ndef diameterOfBinaryTree(root):\n    find_height(root, diameter)\n    return diameter\ndef find_height(root, diameter):\n    if root == None:\n        return 0\n    if root.left == None and root.right == None:\n        return 1\n    l_height = find_height(root.left, diameter)",
        "detail": "mid-range.diameter_of_binary_tree",
        "documentation": {}
    },
    {
        "label": "actions",
        "kind": 2,
        "importPath": "mid-range.Dice_game_with_a_bot",
        "description": "mid-range.Dice_game_with_a_bot",
        "peekOfCode": "def actions(choice):\n    h_sum = b_sum = 0\n    print(\"Start playing the game now\")\n    t.sleep(1)\n    for die in range(0, choice):\n        person = random.randint(1, 6)\n        t.sleep(1)\n        print(\"human got\", person)\n        h_sum += person\n    t.sleep(1)",
        "detail": "mid-range.Dice_game_with_a_bot",
        "documentation": {}
    },
    {
        "label": "play",
        "kind": 2,
        "importPath": "mid-range.Dice_game_with_a_bot",
        "description": "mid-range.Dice_game_with_a_bot",
        "peekOfCode": "def play():\n    die = 0\n    rolling = \"\"\n    while die == 0:\n        choice = int(input(\"How many times you wamt to  be rolled?? (1-5)\"))\n        if choice > 0 and choice < 6:\n            actions(choice)\n            break\n        else:\n            print(\"Please enter the correct choice\")",
        "detail": "mid-range.Dice_game_with_a_bot",
        "documentation": {}
    },
    {
        "label": "waypoints",
        "kind": 5,
        "importPath": "mid-range.dictionaries",
        "description": "mid-range.dictionaries",
        "peekOfCode": "waypoints = [\n    {\"lat\": 43, \"lon\": -121, \"name\": \"a place\"},\n    {\"lat\": 41, \"lon\": -123, \"name\": \"another place\"},\n    {\"lat\": 43, \"lon\": -122, \"name\": \"a third place\"},\n]\n# Add a new waypoint to the list\n# YOUR CODE HERE\nwaypoints.append({\"lat\": 120, \"lon\": -11, \"name\": \"yat anothe place\"})\n# Modify the dictionary with name \"a place\" such that its longitude\n# value is -130 and change its name to \"not a real place\"",
        "detail": "mid-range.dictionaries",
        "documentation": {}
    },
    {
        "label": "waypoints[0][\"lon\"]",
        "kind": 5,
        "importPath": "mid-range.dictionaries",
        "description": "mid-range.dictionaries",
        "peekOfCode": "waypoints[0][\"lon\"] = -130\nwaypoints[0][\"name\"] = \"not a real place\"\n# Write a loop that prints out all the field values for all the waypoints\n# YOUR CODE HERE",
        "detail": "mid-range.dictionaries",
        "documentation": {}
    },
    {
        "label": "waypoints[0][\"name\"]",
        "kind": 5,
        "importPath": "mid-range.dictionaries",
        "description": "mid-range.dictionaries",
        "peekOfCode": "waypoints[0][\"name\"] = \"not a real place\"\n# Write a loop that prints out all the field values for all the waypoints\n# YOUR CODE HERE",
        "detail": "mid-range.dictionaries",
        "documentation": {}
    },
    {
        "label": "phonebook",
        "kind": 5,
        "importPath": "mid-range.dictionary",
        "description": "mid-range.dictionary",
        "peekOfCode": "phonebook = {\"ADela\": 832723, \"Tyler\": 28362}\nif \"Herb\" in phonebook:\n    print(\"Yes\")\nelse:\n    print(\"no\")\nphonebook[\"Herb\"] = 6783512873\nphonebook[\"ADela\"] = 2222222\ndel phonebook[\"Tyler\"]\nprint(phonebook.keys())\nfor k in phonebook.keys():",
        "detail": "mid-range.dictionary",
        "documentation": {}
    },
    {
        "label": "phonebook[\"Herb\"]",
        "kind": 5,
        "importPath": "mid-range.dictionary",
        "description": "mid-range.dictionary",
        "peekOfCode": "phonebook[\"Herb\"] = 6783512873\nphonebook[\"ADela\"] = 2222222\ndel phonebook[\"Tyler\"]\nprint(phonebook.keys())\nfor k in phonebook.keys():\n    print(k)\nprint(phonebook.items())\nprint(phonebook.values())\nfor key, value in phonebook.items():\n    print(key)",
        "detail": "mid-range.dictionary",
        "documentation": {}
    },
    {
        "label": "phonebook[\"ADela\"]",
        "kind": 5,
        "importPath": "mid-range.dictionary",
        "description": "mid-range.dictionary",
        "peekOfCode": "phonebook[\"ADela\"] = 2222222\ndel phonebook[\"Tyler\"]\nprint(phonebook.keys())\nfor k in phonebook.keys():\n    print(k)\nprint(phonebook.items())\nprint(phonebook.values())\nfor key, value in phonebook.items():\n    print(key)\n    print(value)",
        "detail": "mid-range.dictionary",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.dictionary_program",
        "description": "mid-range.dictionary_program",
        "peekOfCode": "d = {\"Sam\": 7, \"rolls\": [\"rock\", \"paper\", \"scissors\"], \"done\": True}\n#####################################################################\n#\n# This is unchanged from the instructions,\n# sans formatting and display of output of expected.\n# \\t means tab in Python strings.\n#\nprint(d[\"Sam\"], \"\\t\\t\\t\\t\\t\\t\\t\\t# <- outputs 7?\")\nprint(d[\"rolls\"], \"\\t# <- outputs ['rock', 'paper', 'scissors']?\")\nprint(d.get(\"Sarah\"), \"\\t\\t\\t\\t\\t\\t\\t# <- outputs None?\")",
        "detail": "mid-range.dictionary_program",
        "documentation": {}
    },
    {
        "label": "waypoints",
        "kind": 5,
        "importPath": "mid-range.dicts",
        "description": "mid-range.dicts",
        "peekOfCode": "waypoints = [\n    {\"lat\": 43, \"lon\": -121, \"name\": \"a place\"},\n    {\"lat\": 41, \"lon\": -123, \"name\": \"another place\"},\n    {\"lat\": 43, \"lon\": -122, \"name\": \"a third place\"},\n]\n# Write a loop that prints out all the field values for all the waypoints\nfor waypoint in waypoints:\n    print(waypoint[\"lat\"], waypoint[\"lon\"], waypoint[\"name\"])\n# Add a new waypoint to the list\nwaypoints.append({\"lat\": 225, \"lon\": -400, \"name\": \"number 4 the larch, the larch\"})",
        "detail": "mid-range.dicts",
        "documentation": {}
    },
    {
        "label": "Dict",
        "kind": 6,
        "importPath": "mid-range.dict_doctest",
        "description": "mid-range.dict_doctest",
        "peekOfCode": "class Dict(dict):\n    \"\"\"\n    Simple dict but also support access as x.y style.\n    >>> d1 = Dict()\n    >>> d1['x'] = 100\n    >>> d1.x\n    100\n    >>> d1.y = 200\n    >>> d1['y']\n    200",
        "detail": "mid-range.dict_doctest",
        "documentation": {}
    },
    {
        "label": "dict_factory",
        "kind": 2,
        "importPath": "mid-range.dict_factory",
        "description": "mid-range.dict_factory",
        "peekOfCode": "def dict_factory(cursor, row):\n    d = {}\n    for idx, col in enumerate(cursor.description):\n        d[col[0]] = row[idx]\n    return d\n# after dbcon\ncon.row_factory = dict_factory\ncur = con.cursor()",
        "detail": "mid-range.dict_factory",
        "documentation": {}
    },
    {
        "label": "con.row_factory",
        "kind": 5,
        "importPath": "mid-range.dict_factory",
        "description": "mid-range.dict_factory",
        "peekOfCode": "con.row_factory = dict_factory\ncur = con.cursor()",
        "detail": "mid-range.dict_factory",
        "documentation": {}
    },
    {
        "label": "cur",
        "kind": 5,
        "importPath": "mid-range.dict_factory",
        "description": "mid-range.dict_factory",
        "peekOfCode": "cur = con.cursor()",
        "detail": "mid-range.dict_factory",
        "documentation": {}
    },
    {
        "label": "Dict",
        "kind": 6,
        "importPath": "mid-range.dict_unittest",
        "description": "mid-range.dict_unittest",
        "peekOfCode": "class Dict(dict):\n    def __init__(self, **kw):\n        super(Dict, self).__init__(**kw)\n    def __getattr__(self, key):\n        try:\n            return self[key]\n        except KeyError:\n            raise AttributeError(r\"'Dict' object has no attribute '%s'\" % key)\n    def __setattr__(self, key, value):\n        self[key] = value",
        "detail": "mid-range.dict_unittest",
        "documentation": {}
    },
    {
        "label": "TestDict",
        "kind": 6,
        "importPath": "mid-range.dict_unittest",
        "description": "mid-range.dict_unittest",
        "peekOfCode": "class TestDict(unittest.TestCase):\n    def setUp(self):\n        print(\"setUp...\")\n    def tearDown(self):\n        print(\"tearDown...\")\n    def test_init(self):\n        d = Dict(a=1, b=\"test\")\n        self.assertEqual(d.a, 1)\n        self.assertEqual(d.b, \"test\")\n        self.assertTrue(isinstance(d, dict))",
        "detail": "mid-range.dict_unittest",
        "documentation": {}
    },
    {
        "label": "find_difference_matching",
        "kind": 2,
        "importPath": "mid-range.difference_testing",
        "description": "mid-range.difference_testing",
        "peekOfCode": "def find_difference_matching(x, y, diff=0):\n    res = []\n    for i in range(len(x)):\n        if abs(x[i] - y[i]) == diff:\n            res.append((x[i], y[i]))\n    return res\n# Test\na = [12, 10, 123, 76, 9990]\nb = [2, 0, 45, 66, 10000]\nresult = find_difference_matching(a, b, 10)",
        "detail": "mid-range.difference_testing",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.difference_testing",
        "description": "mid-range.difference_testing",
        "peekOfCode": "a = [12, 10, 123, 76, 9990]\nb = [2, 0, 45, 66, 10000]\nresult = find_difference_matching(a, b, 10)\nprint(\"Matches:\")\nfor i in result:\n    print(\"   \" + str(i))",
        "detail": "mid-range.difference_testing",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.difference_testing",
        "description": "mid-range.difference_testing",
        "peekOfCode": "b = [2, 0, 45, 66, 10000]\nresult = find_difference_matching(a, b, 10)\nprint(\"Matches:\")\nfor i in result:\n    print(\"   \" + str(i))",
        "detail": "mid-range.difference_testing",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "mid-range.difference_testing",
        "description": "mid-range.difference_testing",
        "peekOfCode": "result = find_difference_matching(a, b, 10)\nprint(\"Matches:\")\nfor i in result:\n    print(\"   \" + str(i))",
        "detail": "mid-range.difference_testing",
        "documentation": {}
    },
    {
        "label": "differentSquares",
        "kind": 2,
        "importPath": "mid-range.different_squares",
        "description": "mid-range.different_squares",
        "peekOfCode": "def differentSquares(matrix):\n\t\"\"\"\n\tReturn number of DIFFERENT 2 * 2 squares in rectangular matrix.\n    Time Complexity: O(N^2)\n    Space Complexity: O(N)\n\t\"\"\"\n    squares = set()\n    for i in range(len(matrix) - 1):\n        for j in range(len(matrix[i]) - 1):\n            squares.add((matrix[i][j], matrix[i][j + 1], matrix[i + 1][j], matrix[i + 1][j + 1]))",
        "detail": "mid-range.different_squares",
        "documentation": {}
    },
    {
        "label": "find_primitive",
        "kind": 2,
        "importPath": "mid-range.diffie",
        "description": "mid-range.diffie",
        "peekOfCode": "def find_primitive(n: int) -> Optional[int]:\n    for r in range(1, n):\n        li = []\n        for x in range(n - 1):\n            val = pow(r, x, n)\n            if val in li:\n                break\n            li.append(val)\n        else:\n            return r",
        "detail": "mid-range.diffie",
        "documentation": {}
    },
    {
        "label": "diff",
        "kind": 5,
        "importPath": "mid-range.difflib_context",
        "description": "mid-range.difflib_context",
        "peekOfCode": "diff = difflib.context_diff(text1_lines, text2_lines, lineterm=\"\")\nprint(\"\\n\".join(diff))",
        "detail": "mid-range.difflib_context",
        "documentation": {}
    },
    {
        "label": "text1",
        "kind": 5,
        "importPath": "mid-range.difflib_data",
        "description": "mid-range.difflib_data",
        "peekOfCode": "text1 = \"\"\"Lorem ipsum dolor sit amet, consectetuer adipiscing\nelit. Integer eu lacus accumsan arcu fermentum euismod. Donec\npulvinar porttitor tellus. Aliquam venenatis. Donec facilisis\npharetra tortor.  In nec mauris eget magna consequat\nconvalis. Nam sed sem vitae odio pellentesque interdum. Sed\nconsequat viverra nisl. Suspendisse arcu metus, blandit quis,\nrhoncus ac, pharetra eget, velit. Mauris urna. Morbi nonummy\nmolestie orci. Praesent nisi elit, fringilla ac, suscipit non,\ntristique vel, mauris. Curabitur vel lorem id nisl porta\nadipiscing. Suspendisse eu lectus. In nunc. Duis vulputate",
        "detail": "mid-range.difflib_data",
        "documentation": {}
    },
    {
        "label": "text1_lines",
        "kind": 5,
        "importPath": "mid-range.difflib_data",
        "description": "mid-range.difflib_data",
        "peekOfCode": "text1_lines = text1.splitlines()\ntext2 = \"\"\"Lorem ipsum dolor sit amet, consectetuer adipiscing\nelit. Integer eu lacus accumsan arcu fermentum euismod. Donec\npulvinar, porttitor tellus. Aliquam venenatis. Donec facilisis\npharetra tortor. In nec mauris eget magna consequat\nconvalis. Nam cras vitae mi vitae odio pellentesque interdum. Sed\nconsequat viverra nisl. Suspendisse arcu metus, blandit quis,\nrhoncus ac, pharetra eget, velit. Mauris urna. Morbi nonummy\nmolestie orci. Praesent nisi elit, fringilla ac, suscipit non,\ntristique vel, mauris. Curabitur vel lorem id nisl porta",
        "detail": "mid-range.difflib_data",
        "documentation": {}
    },
    {
        "label": "text2",
        "kind": 5,
        "importPath": "mid-range.difflib_data",
        "description": "mid-range.difflib_data",
        "peekOfCode": "text2 = \"\"\"Lorem ipsum dolor sit amet, consectetuer adipiscing\nelit. Integer eu lacus accumsan arcu fermentum euismod. Donec\npulvinar, porttitor tellus. Aliquam venenatis. Donec facilisis\npharetra tortor. In nec mauris eget magna consequat\nconvalis. Nam cras vitae mi vitae odio pellentesque interdum. Sed\nconsequat viverra nisl. Suspendisse arcu metus, blandit quis,\nrhoncus ac, pharetra eget, velit. Mauris urna. Morbi nonummy\nmolestie orci. Praesent nisi elit, fringilla ac, suscipit non,\ntristique vel, mauris. Curabitur vel lorem id nisl porta\nadipiscing. Duis vulputate tristique enim. Donec quis lectus a",
        "detail": "mid-range.difflib_data",
        "documentation": {}
    },
    {
        "label": "text2_lines",
        "kind": 5,
        "importPath": "mid-range.difflib_data",
        "description": "mid-range.difflib_data",
        "peekOfCode": "text2_lines = text2.splitlines()",
        "detail": "mid-range.difflib_data",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.difflib_differ",
        "description": "mid-range.difflib_differ",
        "peekOfCode": "d = difflib.Differ()\ndiff = d.compare(text1_lines, text2_lines)\nprint(\"\\n\".join(diff))",
        "detail": "mid-range.difflib_differ",
        "documentation": {}
    },
    {
        "label": "diff",
        "kind": 5,
        "importPath": "mid-range.difflib_differ",
        "description": "mid-range.difflib_differ",
        "peekOfCode": "diff = d.compare(text1_lines, text2_lines)\nprint(\"\\n\".join(diff))",
        "detail": "mid-range.difflib_differ",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.difflib_html",
        "description": "mid-range.difflib_html",
        "peekOfCode": "d = difflib.HtmlDiff()\nprint(d.make_table(text1_lines, text2_lines))",
        "detail": "mid-range.difflib_html",
        "documentation": {}
    },
    {
        "label": "show_results",
        "kind": 2,
        "importPath": "mid-range.difflib_junk",
        "description": "mid-range.difflib_junk",
        "peekOfCode": "def show_results(match):\n    print(\"  a    = {}\".format(match.a))\n    print(\"  b    = {}\".format(match.b))\n    print(\"  size = {}\".format(match.size))\n    i, j, k = match\n    print(\"  A[a:a+size] = {!r}\".format(A[i : i + k]))\n    print(\"  B[b:b+size] = {!r}\".format(B[j : j + k]))\nA = \" abcd\"\nB = \"abcd abcd\"\nprint(\"A = {!r}\".format(A))",
        "detail": "mid-range.difflib_junk",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "mid-range.difflib_junk",
        "description": "mid-range.difflib_junk",
        "peekOfCode": "A = \" abcd\"\nB = \"abcd abcd\"\nprint(\"A = {!r}\".format(A))\nprint(\"B = {!r}\".format(B))\nprint(\"\\nWithout junk detection:\")\ns1 = SequenceMatcher(None, A, B)\nmatch1 = s1.find_longest_match(0, len(A), 0, len(B))\nshow_results(match1)\nprint(\"\\nTreat spaces as junk:\")\ns2 = SequenceMatcher(lambda x: x == \" \", A, B)",
        "detail": "mid-range.difflib_junk",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": "mid-range.difflib_junk",
        "description": "mid-range.difflib_junk",
        "peekOfCode": "B = \"abcd abcd\"\nprint(\"A = {!r}\".format(A))\nprint(\"B = {!r}\".format(B))\nprint(\"\\nWithout junk detection:\")\ns1 = SequenceMatcher(None, A, B)\nmatch1 = s1.find_longest_match(0, len(A), 0, len(B))\nshow_results(match1)\nprint(\"\\nTreat spaces as junk:\")\ns2 = SequenceMatcher(lambda x: x == \" \", A, B)\nmatch2 = s2.find_longest_match(0, len(A), 0, len(B))",
        "detail": "mid-range.difflib_junk",
        "documentation": {}
    },
    {
        "label": "print(\"A",
        "kind": 5,
        "importPath": "mid-range.difflib_junk",
        "description": "mid-range.difflib_junk",
        "peekOfCode": "print(\"A = {!r}\".format(A))\nprint(\"B = {!r}\".format(B))\nprint(\"\\nWithout junk detection:\")\ns1 = SequenceMatcher(None, A, B)\nmatch1 = s1.find_longest_match(0, len(A), 0, len(B))\nshow_results(match1)\nprint(\"\\nTreat spaces as junk:\")\ns2 = SequenceMatcher(lambda x: x == \" \", A, B)\nmatch2 = s2.find_longest_match(0, len(A), 0, len(B))\nshow_results(match2)",
        "detail": "mid-range.difflib_junk",
        "documentation": {}
    },
    {
        "label": "print(\"B",
        "kind": 5,
        "importPath": "mid-range.difflib_junk",
        "description": "mid-range.difflib_junk",
        "peekOfCode": "print(\"B = {!r}\".format(B))\nprint(\"\\nWithout junk detection:\")\ns1 = SequenceMatcher(None, A, B)\nmatch1 = s1.find_longest_match(0, len(A), 0, len(B))\nshow_results(match1)\nprint(\"\\nTreat spaces as junk:\")\ns2 = SequenceMatcher(lambda x: x == \" \", A, B)\nmatch2 = s2.find_longest_match(0, len(A), 0, len(B))\nshow_results(match2)",
        "detail": "mid-range.difflib_junk",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "mid-range.difflib_junk",
        "description": "mid-range.difflib_junk",
        "peekOfCode": "s1 = SequenceMatcher(None, A, B)\nmatch1 = s1.find_longest_match(0, len(A), 0, len(B))\nshow_results(match1)\nprint(\"\\nTreat spaces as junk:\")\ns2 = SequenceMatcher(lambda x: x == \" \", A, B)\nmatch2 = s2.find_longest_match(0, len(A), 0, len(B))\nshow_results(match2)",
        "detail": "mid-range.difflib_junk",
        "documentation": {}
    },
    {
        "label": "match1",
        "kind": 5,
        "importPath": "mid-range.difflib_junk",
        "description": "mid-range.difflib_junk",
        "peekOfCode": "match1 = s1.find_longest_match(0, len(A), 0, len(B))\nshow_results(match1)\nprint(\"\\nTreat spaces as junk:\")\ns2 = SequenceMatcher(lambda x: x == \" \", A, B)\nmatch2 = s2.find_longest_match(0, len(A), 0, len(B))\nshow_results(match2)",
        "detail": "mid-range.difflib_junk",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "mid-range.difflib_junk",
        "description": "mid-range.difflib_junk",
        "peekOfCode": "s2 = SequenceMatcher(lambda x: x == \" \", A, B)\nmatch2 = s2.find_longest_match(0, len(A), 0, len(B))\nshow_results(match2)",
        "detail": "mid-range.difflib_junk",
        "documentation": {}
    },
    {
        "label": "match2",
        "kind": 5,
        "importPath": "mid-range.difflib_junk",
        "description": "mid-range.difflib_junk",
        "peekOfCode": "match2 = s2.find_longest_match(0, len(A), 0, len(B))\nshow_results(match2)",
        "detail": "mid-range.difflib_junk",
        "documentation": {}
    },
    {
        "label": "diff",
        "kind": 5,
        "importPath": "mid-range.difflib_ndiff",
        "description": "mid-range.difflib_ndiff",
        "peekOfCode": "diff = difflib.ndiff(text1_lines, text2_lines)\nprint(\"\\n\".join(diff))",
        "detail": "mid-range.difflib_ndiff",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "mid-range.difflib_seq",
        "description": "mid-range.difflib_seq",
        "peekOfCode": "s1 = [1, 2, 3, 5, 6, 4]\ns2 = [2, 3, 5, 4, 6, 1]\nprint(\"Initial data:\")\nprint(\"s1 =\", s1)\nprint(\"s2 =\", s2)\nprint(\"s1 == s2:\", s1 == s2)\nprint()\nmatcher = difflib.SequenceMatcher(None, s1, s2)\nfor tag, i1, i2, j1, j2 in reversed(matcher.get_opcodes()):\n    if tag == \"delete\":",
        "detail": "mid-range.difflib_seq",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "mid-range.difflib_seq",
        "description": "mid-range.difflib_seq",
        "peekOfCode": "s2 = [2, 3, 5, 4, 6, 1]\nprint(\"Initial data:\")\nprint(\"s1 =\", s1)\nprint(\"s2 =\", s2)\nprint(\"s1 == s2:\", s1 == s2)\nprint()\nmatcher = difflib.SequenceMatcher(None, s1, s2)\nfor tag, i1, i2, j1, j2 in reversed(matcher.get_opcodes()):\n    if tag == \"delete\":\n        print(\"Remove {} from positions [{}:{}]\".format(s1[i1:i2], i1, i2))",
        "detail": "mid-range.difflib_seq",
        "documentation": {}
    },
    {
        "label": "matcher",
        "kind": 5,
        "importPath": "mid-range.difflib_seq",
        "description": "mid-range.difflib_seq",
        "peekOfCode": "matcher = difflib.SequenceMatcher(None, s1, s2)\nfor tag, i1, i2, j1, j2 in reversed(matcher.get_opcodes()):\n    if tag == \"delete\":\n        print(\"Remove {} from positions [{}:{}]\".format(s1[i1:i2], i1, i2))\n        print(\"  before =\", s1)\n        del s1[i1:i2]\n    elif tag == \"equal\":\n        print(\"s1[{}:{}] and s2[{}:{}] are the same\".format(i1, i2, j1, j2))\n    elif tag == \"insert\":\n        print(\"Insert {} from s2[{}:{}] into s1 at {}\".format(s2[j1:j2], j1, j2, i1))",
        "detail": "mid-range.difflib_seq",
        "documentation": {}
    },
    {
        "label": "diff",
        "kind": 5,
        "importPath": "mid-range.difflib_unified",
        "description": "mid-range.difflib_unified",
        "peekOfCode": "diff = difflib.unified_diff(text1_lines, text2_lines, lineterm=\"\")\nprint(\"\\n\".join(diff))",
        "detail": "mid-range.difflib_unified",
        "documentation": {}
    },
    {
        "label": "deleteDigit",
        "kind": 2,
        "importPath": "mid-range.Digit",
        "description": "mid-range.Digit",
        "peekOfCode": "def deleteDigit(n):\n    num = str(n)\n    result = list(int(\"\".join(num[:i] + num[1 + i :])) for i in range(len(num)))\n    return max(result)",
        "detail": "mid-range.Digit",
        "documentation": {}
    },
    {
        "label": "seq2str",
        "kind": 2,
        "importPath": "mid-range.digits",
        "description": "mid-range.digits",
        "peekOfCode": "def seq2str(q):\n    return \"\".join(str(c) for c in q)\ndef sdigits(n):\n    return (c for c in str(n))\ndef digits(n):\n    return (int(c) for c in str(n))\ndef sorted_digits(n):\n    return tuple(sorted(digits(n)))\ndef last_k_digits(k, n):\n    return n % (10 ** k)",
        "detail": "mid-range.digits",
        "documentation": {}
    },
    {
        "label": "sdigits",
        "kind": 2,
        "importPath": "mid-range.digits",
        "description": "mid-range.digits",
        "peekOfCode": "def sdigits(n):\n    return (c for c in str(n))\ndef digits(n):\n    return (int(c) for c in str(n))\ndef sorted_digits(n):\n    return tuple(sorted(digits(n)))\ndef last_k_digits(k, n):\n    return n % (10 ** k)\n@memoize\ndef digits_upto(k, i=0):",
        "detail": "mid-range.digits",
        "documentation": {}
    },
    {
        "label": "digits",
        "kind": 2,
        "importPath": "mid-range.digits",
        "description": "mid-range.digits",
        "peekOfCode": "def digits(n):\n    return (int(c) for c in str(n))\ndef sorted_digits(n):\n    return tuple(sorted(digits(n)))\ndef last_k_digits(k, n):\n    return n % (10 ** k)\n@memoize\ndef digits_upto(k, i=0):\n    return seq2str(range(i, min(k + 1, 10)))\ndef digits_downfrom(k, i=0):",
        "detail": "mid-range.digits",
        "documentation": {}
    },
    {
        "label": "sorted_digits",
        "kind": 2,
        "importPath": "mid-range.digits",
        "description": "mid-range.digits",
        "peekOfCode": "def sorted_digits(n):\n    return tuple(sorted(digits(n)))\ndef last_k_digits(k, n):\n    return n % (10 ** k)\n@memoize\ndef digits_upto(k, i=0):\n    return seq2str(range(i, min(k + 1, 10)))\ndef digits_downfrom(k, i=0):\n    return seq2str(range(min(k + 1, 10), i, -1))\ndef sorted_digits_str(n):",
        "detail": "mid-range.digits",
        "documentation": {}
    },
    {
        "label": "last_k_digits",
        "kind": 2,
        "importPath": "mid-range.digits",
        "description": "mid-range.digits",
        "peekOfCode": "def last_k_digits(k, n):\n    return n % (10 ** k)\n@memoize\ndef digits_upto(k, i=0):\n    return seq2str(range(i, min(k + 1, 10)))\ndef digits_downfrom(k, i=0):\n    return seq2str(range(min(k + 1, 10), i, -1))\ndef sorted_digits_str(n):\n    return seq2str(sorted(str(n)))\ndef is_semi_pandigital(n):",
        "detail": "mid-range.digits",
        "documentation": {}
    },
    {
        "label": "digits_upto",
        "kind": 2,
        "importPath": "mid-range.digits",
        "description": "mid-range.digits",
        "peekOfCode": "def digits_upto(k, i=0):\n    return seq2str(range(i, min(k + 1, 10)))\ndef digits_downfrom(k, i=0):\n    return seq2str(range(min(k + 1, 10), i, -1))\ndef sorted_digits_str(n):\n    return seq2str(sorted(str(n)))\ndef is_semi_pandigital(n):\n    s = str(n)\n    return \"0\" not in s and len(s) == len(set(s))\ndef is_pandigital(n):",
        "detail": "mid-range.digits",
        "documentation": {}
    },
    {
        "label": "digits_downfrom",
        "kind": 2,
        "importPath": "mid-range.digits",
        "description": "mid-range.digits",
        "peekOfCode": "def digits_downfrom(k, i=0):\n    return seq2str(range(min(k + 1, 10), i, -1))\ndef sorted_digits_str(n):\n    return seq2str(sorted(str(n)))\ndef is_semi_pandigital(n):\n    s = str(n)\n    return \"0\" not in s and len(s) == len(set(s))\ndef is_pandigital(n):\n    d = str(n)\n    return sorted(d) == list(digits_upto(len(d), 1))",
        "detail": "mid-range.digits",
        "documentation": {}
    },
    {
        "label": "sorted_digits_str",
        "kind": 2,
        "importPath": "mid-range.digits",
        "description": "mid-range.digits",
        "peekOfCode": "def sorted_digits_str(n):\n    return seq2str(sorted(str(n)))\ndef is_semi_pandigital(n):\n    s = str(n)\n    return \"0\" not in s and len(s) == len(set(s))\ndef is_pandigital(n):\n    d = str(n)\n    return sorted(d) == list(digits_upto(len(d), 1))\ndef digit_rotations(n):\n    d = str(n)",
        "detail": "mid-range.digits",
        "documentation": {}
    },
    {
        "label": "is_semi_pandigital",
        "kind": 2,
        "importPath": "mid-range.digits",
        "description": "mid-range.digits",
        "peekOfCode": "def is_semi_pandigital(n):\n    s = str(n)\n    return \"0\" not in s and len(s) == len(set(s))\ndef is_pandigital(n):\n    d = str(n)\n    return sorted(d) == list(digits_upto(len(d), 1))\ndef digit_rotations(n):\n    d = str(n)\n    for i in range(len(d)):\n        yield int(d[i:] + d[:i])",
        "detail": "mid-range.digits",
        "documentation": {}
    },
    {
        "label": "is_pandigital",
        "kind": 2,
        "importPath": "mid-range.digits",
        "description": "mid-range.digits",
        "peekOfCode": "def is_pandigital(n):\n    d = str(n)\n    return sorted(d) == list(digits_upto(len(d), 1))\ndef digit_rotations(n):\n    d = str(n)\n    for i in range(len(d)):\n        yield int(d[i:] + d[:i])",
        "detail": "mid-range.digits",
        "documentation": {}
    },
    {
        "label": "digit_rotations",
        "kind": 2,
        "importPath": "mid-range.digits",
        "description": "mid-range.digits",
        "peekOfCode": "def digit_rotations(n):\n    d = str(n)\n    for i in range(len(d)):\n        yield int(d[i:] + d[:i])",
        "detail": "mid-range.digits",
        "documentation": {}
    },
    {
        "label": "evenDigitsOnly",
        "kind": 2,
        "importPath": "mid-range.DigitsOnly",
        "description": "mid-range.DigitsOnly",
        "peekOfCode": "def evenDigitsOnly(n):\n    digits_of_n = []\n    while n > 0:\n        rem = n % 10\n        digits_of_n.append(rem)\n        n = int(n / 10)\n    for i in range(len(digits_of_n)):\n        if digits_of_n[i] % 2 != 0:\n            return False\n    return True",
        "detail": "mid-range.DigitsOnly",
        "documentation": {}
    },
    {
        "label": "longestDigitsPrefix",
        "kind": 2,
        "importPath": "mid-range.DigitsPrefix",
        "description": "mid-range.DigitsPrefix",
        "peekOfCode": "def longestDigitsPrefix(inputString):\n    count = 0\n    for i in range(len(inputString)):\n        if inputString[i].isdigit():\n            count += 1\n        else:\n            return inputString[0:count]\n    return inputString",
        "detail": "mid-range.DigitsPrefix",
        "documentation": {}
    },
    {
        "label": "digitsProduct",
        "kind": 2,
        "importPath": "mid-range.digits_product",
        "description": "mid-range.digits_product",
        "peekOfCode": "def digitsProduct(product):\n    \"\"\"\n    Given an integer product, find the smallest \n    positive (i.e. greater than 0) integer the \n    product of whose digits is equal to product. \n    If there is no such integer, return -1 instead.\n    Time Complexity: O(inf)\n    Space Complexity: O(1)\n    \"\"\"\n    number = 1",
        "detail": "mid-range.digits_product",
        "documentation": {}
    },
    {
        "label": "digitDegree",
        "kind": 2,
        "importPath": "mid-range.digit_degree",
        "description": "mid-range.digit_degree",
        "peekOfCode": "def digitDegree(n):\n    number, degree = str(n), 0\n    while len(number) != 1:\n        number = str(sum([int(digit) for digit in number]))\n        degree += 1\n    return degree",
        "detail": "mid-range.digit_degree",
        "documentation": {}
    },
    {
        "label": "printDist",
        "kind": 2,
        "importPath": "mid-range.dijkstra",
        "description": "mid-range.dijkstra",
        "peekOfCode": "def printDist(dist, V):\n    print(\"\\nVertex Distance\")\n    for i in range(V):\n        if dist[i] != float(\"inf\"):\n            print(i, \"\\t\", int(dist[i]), end=\"\\t\")\n        else:\n            print(i, \"\\t\", \"INF\", end=\"\\t\")\n        print()\ndef minDist(mdist, vset, V):\n    minVal = float(\"inf\")",
        "detail": "mid-range.dijkstra",
        "documentation": {}
    },
    {
        "label": "minDist",
        "kind": 2,
        "importPath": "mid-range.dijkstra",
        "description": "mid-range.dijkstra",
        "peekOfCode": "def minDist(mdist, vset, V):\n    minVal = float(\"inf\")\n    minInd = -1\n    for i in range(V):\n        if (not vset[i]) and mdist[i] < minVal:\n            minInd = i\n            minVal = mdist[i]\n    return minInd\ndef Dijkstra(graph, V, src):\n    mdist = [float(\"inf\") for i in range(V)]",
        "detail": "mid-range.dijkstra",
        "documentation": {}
    },
    {
        "label": "Dijkstra",
        "kind": 2,
        "importPath": "mid-range.dijkstra",
        "description": "mid-range.dijkstra",
        "peekOfCode": "def Dijkstra(graph, V, src):\n    mdist = [float(\"inf\") for i in range(V)]\n    vset = [False for i in range(V)]\n    mdist[src] = 0.0\n    for i in range(V - 1):\n        u = minDist(mdist, vset, V)\n        vset[u] = True\n        for v in range(V):\n            if (\n                (not vset[v])",
        "detail": "mid-range.dijkstra",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 5,
        "importPath": "mid-range.dijkstra",
        "description": "mid-range.dijkstra",
        "peekOfCode": "V = int(input(\"Enter number of vertices: \"))\nE = int(input(\"Enter number of edges: \"))\ngraph = [[float(\"inf\") for i in range(V)] for j in range(V)]\nfor i in range(V):\n    graph[i][i] = 0.0\nfor i in range(E):\n    print(\"\\nEdge \", i + 1)\n    src = int(input(\"Enter source:\"))\n    dst = int(input(\"Enter destination:\"))\n    weight = float(input(\"Enter weight:\"))",
        "detail": "mid-range.dijkstra",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 5,
        "importPath": "mid-range.dijkstra",
        "description": "mid-range.dijkstra",
        "peekOfCode": "E = int(input(\"Enter number of edges: \"))\ngraph = [[float(\"inf\") for i in range(V)] for j in range(V)]\nfor i in range(V):\n    graph[i][i] = 0.0\nfor i in range(E):\n    print(\"\\nEdge \", i + 1)\n    src = int(input(\"Enter source:\"))\n    dst = int(input(\"Enter destination:\"))\n    weight = float(input(\"Enter weight:\"))\n    graph[src][dst] = weight",
        "detail": "mid-range.dijkstra",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "mid-range.dijkstra",
        "description": "mid-range.dijkstra",
        "peekOfCode": "graph = [[float(\"inf\") for i in range(V)] for j in range(V)]\nfor i in range(V):\n    graph[i][i] = 0.0\nfor i in range(E):\n    print(\"\\nEdge \", i + 1)\n    src = int(input(\"Enter source:\"))\n    dst = int(input(\"Enter destination:\"))\n    weight = float(input(\"Enter weight:\"))\n    graph[src][dst] = weight\ngsrc = int(input(\"\\nEnter shortest path source:\"))",
        "detail": "mid-range.dijkstra",
        "documentation": {}
    },
    {
        "label": "gsrc",
        "kind": 5,
        "importPath": "mid-range.dijkstra",
        "description": "mid-range.dijkstra",
        "peekOfCode": "gsrc = int(input(\"\\nEnter shortest path source:\"))\nDijkstra(graph, V, gsrc)",
        "detail": "mid-range.dijkstra",
        "documentation": {}
    },
    {
        "label": "dijkstras_distances_min",
        "kind": 2,
        "importPath": "mid-range.dijkstras_distances_min",
        "description": "mid-range.dijkstras_distances_min",
        "peekOfCode": "def dijkstras_distances_min(\n    graph: Mapping[Node, Mapping[Node, Rational]], start: Node\n) -> dict[Node:Rational]:\n    \"\"\"Find the minimum distance from start to all connected nodes on a directed, weighted graph.\"\"\"\n    distances = dict.fromkeys(graph, inf)\n    distances[start] = 0\n    unvisited = set(graph)\n    while unvisited:\n        # Using min like this increases the time complexity compared to a priority queue, but it simplifies things.\n        node = min(unvisited, key=distances.__getitem__)",
        "detail": "mid-range.dijkstras_distances_min",
        "documentation": {}
    },
    {
        "label": "dijkstras_distances_min",
        "kind": 2,
        "importPath": "mid-range.dijkstras_distances_min_(1)",
        "description": "mid-range.dijkstras_distances_min_(1)",
        "peekOfCode": "def dijkstras_distances_min(\n    graph: Mapping[Node, Mapping[Node, Rational]], start: Node\n) -> dict[Node:Rational]:\n    \"\"\"Find the minimum distance from start to all connected nodes on a directed, weighted graph.\"\"\"\n    distances = dict.fromkeys(graph, inf)\n    distances[start] = 0\n    unvisited = set(graph)\n    while unvisited:\n        # Using min like this increases the time complexity compared to a priority queue, but it simplifies things.\n        node = min(unvisited, key=distances.__getitem__)",
        "detail": "mid-range.dijkstras_distances_min_(1)",
        "documentation": {}
    },
    {
        "label": "dijkstras_path_pq",
        "kind": 2,
        "importPath": "mid-range.dijkstras_path_pq",
        "description": "mid-range.dijkstras_path_pq",
        "peekOfCode": "def dijkstras_path_pq(\n    graph: Mapping[Node, Mapping[Node, Real]], start: Node, goal: Node\n) -> dict[Node, Optional[Node]]:\n    \"\"\"Find the shortest path from start to goal in a directed, weighted graph. Return it as a parents dict.\"\"\"\n    distances = {start: 0}\n    parents = {start: None}\n    visited = set()\n    to_visit = [(0, start)]\n    while to_visit:\n        distance, node = heappop(to_visit)",
        "detail": "mid-range.dijkstras_path_pq",
        "documentation": {}
    },
    {
        "label": "dijkstras_path_pq",
        "kind": 2,
        "importPath": "mid-range.dijkstras_path_pq_(1)",
        "description": "mid-range.dijkstras_path_pq_(1)",
        "peekOfCode": "def dijkstras_path_pq(\n    graph: Mapping[Node, Mapping[Node, Real]], start: Node, goal: Node\n) -> dict[Node, Optional[Node]]:\n    \"\"\"Find the shortest path from start to goal in a directed, weighted graph. Return it as a parents dict.\"\"\"\n    distances = {start: 0}\n    parents = {start: None}\n    visited = set()\n    to_visit = [(0, start)]\n    while to_visit:\n        distance, node = heappop(to_visit)",
        "detail": "mid-range.dijkstras_path_pq_(1)",
        "documentation": {}
    },
    {
        "label": "printDist",
        "kind": 2,
        "importPath": "mid-range.dijkstra_2",
        "description": "mid-range.dijkstra_2",
        "peekOfCode": "def printDist(dist, V):\n    print(\"\\nVertex Distance\")\n    for i in range(V):\n        if dist[i] != float(\"inf\"):\n            print(i, \"\\t\", int(dist[i]), end=\"\\t\")\n        else:\n            print(i, \"\\t\", \"INF\", end=\"\\t\")\n        print()\ndef minDist(mdist, vset, V):\n    minVal = float(\"inf\")",
        "detail": "mid-range.dijkstra_2",
        "documentation": {}
    },
    {
        "label": "minDist",
        "kind": 2,
        "importPath": "mid-range.dijkstra_2",
        "description": "mid-range.dijkstra_2",
        "peekOfCode": "def minDist(mdist, vset, V):\n    minVal = float(\"inf\")\n    minInd = -1\n    for i in range(V):\n        if (not vset[i]) and mdist[i] < minVal:\n            minInd = i\n            minVal = mdist[i]\n    return minInd\ndef Dijkstra(graph, V, src):\n    mdist = [float(\"inf\") for i in range(V)]",
        "detail": "mid-range.dijkstra_2",
        "documentation": {}
    },
    {
        "label": "Dijkstra",
        "kind": 2,
        "importPath": "mid-range.dijkstra_2",
        "description": "mid-range.dijkstra_2",
        "peekOfCode": "def Dijkstra(graph, V, src):\n    mdist = [float(\"inf\") for i in range(V)]\n    vset = [False for i in range(V)]\n    mdist[src] = 0.0\n    for i in range(V - 1):\n        u = minDist(mdist, vset, V)\n        vset[u] = True\n        for v in range(V):\n            if (\n                (not vset[v])",
        "detail": "mid-range.dijkstra_2",
        "documentation": {}
    },
    {
        "label": "tempdir",
        "kind": 2,
        "importPath": "mid-range.dirtools",
        "description": "mid-range.dirtools",
        "peekOfCode": "def tempdir():\n    \"\"\"Create a temporary directory in a context manager.\"\"\"\n    td = tempfile.mkdtemp()\n    try:\n        yield td\n    finally:\n        shutil.rmtree(td)\ndef mkdir_p(*args, **kwargs):\n    \"\"\"Like `mkdir`, but does not raise an exception if the\n    directory already exists.",
        "detail": "mid-range.dirtools",
        "documentation": {}
    },
    {
        "label": "mkdir_p",
        "kind": 2,
        "importPath": "mid-range.dirtools",
        "description": "mid-range.dirtools",
        "peekOfCode": "def mkdir_p(*args, **kwargs):\n    \"\"\"Like `mkdir`, but does not raise an exception if the\n    directory already exists.\n    \"\"\"\n    try:\n        return os.mkdir(*args, **kwargs)\n    except OSError as exc:\n        if exc.errno != errno.EEXIST:\n            raise\ndef dir_to_zipfile(root):",
        "detail": "mid-range.dirtools",
        "documentation": {}
    },
    {
        "label": "dir_to_zipfile",
        "kind": 2,
        "importPath": "mid-range.dirtools",
        "description": "mid-range.dirtools",
        "peekOfCode": "def dir_to_zipfile(root):\n    \"\"\"Construct an in-memory zip file for a directory.\"\"\"\n    buffer = io.BytesIO()\n    zip_file = zipfile.ZipFile(buffer, \"w\")\n    for root, dirs, files in os.walk(root):\n        for path in dirs:\n            fs_path = os.path.join(root, path)\n            rel_path = os.path.relpath(fs_path, root)\n            zip_file.writestr(rel_path + \"/\", \"\")\n        for path in files:",
        "detail": "mid-range.dirtools",
        "documentation": {}
    },
    {
        "label": "percToDiscount",
        "kind": 2,
        "importPath": "mid-range.discount",
        "description": "mid-range.discount",
        "peekOfCode": "def percToDiscount(percent, mp):\n    discount = percent / 100 * mp\n    return \"Discount is : \" + str(discount)\nprint(\"Hello\\n\")\nprint(\"Press Enter to exit\")\nwhile (\n    True\n):  # I've put counting discount in a loop cause if you want to count on multiple items\n    more = str(input(\"Count or End : \"))\n    if more == \"Count\":",
        "detail": "mid-range.discount",
        "documentation": {}
    },
    {
        "label": "iLoveDiscount",
        "kind": 2,
        "importPath": "mid-range.discountPercent",
        "description": "mid-range.discountPercent",
        "peekOfCode": "def iLoveDiscount(discount, mp):  # mp is market price\n    discountPerc = discount / mp * 100\n    return \"Discount is \" + str(discountPerc) + \"%\"\nprint(\"Hello\\n\")\nprint(\"Press Enter to exit\")\nwhile (\n    True\n):  # I've put counting discount in a loop cause if you want to count on multiple items\n    more = str(input(\"Count or End : \"))\n    if more == \"Count\":",
        "detail": "mid-range.discountPercent",
        "documentation": {}
    },
    {
        "label": "Discover",
        "kind": 6,
        "importPath": "mid-range.discover",
        "description": "mid-range.discover",
        "peekOfCode": "class Discover(object):\n    \"\"\"Discover and provide the requested Python interpreter\"\"\"\n    @classmethod\n    def add_parser_arguments(cls, parser):\n        \"\"\"Add CLI arguments for this discovery mechanisms.\n        :param parser: the CLI parser\n        \"\"\"\n        raise NotImplementedError\n    # noinspection PyUnusedLocal\n    def __init__(self, options):",
        "detail": "mid-range.discover",
        "documentation": {}
    },
    {
        "label": "Discovery",
        "kind": 6,
        "importPath": "mid-range.discovery",
        "description": "mid-range.discovery",
        "peekOfCode": "class Discovery(PluginLoader):\n    \"\"\" \"\"\"\ndef get_discover(parser, args):\n    discover_types = Discovery.entry_points_for(\"virtualenv.discovery\")\n    discovery_parser = parser.add_argument_group(\n        title=\"discovery\", description=\"discover and provide a target interpreter\"\n    )\n    choices = _get_default_discovery(discover_types)\n    # prefer the builtin if present, otherwise fallback to first defined type\n    choices = sorted(choices, key=lambda a: 0 if a == \"builtin\" else 1)",
        "detail": "mid-range.discovery",
        "documentation": {}
    },
    {
        "label": "get_discover",
        "kind": 2,
        "importPath": "mid-range.discovery",
        "description": "mid-range.discovery",
        "peekOfCode": "def get_discover(parser, args):\n    discover_types = Discovery.entry_points_for(\"virtualenv.discovery\")\n    discovery_parser = parser.add_argument_group(\n        title=\"discovery\", description=\"discover and provide a target interpreter\"\n    )\n    choices = _get_default_discovery(discover_types)\n    # prefer the builtin if present, otherwise fallback to first defined type\n    choices = sorted(choices, key=lambda a: 0 if a == \"builtin\" else 1)\n    discovery_parser.add_argument(\n        \"--discovery\",",
        "detail": "mid-range.discovery",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "mid-range.disjoint_set",
        "description": "mid-range.disjoint_set",
        "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.data = data\ndef make_set(x):\n    \"\"\"\n    make x as a set.\n    \"\"\"\n    # rank is the distance from x to its' parent\n    # root's rank is 0\n    x.rank = 0",
        "detail": "mid-range.disjoint_set",
        "documentation": {}
    },
    {
        "label": "make_set",
        "kind": 2,
        "importPath": "mid-range.disjoint_set",
        "description": "mid-range.disjoint_set",
        "peekOfCode": "def make_set(x):\n    \"\"\"\n    make x as a set.\n    \"\"\"\n    # rank is the distance from x to its' parent\n    # root's rank is 0\n    x.rank = 0\n    x.parent = x\ndef union_set(x, y):\n    \"\"\"",
        "detail": "mid-range.disjoint_set",
        "documentation": {}
    },
    {
        "label": "union_set",
        "kind": 2,
        "importPath": "mid-range.disjoint_set",
        "description": "mid-range.disjoint_set",
        "peekOfCode": "def union_set(x, y):\n    \"\"\"\n    union two sets.\n    set with bigger rank should be parent, so that the\n    disjoint set tree will be more flat.\n    \"\"\"\n    x, y = find_set(x), find_set(y)\n    if x.rank > y.rank:\n        y.parent = x\n    else:",
        "detail": "mid-range.disjoint_set",
        "documentation": {}
    },
    {
        "label": "find_set",
        "kind": 2,
        "importPath": "mid-range.disjoint_set",
        "description": "mid-range.disjoint_set",
        "peekOfCode": "def find_set(x):\n    \"\"\"\n    return the parent of x\n    \"\"\"\n    if x != x.parent:\n        x.parent = find_set(x.parent)\n    return x.parent\ndef find_python_set(node: Node) -> set:\n    \"\"\"\n    Return a Python Standard Library set that contains i.",
        "detail": "mid-range.disjoint_set",
        "documentation": {}
    },
    {
        "label": "find_python_set",
        "kind": 2,
        "importPath": "mid-range.disjoint_set",
        "description": "mid-range.disjoint_set",
        "peekOfCode": "def find_python_set(node: Node) -> set:\n    \"\"\"\n    Return a Python Standard Library set that contains i.\n    \"\"\"\n    sets = ({0, 1, 2}, {3, 4, 5})\n    for s in sets:\n        if node.data in s:\n            return s\n    raise ValueError(f\"{node.data} is not in {sets}\")\ndef test_disjoint_set():",
        "detail": "mid-range.disjoint_set",
        "documentation": {}
    },
    {
        "label": "test_disjoint_set",
        "kind": 2,
        "importPath": "mid-range.disjoint_set",
        "description": "mid-range.disjoint_set",
        "peekOfCode": "def test_disjoint_set():\n    \"\"\"\n    >>> test_disjoint_set()\n    \"\"\"\n    vertex = [Node(i) for i in range(6)]\n    for v in vertex:\n        make_set(v)\n    union_set(vertex[0], vertex[1])\n    union_set(vertex[1], vertex[2])\n    union_set(vertex[3], vertex[4])",
        "detail": "mid-range.disjoint_set",
        "documentation": {}
    },
    {
        "label": "get_length",
        "kind": 2,
        "importPath": "mid-range.disk_usage",
        "description": "mid-range.disk_usage",
        "peekOfCode": "def get_length(space, total_space=total_space):\n    # Gives value of length of data\n    percent = (space / total_space) * MAX_LENGTH\n    return int(percent)\n# Transform to appropriate length\ntotal_space_len, used_space_len, free_space_len = get_length(total_space), get_length(used_space),\\\n    get_length(free_space)\ndef get_value_bar(space_value, space_len, bgcolor, space_name, reset=reset):\n    # Generates printable bar for display\n    # Space value - value of space to display",
        "detail": "mid-range.disk_usage",
        "documentation": {}
    },
    {
        "label": "get_value_bar",
        "kind": 2,
        "importPath": "mid-range.disk_usage",
        "description": "mid-range.disk_usage",
        "peekOfCode": "def get_value_bar(space_value, space_len, bgcolor, space_name, reset=reset):\n    # Generates printable bar for display\n    # Space value - value of space to display\n    # bgcolor - selects background colour\n    # space_name - The name of the space, total space, used space\n    # or free space\n    # reset - resets the coloured output\n    space_val_gb = round(space_value / bytes_to_giga_bytes, 2)\n    left_len = \" \" * (space_len)\n    output_string = f\"{space_name}\\t{space_val_gb} GB\\t{bgcolor} {left_len} {reset}\"",
        "detail": "mid-range.disk_usage",
        "documentation": {}
    },
    {
        "label": "bytes_to_giga_bytes",
        "kind": 5,
        "importPath": "mid-range.disk_usage",
        "description": "mid-range.disk_usage",
        "peekOfCode": "bytes_to_giga_bytes = 1024 * 1024 * 1024\nblue_bg = u\"\\u001b[44;1m\"  # Blue\ngreen_bg = u\"\\u001b[42;1m\"  # Green\nred_bg = u\"\\u001b[41;1m\"  # red\nreset = u\"\\u001b[0m\"  # make output non sticky\nMAX_LENGTH = int(os.get_terminal_size().columns * 0.25)\n# ---------------------------------------------\n# Get disk usage analysis\ntotal_space, used_space, free_space = shutil.disk_usage(os.getcwd())\ndef get_length(space, total_space=total_space):",
        "detail": "mid-range.disk_usage",
        "documentation": {}
    },
    {
        "label": "blue_bg",
        "kind": 5,
        "importPath": "mid-range.disk_usage",
        "description": "mid-range.disk_usage",
        "peekOfCode": "blue_bg = u\"\\u001b[44;1m\"  # Blue\ngreen_bg = u\"\\u001b[42;1m\"  # Green\nred_bg = u\"\\u001b[41;1m\"  # red\nreset = u\"\\u001b[0m\"  # make output non sticky\nMAX_LENGTH = int(os.get_terminal_size().columns * 0.25)\n# ---------------------------------------------\n# Get disk usage analysis\ntotal_space, used_space, free_space = shutil.disk_usage(os.getcwd())\ndef get_length(space, total_space=total_space):\n    # Gives value of length of data",
        "detail": "mid-range.disk_usage",
        "documentation": {}
    },
    {
        "label": "green_bg",
        "kind": 5,
        "importPath": "mid-range.disk_usage",
        "description": "mid-range.disk_usage",
        "peekOfCode": "green_bg = u\"\\u001b[42;1m\"  # Green\nred_bg = u\"\\u001b[41;1m\"  # red\nreset = u\"\\u001b[0m\"  # make output non sticky\nMAX_LENGTH = int(os.get_terminal_size().columns * 0.25)\n# ---------------------------------------------\n# Get disk usage analysis\ntotal_space, used_space, free_space = shutil.disk_usage(os.getcwd())\ndef get_length(space, total_space=total_space):\n    # Gives value of length of data\n    percent = (space / total_space) * MAX_LENGTH",
        "detail": "mid-range.disk_usage",
        "documentation": {}
    },
    {
        "label": "red_bg",
        "kind": 5,
        "importPath": "mid-range.disk_usage",
        "description": "mid-range.disk_usage",
        "peekOfCode": "red_bg = u\"\\u001b[41;1m\"  # red\nreset = u\"\\u001b[0m\"  # make output non sticky\nMAX_LENGTH = int(os.get_terminal_size().columns * 0.25)\n# ---------------------------------------------\n# Get disk usage analysis\ntotal_space, used_space, free_space = shutil.disk_usage(os.getcwd())\ndef get_length(space, total_space=total_space):\n    # Gives value of length of data\n    percent = (space / total_space) * MAX_LENGTH\n    return int(percent)",
        "detail": "mid-range.disk_usage",
        "documentation": {}
    },
    {
        "label": "reset",
        "kind": 5,
        "importPath": "mid-range.disk_usage",
        "description": "mid-range.disk_usage",
        "peekOfCode": "reset = u\"\\u001b[0m\"  # make output non sticky\nMAX_LENGTH = int(os.get_terminal_size().columns * 0.25)\n# ---------------------------------------------\n# Get disk usage analysis\ntotal_space, used_space, free_space = shutil.disk_usage(os.getcwd())\ndef get_length(space, total_space=total_space):\n    # Gives value of length of data\n    percent = (space / total_space) * MAX_LENGTH\n    return int(percent)\n# Transform to appropriate length",
        "detail": "mid-range.disk_usage",
        "documentation": {}
    },
    {
        "label": "MAX_LENGTH",
        "kind": 5,
        "importPath": "mid-range.disk_usage",
        "description": "mid-range.disk_usage",
        "peekOfCode": "MAX_LENGTH = int(os.get_terminal_size().columns * 0.25)\n# ---------------------------------------------\n# Get disk usage analysis\ntotal_space, used_space, free_space = shutil.disk_usage(os.getcwd())\ndef get_length(space, total_space=total_space):\n    # Gives value of length of data\n    percent = (space / total_space) * MAX_LENGTH\n    return int(percent)\n# Transform to appropriate length\ntotal_space_len, used_space_len, free_space_len = get_length(total_space), get_length(used_space),\\",
        "detail": "mid-range.disk_usage",
        "documentation": {}
    },
    {
        "label": "distance",
        "kind": 2,
        "importPath": "mid-range.distance_on_number_line",
        "description": "mid-range.distance_on_number_line",
        "peekOfCode": "def distance(x, y):\n    return abs(x - y)\nflag = True\nwhile flag:\n    usr = str(input(\"start [Y/n]: \")).strip().lower()\n    if usr == \"y\":\n        print(\n            distance(\n                float(input(\"Value of X co-ordinate: \")),\n                float(input(\"Value of Y co-ordinate: \")),",
        "detail": "mid-range.distance_on_number_line",
        "documentation": {}
    },
    {
        "label": "flag",
        "kind": 5,
        "importPath": "mid-range.distance_on_number_line",
        "description": "mid-range.distance_on_number_line",
        "peekOfCode": "flag = True\nwhile flag:\n    usr = str(input(\"start [Y/n]: \")).strip().lower()\n    if usr == \"y\":\n        print(\n            distance(\n                float(input(\"Value of X co-ordinate: \")),\n                float(input(\"Value of Y co-ordinate: \")),\n            ),\n            \"\\n\",",
        "detail": "mid-range.distance_on_number_line",
        "documentation": {}
    },
    {
        "label": "Dis_array",
        "kind": 2,
        "importPath": "mid-range.Distinct Digit Array",
        "description": "mid-range.Distinct Digit Array",
        "peekOfCode": "def Dis_array(arr):\n    dup = []\n    for i in arr:\n        length = len(str(i))\n        i = str(i)\n        for j in range(length):\n            if i[j] in dup:\n                pass\n            else:\n                dup.append(i[j])",
        "detail": "mid-range.Distinct Digit Array",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.Distinct Digit Array",
        "description": "mid-range.Distinct Digit Array",
        "peekOfCode": "arr = [131, 11, 48]\nDis_array(arr)",
        "detail": "mid-range.Distinct Digit Array",
        "documentation": {}
    },
    {
        "label": "Dis_array",
        "kind": 2,
        "importPath": "mid-range.Distinct_Digit_Array",
        "description": "mid-range.Distinct_Digit_Array",
        "peekOfCode": "def Dis_array(arr):\n    dup = []\n    for i in arr:\n        length = len(str(i))\n        i = str(i)\n        for j in range(length):\n            if i[j] in dup:\n                pass\n            else:\n                dup.append(i[j])",
        "detail": "mid-range.Distinct_Digit_Array",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.Distinct_Digit_Array",
        "description": "mid-range.Distinct_Digit_Array",
        "peekOfCode": "arr = [131, 11, 48]\nDis_array(arr)",
        "detail": "mid-range.Distinct_Digit_Array",
        "documentation": {}
    },
    {
        "label": "parse_distutils_args",
        "kind": 2,
        "importPath": "mid-range.distutils_args",
        "description": "mid-range.distutils_args",
        "peekOfCode": "def parse_distutils_args(args: List[str]) -> Dict[str, str]:\n    \"\"\"Parse provided arguments, returning an object that has the\n    matched arguments.\n    Any unknown arguments are ignored.\n    \"\"\"\n    result = {}\n    for arg in args:\n        try:\n            _, match = _distutils_getopt.getopt(args=[arg])\n        except DistutilsArgError:",
        "detail": "mid-range.distutils_args",
        "documentation": {}
    },
    {
        "label": "_options",
        "kind": 5,
        "importPath": "mid-range.distutils_args",
        "description": "mid-range.distutils_args",
        "peekOfCode": "_options = [\n    (\"exec-prefix=\", None, \"\"),\n    (\"home=\", None, \"\"),\n    (\"install-base=\", None, \"\"),\n    (\"install-data=\", None, \"\"),\n    (\"install-headers=\", None, \"\"),\n    (\"install-lib=\", None, \"\"),\n    (\"install-platlib=\", None, \"\"),\n    (\"install-purelib=\", None, \"\"),\n    (\"install-scripts=\", None, \"\"),",
        "detail": "mid-range.distutils_args",
        "documentation": {}
    },
    {
        "label": "_distutils_getopt",
        "kind": 5,
        "importPath": "mid-range.distutils_args",
        "description": "mid-range.distutils_args",
        "peekOfCode": "_distutils_getopt = FancyGetopt(_options)  # type: ignore\ndef parse_distutils_args(args: List[str]) -> Dict[str, str]:\n    \"\"\"Parse provided arguments, returning an object that has the\n    matched arguments.\n    Any unknown arguments are ignored.\n    \"\"\"\n    result = {}\n    for arg in args:\n        try:\n            _, match = _distutils_getopt.getopt(args=[arg])",
        "detail": "mid-range.distutils_args",
        "documentation": {}
    },
    {
        "label": "dist_info",
        "kind": 6,
        "importPath": "mid-range.dist_info",
        "description": "mid-range.dist_info",
        "peekOfCode": "class dist_info(Command):\n    description = \"create a .dist-info directory\"\n    user_options = [\n        (\n            \"egg-base=\",\n            \"e\",\n            \"directory containing .egg-info directories\"\n            \" (default: top of the source tree)\",\n        )\n    ]",
        "detail": "mid-range.dist_info",
        "documentation": {}
    },
    {
        "label": "MyObject",
        "kind": 6,
        "importPath": "mid-range.dis_class",
        "description": "mid-range.dis_class",
        "peekOfCode": "class MyObject:\n    \"\"\"Example for dis.\"\"\"\n    CLASS_ATTRIBUTE = \"some value\"\n    def __str__(self):\n        return \"MyObject({})\".format(self.name)\n    def __init__(self, name):\n        self.name = name\ndis.dis(MyObject)",
        "detail": "mid-range.dis_class",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "mid-range.dis_constant_folding",
        "description": "mid-range.dis_constant_folding",
        "peekOfCode": "i = 1 + 2\nf = 3.4 * 5.6\ns = \"Hello,\" + \" World!\"\n# Not folded\nI = i * 3 * 4\nF = f / 2 / 3\nS = s + \"\\n\" + \"Fantastic!\"",
        "detail": "mid-range.dis_constant_folding",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "mid-range.dis_constant_folding",
        "description": "mid-range.dis_constant_folding",
        "peekOfCode": "f = 3.4 * 5.6\ns = \"Hello,\" + \" World!\"\n# Not folded\nI = i * 3 * 4\nF = f / 2 / 3\nS = s + \"\\n\" + \"Fantastic!\"",
        "detail": "mid-range.dis_constant_folding",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.dis_constant_folding",
        "description": "mid-range.dis_constant_folding",
        "peekOfCode": "s = \"Hello,\" + \" World!\"\n# Not folded\nI = i * 3 * 4\nF = f / 2 / 3\nS = s + \"\\n\" + \"Fantastic!\"",
        "detail": "mid-range.dis_constant_folding",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 5,
        "importPath": "mid-range.dis_constant_folding",
        "description": "mid-range.dis_constant_folding",
        "peekOfCode": "I = i * 3 * 4\nF = f / 2 / 3\nS = s + \"\\n\" + \"Fantastic!\"",
        "detail": "mid-range.dis_constant_folding",
        "documentation": {}
    },
    {
        "label": "F",
        "kind": 5,
        "importPath": "mid-range.dis_constant_folding",
        "description": "mid-range.dis_constant_folding",
        "peekOfCode": "F = f / 2 / 3\nS = s + \"\\n\" + \"Fantastic!\"",
        "detail": "mid-range.dis_constant_folding",
        "documentation": {}
    },
    {
        "label": "S",
        "kind": 5,
        "importPath": "mid-range.dis_constant_folding",
        "description": "mid-range.dis_constant_folding",
        "peekOfCode": "S = s + \"\\n\" + \"Fantastic!\"",
        "detail": "mid-range.dis_constant_folding",
        "documentation": {}
    },
    {
        "label": "Dictionary",
        "kind": 6,
        "importPath": "mid-range.dis_eliminate_loop",
        "description": "mid-range.dis_eliminate_loop",
        "peekOfCode": "class Dictionary:\n    def __init__(self, words):\n        self.by_letter = {}\n        self.load_data(words)\n    def load_data(self, words):\n        # Arrange by letter\n        grouped = itertools.groupby(words, key=operator.itemgetter(0))\n        # Save arranged sets of words\n        self.by_letter = {group[0][0]: group for group in grouped}",
        "detail": "mid-range.dis_eliminate_loop",
        "documentation": {}
    },
    {
        "label": "Dictionary",
        "kind": 6,
        "importPath": "mid-range.dis_faster_loop",
        "description": "mid-range.dis_faster_loop",
        "peekOfCode": "class Dictionary:\n    def __init__(self, words):\n        self.by_letter = {letter: [] for letter in string.ascii_letters}\n        self.load_data(words)\n    def load_data(self, words):\n        for word in words:\n            self.by_letter[word[0]].append(word)",
        "detail": "mid-range.dis_faster_loop",
        "documentation": {}
    },
    {
        "label": "Dictionary",
        "kind": 6,
        "importPath": "mid-range.dis_fastest_loop",
        "description": "mid-range.dis_fastest_loop",
        "peekOfCode": "class Dictionary:\n    def __init__(self, words):\n        self.by_letter = collections.defaultdict(list)\n        self.load_data(words)\n    def load_data(self, words):\n        by_letter = self.by_letter\n        for word in words:\n            by_letter[word[0]].append(word)",
        "detail": "mid-range.dis_fastest_loop",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "mid-range.dis_function",
        "description": "mid-range.dis_function",
        "peekOfCode": "def f(*args):\n    nargs = len(args)\n    print(nargs, args)\nif __name__ == \"__main__\":\n    import dis\n    dis.dis(f)",
        "detail": "mid-range.dis_function",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "mid-range.dis_loops",
        "description": "mid-range.dis_loops",
        "peekOfCode": "def add(words):\n    result = \"\"\n    for word in words:\n        result = result + word\n    return result\ndef add_inline(words):\n    result = \"\"\n    for word in words:\n        result += word\n    return result",
        "detail": "mid-range.dis_loops",
        "documentation": {}
    },
    {
        "label": "add_inline",
        "kind": 2,
        "importPath": "mid-range.dis_loops",
        "description": "mid-range.dis_loops",
        "peekOfCode": "def add_inline(words):\n    result = \"\"\n    for word in words:\n        result += word\n    return result\ndef join(words):\n    return \"\".join(words)\nif __name__ == \"__main__\":\n    for fname in [\"add\", \"add_inline\", \"join\"]:\n        print(\"FUNCTION:\", fname, \"\\n\")",
        "detail": "mid-range.dis_loops",
        "documentation": {}
    },
    {
        "label": "join",
        "kind": 2,
        "importPath": "mid-range.dis_loops",
        "description": "mid-range.dis_loops",
        "peekOfCode": "def join(words):\n    return \"\".join(words)\nif __name__ == \"__main__\":\n    for fname in [\"add\", \"add_inline\", \"join\"]:\n        print(\"FUNCTION:\", fname, \"\\n\")\n        f = globals()[fname]\n        dis.dis(f)\n        t = timeit.Timer(\n            \"d = {fname}(words)\".format(fname=fname),\n            textwrap.dedent(",
        "detail": "mid-range.dis_loops",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "mid-range.dis_show_code",
        "description": "mid-range.dis_show_code",
        "peekOfCode": "def f(*args):\n    nargs = len(args)\n    print(nargs, args)\nif __name__ == \"__main__\":\n    import dis\n    dis.show_code(f)",
        "detail": "mid-range.dis_show_code",
        "documentation": {}
    },
    {
        "label": "Dictionary",
        "kind": 6,
        "importPath": "mid-range.dis_slow_loop",
        "description": "mid-range.dis_slow_loop",
        "peekOfCode": "class Dictionary:\n    def __init__(self, words):\n        self.by_letter = {}\n        self.load_data(words)\n    def load_data(self, words):\n        for word in words:\n            try:\n                self.by_letter[word[0]].append(word)\n            except KeyError:\n                self.by_letter[word[0]] = [word]",
        "detail": "mid-range.dis_slow_loop",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "mid-range.dis_string",
        "description": "mid-range.dis_string",
        "peekOfCode": "code = \"\"\"\nmy_dict = {'a': 1}\n\"\"\"\nprint(\"Disassembly:\\n\")\ndis.dis(code)\nprint(\"\\nCode details:\\n\")\ndis.show_code(code)",
        "detail": "mid-range.dis_string",
        "documentation": {}
    },
    {
        "label": "my_dict",
        "kind": 5,
        "importPath": "mid-range.dis_string",
        "description": "mid-range.dis_string",
        "peekOfCode": "my_dict = {'a': 1}\n\"\"\"\nprint(\"Disassembly:\\n\")\ndis.dis(code)\nprint(\"\\nCode details:\\n\")\ndis.show_code(code)",
        "detail": "mid-range.dis_string",
        "documentation": {}
    },
    {
        "label": "module_name",
        "kind": 5,
        "importPath": "mid-range.dis_test_loop",
        "description": "mid-range.dis_test_loop",
        "peekOfCode": "module_name = sys.argv[1]\nmodule = __import__(module_name)\nDictionary = module.Dictionary\ndis.dis(Dictionary.load_data)\nprint()\nt = timeit.Timer(\n    \"d = Dictionary(words)\",\n    textwrap.dedent(\n        \"\"\"\n    from {module_name} import Dictionary",
        "detail": "mid-range.dis_test_loop",
        "documentation": {}
    },
    {
        "label": "module",
        "kind": 5,
        "importPath": "mid-range.dis_test_loop",
        "description": "mid-range.dis_test_loop",
        "peekOfCode": "module = __import__(module_name)\nDictionary = module.Dictionary\ndis.dis(Dictionary.load_data)\nprint()\nt = timeit.Timer(\n    \"d = Dictionary(words)\",\n    textwrap.dedent(\n        \"\"\"\n    from {module_name} import Dictionary\n    words = [",
        "detail": "mid-range.dis_test_loop",
        "documentation": {}
    },
    {
        "label": "Dictionary",
        "kind": 5,
        "importPath": "mid-range.dis_test_loop",
        "description": "mid-range.dis_test_loop",
        "peekOfCode": "Dictionary = module.Dictionary\ndis.dis(Dictionary.load_data)\nprint()\nt = timeit.Timer(\n    \"d = Dictionary(words)\",\n    textwrap.dedent(\n        \"\"\"\n    from {module_name} import Dictionary\n    words = [\n        l.strip()",
        "detail": "mid-range.dis_test_loop",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "mid-range.dis_test_loop",
        "description": "mid-range.dis_test_loop",
        "peekOfCode": "t = timeit.Timer(\n    \"d = Dictionary(words)\",\n    textwrap.dedent(\n        \"\"\"\n    from {module_name} import Dictionary\n    words = [\n        l.strip()\n        for l in open('/usr/share/dict/words', 'rt')\n    ]\n    \"\"\"",
        "detail": "mid-range.dis_test_loop",
        "documentation": {}
    },
    {
        "label": "iterations",
        "kind": 5,
        "importPath": "mid-range.dis_test_loop",
        "description": "mid-range.dis_test_loop",
        "peekOfCode": "iterations = 10\nprint(\"TIME: {:0.4f}\".format(t.timeit(iterations) / iterations))",
        "detail": "mid-range.dis_test_loop",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "mid-range.dis_traceback",
        "description": "mid-range.dis_traceback",
        "peekOfCode": "i = 1\nj = 0\nk = 3\ntry:\n    result = k * (i / j) + (i / k)\nexcept Exception:\n    import dis\n    import sys\n    exc_type, exc_value, exc_tb = sys.exc_info()\n    dis.distb(exc_tb)",
        "detail": "mid-range.dis_traceback",
        "documentation": {}
    },
    {
        "label": "j",
        "kind": 5,
        "importPath": "mid-range.dis_traceback",
        "description": "mid-range.dis_traceback",
        "peekOfCode": "j = 0\nk = 3\ntry:\n    result = k * (i / j) + (i / k)\nexcept Exception:\n    import dis\n    import sys\n    exc_type, exc_value, exc_tb = sys.exc_info()\n    dis.distb(exc_tb)",
        "detail": "mid-range.dis_traceback",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "mid-range.dis_traceback",
        "description": "mid-range.dis_traceback",
        "peekOfCode": "k = 3\ntry:\n    result = k * (i / j) + (i / k)\nexcept Exception:\n    import dis\n    import sys\n    exc_type, exc_value, exc_tb = sys.exc_info()\n    dis.distb(exc_tb)",
        "detail": "mid-range.dis_traceback",
        "documentation": {}
    },
    {
        "label": "divisorSum",
        "kind": 2,
        "importPath": "mid-range.divisor_sum",
        "description": "mid-range.divisor_sum",
        "peekOfCode": "def divisorSum(n):\n    temp = []\n    for i in range(1, n + 1):\n        # condition for finding factors\n        if n % i == 0:\n            temp.append(i)\n    # adding all divisors\n    return sum(temp)\n# getting the input\nn = int(input())",
        "detail": "mid-range.divisor_sum",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.divisor_sum",
        "description": "mid-range.divisor_sum",
        "peekOfCode": "n = int(input())\n# printing the result\nprint(divisorSum(n))\n\"\"\"\nCOMPLEXITY:\n\t Time Complexity -> O(N)\n\t Space Complexity -> O(1)\nSample Input:\n6\nSample Output:",
        "detail": "mid-range.divisor_sum",
        "documentation": {}
    },
    {
        "label": "djb2",
        "kind": 2,
        "importPath": "mid-range.djb2",
        "description": "mid-range.djb2",
        "peekOfCode": "def djb2(s: str) -> int:\n    \"\"\"\n    Implementation of djb2 hash algorithm that\n    is popular because of it's magic constants.\n    >>> djb2('Algorithms')\n    3782405311\n    >>> djb2('scramble bits')\n    1609059040\n    \"\"\"\n    hash = 5381",
        "detail": "mid-range.djb2",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "mid-range.dll_queue",
        "description": "mid-range.dll_queue",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        # counter to keep track of the number of elements in our queue\n        self.size = 0\n        # we'll use our LinkedList implementation to build the queue\n        self.storage = DoublyLinkedList()\n    def enqueue(self, item):\n        pass\n    def dequeue(self):\n        pass",
        "detail": "mid-range.dll_queue",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "mid-range.dll_stack",
        "description": "mid-range.dll_stack",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.size = 0\n        self.storage = DoublyLinkedList()\n    def push(self, value):\n        pass\n    def pop(self):\n        pass\n    def len(self):\n        pass",
        "detail": "mid-range.dll_stack",
        "documentation": {}
    },
    {
        "label": "double_space",
        "kind": 2,
        "importPath": "mid-range.doctest_blankline",
        "description": "mid-range.doctest_blankline",
        "peekOfCode": "def double_space(lines):\n    \"\"\"Prints a list of lines double-spaced.\n    >>> double_space(['Line one.', 'Line two.'])\n    Line one.\n    <BLANKLINE>\n    Line two.\n    <BLANKLINE>\n    \"\"\"\n    for l in lines:\n        print(l)",
        "detail": "mid-range.doctest_blankline",
        "documentation": {}
    },
    {
        "label": "double_space",
        "kind": 2,
        "importPath": "mid-range.doctest_blankline_fail",
        "description": "mid-range.doctest_blankline_fail",
        "peekOfCode": "def double_space(lines):\n    \"\"\"Prints a list of lines double-spaced.\n    >>> double_space(['Line one.', 'Line two.'])\n    Line one.\n    Line two.\n    \"\"\"\n    for l in lines:\n        print(l)\n        print()",
        "detail": "mid-range.doctest_blankline_fail",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "mid-range.doctest_docstrings",
        "description": "mid-range.doctest_docstrings",
        "peekOfCode": "class A:\n    \"\"\"Simple class.\n    >>> A('instance_name').name\n    'instance_name'\n    \"\"\"\n    def __init__(self, name):\n        self.name = name\n    def method(self):\n        \"\"\"Returns an unusual value.\n        >>> A('name').method()",
        "detail": "mid-range.doctest_docstrings",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "mid-range.doctest_docstrings",
        "description": "mid-range.doctest_docstrings",
        "peekOfCode": "class B(A):\n    \"\"\"Another simple class.\n    >>> B('different_name').name\n    'different_name'\n    \"\"\"",
        "detail": "mid-range.doctest_docstrings",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "mid-range.doctest_ellipsis",
        "description": "mid-range.doctest_ellipsis",
        "peekOfCode": "class MyClass:\n    pass\ndef unpredictable(obj):\n    \"\"\"Returns a new list containing obj.\n    >>> unpredictable(MyClass()) #doctest: +ELLIPSIS\n    [<doctest_ellipsis.MyClass object at 0x...>]\n    \"\"\"\n    return [obj]",
        "detail": "mid-range.doctest_ellipsis",
        "documentation": {}
    },
    {
        "label": "unpredictable",
        "kind": 2,
        "importPath": "mid-range.doctest_ellipsis",
        "description": "mid-range.doctest_ellipsis",
        "peekOfCode": "def unpredictable(obj):\n    \"\"\"Returns a new list containing obj.\n    >>> unpredictable(MyClass()) #doctest: +ELLIPSIS\n    [<doctest_ellipsis.MyClass object at 0x...>]\n    \"\"\"\n    return [obj]",
        "detail": "mid-range.doctest_ellipsis",
        "documentation": {}
    },
    {
        "label": "my_function",
        "kind": 2,
        "importPath": "mid-range.doctest_extra_space",
        "description": "mid-range.doctest_extra_space",
        "peekOfCode": "def my_function(a, b):\n    \"\"\"\n    >>> my_function(2, 3)\n    6 \n    >>> my_function('a', 3)\n    'aaa'\n    \"\"\"\n    return a * b",
        "detail": "mid-range.doctest_extra_space",
        "documentation": {}
    },
    {
        "label": "keys",
        "kind": 5,
        "importPath": "mid-range.doctest_hashed_values",
        "description": "mid-range.doctest_hashed_values",
        "peekOfCode": "keys = [\"a\", \"aa\", \"aaa\"]\nprint(\"dict:\", {k: len(k) for k in keys})\nprint(\"set :\", set(keys))",
        "detail": "mid-range.doctest_hashed_values",
        "documentation": {}
    },
    {
        "label": "group_by_length",
        "kind": 2,
        "importPath": "mid-range.doctest_hashed_values_tests",
        "description": "mid-range.doctest_hashed_values_tests",
        "peekOfCode": "def group_by_length(words):\n    \"\"\"Returns a dictionary grouping words into sets by length.\n    >>> grouped = group_by_length([ 'python', 'module', 'of',\n    ... 'the', 'week' ])\n    >>> grouped == { 2:set(['of']),\n    ...              3:set(['the']),\n    ...              4:set(['week']),\n    ...              6:set(['python', 'module']),\n    ...              }\n    True",
        "detail": "mid-range.doctest_hashed_values_tests",
        "documentation": {}
    },
    {
        "label": "my_function",
        "kind": 2,
        "importPath": "mid-range.doctest_in_help",
        "description": "mid-range.doctest_in_help",
        "peekOfCode": "def my_function(a, b):\n    \"\"\"Returns a*b\n    \"\"\"\n    return a * b",
        "detail": "mid-range.doctest_in_help",
        "documentation": {}
    },
    {
        "label": "TestGlobals",
        "kind": 6,
        "importPath": "mid-range.doctest_mutable_globals",
        "description": "mid-range.doctest_mutable_globals",
        "peekOfCode": "class TestGlobals:\n    def one(self):\n        \"\"\"\n        >>> TestGlobals().one()\n        >>> 'var' in _module_data\n        True\n        \"\"\"\n        _module_data[\"var\"] = \"value\"\n    def two(self):\n        \"\"\"",
        "detail": "mid-range.doctest_mutable_globals",
        "documentation": {}
    },
    {
        "label": "_module_data",
        "kind": 5,
        "importPath": "mid-range.doctest_mutable_globals",
        "description": "mid-range.doctest_mutable_globals",
        "peekOfCode": "_module_data = {}\nclass TestGlobals:\n    def one(self):\n        \"\"\"\n        >>> TestGlobals().one()\n        >>> 'var' in _module_data\n        True\n        \"\"\"\n        _module_data[\"var\"] = \"value\"\n    def two(self):",
        "detail": "mid-range.doctest_mutable_globals",
        "documentation": {}
    },
    {
        "label": "my_function",
        "kind": 2,
        "importPath": "mid-range.doctest_ndiff",
        "description": "mid-range.doctest_ndiff",
        "peekOfCode": "def my_function(a, b):\n    \"\"\"\n    >>> my_function(2, 3) #doctest: +REPORT_NDIFF\n    6 \n    >>> my_function('a', 3)\n    'aaa'\n    \"\"\"\n    return a * b",
        "detail": "mid-range.doctest_ndiff",
        "documentation": {}
    },
    {
        "label": "my_function",
        "kind": 2,
        "importPath": "mid-range.doctest_normalize_whitespace",
        "description": "mid-range.doctest_normalize_whitespace",
        "peekOfCode": "def my_function(a, b):\n    \"\"\"Returns a * b.\n    >>> my_function(['A', 'B'], 3) #doctest: +NORMALIZE_WHITESPACE\n    ['A', 'B',\n     'A', 'B',\n     'A', 'B']\n    This does not match because of the extra space after the [ in\n    the list.\n    >>> my_function(['A', 'B'], 2) #doctest: +NORMALIZE_WHITESPACE\n    [ 'A', 'B',",
        "detail": "mid-range.doctest_normalize_whitespace",
        "documentation": {}
    },
    {
        "label": "my_function",
        "kind": 2,
        "importPath": "mid-range.doctest_private_tests",
        "description": "mid-range.doctest_private_tests",
        "peekOfCode": "def my_function(a, b):\n    \"\"\"Returns a * b\n    \"\"\"\n    return a * b",
        "detail": "mid-range.doctest_private_tests",
        "documentation": {}
    },
    {
        "label": "__test__",
        "kind": 5,
        "importPath": "mid-range.doctest_private_tests",
        "description": "mid-range.doctest_private_tests",
        "peekOfCode": "__test__ = {\n    \"numbers\": \"\"\"\n>>> my_function(2, 3)\n6\n>>> my_function(2.0, 3)\n6.0\n\"\"\",\n    \"strings\": \"\"\"\n>>> my_function('a', 3)\n'aaa'",
        "detail": "mid-range.doctest_private_tests",
        "documentation": {}
    },
    {
        "label": "my_function",
        "kind": 2,
        "importPath": "mid-range.doctest_simple",
        "description": "mid-range.doctest_simple",
        "peekOfCode": "def my_function(a, b):\n    \"\"\"\n    >>> my_function(2, 3)\n    6\n    >>> my_function('a', 3)\n    'aaa'\n    \"\"\"\n    return a * b",
        "detail": "mid-range.doctest_simple",
        "documentation": {}
    },
    {
        "label": "my_function",
        "kind": 2,
        "importPath": "mid-range.doctest_simple_with_docs",
        "description": "mid-range.doctest_simple_with_docs",
        "peekOfCode": "def my_function(a, b):\n    \"\"\"Returns a * b.\n    Works with numbers:\n    >>> my_function(2, 3)\n    6\n    and strings:\n    >>> my_function('a', 3)\n    'aaa'\n    \"\"\"\n    return a * b",
        "detail": "mid-range.doctest_simple_with_docs",
        "documentation": {}
    },
    {
        "label": "my_function",
        "kind": 2,
        "importPath": "mid-range.doctest_testmod",
        "description": "mid-range.doctest_testmod",
        "peekOfCode": "def my_function(a, b):\n    \"\"\"\n    >>> my_function(2, 3)\n    6\n    >>> my_function('a', 3)\n    'aaa'\n    \"\"\"\n    return a * b\nif __name__ == \"__main__\":\n    import doctest",
        "detail": "mid-range.doctest_testmod",
        "documentation": {}
    },
    {
        "label": "TestGlobals",
        "kind": 6,
        "importPath": "mid-range.doctest_test_globals",
        "description": "mid-range.doctest_test_globals",
        "peekOfCode": "class TestGlobals:\n    def one(self):\n        \"\"\"\n        >>> var = 'value'\n        >>> 'var' in globals()\n        True\n        \"\"\"\n    def two(self):\n        \"\"\"\n        >>> 'var' in globals()",
        "detail": "mid-range.doctest_test_globals",
        "documentation": {}
    },
    {
        "label": "this_raises",
        "kind": 2,
        "importPath": "mid-range.doctest_tracebacks",
        "description": "mid-range.doctest_tracebacks",
        "peekOfCode": "def this_raises():\n    \"\"\"This function always raises an exception.\n    >>> this_raises()\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"/no/such/path/doctest_tracebacks.py\", line 14, in\n      this_raises\n        raise RuntimeError('here is the error')\n    RuntimeError: here is the error\n    \"\"\"",
        "detail": "mid-range.doctest_tracebacks",
        "documentation": {}
    },
    {
        "label": "this_raises",
        "kind": 2,
        "importPath": "mid-range.doctest_tracebacks_no_body",
        "description": "mid-range.doctest_tracebacks_no_body",
        "peekOfCode": "def this_raises():\n    \"\"\"This function always raises an exception.\n    >>> this_raises()\n    Traceback (most recent call last):\n    RuntimeError: here is the error\n    >>> this_raises()\n    Traceback (innermost last):\n    RuntimeError: here is the error\n    \"\"\"\n    raise RuntimeError(\"here is the error\")",
        "detail": "mid-range.doctest_tracebacks_no_body",
        "documentation": {}
    },
    {
        "label": "suite",
        "kind": 5,
        "importPath": "mid-range.doctest_unittest",
        "description": "mid-range.doctest_unittest",
        "peekOfCode": "suite = unittest.TestSuite()\nsuite.addTest(doctest.DocTestSuite(doctest_simple))\nsuite.addTest(doctest.DocFileSuite(\"doctest_in_help.txt\"))\nrunner = unittest.TextTestRunner(verbosity=2)\nrunner.run(suite)",
        "detail": "mid-range.doctest_unittest",
        "documentation": {}
    },
    {
        "label": "runner",
        "kind": 5,
        "importPath": "mid-range.doctest_unittest",
        "description": "mid-range.doctest_unittest",
        "peekOfCode": "runner = unittest.TextTestRunner(verbosity=2)\nrunner.run(suite)",
        "detail": "mid-range.doctest_unittest",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "mid-range.doctest_unpredictable",
        "description": "mid-range.doctest_unpredictable",
        "peekOfCode": "class MyClass:\n    pass\ndef unpredictable(obj):\n    \"\"\"Returns a new list containing obj.\n    >>> unpredictable(MyClass())\n    [<doctest_unpredictable.MyClass object at 0x10055a2d0>]\n    \"\"\"\n    return [obj]",
        "detail": "mid-range.doctest_unpredictable",
        "documentation": {}
    },
    {
        "label": "unpredictable",
        "kind": 2,
        "importPath": "mid-range.doctest_unpredictable",
        "description": "mid-range.doctest_unpredictable",
        "peekOfCode": "def unpredictable(obj):\n    \"\"\"Returns a new list containing obj.\n    >>> unpredictable(MyClass())\n    [<doctest_unpredictable.MyClass object at 0x10055a2d0>]\n    \"\"\"\n    return [obj]",
        "detail": "mid-range.doctest_unpredictable",
        "documentation": {}
    },
    {
        "label": "Reader",
        "kind": 6,
        "importPath": "mid-range.doctree",
        "description": "mid-range.doctree",
        "peekOfCode": "class Reader(readers.ReReader):\n    \"\"\"\n    Adapt the Reader API for an existing document tree.\n    The existing document tree must be passed as the ``source`` parameter to\n    the `docutils.core.Publisher` initializer, wrapped in a\n    `docutils.io.DocTreeInput` object::\n        pub = docutils.core.Publisher(\n            ..., source=docutils.io.DocTreeInput(document), ...)\n    The original document settings are overridden; if you want to use the\n    settings of the original document, pass ``settings=document.settings`` to",
        "detail": "mid-range.doctree",
        "documentation": {}
    },
    {
        "label": "doc_subst",
        "kind": 2,
        "importPath": "mid-range.docutils",
        "description": "mid-range.docutils",
        "peekOfCode": "def doc_subst(snippets):\n    \"\"\" Substitute format strings in class or function docstring \"\"\"\n    def decorator(cls):\n        # Running python with -OO will discard docstrings (__doc__ is None).\n        if cls.__doc__ is not None:\n            # Strip the snippets to avoid trailing new lines and whitespace\n            stripped_snippets = {\n                key: snippet.strip() for (key, snippet) in snippets.items()\n            }\n            cls.__doc__ = cls.__doc__.format(**stripped_snippets)",
        "detail": "mid-range.docutils",
        "documentation": {}
    },
    {
        "label": "TreeWalker",
        "kind": 6,
        "importPath": "mid-range.dom",
        "description": "mid-range.dom",
        "peekOfCode": "class TreeWalker(base.NonRecursiveTreeWalker):\n    def getNodeDetails(self, node):\n        if node.nodeType == Node.DOCUMENT_TYPE_NODE:\n            return base.DOCTYPE, node.name, node.publicId, node.systemId\n        elif node.nodeType in (Node.TEXT_NODE, Node.CDATA_SECTION_NODE):\n            return base.TEXT, node.nodeValue\n        elif node.nodeType == Node.ELEMENT_NODE:\n            attrs = {}\n            for attr in list(node.attributes.keys()):\n                attr = node.getAttributeNode(attr)",
        "detail": "mid-range.dom",
        "documentation": {}
    },
    {
        "label": "DOMWidget",
        "kind": 6,
        "importPath": "mid-range.domwidget",
        "description": "mid-range.domwidget",
        "peekOfCode": "class DOMWidget(Widget):\n    \"\"\"Widget that can be inserted into the DOM\"\"\"\n    _model_name = Unicode(\"DOMWidgetModel\").tag(sync=True)\n    _dom_classes = TypedTuple(\n        trait=Unicode(), help=\"CSS classes applied to widget DOM element\"\n    ).tag(sync=True)\n    layout = InstanceDict(Layout).tag(sync=True, **widget_serialization)\n    def add_class(self, className):\n        \"\"\"\n        Adds a class to the top level element of the widget.",
        "detail": "mid-range.domwidget",
        "documentation": {}
    },
    {
        "label": "get_week_day",
        "kind": 2,
        "importPath": "mid-range.doomsday",
        "description": "mid-range.doomsday",
        "peekOfCode": "def get_week_day(year: int, month: int, day: int) -> str:\n    \"\"\"Returns the week-day name out of a given date.\n    >>> get_week_day(2020, 10, 24)\n    'Saturday'\n    >>> get_week_day(2017, 10, 24)\n    'Tuesday'\n    >>> get_week_day(2019, 5, 3)\n    'Friday'\n    >>> get_week_day(1970, 9, 16)\n    'Wednesday'",
        "detail": "mid-range.doomsday",
        "documentation": {}
    },
    {
        "label": "DOOMSDAY_LEAP",
        "kind": 5,
        "importPath": "mid-range.doomsday",
        "description": "mid-range.doomsday",
        "peekOfCode": "DOOMSDAY_LEAP = [4, 1, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5]\nDOOMSDAY_NOT_LEAP = [3, 7, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5]\nWEEK_DAY_NAMES = {\n    0: \"Sunday\",\n    1: \"Monday\",\n    2: \"Tuesday\",\n    3: \"Wednesday\",\n    4: \"Thursday\",\n    5: \"Friday\",\n    6: \"Saturday\",",
        "detail": "mid-range.doomsday",
        "documentation": {}
    },
    {
        "label": "DOOMSDAY_NOT_LEAP",
        "kind": 5,
        "importPath": "mid-range.doomsday",
        "description": "mid-range.doomsday",
        "peekOfCode": "DOOMSDAY_NOT_LEAP = [3, 7, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5]\nWEEK_DAY_NAMES = {\n    0: \"Sunday\",\n    1: \"Monday\",\n    2: \"Tuesday\",\n    3: \"Wednesday\",\n    4: \"Thursday\",\n    5: \"Friday\",\n    6: \"Saturday\",\n}",
        "detail": "mid-range.doomsday",
        "documentation": {}
    },
    {
        "label": "WEEK_DAY_NAMES",
        "kind": 5,
        "importPath": "mid-range.doomsday",
        "description": "mid-range.doomsday",
        "peekOfCode": "WEEK_DAY_NAMES = {\n    0: \"Sunday\",\n    1: \"Monday\",\n    2: \"Tuesday\",\n    3: \"Wednesday\",\n    4: \"Thursday\",\n    5: \"Friday\",\n    6: \"Saturday\",\n}\ndef get_week_day(year: int, month: int, day: int) -> str:",
        "detail": "mid-range.doomsday",
        "documentation": {}
    },
    {
        "label": "de",
        "kind": 5,
        "importPath": "mid-range.double_ended_queue",
        "description": "mid-range.double_ended_queue",
        "peekOfCode": "de = collections.deque([1, 2, 3])\n# using extend() to add numbers to right end\n# adds 4,5,6 to right end\nde.extend([4, 5, 6])\n# printing modified deque\nprint(\"The deque after extending deque at end is : \")\nprint(de)\n# using extendleft() to add numbers to left end\n# adds 7,8,9 to right end\nde.extendleft([7, 8, 9])",
        "detail": "mid-range.double_ended_queue",
        "documentation": {}
    },
    {
        "label": "startValue",
        "kind": 5,
        "importPath": "mid-range.double_ended_queue",
        "description": "mid-range.double_ended_queue",
        "peekOfCode": "startValue = de.pop()\nprint(\"The deque after popping value at end is : \")\nprint(de)\n# get left-end value and eliminate\nendValue = de.popleft()\nprint(\"The deque after popping value at start is : \")\nprint(de)\n# eliminate element searched by value\nde.remove(5)\nprint(\"The deque after eliminating element searched by value : \")",
        "detail": "mid-range.double_ended_queue",
        "documentation": {}
    },
    {
        "label": "endValue",
        "kind": 5,
        "importPath": "mid-range.double_ended_queue",
        "description": "mid-range.double_ended_queue",
        "peekOfCode": "endValue = de.popleft()\nprint(\"The deque after popping value at start is : \")\nprint(de)\n# eliminate element searched by value\nde.remove(5)\nprint(\"The deque after eliminating element searched by value : \")\nprint(de)",
        "detail": "mid-range.double_ended_queue",
        "documentation": {}
    },
    {
        "label": "double_factorial",
        "kind": 2,
        "importPath": "mid-range.double_factorial_recursive",
        "description": "mid-range.double_factorial_recursive",
        "peekOfCode": "def double_factorial(n: int) -> int:\n    \"\"\"\n    Compute double factorial using recursive method.\n    Recursion can be costly for large numbers.\n    To learn about the theory behind this algorithm:\n    https://en.wikipedia.org/wiki/Double_factorial\n    >>> import math\n    >>> all(double_factorial(i) == math.prod(range(i, 0, -2)) for i in range(20))\n    True\n    >>> double_factorial(0.1)",
        "detail": "mid-range.double_factorial_recursive",
        "documentation": {}
    },
    {
        "label": "DoubleHash",
        "kind": 6,
        "importPath": "mid-range.double_hash",
        "description": "mid-range.double_hash",
        "peekOfCode": "class DoubleHash(HashTable):\n    \"\"\"\n        Hash Table example with open addressing and Double Hash\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n    def __hash_function_2(self, value, data):\n        next_prime_gt = (\n            next_prime(value % self.size_table)\n            if not check_prime(value % self.size_table)",
        "detail": "mid-range.double_hash",
        "documentation": {}
    },
    {
        "label": "double_linear_search",
        "kind": 2,
        "importPath": "mid-range.double_linear_search",
        "description": "mid-range.double_linear_search",
        "peekOfCode": "def double_linear_search(array: list[int], search_item: int) -> int:\n    \"\"\"\n    Iterate through the array from both sides to find the index of search_item.\n    :param array: the array to be searched\n    :param search_item: the item to be searched\n    :return the index of search_item, if search_item is in array, else -1\n    Examples:\n    >>> double_linear_search([1, 5, 5, 10], 1)\n    0\n    >>> double_linear_search([1, 5, 5, 10], 5)",
        "detail": "mid-range.double_linear_search",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "mid-range.double_linear_search_recursion",
        "description": "mid-range.double_linear_search_recursion",
        "peekOfCode": "def search(list_data: list, key: int, left: int = 0, right: int = 0) -> int:\n    \"\"\"\n    Iterate through the array to find the index of key using recursion.\n    :param list_data: the list to be searched\n    :param key: the key to be searched\n    :param left: the index of first element\n    :param right: the index of last element\n    :return: the index of key value if found, -1 otherwise.\n    >>> search(list(range(0, 11)), 5)\n    5",
        "detail": "mid-range.double_linear_search_recursion",
        "documentation": {}
    },
    {
        "label": "double_sort",
        "kind": 2,
        "importPath": "mid-range.double_sort",
        "description": "mid-range.double_sort",
        "peekOfCode": "def double_sort(lst):\n    \"\"\"this sorting algorithm sorts an array using the principle of bubble sort,\n    but does it both from left to right and right to left,\n    hence i decided to call it \"double sort\"\n    :param collection: mutable ordered sequence of elements\n    :return: the same collection in ascending order\n    Examples:\n    >>> double_sort([-1 ,-2 ,-3 ,-4 ,-5 ,-6 ,-7])\n    [-7, -6, -5, -4, -3, -2, -1]\n    >>> double_sort([])",
        "detail": "mid-range.double_sort",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "mid-range.Doubling_stack",
        "description": "mid-range.Doubling_stack",
        "peekOfCode": "class Stack:\n    def __init__(self, limit=10):\n        self.stack = []\n        self.limit = limit\n    def push(self, n):\n        if len(self.stack) > self.limit:\n            self.doublelimit()\n        else:\n            self.stack.append(n)\n    def pop(self):",
        "detail": "mid-range.Doubling_stack",
        "documentation": {}
    },
    {
        "label": "sta",
        "kind": 5,
        "importPath": "mid-range.Doubling_stack",
        "description": "mid-range.Doubling_stack",
        "peekOfCode": "sta = Stack(5)\nsta.push(1)\nsta.push(2)\nsta.push(1)\nsta.push(2)\nsta.push(2)\nsta.push(2)\nsta.PrintStack()\nsta.Length()",
        "detail": "mid-range.Doubling_stack",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "mid-range.doubly_linked_list",
        "description": "mid-range.doubly_linked_list",
        "peekOfCode": "class ListNode:\n    def __init__(self, value, prev=None, next=None):\n        self.value = value\n        self.prev = prev\n        self.next = next\n    def insert_after(self, value):\n        pass\n    def insert_before(self, value):\n        pass\n    def delete(self):",
        "detail": "mid-range.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "kind": 6,
        "importPath": "mid-range.doubly_linked_list",
        "description": "mid-range.doubly_linked_list",
        "peekOfCode": "class DoublyLinkedList:\n    def __init__(self, node=None):\n        self.head = node\n        self.tail = node\n    def add_to_head(self, value):\n        pass\n    def remove_from_head(self):\n        pass\n    def add_to_tail(self, value):\n        pass",
        "detail": "mid-range.doubly_linked_list",
        "documentation": {}
    },
    {
        "label": "remote_base_url",
        "kind": 5,
        "importPath": "mid-range.download_new_dict",
        "description": "mid-range.download_new_dict",
        "peekOfCode": "remote_base_url = (\n    \"https://chromium.googlesource.com/\"\n    + \"chromium/deps/hunspell_dictionaries/+/master\"\n)\nlocal_base_url = os.path.join(\n    jupyter_data_dir(), \"nbextensions\", \"spellchecker\", \"typo\", \"dictionaries\"\n)\nlang_code = \"de_DE\"\nif not os.path.exists(local_base_url):\n    print(\"creating directory {!r}\".format(local_base_url))",
        "detail": "mid-range.download_new_dict",
        "documentation": {}
    },
    {
        "label": "local_base_url",
        "kind": 5,
        "importPath": "mid-range.download_new_dict",
        "description": "mid-range.download_new_dict",
        "peekOfCode": "local_base_url = os.path.join(\n    jupyter_data_dir(), \"nbextensions\", \"spellchecker\", \"typo\", \"dictionaries\"\n)\nlang_code = \"de_DE\"\nif not os.path.exists(local_base_url):\n    print(\"creating directory {!r}\".format(local_base_url))\n    os.makedirs(os.path.realpath(local_base_url))\ncm = ConfigManager()\nfor ext in (\"dic\", \"aff\"):\n    dict_fname = lang_code + \".\" + ext",
        "detail": "mid-range.download_new_dict",
        "documentation": {}
    },
    {
        "label": "lang_code",
        "kind": 5,
        "importPath": "mid-range.download_new_dict",
        "description": "mid-range.download_new_dict",
        "peekOfCode": "lang_code = \"de_DE\"\nif not os.path.exists(local_base_url):\n    print(\"creating directory {!r}\".format(local_base_url))\n    os.makedirs(os.path.realpath(local_base_url))\ncm = ConfigManager()\nfor ext in (\"dic\", \"aff\"):\n    dict_fname = lang_code + \".\" + ext\n    remote_path = remote_base_url + \"/\" + dict_fname + \"?format=TEXT\"\n    local_path = os.path.join(local_base_url, dict_fname)\n    print(\"saving {!r}\\n    to {!r}\".format(remote_path, local_path))",
        "detail": "mid-range.download_new_dict",
        "documentation": {}
    },
    {
        "label": "cm",
        "kind": 5,
        "importPath": "mid-range.download_new_dict",
        "description": "mid-range.download_new_dict",
        "peekOfCode": "cm = ConfigManager()\nfor ext in (\"dic\", \"aff\"):\n    dict_fname = lang_code + \".\" + ext\n    remote_path = remote_base_url + \"/\" + dict_fname + \"?format=TEXT\"\n    local_path = os.path.join(local_base_url, dict_fname)\n    print(\"saving {!r}\\n    to {!r}\".format(remote_path, local_path))\n    with open(local_path, \"wb\") as loc_file:\n        base64.decode(urlopen(remote_path), loc_file)\n    rel_path = \"./typo/dictionaries/\" + dict_fname\n    cm.update(\"notebook\", {\"spellchecker\": {ext + \"_url\": rel_path}})",
        "detail": "mid-range.download_new_dict",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "mid-range.do_assert",
        "description": "mid-range.do_assert",
        "peekOfCode": "def foo(s):\n    n = int(s)\n    assert n != 0, \"n is zero!\"\n    return 10 / n\ndef main():\n    foo(\"0\")\nmain()",
        "detail": "mid-range.do_assert",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.do_assert",
        "description": "mid-range.do_assert",
        "peekOfCode": "def main():\n    foo(\"0\")\nmain()",
        "detail": "mid-range.do_assert",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.do_base64",
        "description": "mid-range.do_base64",
        "peekOfCode": "s = base64.b64encode(\"PythonBASE 64\".encode(\"utf-8\"))\nprint(s)\nd = base64.b64decode(s).decode(\"utf-8\")\nprint(d)\ns = base64.urlsafe_b64encode(\"PythonBASE 64\".encode(\"utf-8\"))\nprint(s)\nd = base64.urlsafe_b64decode(s).decode(\"utf-8\")\nprint(d)",
        "detail": "mid-range.do_base64",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.do_base64",
        "description": "mid-range.do_base64",
        "peekOfCode": "d = base64.b64decode(s).decode(\"utf-8\")\nprint(d)\ns = base64.urlsafe_b64encode(\"PythonBASE 64\".encode(\"utf-8\"))\nprint(s)\nd = base64.urlsafe_b64decode(s).decode(\"utf-8\")\nprint(d)",
        "detail": "mid-range.do_base64",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.do_base64",
        "description": "mid-range.do_base64",
        "peekOfCode": "s = base64.urlsafe_b64encode(\"PythonBASE 64\".encode(\"utf-8\"))\nprint(s)\nd = base64.urlsafe_b64decode(s).decode(\"utf-8\")\nprint(d)",
        "detail": "mid-range.do_base64",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.do_base64",
        "description": "mid-range.do_base64",
        "peekOfCode": "d = base64.urlsafe_b64decode(s).decode(\"utf-8\")\nprint(d)",
        "detail": "mid-range.do_base64",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "mid-range.do_bytesio",
        "description": "mid-range.do_bytesio",
        "peekOfCode": "f = BytesIO()\nf.write(b\"hello\")\nf.write(b\" \")\nf.write(b\"world!\")\nprint(f.getvalue())\n# read from BytesIO:\ndata = \"，。，。\".encode(\"utf-8\")\nf = BytesIO(data)\nprint(f.read())",
        "detail": "mid-range.do_bytesio",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.do_bytesio",
        "description": "mid-range.do_bytesio",
        "peekOfCode": "data = \"，。，。\".encode(\"utf-8\")\nf = BytesIO(data)\nprint(f.read())",
        "detail": "mid-range.do_bytesio",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "mid-range.do_bytesio",
        "description": "mid-range.do_bytesio",
        "peekOfCode": "f = BytesIO(data)\nprint(f.read())",
        "detail": "mid-range.do_bytesio",
        "documentation": {}
    },
    {
        "label": "closing",
        "kind": 2,
        "importPath": "mid-range.do_closing",
        "description": "mid-range.do_closing",
        "peekOfCode": "def closing(fname):\n    f = None\n    try:\n        f = open(fname, \"r\")\n        yield f\n    finally:\n        if f:\n            f.close()\nwith closing(\"test.txt\") as f:\n    print(f.read())",
        "detail": "mid-range.do_closing",
        "documentation": {}
    },
    {
        "label": "pwd",
        "kind": 5,
        "importPath": "mid-range.do_dir",
        "description": "mid-range.do_dir",
        "peekOfCode": "pwd = os.path.abspath(\".\")\nprint(\"      Size     Last Modified  Name\")\nprint(\"------------------------------------------------------------\")\nfor f in os.listdir(pwd):\n    fsize = os.path.getsize(f)\n    mtime = datetime.fromtimestamp(os.path.getmtime(f)).strftime(\"%Y-%m-%d %H:%M\")\n    flag = \"/\" if os.path.isdir(f) else \"\"\n    print(\"%10d  %s  %s%s\" % (fsize, mtime, f, flag))",
        "detail": "mid-range.do_dir",
        "documentation": {}
    },
    {
        "label": "is_odd",
        "kind": 2,
        "importPath": "mid-range.do_filter",
        "description": "mid-range.do_filter",
        "peekOfCode": "def is_odd(n):\n    return n % 2 == 1\nL = range(100)\nprint(list(filter(is_odd, L)))\ndef not_empty(s):\n    return s and s.strip()\nprint(list(filter(not_empty, [\"A\", \"\", \"B\", None, \"C\", \"  \"])))",
        "detail": "mid-range.do_filter",
        "documentation": {}
    },
    {
        "label": "not_empty",
        "kind": 2,
        "importPath": "mid-range.do_filter",
        "description": "mid-range.do_filter",
        "peekOfCode": "def not_empty(s):\n    return s and s.strip()\nprint(list(filter(not_empty, [\"A\", \"\", \"B\", None, \"C\", \"  \"])))",
        "detail": "mid-range.do_filter",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "mid-range.do_filter",
        "description": "mid-range.do_filter",
        "peekOfCode": "L = range(100)\nprint(list(filter(is_odd, L)))\ndef not_empty(s):\n    return s and s.strip()\nprint(list(filter(not_empty, [\"A\", \"\", \"B\", None, \"C\", \"  \"])))",
        "detail": "mid-range.do_filter",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "mid-range.do_flask",
        "description": "mid-range.do_flask",
        "peekOfCode": "def home():\n    return \"<h1>Home</h1>\"\n@app.route(\"/signin\", methods=[\"GET\"])\ndef signin_form():\n    return \"\"\"<form action=\"/signin\" method=\"post\">\n              <p><input name=\"username\"></p>\n              <p><input name=\"password\" type=\"password\"></p>\n              <p><button type=\"submit\">Sign In</button></p>\n              </form>\"\"\"\n@app.route(\"/signin\", methods=[\"POST\"])",
        "detail": "mid-range.do_flask",
        "documentation": {}
    },
    {
        "label": "signin_form",
        "kind": 2,
        "importPath": "mid-range.do_flask",
        "description": "mid-range.do_flask",
        "peekOfCode": "def signin_form():\n    return \"\"\"<form action=\"/signin\" method=\"post\">\n              <p><input name=\"username\"></p>\n              <p><input name=\"password\" type=\"password\"></p>\n              <p><button type=\"submit\">Sign In</button></p>\n              </form>\"\"\"\n@app.route(\"/signin\", methods=[\"POST\"])\ndef signin():\n    # request：\n    if request.form[\"username\"] == \"admin\" and request.form[\"password\"] == \"password\":",
        "detail": "mid-range.do_flask",
        "documentation": {}
    },
    {
        "label": "signin",
        "kind": 2,
        "importPath": "mid-range.do_flask",
        "description": "mid-range.do_flask",
        "peekOfCode": "def signin():\n    # request：\n    if request.form[\"username\"] == \"admin\" and request.form[\"password\"] == \"password\":\n        return \"<h3>Hello, admin!</h3>\"\n    return \"<h3>Bad username or password.</h3>\"\nif __name__ == \"__main__\":\n    app.run()",
        "detail": "mid-range.do_flask",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "mid-range.do_flask",
        "description": "mid-range.do_flask",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef home():\n    return \"<h1>Home</h1>\"\n@app.route(\"/signin\", methods=[\"GET\"])\ndef signin_form():\n    return \"\"\"<form action=\"/signin\" method=\"post\">\n              <p><input name=\"username\"></p>\n              <p><input name=\"password\" type=\"password\"></p>\n              <p><button type=\"submit\">Sign In</button></p>",
        "detail": "mid-range.do_flask",
        "documentation": {}
    },
    {
        "label": "pid",
        "kind": 5,
        "importPath": "mid-range.do_folk",
        "description": "mid-range.do_folk",
        "peekOfCode": "pid = os.fork()\nif pid == 0:\n    print(\"I am child process (%s) and my parent is %s.\" % (os.getpid(), os.getppid()))\nelse:\n    print(\"I (%s) just created a child process (%s).\" % (os.getpid(), pid))",
        "detail": "mid-range.do_folk",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "mid-range.do_for",
        "description": "mid-range.do_for",
        "peekOfCode": "names = [\"Michael\", \"Bob\", \"Tracy\"]\nfor name in names:\n    print(name)\n#  0 - 9\nfor x in range(10):\n    print(x)",
        "detail": "mid-range.do_for",
        "documentation": {}
    },
    {
        "label": "fib",
        "kind": 2,
        "importPath": "mid-range.do_generator",
        "description": "mid-range.do_generator",
        "peekOfCode": "def fib(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        yield b\n        a, b = b, a + b\n        n = n + 1\n    return \"done\"\nf = fib(10)\nprint(\"fib(10):\", f)\nfor x in f:",
        "detail": "mid-range.do_generator",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.do_generator",
        "description": "mid-range.do_generator",
        "peekOfCode": "s = (x * x for x in range(5))\nprint(s)\nfor x in s:\n    print(x)\ndef fib(max):\n    n, a, b = 0, 0, 1\n    while n < max:\n        yield b\n        a, b = b, a + b\n        n = n + 1",
        "detail": "mid-range.do_generator",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "mid-range.do_generator",
        "description": "mid-range.do_generator",
        "peekOfCode": "f = fib(10)\nprint(\"fib(10):\", f)\nfor x in f:\n    print(x)\n# call generator manually:\ng = fib(5)\nwhile 1:\n    try:\n        x = next(g)\n        print(\"g:\", x)",
        "detail": "mid-range.do_generator",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "mid-range.do_generator",
        "description": "mid-range.do_generator",
        "peekOfCode": "g = fib(5)\nwhile 1:\n    try:\n        x = next(g)\n        print(\"g:\", x)\n    except StopIteration as e:\n        print(\"Generator return value:\", e.value)\n        break",
        "detail": "mid-range.do_generator",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "mid-range.do_if",
        "description": "mid-range.do_if",
        "peekOfCode": "age = int(input(\"Input your age: \"))\nif age >= 18:\n    print(\"adult\")\nelif age >= 6:\n    print(\"teenager\")\nelse:\n    print(\"kid\")",
        "detail": "mid-range.do_if",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 2,
        "importPath": "mid-range.do_iter",
        "description": "mid-range.do_iter",
        "peekOfCode": "def g():\n    yield 1\n    yield 2\n    yield 3\nprint(\"Iterable? [1, 2, 3]:\", isinstance([1, 2, 3], Iterable))\nprint(\"Iterable? 'abc':\", isinstance(\"abc\", Iterable))\nprint(\"Iterable? 123:\", isinstance(123, Iterable))\nprint(\"Iterable? g():\", isinstance(g(), Iterable))\nprint(\"Iterator? [1, 2, 3]:\", isinstance([1, 2, 3], Iterator))\nprint(\"Iterator? iter([1, 2, 3]):\", isinstance(iter([1, 2, 3]), Iterator))",
        "detail": "mid-range.do_iter",
        "documentation": {}
    },
    {
        "label": "it",
        "kind": 5,
        "importPath": "mid-range.do_iter",
        "description": "mid-range.do_iter",
        "peekOfCode": "it = iter([1, 2, 3, 4, 5])\nprint(next(it))\nprint(next(it))\nprint(next(it))\nprint(next(it))\nprint(next(it))\nd = {\"a\": 1, \"b\": 2, \"c\": 3}\n# iter each key:\nprint(\"iter key:\", d)\nfor k in d.keys():",
        "detail": "mid-range.do_iter",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.do_iter",
        "description": "mid-range.do_iter",
        "peekOfCode": "d = {\"a\": 1, \"b\": 2, \"c\": 3}\n# iter each key:\nprint(\"iter key:\", d)\nfor k in d.keys():\n    print(\"key:\", k)\n# iter each value:\nprint(\"iter value:\", d)\nfor v in d.values():\n    print(\"value:\", v)\n# iter both key and value:",
        "detail": "mid-range.do_iter",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.do_listcompr",
        "description": "mid-range.do_listcompr",
        "peekOfCode": "d = {\"x\": \"A\", \"y\": \"B\", \"z\": \"C\"}\nprint([k + \"=\" + v for k, v in d.items()])\nL = [\"Hello\", \"World\", \"IBM\", \"Apple\"]\nprint([s.lower() for s in L])",
        "detail": "mid-range.do_listcompr",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "mid-range.do_listcompr",
        "description": "mid-range.do_listcompr",
        "peekOfCode": "L = [\"Hello\", \"World\", \"IBM\", \"Apple\"]\nprint([s.lower() for s in L])",
        "detail": "mid-range.do_listcompr",
        "documentation": {}
    },
    {
        "label": "change_it",
        "kind": 2,
        "importPath": "mid-range.do_lock",
        "description": "mid-range.do_lock",
        "peekOfCode": "def change_it(n):\n    # :\n    global balance\n    balance = balance + n\n    balance = balance - n\ndef run_thread(n):\n    for i in range(100000):\n        # :\n        lock.acquire()\n        try:",
        "detail": "mid-range.do_lock",
        "documentation": {}
    },
    {
        "label": "run_thread",
        "kind": 2,
        "importPath": "mid-range.do_lock",
        "description": "mid-range.do_lock",
        "peekOfCode": "def run_thread(n):\n    for i in range(100000):\n        # :\n        lock.acquire()\n        try:\n            # :\n            change_it(n)\n        finally:\n            # :\n            lock.release()",
        "detail": "mid-range.do_lock",
        "documentation": {}
    },
    {
        "label": "balance",
        "kind": 5,
        "importPath": "mid-range.do_lock",
        "description": "mid-range.do_lock",
        "peekOfCode": "balance = 0\nlock = threading.Lock()\ndef change_it(n):\n    # :\n    global balance\n    balance = balance + n\n    balance = balance - n\ndef run_thread(n):\n    for i in range(100000):\n        # :",
        "detail": "mid-range.do_lock",
        "documentation": {}
    },
    {
        "label": "lock",
        "kind": 5,
        "importPath": "mid-range.do_lock",
        "description": "mid-range.do_lock",
        "peekOfCode": "lock = threading.Lock()\ndef change_it(n):\n    # :\n    global balance\n    balance = balance + n\n    balance = balance - n\ndef run_thread(n):\n    for i in range(100000):\n        # :\n        lock.acquire()",
        "detail": "mid-range.do_lock",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "mid-range.do_lock",
        "description": "mid-range.do_lock",
        "peekOfCode": "t1 = threading.Thread(target=run_thread, args=(5,))\nt2 = threading.Thread(target=run_thread, args=(8,))\nt1.start()\nt2.start()\nt1.join()\nt2.join()\nprint(balance)",
        "detail": "mid-range.do_lock",
        "documentation": {}
    },
    {
        "label": "t2",
        "kind": 5,
        "importPath": "mid-range.do_lock",
        "description": "mid-range.do_lock",
        "peekOfCode": "t2 = threading.Thread(target=run_thread, args=(8,))\nt1.start()\nt2.start()\nt1.join()\nt2.join()\nprint(balance)",
        "detail": "mid-range.do_lock",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.do_logging",
        "description": "mid-range.do_logging",
        "peekOfCode": "s = \"0\"\nn = int(s)\nlogging.info(\"n = %d\" % n)\nprint(10 / n)",
        "detail": "mid-range.do_logging",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.do_logging",
        "description": "mid-range.do_logging",
        "peekOfCode": "n = int(s)\nlogging.info(\"n = %d\" % n)\nprint(10 / n)",
        "detail": "mid-range.do_logging",
        "documentation": {}
    },
    {
        "label": "logging.info(\"n",
        "kind": 5,
        "importPath": "mid-range.do_logging",
        "description": "mid-range.do_logging",
        "peekOfCode": "logging.info(\"n = %d\" % n)\nprint(10 / n)",
        "detail": "mid-range.do_logging",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "mid-range.do_map",
        "description": "mid-range.do_map",
        "peekOfCode": "def f(x):\n    return x * x\nprint(list(map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])))",
        "detail": "mid-range.do_map",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "mid-range.do_mysql",
        "description": "mid-range.do_mysql",
        "peekOfCode": "conn = mysql.connector.connect(user=\"root\", password=\"password\", database=\"test\")\ncursor = conn.cursor()\n# user:\ncursor.execute(\"create table user (id varchar(20) primary key, name varchar(20))\")\n# ，MySQL%s:\ncursor.execute(\"insert into user (id, name) values (%s, %s)\", (\"1\", \"Michael\"))\nprint(\"rowcount =\", cursor.rowcount)\n# :\nconn.commit()\ncursor.close()",
        "detail": "mid-range.do_mysql",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "mid-range.do_mysql",
        "description": "mid-range.do_mysql",
        "peekOfCode": "cursor = conn.cursor()\n# user:\ncursor.execute(\"create table user (id varchar(20) primary key, name varchar(20))\")\n# ，MySQL%s:\ncursor.execute(\"insert into user (id, name) values (%s, %s)\", (\"1\", \"Michael\"))\nprint(\"rowcount =\", cursor.rowcount)\n# :\nconn.commit()\ncursor.close()\n# :",
        "detail": "mid-range.do_mysql",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "mid-range.do_mysql",
        "description": "mid-range.do_mysql",
        "peekOfCode": "cursor = conn.cursor()\ncursor.execute(\"select * from user where id = %s\", (\"1\",))\nvalues = cursor.fetchall()\nprint(values)\n# CursorConnection:\ncursor.close()\nconn.close()",
        "detail": "mid-range.do_mysql",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "mid-range.do_mysql",
        "description": "mid-range.do_mysql",
        "peekOfCode": "values = cursor.fetchall()\nprint(values)\n# CursorConnection:\ncursor.close()\nconn.close()",
        "detail": "mid-range.do_mysql",
        "documentation": {}
    },
    {
        "label": "int2",
        "kind": 5,
        "importPath": "mid-range.do_partial",
        "description": "mid-range.do_partial",
        "peekOfCode": "int2 = functools.partial(int, base=2)\nprint(\"1000000 =\", int2(\"1000000\"))\nprint(\"1010101 =\", int2(\"1010101\"))",
        "detail": "mid-range.do_partial",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.do_pdb",
        "description": "mid-range.do_pdb",
        "peekOfCode": "s = \"0\"\nn = int(s)\npdb.set_trace()  #\nprint(10 / n)",
        "detail": "mid-range.do_pdb",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.do_pdb",
        "description": "mid-range.do_pdb",
        "peekOfCode": "n = int(s)\npdb.set_trace()  #\nprint(10 / n)",
        "detail": "mid-range.do_pdb",
        "documentation": {}
    },
    {
        "label": "write",
        "kind": 2,
        "importPath": "mid-range.do_queue",
        "description": "mid-range.do_queue",
        "peekOfCode": "def write(q):\n    print(\"Process to write: %s\" % os.getpid())\n    for value in [\"A\", \"B\", \"C\"]:\n        print(\"Put %s to queue...\" % value)\n        q.put(value)\n        time.sleep(random.random())\n# :\ndef read(q):\n    print(\"Process to read: %s\" % os.getpid())\n    while True:",
        "detail": "mid-range.do_queue",
        "documentation": {}
    },
    {
        "label": "read",
        "kind": 2,
        "importPath": "mid-range.do_queue",
        "description": "mid-range.do_queue",
        "peekOfCode": "def read(q):\n    print(\"Process to read: %s\" % os.getpid())\n    while True:\n        value = q.get(True)\n        print(\"Get %s from queue.\" % value)\nif __name__ == \"__main__\":\n    # Queue，：\n    q = Queue()\n    pw = Process(target=write, args=(q,))\n    pr = Process(target=read, args=(q,))",
        "detail": "mid-range.do_queue",
        "documentation": {}
    },
    {
        "label": "str2int",
        "kind": 2,
        "importPath": "mid-range.do_reduce",
        "description": "mid-range.do_reduce",
        "peekOfCode": "def str2int(s):\n    ints = map(lambda ch: CHAR_TO_INT[ch], s)\n    return reduce(lambda x, y: x * 10 + y, ints)\nprint(str2int(\"0\"))\nprint(str2int(\"12300\"))\nprint(str2int(\"0012345\"))\nCHAR_TO_FLOAT = {\n    \"0\": 0,\n    \"1\": 1,\n    \"2\": 2,",
        "detail": "mid-range.do_reduce",
        "documentation": {}
    },
    {
        "label": "str2float",
        "kind": 2,
        "importPath": "mid-range.do_reduce",
        "description": "mid-range.do_reduce",
        "peekOfCode": "def str2float(s):\n    nums = map(lambda ch: CHAR_TO_FLOAT[ch], s)\n    point = 0\n    def to_float(f, n):\n        nonlocal point\n        if n == -1:\n            point = 1\n            return f\n        if point == 0:\n            return f * 10 + n",
        "detail": "mid-range.do_reduce",
        "documentation": {}
    },
    {
        "label": "CHAR_TO_INT",
        "kind": 5,
        "importPath": "mid-range.do_reduce",
        "description": "mid-range.do_reduce",
        "peekOfCode": "CHAR_TO_INT = {\n    \"0\": 0,\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3,\n    \"4\": 4,\n    \"5\": 5,\n    \"6\": 6,\n    \"7\": 7,\n    \"8\": 8,",
        "detail": "mid-range.do_reduce",
        "documentation": {}
    },
    {
        "label": "CHAR_TO_FLOAT",
        "kind": 5,
        "importPath": "mid-range.do_reduce",
        "description": "mid-range.do_reduce",
        "peekOfCode": "CHAR_TO_FLOAT = {\n    \"0\": 0,\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3,\n    \"4\": 4,\n    \"5\": 5,\n    \"6\": 6,\n    \"7\": 7,\n    \"8\": 8,",
        "detail": "mid-range.do_reduce",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "mid-range.do_slice",
        "description": "mid-range.do_slice",
        "peekOfCode": "L = [\"Michael\", \"Sarah\", \"Tracy\", \"Bob\", \"Jack\"]\nprint(\"L[0:3] =\", L[0:3])\nprint(\"L[:3] =\", L[:3])\nprint(\"L[1:3] =\", L[1:3])\nprint(\"L[-2:] =\", L[-2:])\nR = list(range(100))\nprint(\"R[:10] =\", R[:10])\nprint(\"R[-10:] =\", R[-10:])\nprint(\"R[10:20] =\", R[10:20])\nprint(\"R[:10:2] =\", R[:10:2])",
        "detail": "mid-range.do_slice",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "mid-range.do_slice",
        "description": "mid-range.do_slice",
        "peekOfCode": "R = list(range(100))\nprint(\"R[:10] =\", R[:10])\nprint(\"R[-10:] =\", R[-10:])\nprint(\"R[10:20] =\", R[10:20])\nprint(\"R[:10:2] =\", R[:10:2])\nprint(\"R[::5] =\", R[::5])",
        "detail": "mid-range.do_slice",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "mid-range.do_sorted",
        "description": "mid-range.do_sorted",
        "peekOfCode": "L = [\"bob\", \"about\", \"Zoo\", \"Credit\"]\nprint(sorted(L))\nprint(sorted(L, key=str.lower))\nstudents = [(\"Bob\", 75), (\"Adam\", 92), (\"Bart\", 66), (\"Lisa\", 88)]\nprint(sorted(students, key=itemgetter(0)))\nprint(sorted(students, key=lambda t: t[1]))\nprint(sorted(students, key=itemgetter(1), reverse=True))",
        "detail": "mid-range.do_sorted",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "mid-range.do_sorted",
        "description": "mid-range.do_sorted",
        "peekOfCode": "students = [(\"Bob\", 75), (\"Adam\", 92), (\"Bart\", 66), (\"Lisa\", 88)]\nprint(sorted(students, key=itemgetter(0)))\nprint(sorted(students, key=lambda t: t[1]))\nprint(sorted(students, key=itemgetter(1), reverse=True))",
        "detail": "mid-range.do_sorted",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "mid-range.do_sqlalchemy",
        "description": "mid-range.do_sqlalchemy",
        "peekOfCode": "class User(Base):\n    # :\n    __tablename__ = \"user\"\n    # :\n    id = Column(String(20), primary_key=True)\n    name = Column(String(20))\n# :\nengine = create_engine(\"mysql+mysqlconnector://root:password@localhost:3306/test\")\n# DBSession:\nDBSession = sessionmaker(bind=engine)",
        "detail": "mid-range.do_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "mid-range.do_sqlalchemy",
        "description": "mid-range.do_sqlalchemy",
        "peekOfCode": "Base = declarative_base()\n# User:\nclass User(Base):\n    # :\n    __tablename__ = \"user\"\n    # :\n    id = Column(String(20), primary_key=True)\n    name = Column(String(20))\n# :\nengine = create_engine(\"mysql+mysqlconnector://root:password@localhost:3306/test\")",
        "detail": "mid-range.do_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "mid-range.do_sqlalchemy",
        "description": "mid-range.do_sqlalchemy",
        "peekOfCode": "engine = create_engine(\"mysql+mysqlconnector://root:password@localhost:3306/test\")\n# DBSession:\nDBSession = sessionmaker(bind=engine)\n# session:\nsession = DBSession()\n# User:\nnew_user = User(id=\"5\", name=\"Bob\")\n# session:\nsession.add(new_user)\n# :",
        "detail": "mid-range.do_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DBSession",
        "kind": 5,
        "importPath": "mid-range.do_sqlalchemy",
        "description": "mid-range.do_sqlalchemy",
        "peekOfCode": "DBSession = sessionmaker(bind=engine)\n# session:\nsession = DBSession()\n# User:\nnew_user = User(id=\"5\", name=\"Bob\")\n# session:\nsession.add(new_user)\n# :\nsession.commit()\n# session:",
        "detail": "mid-range.do_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 5,
        "importPath": "mid-range.do_sqlalchemy",
        "description": "mid-range.do_sqlalchemy",
        "peekOfCode": "session = DBSession()\n# User:\nnew_user = User(id=\"5\", name=\"Bob\")\n# session:\nsession.add(new_user)\n# :\nsession.commit()\n# session:\nsession.close()\n# Session:",
        "detail": "mid-range.do_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "new_user",
        "kind": 5,
        "importPath": "mid-range.do_sqlalchemy",
        "description": "mid-range.do_sqlalchemy",
        "peekOfCode": "new_user = User(id=\"5\", name=\"Bob\")\n# session:\nsession.add(new_user)\n# :\nsession.commit()\n# session:\nsession.close()\n# Session:\nsession = DBSession()\n# Query，filterwhere，one()，:",
        "detail": "mid-range.do_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 5,
        "importPath": "mid-range.do_sqlalchemy",
        "description": "mid-range.do_sqlalchemy",
        "peekOfCode": "session = DBSession()\n# Query，filterwhere，one()，:\nuser = session.query(User).filter(User.id == \"5\").one()\n# name:\nprint(\"type:\", type(user))\nprint(\"name:\", user.name)\n# Session:\nsession.close()",
        "detail": "mid-range.do_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "mid-range.do_sqlalchemy",
        "description": "mid-range.do_sqlalchemy",
        "peekOfCode": "user = session.query(User).filter(User.id == \"5\").one()\n# name:\nprint(\"type:\", type(user))\nprint(\"name:\", user.name)\n# Session:\nsession.close()",
        "detail": "mid-range.do_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "mid-range.do_sqlite",
        "description": "mid-range.do_sqlite",
        "peekOfCode": "conn = sqlite3.connect(\"test.db\")\n# Cursor:\ncursor = conn.cursor()\n# SQL，user:\ncursor.execute(\"create table user (id varchar(20) primary key, name varchar(20))\")\n# SQL，:\ncursor.execute(\"insert into user (id, name) values ('1', 'Michael')\")\n# rowcount:\nprint(\"rowcount =\", cursor.rowcount)\n# Cursor:",
        "detail": "mid-range.do_sqlite",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "mid-range.do_sqlite",
        "description": "mid-range.do_sqlite",
        "peekOfCode": "cursor = conn.cursor()\n# SQL，user:\ncursor.execute(\"create table user (id varchar(20) primary key, name varchar(20))\")\n# SQL，:\ncursor.execute(\"insert into user (id, name) values ('1', 'Michael')\")\n# rowcount:\nprint(\"rowcount =\", cursor.rowcount)\n# Cursor:\ncursor.close()\n# :",
        "detail": "mid-range.do_sqlite",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "mid-range.do_sqlite",
        "description": "mid-range.do_sqlite",
        "peekOfCode": "conn = sqlite3.connect(\"test.db\")\ncursor = conn.cursor()\n# :\ncursor.execute(\"select * from user where id=?\", \"1\")\n# :\nvalues = cursor.fetchall()\nprint(values)\ncursor.close()\nconn.close()",
        "detail": "mid-range.do_sqlite",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "mid-range.do_sqlite",
        "description": "mid-range.do_sqlite",
        "peekOfCode": "cursor = conn.cursor()\n# :\ncursor.execute(\"select * from user where id=?\", \"1\")\n# :\nvalues = cursor.fetchall()\nprint(values)\ncursor.close()\nconn.close()",
        "detail": "mid-range.do_sqlite",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "mid-range.do_sqlite",
        "description": "mid-range.do_sqlite",
        "peekOfCode": "values = cursor.fetchall()\nprint(values)\ncursor.close()\nconn.close()",
        "detail": "mid-range.do_sqlite",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "mid-range.do_stringio",
        "description": "mid-range.do_stringio",
        "peekOfCode": "f = StringIO()\nf.write(\"hello\")\nf.write(\" \")\nf.write(\"world!\")\nprint(f.getvalue())\n# read from StringIO:\nf = StringIO(\"，\\n。\\n，\\n。\")\nwhile True:\n    s = f.readline()\n    if s == \"\":",
        "detail": "mid-range.do_stringio",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "mid-range.do_stringio",
        "description": "mid-range.do_stringio",
        "peekOfCode": "f = StringIO(\"，\\n。\\n，\\n。\")\nwhile True:\n    s = f.readline()\n    if s == \"\":\n        break\n    print(s.strip())",
        "detail": "mid-range.do_stringio",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "mid-range.do_subprocess",
        "description": "mid-range.do_subprocess",
        "peekOfCode": "r = subprocess.call([\"nslookup\", \"www.python.org\"])\nprint(\"Exit code:\", r)\nprint(\"$ nslookup\")\np = subprocess.Popen(\n    [\"nslookup\"], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE\n)\noutput, err = p.communicate(b\"set q=mx\\npython.org\\nexit\\n\")\nprint(output.decode(\"utf-8\"))\nprint(\"Exit code:\", p.returncode)",
        "detail": "mid-range.do_subprocess",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "mid-range.do_subprocess",
        "description": "mid-range.do_subprocess",
        "peekOfCode": "p = subprocess.Popen(\n    [\"nslookup\"], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE\n)\noutput, err = p.communicate(b\"set q=mx\\npython.org\\nexit\\n\")\nprint(output.decode(\"utf-8\"))\nprint(\"Exit code:\", p.returncode)",
        "detail": "mid-range.do_subprocess",
        "documentation": {}
    },
    {
        "label": "do",
        "kind": 2,
        "importPath": "mid-range.do_symfix",
        "description": "mid-range.do_symfix",
        "peekOfCode": "def do(self, arg):\n    \".symfix - Set the default Microsoft Symbol Store settings if missing\"\n    self.debug.system.fix_symbol_store_path(remote=True, force=False)",
        "detail": "mid-range.do_symfix",
        "documentation": {}
    },
    {
        "label": "__revision__",
        "kind": 5,
        "importPath": "mid-range.do_symfix",
        "description": "mid-range.do_symfix",
        "peekOfCode": "__revision__ = \"$Id$\"\ndef do(self, arg):\n    \".symfix - Set the default Microsoft Symbol Store settings if missing\"\n    self.debug.system.fix_symbol_store_path(remote=True, force=False)",
        "detail": "mid-range.do_symfix",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.do_tcp",
        "description": "mid-range.do_tcp",
        "peekOfCode": "s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# :\ns.connect((\"www.sina.com.cn\", 80))\n# :\ns.send(b\"GET / HTTP/1.1\\r\\nHost: www.sina.com.cn\\r\\nConnection: close\\r\\n\\r\\n\")\n# :\nbuffer = []\nwhile True:\n    # 1k:\n    d = s.recv(1024)",
        "detail": "mid-range.do_tcp",
        "documentation": {}
    },
    {
        "label": "buffer",
        "kind": 5,
        "importPath": "mid-range.do_tcp",
        "description": "mid-range.do_tcp",
        "peekOfCode": "buffer = []\nwhile True:\n    # 1k:\n    d = s.recv(1024)\n    if d:\n        buffer.append(d)\n    else:\n        break\ndata = b\"\".join(buffer)\n# :",
        "detail": "mid-range.do_tcp",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.do_tcp",
        "description": "mid-range.do_tcp",
        "peekOfCode": "data = b\"\".join(buffer)\n# :\ns.close()\nheader, html = data.split(b\"\\r\\n\\r\\n\", 1)\nprint(header.decode(\"utf-8\"))\n# :\nwith open(\"sina.html\", \"wb\") as f:\n    f.write(html)",
        "detail": "mid-range.do_tcp",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 5,
        "importPath": "mid-range.do_while",
        "description": "mid-range.do_while",
        "peekOfCode": "sum = 0\nn = 1\nwhile n <= 100:\n    sum = sum + n\n    n = n + 1\nprint(sum)\n# 1x2x3x...x100:\nacc = 1\nn = 1\nwhile n <= 100:",
        "detail": "mid-range.do_while",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.do_while",
        "description": "mid-range.do_while",
        "peekOfCode": "n = 1\nwhile n <= 100:\n    sum = sum + n\n    n = n + 1\nprint(sum)\n# 1x2x3x...x100:\nacc = 1\nn = 1\nwhile n <= 100:\n    acc = acc * n",
        "detail": "mid-range.do_while",
        "documentation": {}
    },
    {
        "label": "acc",
        "kind": 5,
        "importPath": "mid-range.do_while",
        "description": "mid-range.do_while",
        "peekOfCode": "acc = 1\nn = 1\nwhile n <= 100:\n    acc = acc * n\n    n = n + 1\nprint(acc)",
        "detail": "mid-range.do_while",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.do_while",
        "description": "mid-range.do_while",
        "peekOfCode": "n = 1\nwhile n <= 100:\n    acc = acc * n\n    n = n + 1\nprint(acc)",
        "detail": "mid-range.do_while",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 2,
        "importPath": "mid-range.do_with",
        "description": "mid-range.do_with",
        "peekOfCode": "def log(name):\n    print(\"[%s] start...\" % name)\n    yield\n    print(\"[%s] end.\" % name)\nwith log(\"DEBUG\"):\n    print(\"Hello, world!\")\n    print(\"Hello, Python!\")",
        "detail": "mid-range.do_with",
        "documentation": {}
    },
    {
        "label": "httpd",
        "kind": 5,
        "importPath": "mid-range.do_wsgi",
        "description": "mid-range.do_wsgi",
        "peekOfCode": "httpd = make_server(\"\", 8000, application)\nprint(\"Serving HTTP on port 8000...\")\nhttpd.serve_forever()",
        "detail": "mid-range.do_wsgi",
        "documentation": {}
    },
    {
        "label": "each_ascii",
        "kind": 2,
        "importPath": "mid-range.do_yield",
        "description": "mid-range.do_yield",
        "peekOfCode": "def each_ascii(s):\n    for ch in s:\n        yield ord(ch)\n    return \"%s chars\" % len(s)\ndef yield_from(s):\n    r = yield from each_ascii(s)\n    print(r)\ndef main():\n    for x in each_ascii(\"abc\"):\n        print(x)  # => 'a', 'b', 'c'",
        "detail": "mid-range.do_yield",
        "documentation": {}
    },
    {
        "label": "yield_from",
        "kind": 2,
        "importPath": "mid-range.do_yield",
        "description": "mid-range.do_yield",
        "peekOfCode": "def yield_from(s):\n    r = yield from each_ascii(s)\n    print(r)\ndef main():\n    for x in each_ascii(\"abc\"):\n        print(x)  # => 'a', 'b', 'c'\n    it = each_ascii(\"xyz\")\n    try:\n        while True:\n            print(next(it))  # => 'x', 'y', 'z'",
        "detail": "mid-range.do_yield",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.do_yield",
        "description": "mid-range.do_yield",
        "peekOfCode": "def main():\n    for x in each_ascii(\"abc\"):\n        print(x)  # => 'a', 'b', 'c'\n    it = each_ascii(\"xyz\")\n    try:\n        while True:\n            print(next(it))  # => 'x', 'y', 'z'\n    except StopIteration as s:\n        print(s.value)  # => '3 chars'\n    # using yield from in main() will change main() from function to generator:",
        "detail": "mid-range.do_yield",
        "documentation": {}
    },
    {
        "label": "BokehGraph",
        "kind": 6,
        "importPath": "mid-range.draw",
        "description": "mid-range.draw",
        "peekOfCode": "class BokehGraph:\n    \"\"\"Class that takes a graph and exposes drawing methods.\"\"\"\n    def __init__(self):\n        pass  # TODO",
        "detail": "mid-range.draw",
        "documentation": {}
    },
    {
        "label": "Test1",
        "kind": 6,
        "importPath": "mid-range.dtype",
        "description": "mid-range.dtype",
        "peekOfCode": "class Test1:\n    not_dtype = np.dtype(float)\nclass Test2:\n    dtype = float\nnp.dtype(Test1())  # E: No overload variant of \"dtype\" matches\nnp.dtype(Test2())  # E: incompatible type\nnp.dtype(  # E: No overload variant of \"dtype\" matches\n    {\"field1\": (float, 1), \"field2\": (int, 3)}\n)",
        "detail": "mid-range.dtype",
        "documentation": {}
    },
    {
        "label": "Test2",
        "kind": 6,
        "importPath": "mid-range.dtype",
        "description": "mid-range.dtype",
        "peekOfCode": "class Test2:\n    dtype = float\nnp.dtype(Test1())  # E: No overload variant of \"dtype\" matches\nnp.dtype(Test2())  # E: incompatible type\nnp.dtype(  # E: No overload variant of \"dtype\" matches\n    {\"field1\": (float, 1), \"field2\": (int, 3)}\n)",
        "detail": "mid-range.dtype",
        "documentation": {}
    },
    {
        "label": "create_dummy_layout",
        "kind": 2,
        "importPath": "mid-range.dummy",
        "description": "mid-range.dummy",
        "peekOfCode": "def create_dummy_layout() -> Layout:\n    \"\"\"\n    Create a dummy layout for use in an 'Application' that doesn't have a\n    layout specified. When ENTER is pressed, the application quits.\n    \"\"\"\n    kb = KeyBindings()\n    @kb.add(\"enter\")\n    def enter(event: E) -> None:\n        event.app.exit()\n    control = FormattedTextControl(",
        "detail": "mid-range.dummy",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.dummy",
        "description": "mid-range.dummy",
        "peekOfCode": "__all__ = [\"create_dummy_layout\"]\nE = KeyPressEvent\ndef create_dummy_layout() -> Layout:\n    \"\"\"\n    Create a dummy layout for use in an 'Application' that doesn't have a\n    layout specified. When ENTER is pressed, the application quits.\n    \"\"\"\n    kb = KeyBindings()\n    @kb.add(\"enter\")\n    def enter(event: E) -> None:",
        "detail": "mid-range.dummy",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 5,
        "importPath": "mid-range.dummy",
        "description": "mid-range.dummy",
        "peekOfCode": "E = KeyPressEvent\ndef create_dummy_layout() -> Layout:\n    \"\"\"\n    Create a dummy layout for use in an 'Application' that doesn't have a\n    layout specified. When ENTER is pressed, the application quits.\n    \"\"\"\n    kb = KeyBindings()\n    @kb.add(\"enter\")\n    def enter(event: E) -> None:\n        event.app.exit()",
        "detail": "mid-range.dummy",
        "documentation": {}
    },
    {
        "label": "Context",
        "kind": 6,
        "importPath": "mid-range.dummy_contextvars",
        "description": "mid-range.dummy_contextvars",
        "peekOfCode": "class Context:\n    def run(self, callable: Callable[..., _T], *args: Any, **kwargs: Any) -> _T:\n        return callable(*args, **kwargs)\n    def copy(self) -> \"Context\":\n        return self\nclass Token(Generic[_T]):\n    pass\nclass ContextVar(Generic[_T]):\n    def __init__(self, name: str, *, default: Optional[_T] = None) -> None:\n        self._name = name",
        "detail": "mid-range.dummy_contextvars",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "mid-range.dummy_contextvars",
        "description": "mid-range.dummy_contextvars",
        "peekOfCode": "class Token(Generic[_T]):\n    pass\nclass ContextVar(Generic[_T]):\n    def __init__(self, name: str, *, default: Optional[_T] = None) -> None:\n        self._name = name\n        self._value = default\n    @property\n    def name(self) -> str:\n        return self._name\n    def get(self, default: Optional[_T] = None) -> _T:",
        "detail": "mid-range.dummy_contextvars",
        "documentation": {}
    },
    {
        "label": "ContextVar",
        "kind": 6,
        "importPath": "mid-range.dummy_contextvars",
        "description": "mid-range.dummy_contextvars",
        "peekOfCode": "class ContextVar(Generic[_T]):\n    def __init__(self, name: str, *, default: Optional[_T] = None) -> None:\n        self._name = name\n        self._value = default\n    @property\n    def name(self) -> str:\n        return self._name\n    def get(self, default: Optional[_T] = None) -> _T:\n        result = self._value or default\n        if result is None:",
        "detail": "mid-range.dummy_contextvars",
        "documentation": {}
    },
    {
        "label": "copy_context",
        "kind": 2,
        "importPath": "mid-range.dummy_contextvars",
        "description": "mid-range.dummy_contextvars",
        "peekOfCode": "def copy_context() -> \"Context\":\n    return Context()\n_T = TypeVar(\"_T\")\nclass Context:\n    def run(self, callable: Callable[..., _T], *args: Any, **kwargs: Any) -> _T:\n        return callable(*args, **kwargs)\n    def copy(self) -> \"Context\":\n        return self\nclass Token(Generic[_T]):\n    pass",
        "detail": "mid-range.dummy_contextvars",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "mid-range.dummy_contextvars",
        "description": "mid-range.dummy_contextvars",
        "peekOfCode": "_T = TypeVar(\"_T\")\nclass Context:\n    def run(self, callable: Callable[..., _T], *args: Any, **kwargs: Any) -> _T:\n        return callable(*args, **kwargs)\n    def copy(self) -> \"Context\":\n        return self\nclass Token(Generic[_T]):\n    pass\nclass ContextVar(Generic[_T]):\n    def __init__(self, name: str, *, default: Optional[_T] = None) -> None:",
        "detail": "mid-range.dummy_contextvars",
        "documentation": {}
    },
    {
        "label": "dumpio",
        "kind": 5,
        "importPath": "mid-range.dumpio",
        "description": "mid-range.dumpio",
        "peekOfCode": "dumpio = \"--dumpio\" in sys.argv\nasync def main():\n    browser = await launch(args=[\"--no-sandbox\"], dumpio=dumpio)\n    page = await browser.newPage()\n    await page.evaluate('console.log(\"DUMPIO_TEST\")')\n    await page.close()\n    await browser.close()\nasyncio.get_event_loop().run_until_complete(main())",
        "detail": "mid-range.dumpio",
        "documentation": {}
    },
    {
        "label": "duplicate_removal",
        "kind": 2,
        "importPath": "mid-range.duplicate_removal",
        "description": "mid-range.duplicate_removal",
        "peekOfCode": "def duplicate_removal(arr):\n    dictonary = {}\n    for i in arr:\n        if i in dictonary:\n            dictonary[i] = dictonary[i] + 1\n        else:\n            dictonary[i] = 1\n    return dictonary.keys()\narr = [1, 2, 2, 3, 4, 5, 5, 6, 7]\nprint(int(len(list(duplicate_removal(arr)))))",
        "detail": "mid-range.duplicate_removal",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.duplicate_removal",
        "description": "mid-range.duplicate_removal",
        "peekOfCode": "arr = [1, 2, 2, 3, 4, 5, 5, 6, 7]\nprint(int(len(list(duplicate_removal(arr)))))",
        "detail": "mid-range.duplicate_removal",
        "documentation": {}
    },
    {
        "label": "dynamicArray",
        "kind": 2,
        "importPath": "mid-range.Dynamic-Array",
        "description": "mid-range.Dynamic-Array",
        "peekOfCode": "def dynamicArray(n, queries):\n    Q = len(queries)\n    seqList = [[] for _ in range(n)]\n    lastAnswer = 0\n    la = []\n    for i in range(Q):\n        t, x, y = queries[i][0], queries[i][1], queries[i][2]\n        if t == 1:\n            seqList[(x ^ lastAnswer) % n].append(y)\n        else:",
        "detail": "mid-range.Dynamic-Array",
        "documentation": {}
    },
    {
        "label": "DynamicArray",
        "kind": 6,
        "importPath": "mid-range.dynamic_array",
        "description": "mid-range.dynamic_array",
        "peekOfCode": "class DynamicArray:\n    def __init__(self, capacity=8):\n        self.count = 0\n        self.capacity = capacity\n        self.storage = [None] * self.capacity\n    # insert\n    def insert(self, index, value):\n        # check count exceeding capacity\n        if self.count >= self.capacity:\n            # TODO: Make array dynamic with resizing",
        "detail": "mid-range.dynamic_array",
        "documentation": {}
    },
    {
        "label": "find_meaning",
        "kind": 2,
        "importPath": "mid-range.e-dictionary",
        "description": "mid-range.e-dictionary",
        "peekOfCode": "def find_meaning(word):  # Function to find the meaning of the word\n    try:\n        mean = dict.meaning(word)\n        mean_keys = mean.keys()\n    except AttributeError:  # If the word is not in the dictionary, print error and exit\n        print(\"Word not found in Dictionary\")\n        exit()\n    for i in mean_keys:  # For different keys in the dict(mean), print the key\n        print(\"(\", i, \")\", sep=\"\")  # e.g.: Noun, Verb, Adjective\n        # and print the data for that respective key, line by line",
        "detail": "mid-range.e-dictionary",
        "documentation": {}
    },
    {
        "label": "find_synonyms",
        "kind": 2,
        "importPath": "mid-range.e-dictionary",
        "description": "mid-range.e-dictionary",
        "peekOfCode": "def find_synonyms(word):  # Function to find the synonyms of the word\n    syn = dict.synonym(word)  # list containing the synonyms\n    print(\"(Synonyms)\\n\\t\", end=\"\")\n    for i in syn:\n        print(i, end=\", \")\n    print(\"\\n\")\ndef find_antonyms(word):  # Function to find the antonyms of the word\n    ant = dict.antonym(word)  # list containing the antonyms\n    print(\"(Antonyms)\\n\\t\", end=\"\")\n    for i in ant:",
        "detail": "mid-range.e-dictionary",
        "documentation": {}
    },
    {
        "label": "find_antonyms",
        "kind": 2,
        "importPath": "mid-range.e-dictionary",
        "description": "mid-range.e-dictionary",
        "peekOfCode": "def find_antonyms(word):  # Function to find the antonyms of the word\n    ant = dict.antonym(word)  # list containing the antonyms\n    print(\"(Antonyms)\\n\\t\", end=\"\")\n    for i in ant:\n        print(i, end=\", \")\n    print(\"\\n\")\ndict = PyDictionary()  # Creating an instance of the module\nword = input(\"Enter a word: \")\nprint()\nfind_meaning(word)",
        "detail": "mid-range.e-dictionary",
        "documentation": {}
    },
    {
        "label": "dict",
        "kind": 5,
        "importPath": "mid-range.e-dictionary",
        "description": "mid-range.e-dictionary",
        "peekOfCode": "dict = PyDictionary()  # Creating an instance of the module\nword = input(\"Enter a word: \")\nprint()\nfind_meaning(word)\nfind_synonyms(word)\nfind_antonyms(word)",
        "detail": "mid-range.e-dictionary",
        "documentation": {}
    },
    {
        "label": "word",
        "kind": 5,
        "importPath": "mid-range.e-dictionary",
        "description": "mid-range.e-dictionary",
        "peekOfCode": "word = input(\"Enter a word: \")\nprint()\nfind_meaning(word)\nfind_synonyms(word)\nfind_antonyms(word)",
        "detail": "mid-range.e-dictionary",
        "documentation": {}
    },
    {
        "label": "extractEachKth",
        "kind": 2,
        "importPath": "mid-range.EachKth",
        "description": "mid-range.EachKth",
        "peekOfCode": "def extractEachKth(inputArray, k):\n    inp = []\n    for i in range(len(inputArray)):\n        if (i + 1) % k == 0:\n            pass\n        else:\n            inp.append(inputArray[i])\n    return inp",
        "detail": "mid-range.EachKth",
        "documentation": {}
    },
    {
        "label": "eating_cookies",
        "kind": 2,
        "importPath": "mid-range.eating_cookies",
        "description": "mid-range.eating_cookies",
        "peekOfCode": "def eating_cookies(n, cache=None):\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return eating_cookies(n - 1) + eating_cookies(n - 2) + eating_cookies(n - 3)\nif __name__ == \"__main__\":",
        "detail": "mid-range.eating_cookies",
        "documentation": {}
    },
    {
        "label": "install_editable",
        "kind": 2,
        "importPath": "mid-range.editable_legacy",
        "description": "mid-range.editable_legacy",
        "peekOfCode": "def install_editable(\n    install_options,  # type: List[str]\n    global_options,  # type: Sequence[str]\n    prefix,  # type: Optional[str]\n    home,  # type: Optional[str]\n    use_user_site,  # type: bool\n    name,  # type: str\n    setup_py_path,  # type: str\n    isolated,  # type: bool\n    build_env,  # type: BuildEnvironment",
        "detail": "mid-range.editable_legacy",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "mid-range.editable_legacy",
        "description": "mid-range.editable_legacy",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef install_editable(\n    install_options,  # type: List[str]\n    global_options,  # type: Sequence[str]\n    prefix,  # type: Optional[str]\n    home,  # type: Optional[str]\n    use_user_site,  # type: bool\n    name,  # type: str\n    setup_py_path,  # type: str\n    isolated,  # type: bool",
        "detail": "mid-range.editable_legacy",
        "documentation": {}
    },
    {
        "label": "electionsWinners",
        "kind": 2,
        "importPath": "mid-range.election_winners",
        "description": "mid-range.election_winners",
        "peekOfCode": "def electionsWinners(votes, k):\n    \"\"\"Find number of candidates that have chance to win election\n    Args:\n        votes(int): List of number of votes given to each candidate so far.\n        k(int): Number of voters who haven't cast their vote yet.\n    Return:\n        Number of candidates that still have chance to win election\n    Raises:\n    \"\"\"\n    highest = max(votes)",
        "detail": "mid-range.election_winners",
        "documentation": {}
    },
    {
        "label": "Electronic",
        "kind": 6,
        "importPath": "mid-range.Electronic",
        "description": "mid-range.Electronic",
        "peekOfCode": "class Electronic(Product):\n    def __init__(self, name, price, power_rating):\n        super().__init__(name, price)\n        self.power_rating = power_rating\n    def __str__(self):\n        return f\"{super().__str__()} is rated at {self.power_rating}\"",
        "detail": "mid-range.Electronic",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "mid-range.ElementSoup",
        "description": "mid-range.ElementSoup",
        "peekOfCode": "def parse(file, beautifulsoup=None, makeelement=None):\n    root = _parse(file, beautifulsoup=beautifulsoup, makeelement=makeelement)\n    return root.getroot()",
        "detail": "mid-range.ElementSoup",
        "documentation": {}
    },
    {
        "label": "__doc__",
        "kind": 5,
        "importPath": "mid-range.ElementSoup",
        "description": "mid-range.ElementSoup",
        "peekOfCode": "__doc__ = \"\"\"Legacy interface to the BeautifulSoup HTML parser.\n\"\"\"\n__all__ = [\"parse\", \"convert_tree\"]\nfrom .soupparser import convert_tree, parse as _parse\ndef parse(file, beautifulsoup=None, makeelement=None):\n    root = _parse(file, beautifulsoup=beautifulsoup, makeelement=makeelement)\n    return root.getroot()",
        "detail": "mid-range.ElementSoup",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.ElementSoup",
        "description": "mid-range.ElementSoup",
        "peekOfCode": "__all__ = [\"parse\", \"convert_tree\"]\nfrom .soupparser import convert_tree, parse as _parse\ndef parse(file, beautifulsoup=None, makeelement=None):\n    root = _parse(file, beautifulsoup=beautifulsoup, makeelement=makeelement)\n    return root.getroot()",
        "detail": "mid-range.ElementSoup",
        "documentation": {}
    },
    {
        "label": "adjacentElementsProduct",
        "kind": 2,
        "importPath": "mid-range.ElementsProduct",
        "description": "mid-range.ElementsProduct",
        "peekOfCode": "def adjacentElementsProduct(inputArray):\n    # Step 1: Initially, define an empty array where we will store the products of adjacent elements from the input array.\n    ArrayEnd = []\n    # Step 2: Using a for-loop, we go over all entries of the input array, calculating the products of adjacent elements\n    # and appending them to the empty array from step 1.\n    for i in range(len(inputArray) - 1):\n        ArrayEnd.append(inputArray[i] * inputArray[i + 1])\n    # Step 3: We seek the largest entry in \"ArrayEnd\" from step 1, using the max() function.\n    maximum = max(ArrayEnd)\n    return maximum",
        "detail": "mid-range.ElementsProduct",
        "documentation": {}
    },
    {
        "label": "top",
        "kind": 5,
        "importPath": "mid-range.ElementTree_create",
        "description": "mid-range.ElementTree_create",
        "peekOfCode": "top = Element(\"top\")\ncomment = Comment(\"Generated for PyMOTW\")\ntop.append(comment)\nchild = SubElement(top, \"child\")\nchild.text = \"This child contains text.\"\nchild_with_tail = SubElement(top, \"child_with_tail\")\nchild_with_tail.text = \"This child has text.\"\nchild_with_tail.tail = 'And \"tail\" text.'\nchild_with_entity_ref = SubElement(top, \"child_with_entity_ref\")\nchild_with_entity_ref.text = \"This & that\"",
        "detail": "mid-range.ElementTree_create",
        "documentation": {}
    },
    {
        "label": "comment",
        "kind": 5,
        "importPath": "mid-range.ElementTree_create",
        "description": "mid-range.ElementTree_create",
        "peekOfCode": "comment = Comment(\"Generated for PyMOTW\")\ntop.append(comment)\nchild = SubElement(top, \"child\")\nchild.text = \"This child contains text.\"\nchild_with_tail = SubElement(top, \"child_with_tail\")\nchild_with_tail.text = \"This child has text.\"\nchild_with_tail.tail = 'And \"tail\" text.'\nchild_with_entity_ref = SubElement(top, \"child_with_entity_ref\")\nchild_with_entity_ref.text = \"This & that\"\nprint(tostring(top))",
        "detail": "mid-range.ElementTree_create",
        "documentation": {}
    },
    {
        "label": "child",
        "kind": 5,
        "importPath": "mid-range.ElementTree_create",
        "description": "mid-range.ElementTree_create",
        "peekOfCode": "child = SubElement(top, \"child\")\nchild.text = \"This child contains text.\"\nchild_with_tail = SubElement(top, \"child_with_tail\")\nchild_with_tail.text = \"This child has text.\"\nchild_with_tail.tail = 'And \"tail\" text.'\nchild_with_entity_ref = SubElement(top, \"child_with_entity_ref\")\nchild_with_entity_ref.text = \"This & that\"\nprint(tostring(top))",
        "detail": "mid-range.ElementTree_create",
        "documentation": {}
    },
    {
        "label": "child.text",
        "kind": 5,
        "importPath": "mid-range.ElementTree_create",
        "description": "mid-range.ElementTree_create",
        "peekOfCode": "child.text = \"This child contains text.\"\nchild_with_tail = SubElement(top, \"child_with_tail\")\nchild_with_tail.text = \"This child has text.\"\nchild_with_tail.tail = 'And \"tail\" text.'\nchild_with_entity_ref = SubElement(top, \"child_with_entity_ref\")\nchild_with_entity_ref.text = \"This & that\"\nprint(tostring(top))",
        "detail": "mid-range.ElementTree_create",
        "documentation": {}
    },
    {
        "label": "child_with_tail",
        "kind": 5,
        "importPath": "mid-range.ElementTree_create",
        "description": "mid-range.ElementTree_create",
        "peekOfCode": "child_with_tail = SubElement(top, \"child_with_tail\")\nchild_with_tail.text = \"This child has text.\"\nchild_with_tail.tail = 'And \"tail\" text.'\nchild_with_entity_ref = SubElement(top, \"child_with_entity_ref\")\nchild_with_entity_ref.text = \"This & that\"\nprint(tostring(top))",
        "detail": "mid-range.ElementTree_create",
        "documentation": {}
    },
    {
        "label": "child_with_tail.text",
        "kind": 5,
        "importPath": "mid-range.ElementTree_create",
        "description": "mid-range.ElementTree_create",
        "peekOfCode": "child_with_tail.text = \"This child has text.\"\nchild_with_tail.tail = 'And \"tail\" text.'\nchild_with_entity_ref = SubElement(top, \"child_with_entity_ref\")\nchild_with_entity_ref.text = \"This & that\"\nprint(tostring(top))",
        "detail": "mid-range.ElementTree_create",
        "documentation": {}
    },
    {
        "label": "child_with_tail.tail",
        "kind": 5,
        "importPath": "mid-range.ElementTree_create",
        "description": "mid-range.ElementTree_create",
        "peekOfCode": "child_with_tail.tail = 'And \"tail\" text.'\nchild_with_entity_ref = SubElement(top, \"child_with_entity_ref\")\nchild_with_entity_ref.text = \"This & that\"\nprint(tostring(top))",
        "detail": "mid-range.ElementTree_create",
        "documentation": {}
    },
    {
        "label": "child_with_entity_ref",
        "kind": 5,
        "importPath": "mid-range.ElementTree_create",
        "description": "mid-range.ElementTree_create",
        "peekOfCode": "child_with_entity_ref = SubElement(top, \"child_with_entity_ref\")\nchild_with_entity_ref.text = \"This & that\"\nprint(tostring(top))",
        "detail": "mid-range.ElementTree_create",
        "documentation": {}
    },
    {
        "label": "child_with_entity_ref.text",
        "kind": 5,
        "importPath": "mid-range.ElementTree_create",
        "description": "mid-range.ElementTree_create",
        "peekOfCode": "child_with_entity_ref.text = \"This & that\"\nprint(tostring(top))",
        "detail": "mid-range.ElementTree_create",
        "documentation": {}
    },
    {
        "label": "top",
        "kind": 5,
        "importPath": "mid-range.ElementTree_create_pretty",
        "description": "mid-range.ElementTree_create_pretty",
        "peekOfCode": "top = Element(\"top\")\ncomment = Comment(\"Generated for PyMOTW\")\ntop.append(comment)\nchild = SubElement(top, \"child\")\nchild.text = \"This child contains text.\"\nchild_with_tail = SubElement(top, \"child_with_tail\")\nchild_with_tail.text = \"This child has text.\"\nchild_with_tail.tail = 'And \"tail\" text.'\nchild_with_entity_ref = SubElement(top, \"child_with_entity_ref\")\nchild_with_entity_ref.text = \"This & that\"",
        "detail": "mid-range.ElementTree_create_pretty",
        "documentation": {}
    },
    {
        "label": "comment",
        "kind": 5,
        "importPath": "mid-range.ElementTree_create_pretty",
        "description": "mid-range.ElementTree_create_pretty",
        "peekOfCode": "comment = Comment(\"Generated for PyMOTW\")\ntop.append(comment)\nchild = SubElement(top, \"child\")\nchild.text = \"This child contains text.\"\nchild_with_tail = SubElement(top, \"child_with_tail\")\nchild_with_tail.text = \"This child has text.\"\nchild_with_tail.tail = 'And \"tail\" text.'\nchild_with_entity_ref = SubElement(top, \"child_with_entity_ref\")\nchild_with_entity_ref.text = \"This & that\"\nprint(prettify(top))",
        "detail": "mid-range.ElementTree_create_pretty",
        "documentation": {}
    },
    {
        "label": "child",
        "kind": 5,
        "importPath": "mid-range.ElementTree_create_pretty",
        "description": "mid-range.ElementTree_create_pretty",
        "peekOfCode": "child = SubElement(top, \"child\")\nchild.text = \"This child contains text.\"\nchild_with_tail = SubElement(top, \"child_with_tail\")\nchild_with_tail.text = \"This child has text.\"\nchild_with_tail.tail = 'And \"tail\" text.'\nchild_with_entity_ref = SubElement(top, \"child_with_entity_ref\")\nchild_with_entity_ref.text = \"This & that\"\nprint(prettify(top))",
        "detail": "mid-range.ElementTree_create_pretty",
        "documentation": {}
    },
    {
        "label": "child.text",
        "kind": 5,
        "importPath": "mid-range.ElementTree_create_pretty",
        "description": "mid-range.ElementTree_create_pretty",
        "peekOfCode": "child.text = \"This child contains text.\"\nchild_with_tail = SubElement(top, \"child_with_tail\")\nchild_with_tail.text = \"This child has text.\"\nchild_with_tail.tail = 'And \"tail\" text.'\nchild_with_entity_ref = SubElement(top, \"child_with_entity_ref\")\nchild_with_entity_ref.text = \"This & that\"\nprint(prettify(top))",
        "detail": "mid-range.ElementTree_create_pretty",
        "documentation": {}
    },
    {
        "label": "child_with_tail",
        "kind": 5,
        "importPath": "mid-range.ElementTree_create_pretty",
        "description": "mid-range.ElementTree_create_pretty",
        "peekOfCode": "child_with_tail = SubElement(top, \"child_with_tail\")\nchild_with_tail.text = \"This child has text.\"\nchild_with_tail.tail = 'And \"tail\" text.'\nchild_with_entity_ref = SubElement(top, \"child_with_entity_ref\")\nchild_with_entity_ref.text = \"This & that\"\nprint(prettify(top))",
        "detail": "mid-range.ElementTree_create_pretty",
        "documentation": {}
    },
    {
        "label": "child_with_tail.text",
        "kind": 5,
        "importPath": "mid-range.ElementTree_create_pretty",
        "description": "mid-range.ElementTree_create_pretty",
        "peekOfCode": "child_with_tail.text = \"This child has text.\"\nchild_with_tail.tail = 'And \"tail\" text.'\nchild_with_entity_ref = SubElement(top, \"child_with_entity_ref\")\nchild_with_entity_ref.text = \"This & that\"\nprint(prettify(top))",
        "detail": "mid-range.ElementTree_create_pretty",
        "documentation": {}
    },
    {
        "label": "child_with_tail.tail",
        "kind": 5,
        "importPath": "mid-range.ElementTree_create_pretty",
        "description": "mid-range.ElementTree_create_pretty",
        "peekOfCode": "child_with_tail.tail = 'And \"tail\" text.'\nchild_with_entity_ref = SubElement(top, \"child_with_entity_ref\")\nchild_with_entity_ref.text = \"This & that\"\nprint(prettify(top))",
        "detail": "mid-range.ElementTree_create_pretty",
        "documentation": {}
    },
    {
        "label": "child_with_entity_ref",
        "kind": 5,
        "importPath": "mid-range.ElementTree_create_pretty",
        "description": "mid-range.ElementTree_create_pretty",
        "peekOfCode": "child_with_entity_ref = SubElement(top, \"child_with_entity_ref\")\nchild_with_entity_ref.text = \"This & that\"\nprint(prettify(top))",
        "detail": "mid-range.ElementTree_create_pretty",
        "documentation": {}
    },
    {
        "label": "child_with_entity_ref.text",
        "kind": 5,
        "importPath": "mid-range.ElementTree_create_pretty",
        "description": "mid-range.ElementTree_create_pretty",
        "peekOfCode": "child_with_entity_ref.text = \"This & that\"\nprint(prettify(top))",
        "detail": "mid-range.ElementTree_create_pretty",
        "documentation": {}
    },
    {
        "label": "generated_on",
        "kind": 5,
        "importPath": "mid-range.ElementTree_csv_to_xml",
        "description": "mid-range.ElementTree_csv_to_xml",
        "peekOfCode": "generated_on = str(datetime.datetime.now())\n# Configure one attribute with set()\nroot = Element(\"opml\")\nroot.set(\"version\", \"1.0\")\nroot.append(Comment(\"Generated by ElementTree_csv_to_xml.py for PyMOTW\"))\nhead = SubElement(root, \"head\")\ntitle = SubElement(head, \"title\")\ntitle.text = \"My Podcasts\"\ndc = SubElement(head, \"dateCreated\")\ndc.text = generated_on",
        "detail": "mid-range.ElementTree_csv_to_xml",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "mid-range.ElementTree_csv_to_xml",
        "description": "mid-range.ElementTree_csv_to_xml",
        "peekOfCode": "root = Element(\"opml\")\nroot.set(\"version\", \"1.0\")\nroot.append(Comment(\"Generated by ElementTree_csv_to_xml.py for PyMOTW\"))\nhead = SubElement(root, \"head\")\ntitle = SubElement(head, \"title\")\ntitle.text = \"My Podcasts\"\ndc = SubElement(head, \"dateCreated\")\ndc.text = generated_on\ndm = SubElement(head, \"dateModified\")\ndm.text = generated_on",
        "detail": "mid-range.ElementTree_csv_to_xml",
        "documentation": {}
    },
    {
        "label": "head",
        "kind": 5,
        "importPath": "mid-range.ElementTree_csv_to_xml",
        "description": "mid-range.ElementTree_csv_to_xml",
        "peekOfCode": "head = SubElement(root, \"head\")\ntitle = SubElement(head, \"title\")\ntitle.text = \"My Podcasts\"\ndc = SubElement(head, \"dateCreated\")\ndc.text = generated_on\ndm = SubElement(head, \"dateModified\")\ndm.text = generated_on\nbody = SubElement(root, \"body\")\nwith open(\"podcasts.csv\", \"rt\") as f:\n    current_group = None",
        "detail": "mid-range.ElementTree_csv_to_xml",
        "documentation": {}
    },
    {
        "label": "title",
        "kind": 5,
        "importPath": "mid-range.ElementTree_csv_to_xml",
        "description": "mid-range.ElementTree_csv_to_xml",
        "peekOfCode": "title = SubElement(head, \"title\")\ntitle.text = \"My Podcasts\"\ndc = SubElement(head, \"dateCreated\")\ndc.text = generated_on\ndm = SubElement(head, \"dateModified\")\ndm.text = generated_on\nbody = SubElement(root, \"body\")\nwith open(\"podcasts.csv\", \"rt\") as f:\n    current_group = None\n    reader = csv.reader(f)",
        "detail": "mid-range.ElementTree_csv_to_xml",
        "documentation": {}
    },
    {
        "label": "title.text",
        "kind": 5,
        "importPath": "mid-range.ElementTree_csv_to_xml",
        "description": "mid-range.ElementTree_csv_to_xml",
        "peekOfCode": "title.text = \"My Podcasts\"\ndc = SubElement(head, \"dateCreated\")\ndc.text = generated_on\ndm = SubElement(head, \"dateModified\")\ndm.text = generated_on\nbody = SubElement(root, \"body\")\nwith open(\"podcasts.csv\", \"rt\") as f:\n    current_group = None\n    reader = csv.reader(f)\n    for row in reader:",
        "detail": "mid-range.ElementTree_csv_to_xml",
        "documentation": {}
    },
    {
        "label": "dc",
        "kind": 5,
        "importPath": "mid-range.ElementTree_csv_to_xml",
        "description": "mid-range.ElementTree_csv_to_xml",
        "peekOfCode": "dc = SubElement(head, \"dateCreated\")\ndc.text = generated_on\ndm = SubElement(head, \"dateModified\")\ndm.text = generated_on\nbody = SubElement(root, \"body\")\nwith open(\"podcasts.csv\", \"rt\") as f:\n    current_group = None\n    reader = csv.reader(f)\n    for row in reader:\n        group_name, podcast_name, xml_url, html_url = row",
        "detail": "mid-range.ElementTree_csv_to_xml",
        "documentation": {}
    },
    {
        "label": "dc.text",
        "kind": 5,
        "importPath": "mid-range.ElementTree_csv_to_xml",
        "description": "mid-range.ElementTree_csv_to_xml",
        "peekOfCode": "dc.text = generated_on\ndm = SubElement(head, \"dateModified\")\ndm.text = generated_on\nbody = SubElement(root, \"body\")\nwith open(\"podcasts.csv\", \"rt\") as f:\n    current_group = None\n    reader = csv.reader(f)\n    for row in reader:\n        group_name, podcast_name, xml_url, html_url = row\n        if current_group is None or group_name != current_group.text:",
        "detail": "mid-range.ElementTree_csv_to_xml",
        "documentation": {}
    },
    {
        "label": "dm",
        "kind": 5,
        "importPath": "mid-range.ElementTree_csv_to_xml",
        "description": "mid-range.ElementTree_csv_to_xml",
        "peekOfCode": "dm = SubElement(head, \"dateModified\")\ndm.text = generated_on\nbody = SubElement(root, \"body\")\nwith open(\"podcasts.csv\", \"rt\") as f:\n    current_group = None\n    reader = csv.reader(f)\n    for row in reader:\n        group_name, podcast_name, xml_url, html_url = row\n        if current_group is None or group_name != current_group.text:\n            # Start a new group",
        "detail": "mid-range.ElementTree_csv_to_xml",
        "documentation": {}
    },
    {
        "label": "dm.text",
        "kind": 5,
        "importPath": "mid-range.ElementTree_csv_to_xml",
        "description": "mid-range.ElementTree_csv_to_xml",
        "peekOfCode": "dm.text = generated_on\nbody = SubElement(root, \"body\")\nwith open(\"podcasts.csv\", \"rt\") as f:\n    current_group = None\n    reader = csv.reader(f)\n    for row in reader:\n        group_name, podcast_name, xml_url, html_url = row\n        if current_group is None or group_name != current_group.text:\n            # Start a new group\n            current_group = SubElement(body, \"outline\", {\"text\": group_name})",
        "detail": "mid-range.ElementTree_csv_to_xml",
        "documentation": {}
    },
    {
        "label": "body",
        "kind": 5,
        "importPath": "mid-range.ElementTree_csv_to_xml",
        "description": "mid-range.ElementTree_csv_to_xml",
        "peekOfCode": "body = SubElement(root, \"body\")\nwith open(\"podcasts.csv\", \"rt\") as f:\n    current_group = None\n    reader = csv.reader(f)\n    for row in reader:\n        group_name, podcast_name, xml_url, html_url = row\n        if current_group is None or group_name != current_group.text:\n            # Start a new group\n            current_group = SubElement(body, \"outline\", {\"text\": group_name})\n        # Add this podcast to the group,",
        "detail": "mid-range.ElementTree_csv_to_xml",
        "documentation": {}
    },
    {
        "label": "node",
        "kind": 5,
        "importPath": "mid-range.ElementTree_entity_references",
        "description": "mid-range.ElementTree_entity_references",
        "peekOfCode": "node = tree.find(\"entity_expansion\")\nprint(node.tag)\nprint(\"  in attribute:\", node.attrib[\"attribute\"])\nprint(\"  in text     :\", node.text.strip())",
        "detail": "mid-range.ElementTree_entity_references",
        "documentation": {}
    },
    {
        "label": "top",
        "kind": 5,
        "importPath": "mid-range.ElementTree_extend",
        "description": "mid-range.ElementTree_extend",
        "peekOfCode": "top = Element(\"top\")\nchildren = [Element(\"child\", num=str(i)) for i in range(3)]\ntop.extend(children)\nprint(prettify(top))",
        "detail": "mid-range.ElementTree_extend",
        "documentation": {}
    },
    {
        "label": "children",
        "kind": 5,
        "importPath": "mid-range.ElementTree_extend",
        "description": "mid-range.ElementTree_extend",
        "peekOfCode": "children = [Element(\"child\", num=str(i)) for i in range(3)]\ntop.extend(children)\nprint(prettify(top))",
        "detail": "mid-range.ElementTree_extend",
        "documentation": {}
    },
    {
        "label": "top",
        "kind": 5,
        "importPath": "mid-range.ElementTree_extend_node",
        "description": "mid-range.ElementTree_extend_node",
        "peekOfCode": "top = Element(\"top\")\nparent = SubElement(top, \"parent\")\nchildren = XML('<root><child num=\"0\" /><child num=\"1\" />' '<child num=\"2\" /></root>')\nparent.extend(children)\nprint(prettify(top))",
        "detail": "mid-range.ElementTree_extend_node",
        "documentation": {}
    },
    {
        "label": "parent",
        "kind": 5,
        "importPath": "mid-range.ElementTree_extend_node",
        "description": "mid-range.ElementTree_extend_node",
        "peekOfCode": "parent = SubElement(top, \"parent\")\nchildren = XML('<root><child num=\"0\" /><child num=\"1\" />' '<child num=\"2\" /></root>')\nparent.extend(children)\nprint(prettify(top))",
        "detail": "mid-range.ElementTree_extend_node",
        "documentation": {}
    },
    {
        "label": "children",
        "kind": 5,
        "importPath": "mid-range.ElementTree_extend_node",
        "description": "mid-range.ElementTree_extend_node",
        "peekOfCode": "children = XML('<root><child num=\"0\" /><child num=\"1\" />' '<child num=\"2\" /></root>')\nparent.extend(children)\nprint(prettify(top))",
        "detail": "mid-range.ElementTree_extend_node",
        "documentation": {}
    },
    {
        "label": "top",
        "kind": 5,
        "importPath": "mid-range.ElementTree_extend_node_copy",
        "description": "mid-range.ElementTree_extend_node_copy",
        "peekOfCode": "top = Element(\"top\")\nparent_a = SubElement(top, \"parent\", id=\"A\")\nparent_b = SubElement(top, \"parent\", id=\"B\")\n# Create children\nchildren = XML('<root><child num=\"0\" /><child num=\"1\" />' '<child num=\"2\" /></root>')\n# Set the id to the Python object id of the node\n# to make duplicates easier to spot.\nfor c in children:\n    c.set(\"id\", str(id(c)))\n# Add to first parent",
        "detail": "mid-range.ElementTree_extend_node_copy",
        "documentation": {}
    },
    {
        "label": "parent_a",
        "kind": 5,
        "importPath": "mid-range.ElementTree_extend_node_copy",
        "description": "mid-range.ElementTree_extend_node_copy",
        "peekOfCode": "parent_a = SubElement(top, \"parent\", id=\"A\")\nparent_b = SubElement(top, \"parent\", id=\"B\")\n# Create children\nchildren = XML('<root><child num=\"0\" /><child num=\"1\" />' '<child num=\"2\" /></root>')\n# Set the id to the Python object id of the node\n# to make duplicates easier to spot.\nfor c in children:\n    c.set(\"id\", str(id(c)))\n# Add to first parent\nparent_a.extend(children)",
        "detail": "mid-range.ElementTree_extend_node_copy",
        "documentation": {}
    },
    {
        "label": "parent_b",
        "kind": 5,
        "importPath": "mid-range.ElementTree_extend_node_copy",
        "description": "mid-range.ElementTree_extend_node_copy",
        "peekOfCode": "parent_b = SubElement(top, \"parent\", id=\"B\")\n# Create children\nchildren = XML('<root><child num=\"0\" /><child num=\"1\" />' '<child num=\"2\" /></root>')\n# Set the id to the Python object id of the node\n# to make duplicates easier to spot.\nfor c in children:\n    c.set(\"id\", str(id(c)))\n# Add to first parent\nparent_a.extend(children)\nprint(\"A:\")",
        "detail": "mid-range.ElementTree_extend_node_copy",
        "documentation": {}
    },
    {
        "label": "children",
        "kind": 5,
        "importPath": "mid-range.ElementTree_extend_node_copy",
        "description": "mid-range.ElementTree_extend_node_copy",
        "peekOfCode": "children = XML('<root><child num=\"0\" /><child num=\"1\" />' '<child num=\"2\" /></root>')\n# Set the id to the Python object id of the node\n# to make duplicates easier to spot.\nfor c in children:\n    c.set(\"id\", str(id(c)))\n# Add to first parent\nparent_a.extend(children)\nprint(\"A:\")\nprint(prettify(top))\nprint()",
        "detail": "mid-range.ElementTree_extend_node_copy",
        "documentation": {}
    },
    {
        "label": "node",
        "kind": 5,
        "importPath": "mid-range.ElementTree_node_attributes",
        "description": "mid-range.ElementTree_node_attributes",
        "peekOfCode": "node = tree.find(\"./with_attributes\")\nprint(node.tag)\nfor name, value in sorted(node.attrib.items()):\n    print('  %-4s = \"%s\"' % (name, value))",
        "detail": "mid-range.ElementTree_node_attributes",
        "documentation": {}
    },
    {
        "label": "PodcastListToCSV",
        "kind": 6,
        "importPath": "mid-range.ElementTree_podcast_csv_treebuilder",
        "description": "mid-range.ElementTree_podcast_csv_treebuilder",
        "peekOfCode": "class PodcastListToCSV(object):\n    def __init__(self, outputFile):\n        self.writer = csv.writer(outputFile, quoting=csv.QUOTE_NONNUMERIC)\n        self.group_name = \"\"\n    def start(self, tag, attrib):\n        if tag != \"outline\":\n            # Ignore anything not part of the outline\n            return\n        if not attrib.get(\"xmlUrl\"):\n            # Remember the current group",
        "detail": "mid-range.ElementTree_podcast_csv_treebuilder",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "mid-range.ElementTree_podcast_csv_treebuilder",
        "description": "mid-range.ElementTree_podcast_csv_treebuilder",
        "peekOfCode": "target = PodcastListToCSV(sys.stdout)\nparser = XMLParser(target=target)\nwith open(\"podcasts.opml\", \"rt\") as f:\n    for line in f:\n        parser.feed(line)\nparser.close()",
        "detail": "mid-range.ElementTree_podcast_csv_treebuilder",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.ElementTree_podcast_csv_treebuilder",
        "description": "mid-range.ElementTree_podcast_csv_treebuilder",
        "peekOfCode": "parser = XMLParser(target=target)\nwith open(\"podcasts.opml\", \"rt\") as f:\n    for line in f:\n        parser.feed(line)\nparser.close()",
        "detail": "mid-range.ElementTree_podcast_csv_treebuilder",
        "documentation": {}
    },
    {
        "label": "prettify",
        "kind": 2,
        "importPath": "mid-range.ElementTree_pretty",
        "description": "mid-range.ElementTree_pretty",
        "peekOfCode": "def prettify(elem):\n    \"\"\"Return a pretty-printed XML string for the Element.\n    \"\"\"\n    rough_string = ElementTree.tostring(elem, \"utf-8\")\n    reparsed = minidom.parseString(rough_string)\n    return reparsed.toprettyxml(indent=\"  \")",
        "detail": "mid-range.ElementTree_pretty",
        "documentation": {}
    },
    {
        "label": "depth",
        "kind": 5,
        "importPath": "mid-range.ElementTree_show_all_events",
        "description": "mid-range.ElementTree_show_all_events",
        "peekOfCode": "depth = 0\nprefix_width = 8\nprefix_dots = \".\" * prefix_width\nline_template = \"\".join(\n    [\n        \"{prefix:<0.{prefix_len}}\",\n        \"{event:<8}\",\n        \"{suffix:<{suffix_len}} \",\n        \"{node.tag:<12} \",\n        \"{node_id}\",",
        "detail": "mid-range.ElementTree_show_all_events",
        "documentation": {}
    },
    {
        "label": "prefix_width",
        "kind": 5,
        "importPath": "mid-range.ElementTree_show_all_events",
        "description": "mid-range.ElementTree_show_all_events",
        "peekOfCode": "prefix_width = 8\nprefix_dots = \".\" * prefix_width\nline_template = \"\".join(\n    [\n        \"{prefix:<0.{prefix_len}}\",\n        \"{event:<8}\",\n        \"{suffix:<{suffix_len}} \",\n        \"{node.tag:<12} \",\n        \"{node_id}\",\n    ]",
        "detail": "mid-range.ElementTree_show_all_events",
        "documentation": {}
    },
    {
        "label": "prefix_dots",
        "kind": 5,
        "importPath": "mid-range.ElementTree_show_all_events",
        "description": "mid-range.ElementTree_show_all_events",
        "peekOfCode": "prefix_dots = \".\" * prefix_width\nline_template = \"\".join(\n    [\n        \"{prefix:<0.{prefix_len}}\",\n        \"{event:<8}\",\n        \"{suffix:<{suffix_len}} \",\n        \"{node.tag:<12} \",\n        \"{node_id}\",\n    ]\n)",
        "detail": "mid-range.ElementTree_show_all_events",
        "documentation": {}
    },
    {
        "label": "line_template",
        "kind": 5,
        "importPath": "mid-range.ElementTree_show_all_events",
        "description": "mid-range.ElementTree_show_all_events",
        "peekOfCode": "line_template = \"\".join(\n    [\n        \"{prefix:<0.{prefix_len}}\",\n        \"{event:<8}\",\n        \"{suffix:<{suffix_len}} \",\n        \"{node.tag:<12} \",\n        \"{node_id}\",\n    ]\n)\nEVENT_NAMES = [\"start\", \"end\", \"start-ns\", \"end-ns\"]",
        "detail": "mid-range.ElementTree_show_all_events",
        "documentation": {}
    },
    {
        "label": "EVENT_NAMES",
        "kind": 5,
        "importPath": "mid-range.ElementTree_show_all_events",
        "description": "mid-range.ElementTree_show_all_events",
        "peekOfCode": "EVENT_NAMES = [\"start\", \"end\", \"start-ns\", \"end-ns\"]\nfor (event, node) in iterparse(\"podcasts.opml\", EVENT_NAMES):\n    if event == \"end\":\n        depth -= 1\n    prefix_len = depth * 2\n    print(\n        line_template.format(\n            prefix=prefix_dots,\n            prefix_len=prefix_len,\n            suffix=\"\",",
        "detail": "mid-range.ElementTree_show_all_events",
        "documentation": {}
    },
    {
        "label": "top",
        "kind": 5,
        "importPath": "mid-range.ElementTree_write",
        "description": "mid-range.ElementTree_write",
        "peekOfCode": "top = Element(\"top\")\ncomment = Comment(\"Generated for PyMOTW\")\ntop.append(comment)\nchild = SubElement(top, \"child\")\nchild.text = \"This child contains text.\"\nchild_with_tail = SubElement(top, \"child_with_tail\")\nchild_with_tail.text = \"This child has regular text.\"\nchild_with_tail.tail = 'And \"tail\" text.'\nchild_with_entity_ref = SubElement(top, \"child_with_entity_ref\")\nchild_with_entity_ref.text = \"This & that\"",
        "detail": "mid-range.ElementTree_write",
        "documentation": {}
    },
    {
        "label": "comment",
        "kind": 5,
        "importPath": "mid-range.ElementTree_write",
        "description": "mid-range.ElementTree_write",
        "peekOfCode": "comment = Comment(\"Generated for PyMOTW\")\ntop.append(comment)\nchild = SubElement(top, \"child\")\nchild.text = \"This child contains text.\"\nchild_with_tail = SubElement(top, \"child_with_tail\")\nchild_with_tail.text = \"This child has regular text.\"\nchild_with_tail.tail = 'And \"tail\" text.'\nchild_with_entity_ref = SubElement(top, \"child_with_entity_ref\")\nchild_with_entity_ref.text = \"This & that\"\nempty_child = SubElement(top, \"empty_child\")",
        "detail": "mid-range.ElementTree_write",
        "documentation": {}
    },
    {
        "label": "child",
        "kind": 5,
        "importPath": "mid-range.ElementTree_write",
        "description": "mid-range.ElementTree_write",
        "peekOfCode": "child = SubElement(top, \"child\")\nchild.text = \"This child contains text.\"\nchild_with_tail = SubElement(top, \"child_with_tail\")\nchild_with_tail.text = \"This child has regular text.\"\nchild_with_tail.tail = 'And \"tail\" text.'\nchild_with_entity_ref = SubElement(top, \"child_with_entity_ref\")\nchild_with_entity_ref.text = \"This & that\"\nempty_child = SubElement(top, \"empty_child\")\nElementTree(top).write(sys.stdout.buffer)",
        "detail": "mid-range.ElementTree_write",
        "documentation": {}
    },
    {
        "label": "child.text",
        "kind": 5,
        "importPath": "mid-range.ElementTree_write",
        "description": "mid-range.ElementTree_write",
        "peekOfCode": "child.text = \"This child contains text.\"\nchild_with_tail = SubElement(top, \"child_with_tail\")\nchild_with_tail.text = \"This child has regular text.\"\nchild_with_tail.tail = 'And \"tail\" text.'\nchild_with_entity_ref = SubElement(top, \"child_with_entity_ref\")\nchild_with_entity_ref.text = \"This & that\"\nempty_child = SubElement(top, \"empty_child\")\nElementTree(top).write(sys.stdout.buffer)",
        "detail": "mid-range.ElementTree_write",
        "documentation": {}
    },
    {
        "label": "child_with_tail",
        "kind": 5,
        "importPath": "mid-range.ElementTree_write",
        "description": "mid-range.ElementTree_write",
        "peekOfCode": "child_with_tail = SubElement(top, \"child_with_tail\")\nchild_with_tail.text = \"This child has regular text.\"\nchild_with_tail.tail = 'And \"tail\" text.'\nchild_with_entity_ref = SubElement(top, \"child_with_entity_ref\")\nchild_with_entity_ref.text = \"This & that\"\nempty_child = SubElement(top, \"empty_child\")\nElementTree(top).write(sys.stdout.buffer)",
        "detail": "mid-range.ElementTree_write",
        "documentation": {}
    },
    {
        "label": "child_with_tail.text",
        "kind": 5,
        "importPath": "mid-range.ElementTree_write",
        "description": "mid-range.ElementTree_write",
        "peekOfCode": "child_with_tail.text = \"This child has regular text.\"\nchild_with_tail.tail = 'And \"tail\" text.'\nchild_with_entity_ref = SubElement(top, \"child_with_entity_ref\")\nchild_with_entity_ref.text = \"This & that\"\nempty_child = SubElement(top, \"empty_child\")\nElementTree(top).write(sys.stdout.buffer)",
        "detail": "mid-range.ElementTree_write",
        "documentation": {}
    },
    {
        "label": "child_with_tail.tail",
        "kind": 5,
        "importPath": "mid-range.ElementTree_write",
        "description": "mid-range.ElementTree_write",
        "peekOfCode": "child_with_tail.tail = 'And \"tail\" text.'\nchild_with_entity_ref = SubElement(top, \"child_with_entity_ref\")\nchild_with_entity_ref.text = \"This & that\"\nempty_child = SubElement(top, \"empty_child\")\nElementTree(top).write(sys.stdout.buffer)",
        "detail": "mid-range.ElementTree_write",
        "documentation": {}
    },
    {
        "label": "child_with_entity_ref",
        "kind": 5,
        "importPath": "mid-range.ElementTree_write",
        "description": "mid-range.ElementTree_write",
        "peekOfCode": "child_with_entity_ref = SubElement(top, \"child_with_entity_ref\")\nchild_with_entity_ref.text = \"This & that\"\nempty_child = SubElement(top, \"empty_child\")\nElementTree(top).write(sys.stdout.buffer)",
        "detail": "mid-range.ElementTree_write",
        "documentation": {}
    },
    {
        "label": "child_with_entity_ref.text",
        "kind": 5,
        "importPath": "mid-range.ElementTree_write",
        "description": "mid-range.ElementTree_write",
        "peekOfCode": "child_with_entity_ref.text = \"This & that\"\nempty_child = SubElement(top, \"empty_child\")\nElementTree(top).write(sys.stdout.buffer)",
        "detail": "mid-range.ElementTree_write",
        "documentation": {}
    },
    {
        "label": "empty_child",
        "kind": 5,
        "importPath": "mid-range.ElementTree_write",
        "description": "mid-range.ElementTree_write",
        "peekOfCode": "empty_child = SubElement(top, \"empty_child\")\nElementTree(top).write(sys.stdout.buffer)",
        "detail": "mid-range.ElementTree_write",
        "documentation": {}
    },
    {
        "label": "top",
        "kind": 5,
        "importPath": "mid-range.ElementTree_write_method",
        "description": "mid-range.ElementTree_write_method",
        "peekOfCode": "top = Element(\"top\")\nchild = SubElement(top, \"child\")\nchild.text = \"Contains text.\"\nempty_child = SubElement(top, \"empty_child\")\nfor method in [\"xml\", \"html\", \"text\"]:\n    print(method)\n    sys.stdout.flush()\n    ElementTree(top).write(sys.stdout.buffer, method=method)\n    print(\"\\n\")",
        "detail": "mid-range.ElementTree_write_method",
        "documentation": {}
    },
    {
        "label": "child",
        "kind": 5,
        "importPath": "mid-range.ElementTree_write_method",
        "description": "mid-range.ElementTree_write_method",
        "peekOfCode": "child = SubElement(top, \"child\")\nchild.text = \"Contains text.\"\nempty_child = SubElement(top, \"empty_child\")\nfor method in [\"xml\", \"html\", \"text\"]:\n    print(method)\n    sys.stdout.flush()\n    ElementTree(top).write(sys.stdout.buffer, method=method)\n    print(\"\\n\")",
        "detail": "mid-range.ElementTree_write_method",
        "documentation": {}
    },
    {
        "label": "child.text",
        "kind": 5,
        "importPath": "mid-range.ElementTree_write_method",
        "description": "mid-range.ElementTree_write_method",
        "peekOfCode": "child.text = \"Contains text.\"\nempty_child = SubElement(top, \"empty_child\")\nfor method in [\"xml\", \"html\", \"text\"]:\n    print(method)\n    sys.stdout.flush()\n    ElementTree(top).write(sys.stdout.buffer, method=method)\n    print(\"\\n\")",
        "detail": "mid-range.ElementTree_write_method",
        "documentation": {}
    },
    {
        "label": "empty_child",
        "kind": 5,
        "importPath": "mid-range.ElementTree_write_method",
        "description": "mid-range.ElementTree_write_method",
        "peekOfCode": "empty_child = SubElement(top, \"empty_child\")\nfor method in [\"xml\", \"html\", \"text\"]:\n    print(method)\n    sys.stdout.flush()\n    ElementTree(top).write(sys.stdout.buffer, method=method)\n    print(\"\\n\")",
        "detail": "mid-range.ElementTree_write_method",
        "documentation": {}
    },
    {
        "label": "writer",
        "kind": 5,
        "importPath": "mid-range.ElementTree_write_podcast_csv",
        "description": "mid-range.ElementTree_write_podcast_csv",
        "peekOfCode": "writer = csv.writer(sys.stdout, quoting=csv.QUOTE_NONNUMERIC)\ngroup_name = \"\"\nparsing = iterparse(\"podcasts.opml\", events=[\"start\"])\nfor (event, node) in parsing:\n    if node.tag != \"outline\":\n        # Ignore anything not part of the outline\n        continue\n    if not node.attrib.get(\"xmlUrl\"):\n        # Remember the current group\n        group_name = node.attrib[\"text\"]",
        "detail": "mid-range.ElementTree_write_podcast_csv",
        "documentation": {}
    },
    {
        "label": "group_name",
        "kind": 5,
        "importPath": "mid-range.ElementTree_write_podcast_csv",
        "description": "mid-range.ElementTree_write_podcast_csv",
        "peekOfCode": "group_name = \"\"\nparsing = iterparse(\"podcasts.opml\", events=[\"start\"])\nfor (event, node) in parsing:\n    if node.tag != \"outline\":\n        # Ignore anything not part of the outline\n        continue\n    if not node.attrib.get(\"xmlUrl\"):\n        # Remember the current group\n        group_name = node.attrib[\"text\"]\n    else:",
        "detail": "mid-range.ElementTree_write_podcast_csv",
        "documentation": {}
    },
    {
        "label": "parsing",
        "kind": 5,
        "importPath": "mid-range.ElementTree_write_podcast_csv",
        "description": "mid-range.ElementTree_write_podcast_csv",
        "peekOfCode": "parsing = iterparse(\"podcasts.opml\", events=[\"start\"])\nfor (event, node) in parsing:\n    if node.tag != \"outline\":\n        # Ignore anything not part of the outline\n        continue\n    if not node.attrib.get(\"xmlUrl\"):\n        # Remember the current group\n        group_name = node.attrib[\"text\"]\n    else:\n        # Output a podcast entry",
        "detail": "mid-range.ElementTree_write_podcast_csv",
        "documentation": {}
    },
    {
        "label": "show_node",
        "kind": 2,
        "importPath": "mid-range.ElementTree_XML",
        "description": "mid-range.ElementTree_XML",
        "peekOfCode": "def show_node(node):\n    print(node.tag)\n    if node.text is not None and node.text.strip():\n        print('  text: \"%s\"' % node.text)\n    if node.tail is not None and node.tail.strip():\n        print('  tail: \"%s\"' % node.tail)\n    for name, value in sorted(node.attrib.items()):\n        print('  %-4s = \"%s\"' % (name, value))\n    for child in node:\n        show_node(child)",
        "detail": "mid-range.ElementTree_XML",
        "documentation": {}
    },
    {
        "label": "parsed",
        "kind": 5,
        "importPath": "mid-range.ElementTree_XML",
        "description": "mid-range.ElementTree_XML",
        "peekOfCode": "parsed = XML(\n    \"\"\"\n<root>\n  <group>\n    <child id=\"a\">This is child \"a\".</child>\n    <child id=\"b\">This is child \"b\".</child>\n  </group>\n  <group>\n    <child id=\"c\">This is child \"c\".</child>\n  </group>",
        "detail": "mid-range.ElementTree_XML",
        "documentation": {}
    },
    {
        "label": "EmacsState",
        "kind": 6,
        "importPath": "mid-range.emacs_state",
        "description": "mid-range.emacs_state",
        "peekOfCode": "class EmacsState:\n    \"\"\"\n    Mutable class to hold Emacs specific state.\n    \"\"\"\n    def __init__(self) -> None:\n        # Simple macro recording. (Like Readline does.)\n        # (For Emacs mode.)\n        self.macro: Optional[List[KeyPress]] = []\n        self.current_recording: Optional[List[KeyPress]] = None\n    def reset(self) -> None:",
        "detail": "mid-range.emacs_state",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.emacs_state",
        "description": "mid-range.emacs_state",
        "peekOfCode": "__all__ = [\"EmacsState\"]\nclass EmacsState:\n    \"\"\"\n    Mutable class to hold Emacs specific state.\n    \"\"\"\n    def __init__(self) -> None:\n        # Simple macro recording. (Like Readline does.)\n        # (For Emacs mode.)\n        self.macro: Optional[List[KeyPress]] = []\n        self.current_recording: Optional[List[KeyPress]] = None",
        "detail": "mid-range.emacs_state",
        "documentation": {}
    },
    {
        "label": "msg",
        "kind": 5,
        "importPath": "mid-range.email",
        "description": "mid-range.email",
        "peekOfCode": "msg = EmailMessage()\nmsg[\"From\"] = \"prince@palace.ng\"\nmsg[\"To\"] = \"Scrooge McDuck <scoorge@disney.com>\"\nmsg.set_content(\n    \"\"\"\\\nDear Sir.\nI'm a Nigerian prince who came into some misfortune.\n...\n\"\"\"\n)",
        "detail": "mid-range.email",
        "documentation": {}
    },
    {
        "label": "msg[\"From\"]",
        "kind": 5,
        "importPath": "mid-range.email",
        "description": "mid-range.email",
        "peekOfCode": "msg[\"From\"] = \"prince@palace.ng\"\nmsg[\"To\"] = \"Scrooge McDuck <scoorge@disney.com>\"\nmsg.set_content(\n    \"\"\"\\\nDear Sir.\nI'm a Nigerian prince who came into some misfortune.\n...\n\"\"\"\n)\nprint(msg)",
        "detail": "mid-range.email",
        "documentation": {}
    },
    {
        "label": "msg[\"To\"]",
        "kind": 5,
        "importPath": "mid-range.email",
        "description": "mid-range.email",
        "peekOfCode": "msg[\"To\"] = \"Scrooge McDuck <scoorge@disney.com>\"\nmsg.set_content(\n    \"\"\"\\\nDear Sir.\nI'm a Nigerian prince who came into some misfortune.\n...\n\"\"\"\n)\nprint(msg)",
        "detail": "mid-range.email",
        "documentation": {}
    },
    {
        "label": "findEmailDomain",
        "kind": 2,
        "importPath": "mid-range.EmailDomain",
        "description": "mid-range.EmailDomain",
        "peekOfCode": "def findEmailDomain(address):\n    address_spl = address.split(\"@\")\n    c = [i for i in address_spl]\n    if len(address_spl) == 2:\n        return c[1]\n    if len(address_spl) == 3:\n        return c[2]",
        "detail": "mid-range.EmailDomain",
        "documentation": {}
    },
    {
        "label": "sendMail",
        "kind": 2,
        "importPath": "mid-range.EmailsInPython",
        "description": "mid-range.EmailsInPython",
        "peekOfCode": "def sendMail():\n    yourEmail = str(input(\"Your Email Address : \"))  # senders email address\n    toSendEmail = str(input(\"Receivers Email Address\"))  # receivers email address\n    messageHead = str(input(\"Message Head : \"))  # Message head\n    messageBody = str(input(\"Message : \"))  # main message\n    fullMessage = messageHead + \"\\n\" + messageBody  # full message\n    serverToLogin.sendmail(\n        yourEmail, toSendEmail, fullMessage\n    )  # sending email address through server\nwhile True:",
        "detail": "mid-range.EmailsInPython",
        "documentation": {}
    },
    {
        "label": "serverToLogin",
        "kind": 5,
        "importPath": "mid-range.EmailsInPython",
        "description": "mid-range.EmailsInPython",
        "peekOfCode": "serverToLogin = smtplib.SMTP(\"smtp.gmail.com\", 587)\n# Username\nuserName = str(input(\"Username for Gmail : \"))\n# password\npassword = str(input(\"Password Of Account : \"))\n# Logging in\nserverToLogin.login(userName, password)\ndef sendMail():\n    yourEmail = str(input(\"Your Email Address : \"))  # senders email address\n    toSendEmail = str(input(\"Receivers Email Address\"))  # receivers email address",
        "detail": "mid-range.EmailsInPython",
        "documentation": {}
    },
    {
        "label": "userName",
        "kind": 5,
        "importPath": "mid-range.EmailsInPython",
        "description": "mid-range.EmailsInPython",
        "peekOfCode": "userName = str(input(\"Username for Gmail : \"))\n# password\npassword = str(input(\"Password Of Account : \"))\n# Logging in\nserverToLogin.login(userName, password)\ndef sendMail():\n    yourEmail = str(input(\"Your Email Address : \"))  # senders email address\n    toSendEmail = str(input(\"Receivers Email Address\"))  # receivers email address\n    messageHead = str(input(\"Message Head : \"))  # Message head\n    messageBody = str(input(\"Message : \"))  # main message",
        "detail": "mid-range.EmailsInPython",
        "documentation": {}
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "mid-range.EmailsInPython",
        "description": "mid-range.EmailsInPython",
        "peekOfCode": "password = str(input(\"Password Of Account : \"))\n# Logging in\nserverToLogin.login(userName, password)\ndef sendMail():\n    yourEmail = str(input(\"Your Email Address : \"))  # senders email address\n    toSendEmail = str(input(\"Receivers Email Address\"))  # receivers email address\n    messageHead = str(input(\"Message Head : \"))  # Message head\n    messageBody = str(input(\"Message : \"))  # main message\n    fullMessage = messageHead + \"\\n\" + messageBody  # full message\n    serverToLogin.sendmail(",
        "detail": "mid-range.EmailsInPython",
        "documentation": {}
    },
    {
        "label": "match_to_emoji",
        "kind": 2,
        "importPath": "mid-range.emojize",
        "description": "mid-range.emojize",
        "peekOfCode": "def match_to_emoji(m):\n    \"\"\"Call emoji.emojize on m).\"\"\"\n    return emojize(m.group(), use_aliases=True)\ndef emojize_all(s):\n    \"\"\"Convert all emojis :aliases: of the string s to emojis in UTF-8.\"\"\"\n    return re.sub(r\":([a-z_-]+):\", match_to_emoji, s)\ndef main(path):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, \"r\") as f:\n        for line in f.readlines():",
        "detail": "mid-range.emojize",
        "documentation": {}
    },
    {
        "label": "emojize_all",
        "kind": 2,
        "importPath": "mid-range.emojize",
        "description": "mid-range.emojize",
        "peekOfCode": "def emojize_all(s):\n    \"\"\"Convert all emojis :aliases: of the string s to emojis in UTF-8.\"\"\"\n    return re.sub(r\":([a-z_-]+):\", match_to_emoji, s)\ndef main(path):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, \"r\") as f:\n        for line in f.readlines():\n            print(emojize_all(line), end=\"\")\nif __name__ == \"__main__\":\n    from sys import argv",
        "detail": "mid-range.emojize",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.emojize",
        "description": "mid-range.emojize",
        "peekOfCode": "def main(path):\n    \"\"\"Handle the file given by its path.\"\"\"\n    with open(path, \"r\") as f:\n        for line in f.readlines():\n            print(emojize_all(line), end=\"\")\nif __name__ == \"__main__\":\n    from sys import argv\n    for arg in argv[1:]:\n        main(arg)\n# End of emojize.py",
        "detail": "mid-range.emojize",
        "documentation": {}
    },
    {
        "label": "Employee",
        "kind": 6,
        "importPath": "mid-range.employees",
        "description": "mid-range.employees",
        "peekOfCode": "class Employee(object):\n    def __init__(self, first_name, last_name, job):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.job = job\n    def __eq__(self, other):\n        if isinstance(other, self.__class__):\n            same_name = (\n                self.first_name == other.first_name\n                and self.last_name == other.last_name",
        "detail": "mid-range.employees",
        "documentation": {}
    },
    {
        "label": "Job",
        "kind": 6,
        "importPath": "mid-range.employees",
        "description": "mid-range.employees",
        "peekOfCode": "class Job(object):\n    def __init__(self, title, salary):\n        self.title = title\n        self.salary = salary\n    def __str__(self):\n        print(self.title)\n    def __repr__(self):\n        return \"Job(title={}, salary={})\".format(self.title, self.salary)\ndef sort_employees_by_salary(employee_list):\n    \"\"\"",
        "detail": "mid-range.employees",
        "documentation": {}
    },
    {
        "label": "sort_employees_by_salary",
        "kind": 2,
        "importPath": "mid-range.employees",
        "description": "mid-range.employees",
        "peekOfCode": "def sort_employees_by_salary(employee_list):\n    \"\"\"\n    Returns a new employee list, sorted by low to high salary then last_name\n    \"\"\"\n    employee_list.sort(key=lambda employee: (employee.last_name, employee.job.salary))\n    return employee_list",
        "detail": "mid-range.employees",
        "documentation": {}
    },
    {
        "label": "CommentChecker",
        "kind": 6,
        "importPath": "mid-range.empty_comment",
        "description": "mid-range.empty_comment",
        "peekOfCode": "class CommentChecker(BaseChecker):\n    __implements__ = IRawChecker\n    name = \"refactoring\"\n    msgs = {\n        \"R2044\": (\n            \"Line with empty comment\",\n            \"empty-comment\",\n            (\n                \"Used when a # symbol appears on a line not followed by an actual comment\"\n            ),",
        "detail": "mid-range.empty_comment",
        "documentation": {}
    },
    {
        "label": "is_line_commented",
        "kind": 2,
        "importPath": "mid-range.empty_comment",
        "description": "mid-range.empty_comment",
        "peekOfCode": "def is_line_commented(line):\n    \"\"\"Checks if a `# symbol that is not part of a string was found in line\"\"\"\n    comment_idx = line.find(b\"#\")\n    if comment_idx == -1:\n        return False\n    if comment_part_of_string(line, comment_idx):\n        return is_line_commented(line[:comment_idx] + line[comment_idx + 1 :])\n    return True\ndef comment_part_of_string(line, comment_idx):\n    \"\"\"checks if the symbol at comment_idx is part of a string\"\"\"",
        "detail": "mid-range.empty_comment",
        "documentation": {}
    },
    {
        "label": "comment_part_of_string",
        "kind": 2,
        "importPath": "mid-range.empty_comment",
        "description": "mid-range.empty_comment",
        "peekOfCode": "def comment_part_of_string(line, comment_idx):\n    \"\"\"checks if the symbol at comment_idx is part of a string\"\"\"\n    if (\n        line[:comment_idx].count(b\"'\") % 2 == 1\n        and line[comment_idx:].count(b\"'\") % 2 == 1\n    ) or (\n        line[:comment_idx].count(b'\"') % 2 == 1\n        and line[comment_idx:].count(b'\"') % 2 == 1\n    ):\n        return True",
        "detail": "mid-range.empty_comment",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "mid-range.empty_comment",
        "description": "mid-range.empty_comment",
        "peekOfCode": "def register(linter):\n    linter.register_checker(CommentChecker(linter))",
        "detail": "mid-range.empty_comment",
        "documentation": {}
    },
    {
        "label": "EmulationManager",
        "kind": 6,
        "importPath": "mid-range.emulation_manager",
        "description": "mid-range.emulation_manager",
        "peekOfCode": "class EmulationManager(object):\n    \"\"\"EmulationManager class.\"\"\"\n    def __init__(self, client: CDPSession) -> None:\n        \"\"\"Make new emulation manager.\"\"\"\n        self._client = client\n        self._emulatingMobile = False\n        self._hasTouch = False\n    async def emulateViewport(self, viewport: dict) -> bool:\n        \"\"\"Evaluate viewport.\"\"\"\n        options = dict()",
        "detail": "mid-range.emulation_manager",
        "documentation": {}
    },
    {
        "label": "__docformat__",
        "kind": 5,
        "importPath": "mid-range.en",
        "description": "mid-range.en",
        "peekOfCode": "__docformat__ = \"reStructuredText\"\nlabels = {\n    # fixed: language-dependent\n    \"author\": \"Author\",\n    \"authors\": \"Authors\",\n    \"organization\": \"Organization\",\n    \"address\": \"Address\",\n    \"contact\": \"Contact\",\n    \"version\": \"Version\",\n    \"revision\": \"Revision\",",
        "detail": "mid-range.en",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "mid-range.en",
        "description": "mid-range.en",
        "peekOfCode": "labels = {\n    # fixed: language-dependent\n    \"author\": \"Author\",\n    \"authors\": \"Authors\",\n    \"organization\": \"Organization\",\n    \"address\": \"Address\",\n    \"contact\": \"Contact\",\n    \"version\": \"Version\",\n    \"revision\": \"Revision\",\n    \"status\": \"Status\",",
        "detail": "mid-range.en",
        "documentation": {}
    },
    {
        "label": "bibliographic_fields",
        "kind": 5,
        "importPath": "mid-range.en",
        "description": "mid-range.en",
        "peekOfCode": "bibliographic_fields = {\n    # language-dependent: fixed\n    \"author\": \"author\",\n    \"authors\": \"authors\",\n    \"organization\": \"organization\",\n    \"address\": \"address\",\n    \"contact\": \"contact\",\n    \"version\": \"version\",\n    \"revision\": \"revision\",\n    \"status\": \"status\",",
        "detail": "mid-range.en",
        "documentation": {}
    },
    {
        "label": "author_separators",
        "kind": 5,
        "importPath": "mid-range.en",
        "description": "mid-range.en",
        "peekOfCode": "author_separators = [\";\", \",\"]\n\"\"\"List of separator strings for the 'Authors' bibliographic field. Tried in\norder.\"\"\"",
        "detail": "mid-range.en",
        "documentation": {}
    },
    {
        "label": "lineEncoding",
        "kind": 2,
        "importPath": "mid-range.encoding",
        "description": "mid-range.encoding",
        "peekOfCode": "def lineEncoding(s):\n    s2 = \"\"\n    for k, g in groupby(s):\n        l = len(list(g))\n        if l == 1:\n            s2 += k\n        else:\n            s2 += str(l) + k\n    return s2",
        "detail": "mid-range.encoding",
        "documentation": {}
    },
    {
        "label": "encoding",
        "kind": 2,
        "importPath": "mid-range.encoding_string",
        "description": "mid-range.encoding_string",
        "peekOfCode": "def encoding(word):\n    n = len(word)\n    if n == 0:\n        return \"\"\n    letter = word[0]\n    length = 1\n    res = \"\"\n    for i in range(1, n):\n        if word[i] == letter:\n            length += 1",
        "detail": "mid-range.encoding_string",
        "documentation": {}
    },
    {
        "label": "pdf_File_Name",
        "kind": 5,
        "importPath": "mid-range.encrypt",
        "description": "mid-range.encrypt",
        "peekOfCode": "pdf_File_Name = input(\"Enter EXACT name of the PDF in this FOLDER: \")\npdf_File = pdf_File_Name + \".pdf\"\n# Reading the pdf\npdf = PdfFileReader(pdf_File)\n# Object for writing the file\nwrite_Obj = PdfFileWriter()\n# Getting the number of pages and writing each page in the writer object\nfor i in range(pdf.getNumPages()):\n    page = pdf.getPage(i)\n    write_Obj.addPage(page)",
        "detail": "mid-range.encrypt",
        "documentation": {}
    },
    {
        "label": "pdf_File",
        "kind": 5,
        "importPath": "mid-range.encrypt",
        "description": "mid-range.encrypt",
        "peekOfCode": "pdf_File = pdf_File_Name + \".pdf\"\n# Reading the pdf\npdf = PdfFileReader(pdf_File)\n# Object for writing the file\nwrite_Obj = PdfFileWriter()\n# Getting the number of pages and writing each page in the writer object\nfor i in range(pdf.getNumPages()):\n    page = pdf.getPage(i)\n    write_Obj.addPage(page)\n# Encrypting by the password",
        "detail": "mid-range.encrypt",
        "documentation": {}
    },
    {
        "label": "pdf",
        "kind": 5,
        "importPath": "mid-range.encrypt",
        "description": "mid-range.encrypt",
        "peekOfCode": "pdf = PdfFileReader(pdf_File)\n# Object for writing the file\nwrite_Obj = PdfFileWriter()\n# Getting the number of pages and writing each page in the writer object\nfor i in range(pdf.getNumPages()):\n    page = pdf.getPage(i)\n    write_Obj.addPage(page)\n# Encrypting by the password\nowner_Password = input(\"Enter Password for OWNER: \")\nuser_Password = input(\"Enter Password for USER: \")",
        "detail": "mid-range.encrypt",
        "documentation": {}
    },
    {
        "label": "write_Obj",
        "kind": 5,
        "importPath": "mid-range.encrypt",
        "description": "mid-range.encrypt",
        "peekOfCode": "write_Obj = PdfFileWriter()\n# Getting the number of pages and writing each page in the writer object\nfor i in range(pdf.getNumPages()):\n    page = pdf.getPage(i)\n    write_Obj.addPage(page)\n# Encrypting by the password\nowner_Password = input(\"Enter Password for OWNER: \")\nuser_Password = input(\"Enter Password for USER: \")\nwrite_Obj.encrypt(user_pwd=user_Password, owner_pwd=owner_Password, use_128bit=True)\n# Naming and creating the encrypted PDF",
        "detail": "mid-range.encrypt",
        "documentation": {}
    },
    {
        "label": "owner_Password",
        "kind": 5,
        "importPath": "mid-range.encrypt",
        "description": "mid-range.encrypt",
        "peekOfCode": "owner_Password = input(\"Enter Password for OWNER: \")\nuser_Password = input(\"Enter Password for USER: \")\nwrite_Obj.encrypt(user_pwd=user_Password, owner_pwd=owner_Password, use_128bit=True)\n# Naming and creating the encrypted PDF\nnew_PDF_Name_Input = input(\"Enter new ENCRYPTED PDF name: \")\nnew_PDF_Name = new_PDF_Name_Input + \".pdf\"\nencrypted_PDF = open(new_PDF_Name, \"wb\")\nwrite_Obj.write(encrypted_PDF)",
        "detail": "mid-range.encrypt",
        "documentation": {}
    },
    {
        "label": "user_Password",
        "kind": 5,
        "importPath": "mid-range.encrypt",
        "description": "mid-range.encrypt",
        "peekOfCode": "user_Password = input(\"Enter Password for USER: \")\nwrite_Obj.encrypt(user_pwd=user_Password, owner_pwd=owner_Password, use_128bit=True)\n# Naming and creating the encrypted PDF\nnew_PDF_Name_Input = input(\"Enter new ENCRYPTED PDF name: \")\nnew_PDF_Name = new_PDF_Name_Input + \".pdf\"\nencrypted_PDF = open(new_PDF_Name, \"wb\")\nwrite_Obj.write(encrypted_PDF)",
        "detail": "mid-range.encrypt",
        "documentation": {}
    },
    {
        "label": "new_PDF_Name_Input",
        "kind": 5,
        "importPath": "mid-range.encrypt",
        "description": "mid-range.encrypt",
        "peekOfCode": "new_PDF_Name_Input = input(\"Enter new ENCRYPTED PDF name: \")\nnew_PDF_Name = new_PDF_Name_Input + \".pdf\"\nencrypted_PDF = open(new_PDF_Name, \"wb\")\nwrite_Obj.write(encrypted_PDF)",
        "detail": "mid-range.encrypt",
        "documentation": {}
    },
    {
        "label": "new_PDF_Name",
        "kind": 5,
        "importPath": "mid-range.encrypt",
        "description": "mid-range.encrypt",
        "peekOfCode": "new_PDF_Name = new_PDF_Name_Input + \".pdf\"\nencrypted_PDF = open(new_PDF_Name, \"wb\")\nwrite_Obj.write(encrypted_PDF)",
        "detail": "mid-range.encrypt",
        "documentation": {}
    },
    {
        "label": "encrypted_PDF",
        "kind": 5,
        "importPath": "mid-range.encrypt",
        "description": "mid-range.encrypt",
        "peekOfCode": "encrypted_PDF = open(new_PDF_Name, \"wb\")\nwrite_Obj.write(encrypted_PDF)",
        "detail": "mid-range.encrypt",
        "documentation": {}
    },
    {
        "label": "Enemy",
        "kind": 6,
        "importPath": "mid-range.enemy",
        "description": "mid-range.enemy",
        "peekOfCode": "class Enemy:\n    def __init__(self, room, name, items=None, health=100):\n        self.room = room\n        self.name = name\n        self.items = [] if items is None else items\n        self.gold = 20\n        self.health = health\n        self.attack = 3\n        self.alive = True\n    def take_damage(self, dmg):",
        "detail": "mid-range.enemy",
        "documentation": {}
    },
    {
        "label": "rotator",
        "kind": 2,
        "importPath": "mid-range.enigma_machine",
        "description": "mid-range.enigma_machine",
        "peekOfCode": "def rotator():\n    global gear_one_pos\n    global gear_two_pos\n    global gear_three_pos\n    i = gear_one[0]\n    gear_one.append(i)\n    del gear_one[0]\n    gear_one_pos += 1\n    if gear_one_pos % int(len(alphabets)) == 0:\n        i = gear_two[0]",
        "detail": "mid-range.enigma_machine",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 2,
        "importPath": "mid-range.enigma_machine",
        "description": "mid-range.enigma_machine",
        "peekOfCode": "def engine(input_character):\n    target = alphabets.index(input_character)\n    target = gear_one[target]\n    target = gear_two[target]\n    target = gear_three[target]\n    target = reflector[target]\n    target = gear_three.index(target)\n    target = gear_two.index(target)\n    target = gear_one.index(target)\n    code.append(alphabets[target])",
        "detail": "mid-range.enigma_machine",
        "documentation": {}
    },
    {
        "label": "alphabets",
        "kind": 5,
        "importPath": "mid-range.enigma_machine",
        "description": "mid-range.enigma_machine",
        "peekOfCode": "alphabets = [chr(i) for i in range(32, 126)]\ngear_one = [i for i in range(len(alphabets))]\ngear_two = [i for i in range(len(alphabets))]\ngear_three = [i for i in range(len(alphabets))]\nreflector = [i for i in reversed(range(len(alphabets)))]\ncode = []\ngear_one_pos = gear_two_pos = gear_three_pos = 0\ndef rotator():\n    global gear_one_pos\n    global gear_two_pos",
        "detail": "mid-range.enigma_machine",
        "documentation": {}
    },
    {
        "label": "gear_one",
        "kind": 5,
        "importPath": "mid-range.enigma_machine",
        "description": "mid-range.enigma_machine",
        "peekOfCode": "gear_one = [i for i in range(len(alphabets))]\ngear_two = [i for i in range(len(alphabets))]\ngear_three = [i for i in range(len(alphabets))]\nreflector = [i for i in reversed(range(len(alphabets)))]\ncode = []\ngear_one_pos = gear_two_pos = gear_three_pos = 0\ndef rotator():\n    global gear_one_pos\n    global gear_two_pos\n    global gear_three_pos",
        "detail": "mid-range.enigma_machine",
        "documentation": {}
    },
    {
        "label": "gear_two",
        "kind": 5,
        "importPath": "mid-range.enigma_machine",
        "description": "mid-range.enigma_machine",
        "peekOfCode": "gear_two = [i for i in range(len(alphabets))]\ngear_three = [i for i in range(len(alphabets))]\nreflector = [i for i in reversed(range(len(alphabets)))]\ncode = []\ngear_one_pos = gear_two_pos = gear_three_pos = 0\ndef rotator():\n    global gear_one_pos\n    global gear_two_pos\n    global gear_three_pos\n    i = gear_one[0]",
        "detail": "mid-range.enigma_machine",
        "documentation": {}
    },
    {
        "label": "gear_three",
        "kind": 5,
        "importPath": "mid-range.enigma_machine",
        "description": "mid-range.enigma_machine",
        "peekOfCode": "gear_three = [i for i in range(len(alphabets))]\nreflector = [i for i in reversed(range(len(alphabets)))]\ncode = []\ngear_one_pos = gear_two_pos = gear_three_pos = 0\ndef rotator():\n    global gear_one_pos\n    global gear_two_pos\n    global gear_three_pos\n    i = gear_one[0]\n    gear_one.append(i)",
        "detail": "mid-range.enigma_machine",
        "documentation": {}
    },
    {
        "label": "reflector",
        "kind": 5,
        "importPath": "mid-range.enigma_machine",
        "description": "mid-range.enigma_machine",
        "peekOfCode": "reflector = [i for i in reversed(range(len(alphabets)))]\ncode = []\ngear_one_pos = gear_two_pos = gear_three_pos = 0\ndef rotator():\n    global gear_one_pos\n    global gear_two_pos\n    global gear_three_pos\n    i = gear_one[0]\n    gear_one.append(i)\n    del gear_one[0]",
        "detail": "mid-range.enigma_machine",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 5,
        "importPath": "mid-range.enigma_machine",
        "description": "mid-range.enigma_machine",
        "peekOfCode": "code = []\ngear_one_pos = gear_two_pos = gear_three_pos = 0\ndef rotator():\n    global gear_one_pos\n    global gear_two_pos\n    global gear_three_pos\n    i = gear_one[0]\n    gear_one.append(i)\n    del gear_one[0]\n    gear_one_pos += 1",
        "detail": "mid-range.enigma_machine",
        "documentation": {}
    },
    {
        "label": "gear_one_pos",
        "kind": 5,
        "importPath": "mid-range.enigma_machine",
        "description": "mid-range.enigma_machine",
        "peekOfCode": "gear_one_pos = gear_two_pos = gear_three_pos = 0\ndef rotator():\n    global gear_one_pos\n    global gear_two_pos\n    global gear_three_pos\n    i = gear_one[0]\n    gear_one.append(i)\n    del gear_one[0]\n    gear_one_pos += 1\n    if gear_one_pos % int(len(alphabets)) == 0:",
        "detail": "mid-range.enigma_machine",
        "documentation": {}
    },
    {
        "label": "enumToString",
        "kind": 2,
        "importPath": "mid-range.enum-2-string",
        "description": "mid-range.enum-2-string",
        "peekOfCode": "def enumToString(constants, enum, elem):\n    all = constants.all_values(enum)\n    for e in all.keys():\n        if str(elem) == str(all[e]):\n            return e\n    return \"<unknown>\"",
        "detail": "mid-range.enum-2-string",
        "documentation": {}
    },
    {
        "label": "enum",
        "kind": 2,
        "importPath": "mid-range.enum",
        "description": "mid-range.enum",
        "peekOfCode": "def enum(ar):\n    for index in range(len(ar)):\n        yield ((index, ar[index]))\n# Test\ncase_1 = [19, 17, 20, 23, 27, 15]\nfor tup in list(enum(case_1)):\n    print(tup)\n# Enum function is a generator does not\n# return any value, instead generates\n# tuple as it encounters element of array",
        "detail": "mid-range.enum",
        "documentation": {}
    },
    {
        "label": "case_1",
        "kind": 5,
        "importPath": "mid-range.enum",
        "description": "mid-range.enum",
        "peekOfCode": "case_1 = [19, 17, 20, 23, 27, 15]\nfor tup in list(enum(case_1)):\n    print(tup)\n# Enum function is a generator does not\n# return any value, instead generates\n# tuple as it encounters element of array\n# Tuples can be appended to list\n# and can be returned after iteration\n# However,\n# Generator is a good option",
        "detail": "mid-range.enum",
        "documentation": {}
    },
    {
        "label": "InputState",
        "kind": 6,
        "importPath": "mid-range.enums",
        "description": "mid-range.enums",
        "peekOfCode": "class InputState(object):\n    \"\"\"\n    This enum represents the different states a universal detector can be in.\n    \"\"\"\n    PURE_ASCII = 0\n    ESC_ASCII = 1\n    HIGH_BYTE = 2\nclass LanguageFilter(object):\n    \"\"\"\n    This enum represents the different language filters we can apply to a",
        "detail": "mid-range.enums",
        "documentation": {}
    },
    {
        "label": "LanguageFilter",
        "kind": 6,
        "importPath": "mid-range.enums",
        "description": "mid-range.enums",
        "peekOfCode": "class LanguageFilter(object):\n    \"\"\"\n    This enum represents the different language filters we can apply to a\n    ``UniversalDetector``.\n    \"\"\"\n    CHINESE_SIMPLIFIED = 0x01\n    CHINESE_TRADITIONAL = 0x02\n    JAPANESE = 0x04\n    KOREAN = 0x08\n    NON_CJK = 0x10",
        "detail": "mid-range.enums",
        "documentation": {}
    },
    {
        "label": "ProbingState",
        "kind": 6,
        "importPath": "mid-range.enums",
        "description": "mid-range.enums",
        "peekOfCode": "class ProbingState(object):\n    \"\"\"\n    This enum represents the different states a prober can be in.\n    \"\"\"\n    DETECTING = 0\n    FOUND_IT = 1\n    NOT_ME = 2\nclass MachineState(object):\n    \"\"\"\n    This enum represents the different states a state machine can be in.",
        "detail": "mid-range.enums",
        "documentation": {}
    },
    {
        "label": "MachineState",
        "kind": 6,
        "importPath": "mid-range.enums",
        "description": "mid-range.enums",
        "peekOfCode": "class MachineState(object):\n    \"\"\"\n    This enum represents the different states a state machine can be in.\n    \"\"\"\n    START = 0\n    ERROR = 1\n    ITS_ME = 2\nclass SequenceLikelihood(object):\n    \"\"\"\n    This enum represents the likelihood of a character following the previous one.",
        "detail": "mid-range.enums",
        "documentation": {}
    },
    {
        "label": "SequenceLikelihood",
        "kind": 6,
        "importPath": "mid-range.enums",
        "description": "mid-range.enums",
        "peekOfCode": "class SequenceLikelihood(object):\n    \"\"\"\n    This enum represents the likelihood of a character following the previous one.\n    \"\"\"\n    NEGATIVE = 0\n    UNLIKELY = 1\n    LIKELY = 2\n    POSITIVE = 3\n    @classmethod\n    def get_num_categories(cls):",
        "detail": "mid-range.enums",
        "documentation": {}
    },
    {
        "label": "CharacterCategory",
        "kind": 6,
        "importPath": "mid-range.enums",
        "description": "mid-range.enums",
        "peekOfCode": "class CharacterCategory(object):\n    \"\"\"\n    This enum represents the different categories language models for\n    ``SingleByteCharsetProber`` put characters into.\n    Anything less than CONTROL is considered a letter.\n    \"\"\"\n    UNDEFINED = 255\n    LINE_BREAK = 254\n    SYMBOL = 253\n    DIGIT = 252",
        "detail": "mid-range.enums",
        "documentation": {}
    },
    {
        "label": "BugStatus",
        "kind": 6,
        "importPath": "mid-range.enum_aliases",
        "description": "mid-range.enum_aliases",
        "peekOfCode": "class BugStatus(enum.Enum):\n    new = 7\n    incomplete = 6\n    invalid = 5\n    wont_fix = 4\n    in_progress = 3\n    fix_committed = 2\n    fix_released = 1\n    by_design = 4\n    closed = 1",
        "detail": "mid-range.enum_aliases",
        "documentation": {}
    },
    {
        "label": "BugStatus",
        "kind": 6,
        "importPath": "mid-range.enum_comparison",
        "description": "mid-range.enum_comparison",
        "peekOfCode": "class BugStatus(enum.Enum):\n    new = 7\n    incomplete = 6\n    invalid = 5\n    wont_fix = 4\n    in_progress = 3\n    fix_committed = 2\n    fix_released = 1\nactual_state = BugStatus.wont_fix\ndesired_state = BugStatus.fix_released",
        "detail": "mid-range.enum_comparison",
        "documentation": {}
    },
    {
        "label": "actual_state",
        "kind": 5,
        "importPath": "mid-range.enum_comparison",
        "description": "mid-range.enum_comparison",
        "peekOfCode": "actual_state = BugStatus.wont_fix\ndesired_state = BugStatus.fix_released\nprint(\"Equality:\", actual_state == desired_state, actual_state == BugStatus.wont_fix)\nprint(\"Identity:\", actual_state is desired_state, actual_state is BugStatus.wont_fix)\nprint(\"Ordered by value:\")\ntry:\n    print(\"\\n\".join(\"  \" + s.name for s in sorted(BugStatus)))\nexcept TypeError as err:\n    print(\"  Cannot sort: {}\".format(err))",
        "detail": "mid-range.enum_comparison",
        "documentation": {}
    },
    {
        "label": "desired_state",
        "kind": 5,
        "importPath": "mid-range.enum_comparison",
        "description": "mid-range.enum_comparison",
        "peekOfCode": "desired_state = BugStatus.fix_released\nprint(\"Equality:\", actual_state == desired_state, actual_state == BugStatus.wont_fix)\nprint(\"Identity:\", actual_state is desired_state, actual_state is BugStatus.wont_fix)\nprint(\"Ordered by value:\")\ntry:\n    print(\"\\n\".join(\"  \" + s.name for s in sorted(BugStatus)))\nexcept TypeError as err:\n    print(\"  Cannot sort: {}\".format(err))",
        "detail": "mid-range.enum_comparison",
        "documentation": {}
    },
    {
        "label": "BugStatus",
        "kind": 6,
        "importPath": "mid-range.enum_complex_values",
        "description": "mid-range.enum_complex_values",
        "peekOfCode": "class BugStatus(enum.Enum):\n    new = {\n        \"num\": 7,\n        \"transitions\": [\"incomplete\", \"invalid\", \"wont_fix\", \"in_progress\"],\n    }\n    incomplete = {\"num\": 6, \"transitions\": [\"new\", \"wont_fix\"]}\n    invalid = {\"num\": 5, \"transitions\": [\"new\"]}\n    wont_fix = {\"num\": 4, \"transitions\": [\"new\"]}\n    in_progress = {\"num\": 3, \"transitions\": [\"new\", \"fix_committed\"]}\n    fix_committed = {\"num\": 2, \"transitions\": [\"in_progress\", \"fix_released\"]}",
        "detail": "mid-range.enum_complex_values",
        "documentation": {}
    },
    {
        "label": "BugStatus",
        "kind": 6,
        "importPath": "mid-range.enum_create",
        "description": "mid-range.enum_create",
        "peekOfCode": "class BugStatus(enum.Enum):\n    new = 7\n    incomplete = 6\n    invalid = 5\n    wont_fix = 4\n    in_progress = 3\n    fix_committed = 2\n    fix_released = 1\nprint(\"\\nMember name: {}\".format(BugStatus.wont_fix.name))\nprint(\"Member value: {}\".format(BugStatus.wont_fix.value))",
        "detail": "mid-range.enum_create",
        "documentation": {}
    },
    {
        "label": "BugStatus",
        "kind": 6,
        "importPath": "mid-range.enum_intenum",
        "description": "mid-range.enum_intenum",
        "peekOfCode": "class BugStatus(enum.IntEnum):\n    new = 7\n    incomplete = 6\n    invalid = 5\n    wont_fix = 4\n    in_progress = 3\n    fix_committed = 2\n    fix_released = 1\nprint(\"Ordered by value:\")\nprint(\"\\n\".join(\"  \" + s.name for s in sorted(BugStatus)))",
        "detail": "mid-range.enum_intenum",
        "documentation": {}
    },
    {
        "label": "BugStatus",
        "kind": 6,
        "importPath": "mid-range.enum_iterate",
        "description": "mid-range.enum_iterate",
        "peekOfCode": "class BugStatus(enum.Enum):\n    new = 7\n    incomplete = 6\n    invalid = 5\n    wont_fix = 4\n    in_progress = 3\n    fix_committed = 2\n    fix_released = 1\nfor status in BugStatus:\n    print(\"{:15} = {}\".format(status.name, status.value))",
        "detail": "mid-range.enum_iterate",
        "documentation": {}
    },
    {
        "label": "BugStatus",
        "kind": 5,
        "importPath": "mid-range.enum_programmatic_create",
        "description": "mid-range.enum_programmatic_create",
        "peekOfCode": "BugStatus = enum.Enum(\n    value=\"BugStatus\",\n    names=(\"fix_released fix_committed in_progress \" \"wont_fix invalid incomplete new\"),\n)\nprint(\"Member: {}\".format(BugStatus.new))\nprint(\"\\nAll members:\")\nfor status in BugStatus:\n    print(\"{:15} = {}\".format(status.name, status.value))",
        "detail": "mid-range.enum_programmatic_create",
        "documentation": {}
    },
    {
        "label": "BugStatus",
        "kind": 5,
        "importPath": "mid-range.enum_programmatic_mapping",
        "description": "mid-range.enum_programmatic_mapping",
        "peekOfCode": "BugStatus = enum.Enum(\n    value=\"BugStatus\",\n    names=[\n        (\"new\", 7),\n        (\"incomplete\", 6),\n        (\"invalid\", 5),\n        (\"wont_fix\", 4),\n        (\"in_progress\", 3),\n        (\"fix_committed\", 2),\n        (\"fix_released\", 1),",
        "detail": "mid-range.enum_programmatic_mapping",
        "documentation": {}
    },
    {
        "label": "BugStatus",
        "kind": 6,
        "importPath": "mid-range.enum_tuple_values",
        "description": "mid-range.enum_tuple_values",
        "peekOfCode": "class BugStatus(enum.Enum):\n    new = (7, [\"incomplete\", \"invalid\", \"wont_fix\", \"in_progress\"])\n    incomplete = (6, [\"new\", \"wont_fix\"])\n    invalid = (5, [\"new\"])\n    wont_fix = (4, [\"new\"])\n    in_progress = (3, [\"new\", \"fix_committed\"])\n    fix_committed = (2, [\"in_progress\", \"fix_released\"])\n    fix_released = (1, [\"new\"])\n    def __init__(self, num, transitions):\n        self.num = num",
        "detail": "mid-range.enum_tuple_values",
        "documentation": {}
    },
    {
        "label": "BugStatus",
        "kind": 6,
        "importPath": "mid-range.enum_unique_enforce",
        "description": "mid-range.enum_unique_enforce",
        "peekOfCode": "class BugStatus(enum.Enum):\n    new = 7\n    incomplete = 6\n    invalid = 5\n    wont_fix = 4\n    in_progress = 3\n    fix_committed = 2\n    fix_released = 1\n    # This will trigger an error with unique applied.\n    by_design = 4",
        "detail": "mid-range.enum_unique_enforce",
        "documentation": {}
    },
    {
        "label": "MYPY_RUNNING",
        "kind": 5,
        "importPath": "mid-range.environment",
        "description": "mid-range.environment",
        "peekOfCode": "MYPY_RUNNING = IS_TYPE_CHECKING",
        "detail": "mid-range.environment",
        "documentation": {}
    },
    {
        "label": "get_env_var",
        "kind": 2,
        "importPath": "mid-range.env_var",
        "description": "mid-range.env_var",
        "peekOfCode": "def get_env_var(key, as_type, env):\n    \"\"\"Get the environment variable option.\n    :param key: the config key requested\n    :param as_type: the type we would like to convert it to\n    :param env: environment variables to use\n    :return:\n    \"\"\"\n    environ_key = ensure_str(\"VIRTUALENV_{}\".format(key.upper()))\n    if env.get(environ_key):\n        value = env[environ_key]",
        "detail": "mid-range.env_var",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.env_var",
        "description": "mid-range.env_var",
        "peekOfCode": "__all__ = (\"get_env_var\",)",
        "detail": "mid-range.env_var",
        "documentation": {}
    },
    {
        "label": "__docformat__",
        "kind": 5,
        "importPath": "mid-range.eo",
        "description": "mid-range.eo",
        "peekOfCode": "__docformat__ = \"reStructuredText\"\nlabels = {\n    # fixed: language-dependent\n    \"author\": u\"A\\u016dtoro\",\n    \"authors\": u\"A\\u016dtoroj\",\n    \"organization\": u\"Organizo\",\n    \"address\": u\"Adreso\",\n    \"contact\": u\"Kontakto\",\n    \"version\": u\"Versio\",\n    \"revision\": u\"Revido\",",
        "detail": "mid-range.eo",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "mid-range.eo",
        "description": "mid-range.eo",
        "peekOfCode": "labels = {\n    # fixed: language-dependent\n    \"author\": u\"A\\u016dtoro\",\n    \"authors\": u\"A\\u016dtoroj\",\n    \"organization\": u\"Organizo\",\n    \"address\": u\"Adreso\",\n    \"contact\": u\"Kontakto\",\n    \"version\": u\"Versio\",\n    \"revision\": u\"Revido\",\n    \"status\": u\"Stato\",",
        "detail": "mid-range.eo",
        "documentation": {}
    },
    {
        "label": "bibliographic_fields",
        "kind": 5,
        "importPath": "mid-range.eo",
        "description": "mid-range.eo",
        "peekOfCode": "bibliographic_fields = {\n    # language-dependent: fixed\n    \"a\\u016dtoro\": \"author\",\n    \"a\\u016dtoroj\": \"authors\",\n    \"organizo\": \"organization\",\n    \"adreso\": \"address\",\n    \"kontakto\": \"contact\",\n    \"versio\": \"version\",\n    \"revido\": \"revision\",\n    \"stato\": \"status\",",
        "detail": "mid-range.eo",
        "documentation": {}
    },
    {
        "label": "author_separators",
        "kind": 5,
        "importPath": "mid-range.eo",
        "description": "mid-range.eo",
        "peekOfCode": "author_separators = [\";\", \",\"]\n\"\"\"List of separator strings for the 'Authors' bibliographic field. Tried in\norder.\"\"\"",
        "detail": "mid-range.eo",
        "documentation": {}
    },
    {
        "label": "DummyExporter",
        "kind": 6,
        "importPath": "mid-range.eptest",
        "description": "mid-range.eptest",
        "peekOfCode": "class DummyExporter(Exporter):\n    pass\nclass DummyScriptExporter(Exporter):\n    def from_notebook_node(self, nb, resources=None, **kw):\n        return \"dummy-script-exported\", resources",
        "detail": "mid-range.eptest",
        "documentation": {}
    },
    {
        "label": "DummyScriptExporter",
        "kind": 6,
        "importPath": "mid-range.eptest",
        "description": "mid-range.eptest",
        "peekOfCode": "class DummyScriptExporter(Exporter):\n    def from_notebook_node(self, nb, resources=None, **kw):\n        return \"dummy-script-exported\", resources",
        "detail": "mid-range.eptest",
        "documentation": {}
    },
    {
        "label": "areEquallyStrong",
        "kind": 2,
        "importPath": "mid-range.EquallyStrong",
        "description": "mid-range.EquallyStrong",
        "peekOfCode": "def areEquallyStrong(yourLeft, yourRight, friendsLeft, friendsRight):\n    personal_max = max(yourLeft, yourRight)\n    friend_max = max(friendsLeft, friendsRight)\n    sum1 = yourLeft + yourRight\n    sum2 = friendsLeft + friendsRight\n    if sum1 == sum2 and personal_max == friend_max:\n        return True\n    return False",
        "detail": "mid-range.EquallyStrong",
        "documentation": {}
    },
    {
        "label": "Equipment",
        "kind": 6,
        "importPath": "mid-range.equipment",
        "description": "mid-range.equipment",
        "peekOfCode": "class Equipment(Product):\n    def __init__(self, name, price, style, weight):\n        super().__init__(name, price)\n        self.style = style\n        self.weight = weight",
        "detail": "mid-range.equipment",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "mid-range.err",
        "description": "mid-range.err",
        "peekOfCode": "def foo(s):\n    return 10 / int(s)\ndef bar(s):\n    return foo(s) * 2\ndef main():\n    bar(\"0\")\nmain()",
        "detail": "mid-range.err",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 2,
        "importPath": "mid-range.err",
        "description": "mid-range.err",
        "peekOfCode": "def bar(s):\n    return foo(s) * 2\ndef main():\n    bar(\"0\")\nmain()",
        "detail": "mid-range.err",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.err",
        "description": "mid-range.err",
        "peekOfCode": "def main():\n    bar(\"0\")\nmain()",
        "detail": "mid-range.err",
        "documentation": {}
    },
    {
        "label": "ProcessCallFailed",
        "kind": 6,
        "importPath": "mid-range.error",
        "description": "mid-range.error",
        "peekOfCode": "class ProcessCallFailed(RuntimeError):\n    \"\"\"Failed a process call\"\"\"\n    def __init__(self, code, out, err, cmd):\n        super(ProcessCallFailed, self).__init__(code, out, err, cmd)\n        self.code = code\n        self.out = out\n        self.err = err\n        self.cmd = cmd",
        "detail": "mid-range.error",
        "documentation": {}
    },
    {
        "label": "RemovedCommandError",
        "kind": 6,
        "importPath": "mid-range.errors",
        "description": "mid-range.errors",
        "peekOfCode": "class RemovedCommandError(DistutilsError, RuntimeError):\n    \"\"\"Error used for commands that have been removed in setuptools.\n    Since ``setuptools`` is built on ``distutils``, simply removing a command\n    from ``setuptools`` will make the behavior fall back to ``distutils``; this\n    error is raised if a command exists in ``distutils`` but has been actively\n    removed in ``setuptools``.\n    \"\"\"",
        "detail": "mid-range.errors",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "mid-range.err_logging",
        "description": "mid-range.err_logging",
        "peekOfCode": "def foo(s):\n    return 10 / int(s)\ndef bar(s):\n    return foo(s) * 2\ndef main():\n    try:\n        bar(\"0\")\n    except Exception as e:\n        logging.exception(e)\nmain()",
        "detail": "mid-range.err_logging",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 2,
        "importPath": "mid-range.err_logging",
        "description": "mid-range.err_logging",
        "peekOfCode": "def bar(s):\n    return foo(s) * 2\ndef main():\n    try:\n        bar(\"0\")\n    except Exception as e:\n        logging.exception(e)\nmain()\nprint(\"END\")",
        "detail": "mid-range.err_logging",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.err_logging",
        "description": "mid-range.err_logging",
        "peekOfCode": "def main():\n    try:\n        bar(\"0\")\n    except Exception as e:\n        logging.exception(e)\nmain()\nprint(\"END\")",
        "detail": "mid-range.err_logging",
        "documentation": {}
    },
    {
        "label": "FooError",
        "kind": 6,
        "importPath": "mid-range.err_raise",
        "description": "mid-range.err_raise",
        "peekOfCode": "class FooError(ValueError):\n    pass\ndef foo(s):\n    n = int(s)\n    if n == 0:\n        raise FooError(\"invalid value: %s\" % s)\n    return 10 / n\nfoo(\"0\")",
        "detail": "mid-range.err_raise",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "mid-range.err_raise",
        "description": "mid-range.err_raise",
        "peekOfCode": "def foo(s):\n    n = int(s)\n    if n == 0:\n        raise FooError(\"invalid value: %s\" % s)\n    return 10 / n\nfoo(\"0\")",
        "detail": "mid-range.err_raise",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "mid-range.err_reraise",
        "description": "mid-range.err_reraise",
        "peekOfCode": "def foo(s):\n    n = int(s)\n    if n == 0:\n        raise ValueError(\"invalid value: %s\" % s)\n    return 10 / n\ndef bar():\n    try:\n        foo(\"0\")\n    except ValueError as e:\n        print(\"ValueError!\")",
        "detail": "mid-range.err_reraise",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 2,
        "importPath": "mid-range.err_reraise",
        "description": "mid-range.err_reraise",
        "peekOfCode": "def bar():\n    try:\n        foo(\"0\")\n    except ValueError as e:\n        print(\"ValueError!\")\n        raise\nbar()",
        "detail": "mid-range.err_reraise",
        "documentation": {}
    },
    {
        "label": "__docformat__",
        "kind": 5,
        "importPath": "mid-range.es",
        "description": "mid-range.es",
        "peekOfCode": "__docformat__ = \"reStructuredText\"\nlabels = {\n    \"author\": u\"Autor\",\n    \"authors\": u\"Autores\",\n    \"organization\": u\"Organizaci\\u00f3n\",\n    \"address\": u\"Direcci\\u00f3n\",\n    \"contact\": u\"Contacto\",\n    \"version\": u\"Versi\\u00f3n\",\n    \"revision\": u\"Revisi\\u00f3n\",\n    \"status\": u\"Estado\",",
        "detail": "mid-range.es",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "mid-range.es",
        "description": "mid-range.es",
        "peekOfCode": "labels = {\n    \"author\": u\"Autor\",\n    \"authors\": u\"Autores\",\n    \"organization\": u\"Organizaci\\u00f3n\",\n    \"address\": u\"Direcci\\u00f3n\",\n    \"contact\": u\"Contacto\",\n    \"version\": u\"Versi\\u00f3n\",\n    \"revision\": u\"Revisi\\u00f3n\",\n    \"status\": u\"Estado\",\n    \"date\": u\"Fecha\",",
        "detail": "mid-range.es",
        "documentation": {}
    },
    {
        "label": "bibliographic_fields",
        "kind": 5,
        "importPath": "mid-range.es",
        "description": "mid-range.es",
        "peekOfCode": "bibliographic_fields = {\n    u\"autor\": \"author\",\n    u\"autores\": \"authors\",\n    u\"organizaci\\u00f3n\": \"organization\",\n    u\"direcci\\u00f3n\": \"address\",\n    u\"contacto\": \"contact\",\n    u\"versi\\u00f3n\": \"version\",\n    u\"revisi\\u00f3n\": \"revision\",\n    u\"estado\": \"status\",\n    u\"fecha\": \"date\",",
        "detail": "mid-range.es",
        "documentation": {}
    },
    {
        "label": "author_separators",
        "kind": 5,
        "importPath": "mid-range.es",
        "description": "mid-range.es",
        "peekOfCode": "author_separators = [\";\", \",\"]\n\"\"\"List of separator strings for the 'Authors' bibliographic field. Tried in\norder.\"\"\"",
        "detail": "mid-range.es",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "mid-range.escape",
        "description": "mid-range.escape",
        "peekOfCode": "s1 = \"\\x61\"  # \\x - 2 digits\nprint(s1)  # a\ns2 = \"\\u2122\"  # \\u - 4 digits (8482 in hex)\nprint(s2)  # ™\ns3 = \"\\U00002122\"  # \\U - 8 digits\nprint(s3)  # ™\ns4 = \"\\N{trade mark sign}\"\nprint(s4)  # ™",
        "detail": "mid-range.escape",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "mid-range.escape",
        "description": "mid-range.escape",
        "peekOfCode": "s2 = \"\\u2122\"  # \\u - 4 digits (8482 in hex)\nprint(s2)  # ™\ns3 = \"\\U00002122\"  # \\U - 8 digits\nprint(s3)  # ™\ns4 = \"\\N{trade mark sign}\"\nprint(s4)  # ™",
        "detail": "mid-range.escape",
        "documentation": {}
    },
    {
        "label": "s3",
        "kind": 5,
        "importPath": "mid-range.escape",
        "description": "mid-range.escape",
        "peekOfCode": "s3 = \"\\U00002122\"  # \\U - 8 digits\nprint(s3)  # ™\ns4 = \"\\N{trade mark sign}\"\nprint(s4)  # ™",
        "detail": "mid-range.escape",
        "documentation": {}
    },
    {
        "label": "s4",
        "kind": 5,
        "importPath": "mid-range.escape",
        "description": "mid-range.escape",
        "peekOfCode": "s4 = \"\\N{trade mark sign}\"\nprint(s4)  # ™",
        "detail": "mid-range.escape",
        "documentation": {}
    },
    {
        "label": "estimate_pi",
        "kind": 2,
        "importPath": "mid-range.estimate_pi",
        "description": "mid-range.estimate_pi",
        "peekOfCode": "def estimate_pi(n):\n    total_points = 0\n    circle_points = 0\n    for i in range(n):\n        # generate N random points in the first quadrant\n        x, y = random(), random()\n        if x * x + y * y <= 1:\n            # using squared euclidean distance find the distance from (0, 0) to (x, y)\n            circle_points += 1\n        total_points += 1",
        "detail": "mid-range.estimate_pi",
        "documentation": {}
    },
    {
        "label": "EUCKRProber",
        "kind": 6,
        "importPath": "mid-range.euckrprober",
        "description": "mid-range.euckrprober",
        "peekOfCode": "class EUCKRProber(MultiByteCharSetProber):\n    def __init__(self):\n        super(EUCKRProber, self).__init__()\n        self.coding_sm = CodingStateMachine(EUCKR_SM_MODEL)\n        self.distribution_analyzer = EUCKRDistributionAnalysis()\n        self.reset()\n    @property\n    def charset_name(self):\n        return \"EUC-KR\"\n    @property",
        "detail": "mid-range.euckrprober",
        "documentation": {}
    },
    {
        "label": "euclidean_distance",
        "kind": 2,
        "importPath": "mid-range.euclidean_distance",
        "description": "mid-range.euclidean_distance",
        "peekOfCode": "def euclidean_distance(vector_1: Vector, vector_2: Vector) -> VectorOut:\n    \"\"\"\n    Calculate the distance between the two endpoints of two vectors.\n    A vector is defined as a list, tuple, or numpy 1D array.\n    >>> euclidean_distance((0, 0), (2, 2))\n    2.8284271247461903\n    >>> euclidean_distance(np.array([0, 0, 0]), np.array([2, 2, 2]))\n    3.4641016151377544\n    >>> euclidean_distance(np.array([1, 2, 3, 4]), np.array([5, 6, 7, 8]))\n    8.0",
        "detail": "mid-range.euclidean_distance",
        "documentation": {}
    },
    {
        "label": "euclidean_distance_no_np",
        "kind": 2,
        "importPath": "mid-range.euclidean_distance",
        "description": "mid-range.euclidean_distance",
        "peekOfCode": "def euclidean_distance_no_np(vector_1: Vector, vector_2: Vector) -> VectorOut:\n    \"\"\"\n    Calculate the distance between the two endpoints of two vectors without numpy.\n    A vector is defined as a list, tuple, or numpy 1D array.\n    >>> euclidean_distance_no_np((0, 0), (2, 2))\n    2.8284271247461903\n    >>> euclidean_distance_no_np([1, 2, 3, 4], [5, 6, 7, 8])\n    8.0\n    \"\"\"\n    return sum((v1 - v2) ** 2 for v1, v2 in zip(vector_1, vector_2)) ** (1 / 2)",
        "detail": "mid-range.euclidean_distance",
        "documentation": {}
    },
    {
        "label": "Vector",
        "kind": 5,
        "importPath": "mid-range.euclidean_distance",
        "description": "mid-range.euclidean_distance",
        "peekOfCode": "Vector = Union[Iterable[float], Iterable[int], np.ndarray]\nVectorOut = Union[np.float64, int, float]\ndef euclidean_distance(vector_1: Vector, vector_2: Vector) -> VectorOut:\n    \"\"\"\n    Calculate the distance between the two endpoints of two vectors.\n    A vector is defined as a list, tuple, or numpy 1D array.\n    >>> euclidean_distance((0, 0), (2, 2))\n    2.8284271247461903\n    >>> euclidean_distance(np.array([0, 0, 0]), np.array([2, 2, 2]))\n    3.4641016151377544",
        "detail": "mid-range.euclidean_distance",
        "documentation": {}
    },
    {
        "label": "VectorOut",
        "kind": 5,
        "importPath": "mid-range.euclidean_distance",
        "description": "mid-range.euclidean_distance",
        "peekOfCode": "VectorOut = Union[np.float64, int, float]\ndef euclidean_distance(vector_1: Vector, vector_2: Vector) -> VectorOut:\n    \"\"\"\n    Calculate the distance between the two endpoints of two vectors.\n    A vector is defined as a list, tuple, or numpy 1D array.\n    >>> euclidean_distance((0, 0), (2, 2))\n    2.8284271247461903\n    >>> euclidean_distance(np.array([0, 0, 0]), np.array([2, 2, 2]))\n    3.4641016151377544\n    >>> euclidean_distance(np.array([1, 2, 3, 4]), np.array([5, 6, 7, 8]))",
        "detail": "mid-range.euclidean_distance",
        "documentation": {}
    },
    {
        "label": "euclidean_gcd",
        "kind": 2,
        "importPath": "mid-range.euclidean_gcd",
        "description": "mid-range.euclidean_gcd",
        "peekOfCode": "def euclidean_gcd(a, b):\n    while b:\n        t = b\n        b = a % b\n        a = t\n    return a\ndef main():\n    print(\"GCD(3, 5) = \" + str(euclidean_gcd(3, 5)))\n    print(\"GCD(5, 3) = \" + str(euclidean_gcd(5, 3)))\n    print(\"GCD(1, 3) = \" + str(euclidean_gcd(1, 3)))",
        "detail": "mid-range.euclidean_gcd",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.euclidean_gcd",
        "description": "mid-range.euclidean_gcd",
        "peekOfCode": "def main():\n    print(\"GCD(3, 5) = \" + str(euclidean_gcd(3, 5)))\n    print(\"GCD(5, 3) = \" + str(euclidean_gcd(5, 3)))\n    print(\"GCD(1, 3) = \" + str(euclidean_gcd(1, 3)))\n    print(\"GCD(3, 6) = \" + str(euclidean_gcd(3, 6)))\n    print(\"GCD(6, 3) = \" + str(euclidean_gcd(6, 3)))\nif __name__ == \"__main__\":\n    main()",
        "detail": "mid-range.euclidean_gcd",
        "documentation": {}
    },
    {
        "label": "EUCTWProber",
        "kind": 6,
        "importPath": "mid-range.euctwprober",
        "description": "mid-range.euctwprober",
        "peekOfCode": "class EUCTWProber(MultiByteCharSetProber):\n    def __init__(self):\n        super(EUCTWProber, self).__init__()\n        self.coding_sm = CodingStateMachine(EUCTW_SM_MODEL)\n        self.distribution_analyzer = EUCTWDistributionAnalysis()\n        self.reset()\n    @property\n    def charset_name(self):\n        return \"EUC-TW\"\n    @property",
        "detail": "mid-range.euctwprober",
        "documentation": {}
    },
    {
        "label": "sum_of_multiples",
        "kind": 2,
        "importPath": "mid-range.euler001_sum_multiples_3_or_5",
        "description": "mid-range.euler001_sum_multiples_3_or_5",
        "peekOfCode": "def sum_of_multiples(n, limit):\n    k = (limit - 1) // n\n    return ((n + k * n) * k) // 2\ndef sum_multiples_of_3or5(limit):\n    return (\n        sum_of_multiples(3, limit)\n        + sum_of_multiples(5, limit)\n        - sum_of_multiples(15, limit)\n    )\ndef test():",
        "detail": "mid-range.euler001_sum_multiples_3_or_5",
        "documentation": {}
    },
    {
        "label": "sum_multiples_of_3or5",
        "kind": 2,
        "importPath": "mid-range.euler001_sum_multiples_3_or_5",
        "description": "mid-range.euler001_sum_multiples_3_or_5",
        "peekOfCode": "def sum_multiples_of_3or5(limit):\n    return (\n        sum_of_multiples(3, limit)\n        + sum_of_multiples(5, limit)\n        - sum_of_multiples(15, limit)\n    )\ndef test():\n    assert 23 == sum_multiples_of_3or5(10)\ndef run():\n    print(sum_multiples_of_3or5(1000))",
        "detail": "mid-range.euler001_sum_multiples_3_or_5",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler001_sum_multiples_3_or_5",
        "description": "mid-range.euler001_sum_multiples_3_or_5",
        "peekOfCode": "def test():\n    assert 23 == sum_multiples_of_3or5(10)\ndef run():\n    print(sum_multiples_of_3or5(1000))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler001_sum_multiples_3_or_5",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler001_sum_multiples_3_or_5",
        "description": "mid-range.euler001_sum_multiples_3_or_5",
        "peekOfCode": "def run():\n    print(sum_multiples_of_3or5(1000))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler001_sum_multiples_3_or_5",
        "documentation": {}
    },
    {
        "label": "even_fibs",
        "kind": 2,
        "importPath": "mid-range.euler002_even_fibs",
        "description": "mid-range.euler002_even_fibs",
        "peekOfCode": "def even_fibs(m):\n    return (f for f in all_fibs(m) if f % 2 == 0)\ndef test():\n    assert 10 == sum(even_fibs(10))\ndef run():\n    print(sum(even_fibs(4 * 10 ** 6)))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler002_even_fibs",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler002_even_fibs",
        "description": "mid-range.euler002_even_fibs",
        "peekOfCode": "def test():\n    assert 10 == sum(even_fibs(10))\ndef run():\n    print(sum(even_fibs(4 * 10 ** 6)))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler002_even_fibs",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler002_even_fibs",
        "description": "mid-range.euler002_even_fibs",
        "peekOfCode": "def run():\n    print(sum(even_fibs(4 * 10 ** 6)))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler002_even_fibs",
        "documentation": {}
    },
    {
        "label": "largest_prime_factor",
        "kind": 2,
        "importPath": "mid-range.euler003_largest_prime_factor",
        "description": "mid-range.euler003_largest_prime_factor",
        "peekOfCode": "def largest_prime_factor(n):\n    return max(factors(n))[0]\ndef test():\n    assert 29 == largest_prime_factor(13195)\ndef run():\n    print(largest_prime_factor(TARGET))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler003_largest_prime_factor",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler003_largest_prime_factor",
        "description": "mid-range.euler003_largest_prime_factor",
        "peekOfCode": "def test():\n    assert 29 == largest_prime_factor(13195)\ndef run():\n    print(largest_prime_factor(TARGET))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler003_largest_prime_factor",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler003_largest_prime_factor",
        "description": "mid-range.euler003_largest_prime_factor",
        "peekOfCode": "def run():\n    print(largest_prime_factor(TARGET))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler003_largest_prime_factor",
        "documentation": {}
    },
    {
        "label": "TARGET",
        "kind": 5,
        "importPath": "mid-range.euler003_largest_prime_factor",
        "description": "mid-range.euler003_largest_prime_factor",
        "peekOfCode": "TARGET = 600851475143\ndef largest_prime_factor(n):\n    return max(factors(n))[0]\ndef test():\n    assert 29 == largest_prime_factor(13195)\ndef run():\n    print(largest_prime_factor(TARGET))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler003_largest_prime_factor",
        "documentation": {}
    },
    {
        "label": "largest_palindromic_for_digits",
        "kind": 2,
        "importPath": "mid-range.euler004_largest_palindrome_product",
        "description": "mid-range.euler004_largest_palindrome_product",
        "peekOfCode": "def largest_palindromic_for_digits(digits, limit=None):\n    top = int(\"9\" * digits)\n    bot = int(\"9\" * (digits - 1))\n    best = 0\n    for a in range(top, bot, -1):\n        for b in range(top, bot, -1):\n            n = a * b\n            if limit and n >= limit:\n                continue\n            if n < best:",
        "detail": "mid-range.euler004_largest_palindrome_product",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler004_largest_palindrome_product",
        "description": "mid-range.euler004_largest_palindrome_product",
        "peekOfCode": "def test():\n    assert 9009 == largest_palindromic_for_digits(2)\ndef run():\n    print(largest_palindromic_for_digits(3))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler004_largest_palindrome_product",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler004_largest_palindrome_product",
        "description": "mid-range.euler004_largest_palindrome_product",
        "peekOfCode": "def run():\n    print(largest_palindromic_for_digits(3))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler004_largest_palindrome_product",
        "documentation": {}
    },
    {
        "label": "range_lcm",
        "kind": 2,
        "importPath": "mid-range.euler005_smallest_multiple",
        "description": "mid-range.euler005_smallest_multiple",
        "peekOfCode": "def range_lcm(m):\n    return lcm(*range(2, m + 1))\ndef test():\n    assert 2520 == range_lcm(10)\ndef run():\n    print(range_lcm(20))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler005_smallest_multiple",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler005_smallest_multiple",
        "description": "mid-range.euler005_smallest_multiple",
        "peekOfCode": "def test():\n    assert 2520 == range_lcm(10)\ndef run():\n    print(range_lcm(20))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler005_smallest_multiple",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler005_smallest_multiple",
        "description": "mid-range.euler005_smallest_multiple",
        "peekOfCode": "def run():\n    print(range_lcm(20))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler005_smallest_multiple",
        "documentation": {}
    },
    {
        "label": "ssq_sqs_diff",
        "kind": 2,
        "importPath": "mid-range.euler006_sum_square_difference",
        "description": "mid-range.euler006_sum_square_difference",
        "peekOfCode": "def ssq_sqs_diff(m):\n    return square_of_sum(m) - sum_of_squares(m)\ndef test():\n    assert 2640 == ssq_sqs_diff(10)\ndef run():\n    print(ssq_sqs_diff(100))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler006_sum_square_difference",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler006_sum_square_difference",
        "description": "mid-range.euler006_sum_square_difference",
        "peekOfCode": "def test():\n    assert 2640 == ssq_sqs_diff(10)\ndef run():\n    print(ssq_sqs_diff(100))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler006_sum_square_difference",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler006_sum_square_difference",
        "description": "mid-range.euler006_sum_square_difference",
        "peekOfCode": "def run():\n    print(ssq_sqs_diff(100))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler006_sum_square_difference",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler007_nth_prime",
        "description": "mid-range.euler007_nth_prime",
        "peekOfCode": "def test():\n    assert 13 == nth_prime(6)\ndef run():\n    print(nth_prime(10001))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler007_nth_prime",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler007_nth_prime",
        "description": "mid-range.euler007_nth_prime",
        "peekOfCode": "def run():\n    print(nth_prime(10001))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler007_nth_prime",
        "documentation": {}
    },
    {
        "label": "largest_product_of",
        "kind": 2,
        "importPath": "mid-range.euler008_largest_product_in_a_series",
        "description": "mid-range.euler008_largest_product_in_a_series",
        "peekOfCode": "def largest_product_of(n, k):\n    n = [int(c) for c in str(n)]\n    return max(\n        functools.reduce(operator.mul, itertools.islice(n, i, i + k), 1)\n        for i in range(len(n) - k)\n    )\ndef test():\n    assert 9 == largest_product_of(TARGET, 1)\n    assert 81 == largest_product_of(TARGET, 2)\n    assert 5832 == largest_product_of(TARGET, 4)",
        "detail": "mid-range.euler008_largest_product_in_a_series",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler008_largest_product_in_a_series",
        "description": "mid-range.euler008_largest_product_in_a_series",
        "peekOfCode": "def test():\n    assert 9 == largest_product_of(TARGET, 1)\n    assert 81 == largest_product_of(TARGET, 2)\n    assert 5832 == largest_product_of(TARGET, 4)\ndef run():\n    print(largest_product_of(TARGET, 13))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler008_largest_product_in_a_series",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler008_largest_product_in_a_series",
        "description": "mid-range.euler008_largest_product_in_a_series",
        "peekOfCode": "def run():\n    print(largest_product_of(TARGET, 13))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler008_largest_product_in_a_series",
        "documentation": {}
    },
    {
        "label": "TARGET",
        "kind": 5,
        "importPath": "mid-range.euler008_largest_product_in_a_series",
        "description": "mid-range.euler008_largest_product_in_a_series",
        "peekOfCode": "TARGET = \"\"\"\n73167176531330624919225119674426574742355349194934\n96983520312774506326239578318016984801869478851843\n85861560789112949495459501737958331952853208805511\n12540698747158523863050715693290963295227443043557\n66896648950445244523161731856403098711121722383113\n62229893423380308135336276614282806444486645238749\n30358907296290491560440772390713810515859307960866\n70172427121883998797908792274921901699720888093776\n65727333001053367881220235421809751254540594752243",
        "detail": "mid-range.euler008_largest_product_in_a_series",
        "documentation": {}
    },
    {
        "label": "TARGET",
        "kind": 5,
        "importPath": "mid-range.euler008_largest_product_in_a_series",
        "description": "mid-range.euler008_largest_product_in_a_series",
        "peekOfCode": "TARGET = \"\".join(TARGET.strip().split())\ndef largest_product_of(n, k):\n    n = [int(c) for c in str(n)]\n    return max(\n        functools.reduce(operator.mul, itertools.islice(n, i, i + k), 1)\n        for i in range(len(n) - k)\n    )\ndef test():\n    assert 9 == largest_product_of(TARGET, 1)\n    assert 81 == largest_product_of(TARGET, 2)",
        "detail": "mid-range.euler008_largest_product_in_a_series",
        "documentation": {}
    },
    {
        "label": "pythagorean_triplet_that_sums",
        "kind": 2,
        "importPath": "mid-range.euler009",
        "description": "mid-range.euler009",
        "peekOfCode": "def pythagorean_triplet_that_sums(s):\n    def solve_b(a):\n        return s * (s // 2 - a) // (s - a)\n    for a in range(1, s):\n        b = solve_b(a)\n        if b < a:\n            break\n        c = sqrt(a ** 2 + b ** 2)\n        if c != int(c):\n            continue",
        "detail": "mid-range.euler009",
        "documentation": {}
    },
    {
        "label": "prod",
        "kind": 2,
        "importPath": "mid-range.euler009",
        "description": "mid-range.euler009",
        "peekOfCode": "def prod(q):\n    return reduce(__mul__, q, 1)\ndef prod_of_pythagorean_triplet_that_sums(s):\n    return prod(pythagorean_triplet_that_sums(s))\ndef test():\n    assert 3 * 4 * 5 == prod_of_pythagorean_triplet_that_sums(3 + 4 + 5)\ndef run():\n    print(prod_of_pythagorean_triplet_that_sums(1000))\nif __name__ == \"__main__\":\n    test()",
        "detail": "mid-range.euler009",
        "documentation": {}
    },
    {
        "label": "prod_of_pythagorean_triplet_that_sums",
        "kind": 2,
        "importPath": "mid-range.euler009",
        "description": "mid-range.euler009",
        "peekOfCode": "def prod_of_pythagorean_triplet_that_sums(s):\n    return prod(pythagorean_triplet_that_sums(s))\ndef test():\n    assert 3 * 4 * 5 == prod_of_pythagorean_triplet_that_sums(3 + 4 + 5)\ndef run():\n    print(prod_of_pythagorean_triplet_that_sums(1000))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler009",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler009",
        "description": "mid-range.euler009",
        "peekOfCode": "def test():\n    assert 3 * 4 * 5 == prod_of_pythagorean_triplet_that_sums(3 + 4 + 5)\ndef run():\n    print(prod_of_pythagorean_triplet_that_sums(1000))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler009",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler009",
        "description": "mid-range.euler009",
        "peekOfCode": "def run():\n    print(prod_of_pythagorean_triplet_that_sums(1000))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler009",
        "documentation": {}
    },
    {
        "label": "sum_primes",
        "kind": 2,
        "importPath": "mid-range.euler010",
        "description": "mid-range.euler010",
        "peekOfCode": "def sum_primes(up_to):\n    result = 0\n    for p in all_primes():\n        if p > up_to:\n            break\n        result += p\n    return result\ndef test():\n    assert 17 == sum_primes(10)\ndef run():",
        "detail": "mid-range.euler010",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler010",
        "description": "mid-range.euler010",
        "peekOfCode": "def test():\n    assert 17 == sum_primes(10)\ndef run():\n    print(sum_primes(2 * 10 ** 6))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler010",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler010",
        "description": "mid-range.euler010",
        "peekOfCode": "def run():\n    print(sum_primes(2 * 10 ** 6))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler010",
        "documentation": {}
    },
    {
        "label": "triangles",
        "kind": 2,
        "importPath": "mid-range.euler012",
        "description": "mid-range.euler012",
        "peekOfCode": "def triangles(n):\n    i = 1\n    t = 1\n    while n > 0:\n        yield t\n        i += 1\n        t += i\n        n -= 1\ndef first_triangle_with_divisors(n):\n    def prod(q):",
        "detail": "mid-range.euler012",
        "documentation": {}
    },
    {
        "label": "first_triangle_with_divisors",
        "kind": 2,
        "importPath": "mid-range.euler012",
        "description": "mid-range.euler012",
        "peekOfCode": "def first_triangle_with_divisors(n):\n    def prod(q):\n        return reduce(operator.mul, q, 1)\n    for t in triangles(factorial(n)):\n        f = factors(t)\n        reps = [k[1] for k in f]\n        count = 1\n        for s in range(len(reps)):\n            for c in combinations(reps, s + 1):\n                count += prod(c)",
        "detail": "mid-range.euler012",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler012",
        "description": "mid-range.euler012",
        "peekOfCode": "def test():\n    assert (1, 3, 6, 10, 15, 21, 28, 36, 45, 55) == tuple(triangles(10))\n    assert 28 == first_triangle_with_divisors(5)\ndef run():\n    print(first_triangle_with_divisors(500))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler012",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler012",
        "description": "mid-range.euler012",
        "peekOfCode": "def run():\n    print(first_triangle_with_divisors(500))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler012",
        "documentation": {}
    },
    {
        "label": "next_collaz",
        "kind": 2,
        "importPath": "mid-range.euler014",
        "description": "mid-range.euler014",
        "peekOfCode": "def next_collaz(n):\n    if n % 2:\n        return 3 * n + 1\n    else:\n        return n // 2\ndef collaz_seq_len(n):\n    if n not in __count:\n        __count[n] = 1 + collaz_seq_len(next_collaz(n))\n    return __count[n]\ndef max_collaz_seq_len(limit):",
        "detail": "mid-range.euler014",
        "documentation": {}
    },
    {
        "label": "collaz_seq_len",
        "kind": 2,
        "importPath": "mid-range.euler014",
        "description": "mid-range.euler014",
        "peekOfCode": "def collaz_seq_len(n):\n    if n not in __count:\n        __count[n] = 1 + collaz_seq_len(next_collaz(n))\n    return __count[n]\ndef max_collaz_seq_len(limit):\n    m = 0\n    n = 0\n    for i in range(1, limit):\n        c = collaz_seq_len(i)\n        if c < m:",
        "detail": "mid-range.euler014",
        "documentation": {}
    },
    {
        "label": "max_collaz_seq_len",
        "kind": 2,
        "importPath": "mid-range.euler014",
        "description": "mid-range.euler014",
        "peekOfCode": "def max_collaz_seq_len(limit):\n    m = 0\n    n = 0\n    for i in range(1, limit):\n        c = collaz_seq_len(i)\n        if c < m:\n            continue\n        m = c\n        n = i\n    return (n, m)",
        "detail": "mid-range.euler014",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler014",
        "description": "mid-range.euler014",
        "peekOfCode": "def test():\n    assert 10 == collaz_seq_len(13)\ndef run():\n    print(max_collaz_seq_len(10 ** 6))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler014",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler014",
        "description": "mid-range.euler014",
        "peekOfCode": "def run():\n    print(max_collaz_seq_len(10 ** 6))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler014",
        "documentation": {}
    },
    {
        "label": "__count",
        "kind": 5,
        "importPath": "mid-range.euler014",
        "description": "mid-range.euler014",
        "peekOfCode": "__count = {1: 1}\ndef next_collaz(n):\n    if n % 2:\n        return 3 * n + 1\n    else:\n        return n // 2\ndef collaz_seq_len(n):\n    if n not in __count:\n        __count[n] = 1 + collaz_seq_len(next_collaz(n))\n    return __count[n]",
        "detail": "mid-range.euler014",
        "documentation": {}
    },
    {
        "label": "count_routes",
        "kind": 2,
        "importPath": "mid-range.euler015",
        "description": "mid-range.euler015",
        "peekOfCode": "def count_routes(n, m):\n    if n == 0 or m == 0:\n        return 1\n    if (n, m) in __seen:\n        return __seen[(n, m)]\n    if n == m:\n        result = 2 * count_routes(n, m - 1)\n    else:\n        result = count_routes(n - 1, m) + count_routes(n, m - 1)\n    __seen[(n, m)] = result",
        "detail": "mid-range.euler015",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler015",
        "description": "mid-range.euler015",
        "peekOfCode": "def test():\n    assert 6 == count_routes(2, 2)\ndef run():\n    print(count_routes(20, 20))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler015",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler015",
        "description": "mid-range.euler015",
        "peekOfCode": "def run():\n    print(count_routes(20, 20))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler015",
        "documentation": {}
    },
    {
        "label": "__seen",
        "kind": 5,
        "importPath": "mid-range.euler015",
        "description": "mid-range.euler015",
        "peekOfCode": "__seen = {}\ndef count_routes(n, m):\n    if n == 0 or m == 0:\n        return 1\n    if (n, m) in __seen:\n        return __seen[(n, m)]\n    if n == m:\n        result = 2 * count_routes(n, m - 1)\n    else:\n        result = count_routes(n - 1, m) + count_routes(n, m - 1)",
        "detail": "mid-range.euler015",
        "documentation": {}
    },
    {
        "label": "sum_pow2_digist",
        "kind": 2,
        "importPath": "mid-range.euler016",
        "description": "mid-range.euler016",
        "peekOfCode": "def sum_pow2_digist(e):\n    return sum(int(c) for c in str(2 ** e) if c)\ndef test():\n    assert 26 == sum_pow2_digist(15)\ndef run():\n    print(sum_pow2_digist(1000))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler016",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler016",
        "description": "mid-range.euler016",
        "peekOfCode": "def test():\n    assert 26 == sum_pow2_digist(15)\ndef run():\n    print(sum_pow2_digist(1000))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler016",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler016",
        "description": "mid-range.euler016",
        "peekOfCode": "def run():\n    print(sum_pow2_digist(1000))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler016",
        "documentation": {}
    },
    {
        "label": "2^15",
        "kind": 5,
        "importPath": "mid-range.euler016",
        "description": "mid-range.euler016",
        "peekOfCode": "2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.\nWhat is the sum of the digits of the number 21000?\n\"\"\"\ndef sum_pow2_digist(e):\n    return sum(int(c) for c in str(2 ** e) if c)\ndef test():\n    assert 26 == sum_pow2_digist(15)\ndef run():\n    print(sum_pow2_digist(1000))\nif __name__ == \"__main__\":",
        "detail": "mid-range.euler016",
        "documentation": {}
    },
    {
        "label": "num2only_letters",
        "kind": 2,
        "importPath": "mid-range.euler017",
        "description": "mid-range.euler017",
        "peekOfCode": "def num2only_letters(n):\n    return \"\".join(c for c in num2words(n) if c.isalpha())\ndef sum_word_len(n):\n    return sum(len(num2only_letters(i)) for i in range(1, n + 1))\ndef test():\n    assert \"five\" == num2words(5)\n    assert 19 == sum_word_len(5)\n    assert \"one hundred and fifteen\" == num2words(115)\n    assert 20 == len(num2only_letters(115)), len(num2only_letters(115))\n    assert \"three hundred and forty-two\" == num2words(342)",
        "detail": "mid-range.euler017",
        "documentation": {}
    },
    {
        "label": "sum_word_len",
        "kind": 2,
        "importPath": "mid-range.euler017",
        "description": "mid-range.euler017",
        "peekOfCode": "def sum_word_len(n):\n    return sum(len(num2only_letters(i)) for i in range(1, n + 1))\ndef test():\n    assert \"five\" == num2words(5)\n    assert 19 == sum_word_len(5)\n    assert \"one hundred and fifteen\" == num2words(115)\n    assert 20 == len(num2only_letters(115)), len(num2only_letters(115))\n    assert \"three hundred and forty-two\" == num2words(342)\n    assert 23 == len(num2only_letters(342)), len(num2only_letters(342))\ndef run():",
        "detail": "mid-range.euler017",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler017",
        "description": "mid-range.euler017",
        "peekOfCode": "def test():\n    assert \"five\" == num2words(5)\n    assert 19 == sum_word_len(5)\n    assert \"one hundred and fifteen\" == num2words(115)\n    assert 20 == len(num2only_letters(115)), len(num2only_letters(115))\n    assert \"three hundred and forty-two\" == num2words(342)\n    assert 23 == len(num2only_letters(342)), len(num2only_letters(342))\ndef run():\n    print(sum_word_len(1000))\nif __name__ == \"__main__\":",
        "detail": "mid-range.euler017",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler017",
        "description": "mid-range.euler017",
        "peekOfCode": "def run():\n    print(sum_word_len(1000))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler017",
        "documentation": {}
    },
    {
        "label": "max_path_value_sweep",
        "kind": 2,
        "importPath": "mid-range.euler018",
        "description": "mid-range.euler018",
        "peekOfCode": "def max_path_value_sweep(triangle):\n    t = deepcopy(triangle)\n    for i in reversed(range(len(t) - 1)):\n        for j, _ in enumerate(t[i]):\n            t[i][j] += max(t[i + 1][j], t[i + 1][j + 1])\n    return t[0][0]\ndef test():\n    T = [[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]]\n    assert 23 == max_path_value_sweep(T)\ndef run():",
        "detail": "mid-range.euler018",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler018",
        "description": "mid-range.euler018",
        "peekOfCode": "def test():\n    T = [[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]]\n    assert 23 == max_path_value_sweep(T)\ndef run():\n    graph, start, stop = build_graph_from_triangle(TRIANGLE)\n    print(max_path_value_sweep(TRIANGLE), find_max_path(graph, start, stop)[0])\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler018",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler018",
        "description": "mid-range.euler018",
        "peekOfCode": "def run():\n    graph, start, stop = build_graph_from_triangle(TRIANGLE)\n    print(max_path_value_sweep(TRIANGLE), find_max_path(graph, start, stop)[0])\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler018",
        "documentation": {}
    },
    {
        "label": "STRIANGLE",
        "kind": 5,
        "importPath": "mid-range.euler018",
        "description": "mid-range.euler018",
        "peekOfCode": "STRIANGLE = \"\"\"\n75\n95 64\n17 47 82\n18 35 87 10\n20 04 82 47 65\n19 01 23 75 03 34\n88 02 77 73 07 63 67\n99 65 04 28 06 16 70 92\n41 41 26 56 83 40 80 70 33",
        "detail": "mid-range.euler018",
        "documentation": {}
    },
    {
        "label": "LINES",
        "kind": 5,
        "importPath": "mid-range.euler018",
        "description": "mid-range.euler018",
        "peekOfCode": "LINES = [s.split() for s in STRIANGLE.strip().split(\"\\n\")]\nTRIANGLE = [[int(s) for s in line] for line in LINES]\ndef max_path_value_sweep(triangle):\n    t = deepcopy(triangle)\n    for i in reversed(range(len(t) - 1)):\n        for j, _ in enumerate(t[i]):\n            t[i][j] += max(t[i + 1][j], t[i + 1][j + 1])\n    return t[0][0]\ndef test():\n    T = [[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]]",
        "detail": "mid-range.euler018",
        "documentation": {}
    },
    {
        "label": "TRIANGLE",
        "kind": 5,
        "importPath": "mid-range.euler018",
        "description": "mid-range.euler018",
        "peekOfCode": "TRIANGLE = [[int(s) for s in line] for line in LINES]\ndef max_path_value_sweep(triangle):\n    t = deepcopy(triangle)\n    for i in reversed(range(len(t) - 1)):\n        for j, _ in enumerate(t[i]):\n            t[i][j] += max(t[i + 1][j], t[i + 1][j + 1])\n    return t[0][0]\ndef test():\n    T = [[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]]\n    assert 23 == max_path_value_sweep(T)",
        "detail": "mid-range.euler018",
        "documentation": {}
    },
    {
        "label": "withdates",
        "kind": 2,
        "importPath": "mid-range.euler019",
        "description": "mid-range.euler019",
        "peekOfCode": "def withdates():\n    return sum(\n        date(y, m, 1).isoweekday() == 7\n        for y in range(1901, 2000 + 1)\n        for m in range(1, 12 + 1)\n    )\ndef test():\n    pass\ndef run():\n    print(withdates())",
        "detail": "mid-range.euler019",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler019",
        "description": "mid-range.euler019",
        "peekOfCode": "def test():\n    pass\ndef run():\n    print(withdates())\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler019",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler019",
        "description": "mid-range.euler019",
        "peekOfCode": "def run():\n    print(withdates())\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler019",
        "documentation": {}
    },
    {
        "label": "sumdigits",
        "kind": 2,
        "importPath": "mid-range.euler020",
        "description": "mid-range.euler020",
        "peekOfCode": "def sumdigits(n):\n    return sum(digits(n))\ndef test():\n    assert 27 == sumdigits(factorial(10))\ndef run():\n    print(sumdigits(factorial(100)))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler020",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler020",
        "description": "mid-range.euler020",
        "peekOfCode": "def test():\n    assert 27 == sumdigits(factorial(10))\ndef run():\n    print(sumdigits(factorial(100)))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler020",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler020",
        "description": "mid-range.euler020",
        "peekOfCode": "def run():\n    print(sumdigits(factorial(100)))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler020",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 2,
        "importPath": "mid-range.euler021",
        "description": "mid-range.euler021",
        "peekOfCode": "def d(n):\n    if n not in __seen:\n        __seen[n] = sum(divisors(n)) - n\n    return __seen[n]\ndef amicable(n):\n    s = d(n)\n    return s != n and n == d(s)\ndef amicables(n):\n    return (i for i in range(2, n) if amicable(i))\ndef test():",
        "detail": "mid-range.euler021",
        "documentation": {}
    },
    {
        "label": "amicable",
        "kind": 2,
        "importPath": "mid-range.euler021",
        "description": "mid-range.euler021",
        "peekOfCode": "def amicable(n):\n    s = d(n)\n    return s != n and n == d(s)\ndef amicables(n):\n    return (i for i in range(2, n) if amicable(i))\ndef test():\n    assert [1, 2, 4, 5, 11, 10, 20, 22, 44, 55, 110, 220] == list(divisors(220))\n    assert d(220) == 284 and d(284) == 220\ndef run():\n    print(sum(amicables(10 ** 4)))",
        "detail": "mid-range.euler021",
        "documentation": {}
    },
    {
        "label": "amicables",
        "kind": 2,
        "importPath": "mid-range.euler021",
        "description": "mid-range.euler021",
        "peekOfCode": "def amicables(n):\n    return (i for i in range(2, n) if amicable(i))\ndef test():\n    assert [1, 2, 4, 5, 11, 10, 20, 22, 44, 55, 110, 220] == list(divisors(220))\n    assert d(220) == 284 and d(284) == 220\ndef run():\n    print(sum(amicables(10 ** 4)))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler021",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler021",
        "description": "mid-range.euler021",
        "peekOfCode": "def test():\n    assert [1, 2, 4, 5, 11, 10, 20, 22, 44, 55, 110, 220] == list(divisors(220))\n    assert d(220) == 284 and d(284) == 220\ndef run():\n    print(sum(amicables(10 ** 4)))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler021",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler021",
        "description": "mid-range.euler021",
        "peekOfCode": "def run():\n    print(sum(amicables(10 ** 4)))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler021",
        "documentation": {}
    },
    {
        "label": "d(284)",
        "kind": 5,
        "importPath": "mid-range.euler021",
        "description": "mid-range.euler021",
        "peekOfCode": "d(284) = 220.\nEvaluate the sum of all the amicable numbers under 10000.\n\"\"\"\nfrom factorization import divisors\n__seen = {}\ndef d(n):\n    if n not in __seen:\n        __seen[n] = sum(divisors(n)) - n\n    return __seen[n]\ndef amicable(n):",
        "detail": "mid-range.euler021",
        "documentation": {}
    },
    {
        "label": "__seen",
        "kind": 5,
        "importPath": "mid-range.euler021",
        "description": "mid-range.euler021",
        "peekOfCode": "__seen = {}\ndef d(n):\n    if n not in __seen:\n        __seen[n] = sum(divisors(n)) - n\n    return __seen[n]\ndef amicable(n):\n    s = d(n)\n    return s != n and n == d(s)\ndef amicables(n):\n    return (i for i in range(2, n) if amicable(i))",
        "detail": "mid-range.euler021",
        "documentation": {}
    },
    {
        "label": "sum_alphabetical_values",
        "kind": 2,
        "importPath": "mid-range.euler022",
        "description": "mid-range.euler022",
        "peekOfCode": "def sum_alphabetical_values(names):\n    return sum(i * alphabetical_value(s) for i, s in enumerate(names, start=1))\ndef test():\n    name = NAMES[938 - 1]\n    assert \"COLIN\" == name\n    assert 53 == alphabetical_value(name)\ndef run():\n    print(sum_alphabetical_values(NAMES))\nif __name__ == \"__main__\":\n    test()",
        "detail": "mid-range.euler022",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler022",
        "description": "mid-range.euler022",
        "peekOfCode": "def test():\n    name = NAMES[938 - 1]\n    assert \"COLIN\" == name\n    assert 53 == alphabetical_value(name)\ndef run():\n    print(sum_alphabetical_values(NAMES))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler022",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler022",
        "description": "mid-range.euler022",
        "peekOfCode": "def run():\n    print(sum_alphabetical_values(NAMES))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler022",
        "documentation": {}
    },
    {
        "label": "FILENAME",
        "kind": 5,
        "importPath": "mid-range.euler022",
        "description": "mid-range.euler022",
        "peekOfCode": "FILENAME = Path(__file__).parent / \"../data/names.txt\"\nNAMES = sorted(next(csv.reader(open(FILENAME))))\ndef sum_alphabetical_values(names):\n    return sum(i * alphabetical_value(s) for i, s in enumerate(names, start=1))\ndef test():\n    name = NAMES[938 - 1]\n    assert \"COLIN\" == name\n    assert 53 == alphabetical_value(name)\ndef run():\n    print(sum_alphabetical_values(NAMES))",
        "detail": "mid-range.euler022",
        "documentation": {}
    },
    {
        "label": "NAMES",
        "kind": 5,
        "importPath": "mid-range.euler022",
        "description": "mid-range.euler022",
        "peekOfCode": "NAMES = sorted(next(csv.reader(open(FILENAME))))\ndef sum_alphabetical_values(names):\n    return sum(i * alphabetical_value(s) for i, s in enumerate(names, start=1))\ndef test():\n    name = NAMES[938 - 1]\n    assert \"COLIN\" == name\n    assert 53 == alphabetical_value(name)\ndef run():\n    print(sum_alphabetical_values(NAMES))\nif __name__ == \"__main__\":",
        "detail": "mid-range.euler022",
        "documentation": {}
    },
    {
        "label": "is_abundant",
        "kind": 2,
        "importPath": "mid-range.euler023",
        "description": "mid-range.euler023",
        "peekOfCode": "def is_abundant(x):\n    return 2 * x < sum(divisors(x))\ndef not_sum_of_abundants(m):\n    abundant = [x for x in range(2, m + 1) if is_abundant(x)]\n    sum_of_abundant = {a + b for i, a in enumerate(abundant) for b in abundant[i:]}\n    return (x for x in range(1, m + 1) if x not in sum_of_abundant)\ndef test():\n    assert set(range(1, 30)) - {24} == set(not_sum_of_abundants(30))\ndef run():\n    print(sum(not_sum_of_abundants(28123)))",
        "detail": "mid-range.euler023",
        "documentation": {}
    },
    {
        "label": "not_sum_of_abundants",
        "kind": 2,
        "importPath": "mid-range.euler023",
        "description": "mid-range.euler023",
        "peekOfCode": "def not_sum_of_abundants(m):\n    abundant = [x for x in range(2, m + 1) if is_abundant(x)]\n    sum_of_abundant = {a + b for i, a in enumerate(abundant) for b in abundant[i:]}\n    return (x for x in range(1, m + 1) if x not in sum_of_abundant)\ndef test():\n    assert set(range(1, 30)) - {24} == set(not_sum_of_abundants(30))\ndef run():\n    print(sum(not_sum_of_abundants(28123)))\nif __name__ == \"__main__\":\n    test()",
        "detail": "mid-range.euler023",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler023",
        "description": "mid-range.euler023",
        "peekOfCode": "def test():\n    assert set(range(1, 30)) - {24} == set(not_sum_of_abundants(30))\ndef run():\n    print(sum(not_sum_of_abundants(28123)))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler023",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler023",
        "description": "mid-range.euler023",
        "peekOfCode": "def run():\n    print(sum(not_sum_of_abundants(28123)))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler023",
        "documentation": {}
    },
    {
        "label": "nth_element",
        "kind": 2,
        "importPath": "mid-range.euler024",
        "description": "mid-range.euler024",
        "peekOfCode": "def nth_element(iterable, n):\n    return next(islice(iterable, n - 1, n))\ndef nth_permutation(digits, n):\n    return \"\".join(nth_element(permutations(digits), n))\ndef test():\n    assert \"210\" == nth_permutation(\"012\", 6)\ndef run():\n    print(nth_permutation(\"0123456789\", 10 ** 6))\nif __name__ == \"__main__\":\n    test()",
        "detail": "mid-range.euler024",
        "documentation": {}
    },
    {
        "label": "nth_permutation",
        "kind": 2,
        "importPath": "mid-range.euler024",
        "description": "mid-range.euler024",
        "peekOfCode": "def nth_permutation(digits, n):\n    return \"\".join(nth_element(permutations(digits), n))\ndef test():\n    assert \"210\" == nth_permutation(\"012\", 6)\ndef run():\n    print(nth_permutation(\"0123456789\", 10 ** 6))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler024",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler024",
        "description": "mid-range.euler024",
        "peekOfCode": "def test():\n    assert \"210\" == nth_permutation(\"012\", 6)\ndef run():\n    print(nth_permutation(\"0123456789\", 10 ** 6))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler024",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler024",
        "description": "mid-range.euler024",
        "peekOfCode": "def run():\n    print(nth_permutation(\"0123456789\", 10 ** 6))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler024",
        "documentation": {}
    },
    {
        "label": "first_fib_with_len",
        "kind": 2,
        "importPath": "mid-range.euler025",
        "description": "mid-range.euler025",
        "peekOfCode": "def first_fib_with_len(n):\n    for i, f in enumerate(all_fibs(), start=1):\n        if len(str(f)) >= n:\n            return i\ndef test():\n    assert 12 == first_fib_with_len(3)\ndef run():\n    print(first_fib_with_len(1000))\nif __name__ == \"__main__\":\n    test()",
        "detail": "mid-range.euler025",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler025",
        "description": "mid-range.euler025",
        "peekOfCode": "def test():\n    assert 12 == first_fib_with_len(3)\ndef run():\n    print(first_fib_with_len(1000))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler025",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler025",
        "description": "mid-range.euler025",
        "peekOfCode": "def run():\n    print(first_fib_with_len(1000))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler025",
        "documentation": {}
    },
    {
        "label": "long_division_pattern",
        "kind": 2,
        "importPath": "mid-range.euler026",
        "description": "mid-range.euler026",
        "peekOfCode": "def long_division_pattern(d):\n    seen = {}\n    r = 1\n    k = 0\n    while r:\n        k += 1\n        seen[r] = k\n        r = r * 10 % d\n        if r in seen:\n            return k - seen[r]",
        "detail": "mid-range.euler026",
        "documentation": {}
    },
    {
        "label": "find_longest_recurring",
        "kind": 2,
        "importPath": "mid-range.euler026",
        "description": "mid-range.euler026",
        "peekOfCode": "def find_longest_recurring(m):\n    return max((long_division_pattern(i), i) for i in range(2, m))\ndef test():\n    assert 7 == find_longest_recurring(10)[1]\ndef run():\n    print(find_longest_recurring(1000)[1])\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler026",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler026",
        "description": "mid-range.euler026",
        "peekOfCode": "def test():\n    assert 7 == find_longest_recurring(10)[1]\ndef run():\n    print(find_longest_recurring(1000)[1])\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler026",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler026",
        "description": "mid-range.euler026",
        "peekOfCode": "def run():\n    print(find_longest_recurring(1000)[1])\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler026",
        "documentation": {}
    },
    {
        "label": "odd",
        "kind": 2,
        "importPath": "mid-range.euler027",
        "description": "mid-range.euler027",
        "peekOfCode": "def odd(x):\n    return x % 2\ndef quadratic(n, a, b):\n    return n ** 2 + a * n + b\ndef count_consecutive_generated_primes(a, b):\n    for n in count():\n        if not is_prime(quadratic(n, a, b)):\n            return n - 2\ndef ab_prime_generators(i, j):\n    for b in primes_upto(j):",
        "detail": "mid-range.euler027",
        "documentation": {}
    },
    {
        "label": "quadratic",
        "kind": 2,
        "importPath": "mid-range.euler027",
        "description": "mid-range.euler027",
        "peekOfCode": "def quadratic(n, a, b):\n    return n ** 2 + a * n + b\ndef count_consecutive_generated_primes(a, b):\n    for n in count():\n        if not is_prime(quadratic(n, a, b)):\n            return n - 2\ndef ab_prime_generators(i, j):\n    for b in primes_upto(j):\n        for a in range(i, j):\n            if odd(a):",
        "detail": "mid-range.euler027",
        "documentation": {}
    },
    {
        "label": "count_consecutive_generated_primes",
        "kind": 2,
        "importPath": "mid-range.euler027",
        "description": "mid-range.euler027",
        "peekOfCode": "def count_consecutive_generated_primes(a, b):\n    for n in count():\n        if not is_prime(quadratic(n, a, b)):\n            return n - 2\ndef ab_prime_generators(i, j):\n    for b in primes_upto(j):\n        for a in range(i, j):\n            if odd(a):\n                yield (1 + count_consecutive_generated_primes(a, b), a, b)\n            else:",
        "detail": "mid-range.euler027",
        "documentation": {}
    },
    {
        "label": "ab_prime_generators",
        "kind": 2,
        "importPath": "mid-range.euler027",
        "description": "mid-range.euler027",
        "peekOfCode": "def ab_prime_generators(i, j):\n    for b in primes_upto(j):\n        for a in range(i, j):\n            if odd(a):\n                yield (1 + count_consecutive_generated_primes(a, b), a, b)\n            else:\n                yield (1, a, b)\ndef ab_prime_generator_with_max_len(i, j):\n    return max(ab_prime_generators(i, j))\ndef test():",
        "detail": "mid-range.euler027",
        "documentation": {}
    },
    {
        "label": "ab_prime_generator_with_max_len",
        "kind": 2,
        "importPath": "mid-range.euler027",
        "description": "mid-range.euler027",
        "peekOfCode": "def ab_prime_generator_with_max_len(i, j):\n    return max(ab_prime_generators(i, j))\ndef test():\n    assert (39, 1, 41) == ab_prime_generator_with_max_len(0, 43)\ndef run():\n    longest = ab_prime_generator_with_max_len(-1000 + 1, 1000)\n    print(longest[1] * longest[2])\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler027",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler027",
        "description": "mid-range.euler027",
        "peekOfCode": "def test():\n    assert (39, 1, 41) == ab_prime_generator_with_max_len(0, 43)\ndef run():\n    longest = ab_prime_generator_with_max_len(-1000 + 1, 1000)\n    print(longest[1] * longest[2])\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler027",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler027",
        "description": "mid-range.euler027",
        "peekOfCode": "def run():\n    longest = ab_prime_generator_with_max_len(-1000 + 1, 1000)\n    print(longest[1] * longest[2])\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler027",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.euler027",
        "description": "mid-range.euler027",
        "peekOfCode": "n = 0 to 39. However, when n = 40, 402 + 40 + 41 = 40(40 + 1) + 41 is divisible\nby 41, and certainly when n = 41, 41² + 41 + 41 is clearly divisible by 41.\nUsing computers, the incredible formula  n² − 79n + 1601 was discovered, which\nproduces 80 primes for the consecutive values n = 0 to 79. The product of the\ncoefficients, −79 and 1601, is −126479.\nConsidering quadratics of the form:\n    n² + an + b, where |a| < 1000 and |b| < 1000\n    where |n| is the modulus/absolute value of n\n    e.g. |11| = 11 and |−4| = 4\nFind the product of the coefficients, a and b, for the quadratic expression",
        "detail": "mid-range.euler027",
        "documentation": {}
    },
    {
        "label": "spiral_diagonal_numbers_upto_side",
        "kind": 2,
        "importPath": "mid-range.euler028",
        "description": "mid-range.euler028",
        "peekOfCode": "def spiral_diagonal_numbers_upto_side(m):\n    count = n_diagonal_for_side(m)\n    return (n for n, _i, _ in spiral_diagonal_numbers_upto(count))\ndef spiral_diagonal_sum(m):\n    return sum(spiral_diagonal_numbers_upto_side(m))\ndef test():\n    diagsin5 = [1, 3, 5, 7, 9, 13, 17, 21, 25]\n    assert diagsin5 == list(spiral_diagonal_numbers_upto_side(5))\n    assert 101 == spiral_diagonal_sum(5)\ndef run():",
        "detail": "mid-range.euler028",
        "documentation": {}
    },
    {
        "label": "spiral_diagonal_sum",
        "kind": 2,
        "importPath": "mid-range.euler028",
        "description": "mid-range.euler028",
        "peekOfCode": "def spiral_diagonal_sum(m):\n    return sum(spiral_diagonal_numbers_upto_side(m))\ndef test():\n    diagsin5 = [1, 3, 5, 7, 9, 13, 17, 21, 25]\n    assert diagsin5 == list(spiral_diagonal_numbers_upto_side(5))\n    assert 101 == spiral_diagonal_sum(5)\ndef run():\n    print(spiral_diagonal_sum(1001))\nif __name__ == \"__main__\":\n    test()",
        "detail": "mid-range.euler028",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler028",
        "description": "mid-range.euler028",
        "peekOfCode": "def test():\n    diagsin5 = [1, 3, 5, 7, 9, 13, 17, 21, 25]\n    assert diagsin5 == list(spiral_diagonal_numbers_upto_side(5))\n    assert 101 == spiral_diagonal_sum(5)\ndef run():\n    print(spiral_diagonal_sum(1001))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler028",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler028",
        "description": "mid-range.euler028",
        "peekOfCode": "def run():\n    print(spiral_diagonal_sum(1001))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler028",
        "documentation": {}
    },
    {
        "label": "power_combinations",
        "kind": 2,
        "importPath": "mid-range.euler029",
        "description": "mid-range.euler029",
        "peekOfCode": "def power_combinations(m):\n    return {a ** b for a in range(2, m + 1) for b in range(2, m + 1)}\ndef test():\n    assert 15 == len(power_combinations(5))\ndef run():\n    print(len(power_combinations(100)))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler029",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler029",
        "description": "mid-range.euler029",
        "peekOfCode": "def test():\n    assert 15 == len(power_combinations(5))\ndef run():\n    print(len(power_combinations(100)))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler029",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler029",
        "description": "mid-range.euler029",
        "peekOfCode": "def run():\n    print(len(power_combinations(100)))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler029",
        "documentation": {}
    },
    {
        "label": "power_of_digits",
        "kind": 2,
        "importPath": "mid-range.euler030",
        "description": "mid-range.euler030",
        "peekOfCode": "def power_of_digits(n, k):\n    return (x ** k for x in digits(n))\ndef numbers_that_sum_power_of_digits(k):\n    for n in count(2):\n        d = list(digits(n))\n        if len(d) * (9 ** k) < n:\n            break\n        if n == sum(power_of_digits(n, k)):\n            yield n\ndef test():",
        "detail": "mid-range.euler030",
        "documentation": {}
    },
    {
        "label": "numbers_that_sum_power_of_digits",
        "kind": 2,
        "importPath": "mid-range.euler030",
        "description": "mid-range.euler030",
        "peekOfCode": "def numbers_that_sum_power_of_digits(k):\n    for n in count(2):\n        d = list(digits(n))\n        if len(d) * (9 ** k) < n:\n            break\n        if n == sum(power_of_digits(n, k)):\n            yield n\ndef test():\n    assert 19316 == sum(numbers_that_sum_power_of_digits(4))\ndef run():",
        "detail": "mid-range.euler030",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler030",
        "description": "mid-range.euler030",
        "peekOfCode": "def test():\n    assert 19316 == sum(numbers_that_sum_power_of_digits(4))\ndef run():\n    print(sum(numbers_that_sum_power_of_digits(5)))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler030",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler030",
        "description": "mid-range.euler030",
        "peekOfCode": "def run():\n    print(sum(numbers_that_sum_power_of_digits(5)))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler030",
        "documentation": {}
    },
    {
        "label": "ways_to_make_change",
        "kind": 2,
        "importPath": "mid-range.euler031",
        "description": "mid-range.euler031",
        "peekOfCode": "def ways_to_make_change(amount, denom):\n    denom = list(sorted(denom))\n    if amount <= 0:\n        yield []\n    elif denom:\n        *denom, d = denom\n        for i in range(1 + amount // d):\n            for w in ways_to_make_change(amount - i * d, denom):\n                if w is not None:\n                    if i:",
        "detail": "mid-range.euler031",
        "documentation": {}
    },
    {
        "label": "count_ways_to_change",
        "kind": 2,
        "importPath": "mid-range.euler031",
        "description": "mid-range.euler031",
        "peekOfCode": "def count_ways_to_change(amount, denominations):\n    ways = 0\n    for w in ways_to_make_change(amount, denominations):\n        assert amount == sum(n * d for n, d in w)\n        ways += 1\n    return ways\ndef test():\n    assert 4 == count_ways_to_change(5, DENOMINATIONS)\n    d = DENOMINATIONS[:]\n    from random import shuffle",
        "detail": "mid-range.euler031",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler031",
        "description": "mid-range.euler031",
        "peekOfCode": "def test():\n    assert 4 == count_ways_to_change(5, DENOMINATIONS)\n    d = DENOMINATIONS[:]\n    from random import shuffle\n    shuffle(d)\n    assert 4 == count_ways_to_change(5, d)\ndef run():\n    print(count_ways_to_change(200, DENOMINATIONS))\nif __name__ == \"__main__\":\n    test()",
        "detail": "mid-range.euler031",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler031",
        "description": "mid-range.euler031",
        "peekOfCode": "def run():\n    print(count_ways_to_change(200, DENOMINATIONS))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler031",
        "documentation": {}
    },
    {
        "label": "DENOMINATIONS",
        "kind": 5,
        "importPath": "mid-range.euler031",
        "description": "mid-range.euler031",
        "peekOfCode": "DENOMINATIONS = [1, 2, 5, 10, 20, 50, 100, 200]\ndef ways_to_make_change(amount, denom):\n    denom = list(sorted(denom))\n    if amount <= 0:\n        yield []\n    elif denom:\n        *denom, d = denom\n        for i in range(1 + amount // d):\n            for w in ways_to_make_change(amount - i * d, denom):\n                if w is not None:",
        "detail": "mid-range.euler031",
        "documentation": {}
    },
    {
        "label": "is_pandigital_product",
        "kind": 2,
        "importPath": "mid-range.euler032",
        "description": "mid-range.euler032",
        "peekOfCode": "def is_pandigital_product(a, b, n, k=9):\n    return is_pandigital(str(a) + str(b) + str(n))\ndef find_pandigital_products(k):\n    upper = int(digits_downfrom(k, 1)[: -k // 2])\n    for a in range(2, upper):\n        if not is_semi_pandigital(a):\n            continue\n        for b in range(a, upper):\n            n = a * b\n            if n > upper:",
        "detail": "mid-range.euler032",
        "documentation": {}
    },
    {
        "label": "find_pandigital_products",
        "kind": 2,
        "importPath": "mid-range.euler032",
        "description": "mid-range.euler032",
        "peekOfCode": "def find_pandigital_products(k):\n    upper = int(digits_downfrom(k, 1)[: -k // 2])\n    for a in range(2, upper):\n        if not is_semi_pandigital(a):\n            continue\n        for b in range(a, upper):\n            n = a * b\n            if n > upper:\n                break\n            if is_pandigital_product(a, b, n):",
        "detail": "mid-range.euler032",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler032",
        "description": "mid-range.euler032",
        "peekOfCode": "def test():\n    assert is_pandigital(978564231)\n    assert is_pandigital(13452)\n    assert is_semi_pandigital(543)\n    assert not is_semi_pandigital(3543)\ndef run():\n    print(sum(set(n for _a, _b, n in find_pandigital_products(9))))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler032",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler032",
        "description": "mid-range.euler032",
        "peekOfCode": "def run():\n    print(sum(set(n for _a, _b, n in find_pandigital_products(9))))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler032",
        "documentation": {}
    },
    {
        "label": "unortodox_denom",
        "kind": 2,
        "importPath": "mid-range.euler033",
        "description": "mid-range.euler033",
        "peekOfCode": "def unortodox_denom(lower, d):\n    ds = str(d)\n    if ds[-1] == \"0\":\n        digits = ds[:-1]\n    else:\n        digits = ds\n    for n in range(lower, d):\n        f = Fraction(n, d)\n        ns = str(n)\n        for x in digits:",
        "detail": "mid-range.euler033",
        "documentation": {}
    },
    {
        "label": "unortodox_fractions",
        "kind": 2,
        "importPath": "mid-range.euler033",
        "description": "mid-range.euler033",
        "peekOfCode": "def unortodox_fractions(k):\n    lower = 10 ** (k - 1)\n    upper = int(k * \"9\")\n    for d in range(lower, upper + 1):\n        f = unortodox_denom(lower, d)\n        if f:\n            yield f\ndef test():\n    assert Fraction(4, 8) == unortodox_denom(49, 98)\ndef run():",
        "detail": "mid-range.euler033",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler033",
        "description": "mid-range.euler033",
        "peekOfCode": "def test():\n    assert Fraction(4, 8) == unortodox_denom(49, 98)\ndef run():\n    numbers = list(unortodox_fractions(2))\n    print(reduce(operator.mul, numbers, 1).denominator)\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler033",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler033",
        "description": "mid-range.euler033",
        "peekOfCode": "def run():\n    numbers = list(unortodox_fractions(2))\n    print(reduce(operator.mul, numbers, 1).denominator)\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler033",
        "documentation": {}
    },
    {
        "label": "sum_fact_digits",
        "kind": 2,
        "importPath": "mid-range.euler034",
        "description": "mid-range.euler034",
        "peekOfCode": "def sum_fact_digits(n):\n    return sum(factorial(d) for d in digits(n))\ndef list_sum_fact_digits():\n    f9 = factorial(9)\n    for n in count(3):\n        k = len(str(n))\n        if k * f9 < 9 * 10 ** k:\n            break\n        if n == sum_fact_digits(n):\n            yield n",
        "detail": "mid-range.euler034",
        "documentation": {}
    },
    {
        "label": "list_sum_fact_digits",
        "kind": 2,
        "importPath": "mid-range.euler034",
        "description": "mid-range.euler034",
        "peekOfCode": "def list_sum_fact_digits():\n    f9 = factorial(9)\n    for n in count(3):\n        k = len(str(n))\n        if k * f9 < 9 * 10 ** k:\n            break\n        if n == sum_fact_digits(n):\n            yield n\ndef test():\n    assert 145 == sum_fact_digits(145)",
        "detail": "mid-range.euler034",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler034",
        "description": "mid-range.euler034",
        "peekOfCode": "def test():\n    assert 145 == sum_fact_digits(145)\ndef run():\n    print(sum(list_sum_fact_digits()))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler034",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler034",
        "description": "mid-range.euler034",
        "peekOfCode": "def run():\n    print(sum(list_sum_fact_digits()))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler034",
        "documentation": {}
    },
    {
        "label": "is_circular_prime",
        "kind": 2,
        "importPath": "mid-range.euler035",
        "description": "mid-range.euler035",
        "peekOfCode": "def is_circular_prime(n):\n    return \"0\" not in str(n) and all(is_prime(r) for r in digit_rotations(n))\ndef count_circular_primes(m):\n    return sum(is_circular_prime(n) for n in primes_upto(m))\ndef test():\n    assert [197, 971, 719] == list(digit_rotations(197))\n    assert is_circular_prime(197)\n    assert 13 == count_circular_primes(10 ** 2)\ndef run():\n    print(count_circular_primes(10 ** 6))",
        "detail": "mid-range.euler035",
        "documentation": {}
    },
    {
        "label": "count_circular_primes",
        "kind": 2,
        "importPath": "mid-range.euler035",
        "description": "mid-range.euler035",
        "peekOfCode": "def count_circular_primes(m):\n    return sum(is_circular_prime(n) for n in primes_upto(m))\ndef test():\n    assert [197, 971, 719] == list(digit_rotations(197))\n    assert is_circular_prime(197)\n    assert 13 == count_circular_primes(10 ** 2)\ndef run():\n    print(count_circular_primes(10 ** 6))\nif __name__ == \"__main__\":\n    test()",
        "detail": "mid-range.euler035",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler035",
        "description": "mid-range.euler035",
        "peekOfCode": "def test():\n    assert [197, 971, 719] == list(digit_rotations(197))\n    assert is_circular_prime(197)\n    assert 13 == count_circular_primes(10 ** 2)\ndef run():\n    print(count_circular_primes(10 ** 6))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler035",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler035",
        "description": "mid-range.euler035",
        "peekOfCode": "def run():\n    print(count_circular_primes(10 ** 6))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler035",
        "documentation": {}
    },
    {
        "label": "to_binary",
        "kind": 2,
        "importPath": "mid-range.euler036",
        "description": "mid-range.euler036",
        "peekOfCode": "def to_binary(n):\n    return \"{:b}\".format(n)\ndef dec_and_bin_palindromes(m):\n    for n in range(1, m):\n        if is_palindrome(n) and is_palindrome(to_binary(n)):\n            yield n\ndef sum_dec_and_bin_palindromes(m):\n    return sum(x for x in dec_and_bin_palindromes(m))\ndef test():\n    assert is_palindrome(585) and is_palindrome(to_binary(585))",
        "detail": "mid-range.euler036",
        "documentation": {}
    },
    {
        "label": "dec_and_bin_palindromes",
        "kind": 2,
        "importPath": "mid-range.euler036",
        "description": "mid-range.euler036",
        "peekOfCode": "def dec_and_bin_palindromes(m):\n    for n in range(1, m):\n        if is_palindrome(n) and is_palindrome(to_binary(n)):\n            yield n\ndef sum_dec_and_bin_palindromes(m):\n    return sum(x for x in dec_and_bin_palindromes(m))\ndef test():\n    assert is_palindrome(585) and is_palindrome(to_binary(585))\ndef run():\n    print(sum_dec_and_bin_palindromes(10 ** 6))",
        "detail": "mid-range.euler036",
        "documentation": {}
    },
    {
        "label": "sum_dec_and_bin_palindromes",
        "kind": 2,
        "importPath": "mid-range.euler036",
        "description": "mid-range.euler036",
        "peekOfCode": "def sum_dec_and_bin_palindromes(m):\n    return sum(x for x in dec_and_bin_palindromes(m))\ndef test():\n    assert is_palindrome(585) and is_palindrome(to_binary(585))\ndef run():\n    print(sum_dec_and_bin_palindromes(10 ** 6))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler036",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler036",
        "description": "mid-range.euler036",
        "peekOfCode": "def test():\n    assert is_palindrome(585) and is_palindrome(to_binary(585))\ndef run():\n    print(sum_dec_and_bin_palindromes(10 ** 6))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler036",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler036",
        "description": "mid-range.euler036",
        "peekOfCode": "def run():\n    print(sum_dec_and_bin_palindromes(10 ** 6))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler036",
        "documentation": {}
    },
    {
        "label": "is_left_prime",
        "kind": 2,
        "importPath": "mid-range.euler037",
        "description": "mid-range.euler037",
        "peekOfCode": "def is_left_prime(n):\n    s = str(n)\n    while s:\n        n = int(s)\n        if not is_prime(n):\n            return False\n        elif n in TRUNCATABLE_PRIMES:\n            return True\n        s = s[1:]\n    return True",
        "detail": "mid-range.euler037",
        "documentation": {}
    },
    {
        "label": "is_right_prime",
        "kind": 2,
        "importPath": "mid-range.euler037",
        "description": "mid-range.euler037",
        "peekOfCode": "def is_right_prime(n):\n    s = str(n)\n    while s:\n        n = int(s)\n        if not is_prime(n):\n            return False\n        elif n in TRUNCATABLE_PRIMES:\n            return True\n        s = s[:-1]\n    return True",
        "detail": "mid-range.euler037",
        "documentation": {}
    },
    {
        "label": "truncatable_primes",
        "kind": 2,
        "importPath": "mid-range.euler037",
        "description": "mid-range.euler037",
        "peekOfCode": "def truncatable_primes(m):\n    for p in primes_upto(m):\n        if p < 11 or p in TRUNCATABLE_PRIMES:\n            continue\n        if is_left_prime(p) and is_right_prime(p):\n            TRUNCATABLE_PRIMES.add(p)\n    return TRUNCATABLE_PRIMES\ndef test():\n    assert is_prime(73)\n    assert is_prime(97)",
        "detail": "mid-range.euler037",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler037",
        "description": "mid-range.euler037",
        "peekOfCode": "def test():\n    assert is_prime(73)\n    assert is_prime(97)\n    assert is_prime(3797)\n    assert is_left_prime(3797)\n    assert is_right_prime(3797)\n    assert {3137, 37, 73, 797, 3797, 53, 23, 313, 317, 373} == truncatable_primes(\n        10 ** 4\n    )\ndef run():",
        "detail": "mid-range.euler037",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler037",
        "description": "mid-range.euler037",
        "peekOfCode": "def run():\n    print(sum(truncatable_primes(10 ** 6)))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler037",
        "documentation": {}
    },
    {
        "label": "TRUNCATABLE_PRIMES",
        "kind": 5,
        "importPath": "mid-range.euler037",
        "description": "mid-range.euler037",
        "peekOfCode": "TRUNCATABLE_PRIMES = {23, 37, 53, 73}\n@memoize\ndef is_left_prime(n):\n    s = str(n)\n    while s:\n        n = int(s)\n        if not is_prime(n):\n            return False\n        elif n in TRUNCATABLE_PRIMES:\n            return True",
        "detail": "mid-range.euler037",
        "documentation": {}
    },
    {
        "label": "concatenated_product",
        "kind": 2,
        "importPath": "mid-range.euler038_pandigital_multiples",
        "description": "mid-range.euler038_pandigital_multiples",
        "peekOfCode": "def concatenated_product(n, k):\n    return \"\".join(str(n * i) for i in range(1, k + 1))\ndef largest_pandigital_concatenated_product():\n    top = 1\n    for n in range(1, int(\"9\" * 5)):\n        if not is_semi_pandigital(n):\n            continue\n        cprod = str(n)\n        for k in count(2):\n            next = str(n * k)",
        "detail": "mid-range.euler038_pandigital_multiples",
        "documentation": {}
    },
    {
        "label": "largest_pandigital_concatenated_product",
        "kind": 2,
        "importPath": "mid-range.euler038_pandigital_multiples",
        "description": "mid-range.euler038_pandigital_multiples",
        "peekOfCode": "def largest_pandigital_concatenated_product():\n    top = 1\n    for n in range(1, int(\"9\" * 5)):\n        if not is_semi_pandigital(n):\n            continue\n        cprod = str(n)\n        for k in count(2):\n            next = str(n * k)\n            cprod += next\n            if len(cprod) > 9 or not is_semi_pandigital(next):",
        "detail": "mid-range.euler038_pandigital_multiples",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler038_pandigital_multiples",
        "description": "mid-range.euler038_pandigital_multiples",
        "peekOfCode": "def test():\n    assert \"192384576\" == concatenated_product(192, 3), concatenated_product(192, 3)\n    assert \"918273645\" == concatenated_product(9, 5)\n    assert is_pandigital(concatenated_product(9, 5))\ndef run():\n    print(largest_pandigital_concatenated_product())\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler038_pandigital_multiples",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler038_pandigital_multiples",
        "description": "mid-range.euler038_pandigital_multiples",
        "peekOfCode": "def run():\n    print(largest_pandigital_concatenated_product())\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler038_pandigital_multiples",
        "documentation": {}
    },
    {
        "label": "perimeter_combinations_for",
        "kind": 2,
        "importPath": "mid-range.euler039_integer_right_triangles",
        "description": "mid-range.euler039_integer_right_triangles",
        "peekOfCode": "def perimeter_combinations_for(limit):\n    perims = defaultdict(set)\n    for a in range(1, limit // 2):\n        for b in range(1, limit - a - 1):\n            c = sqrt(a ** 2 + b ** 2)\n            p = int(a + b + c)\n            if p >= limit:\n                break\n            elif c == int(c):\n                c = int(c)",
        "detail": "mid-range.euler039_integer_right_triangles",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler039_integer_right_triangles",
        "description": "mid-range.euler039_integer_right_triangles",
        "peekOfCode": "def test():\n    combs = {(20, 48, 52), (24, 45, 51), (30, 40, 50)}\n    assert combs == perimeter_combinations_for(125)[120]\ndef run():\n    print(max((len(s), p) for p, s in perimeter_combinations_for(1001).items())[1])\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler039_integer_right_triangles",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler039_integer_right_triangles",
        "description": "mid-range.euler039_integer_right_triangles",
        "peekOfCode": "def run():\n    print(max((len(s), p) for p, s in perimeter_combinations_for(1001).items())[1])\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler039_integer_right_triangles",
        "documentation": {}
    },
    {
        "label": "counting_digits",
        "kind": 2,
        "importPath": "mid-range.euler040_champernowne_constant",
        "description": "mid-range.euler040_champernowne_constant",
        "peekOfCode": "def counting_digits():\n    for number in count(1):\n        for digit in str(number):\n            yield digit\ndef select_digits(selectors):\n    s = list(sorted(selectors))\n    for i, d in enumerate(counting_digits(), start=1):\n        if not s:\n            break\n        if i >= s[0]:",
        "detail": "mid-range.euler040_champernowne_constant",
        "documentation": {}
    },
    {
        "label": "select_digits",
        "kind": 2,
        "importPath": "mid-range.euler040_champernowne_constant",
        "description": "mid-range.euler040_champernowne_constant",
        "peekOfCode": "def select_digits(selectors):\n    s = list(sorted(selectors))\n    for i, d in enumerate(counting_digits(), start=1):\n        if not s:\n            break\n        if i >= s[0]:\n            if i == s[0]:\n                yield int(d)\n            s = s[1:]\ndef test():",
        "detail": "mid-range.euler040_champernowne_constant",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler040_champernowne_constant",
        "description": "mid-range.euler040_champernowne_constant",
        "peekOfCode": "def test():\n    assert [1] == list(select_digits([12]))\ndef run():\n    sel = [10 ** i for i in range(6 + 1)]\n    print(reduce(mul, (c for c in select_digits(sel)), 1))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler040_champernowne_constant",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler040_champernowne_constant",
        "description": "mid-range.euler040_champernowne_constant",
        "peekOfCode": "def run():\n    sel = [10 ** i for i in range(6 + 1)]\n    print(reduce(mul, (c for c in select_digits(sel)), 1))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler040_champernowne_constant",
        "documentation": {}
    },
    {
        "label": "pandigital_primes",
        "kind": 2,
        "importPath": "mid-range.euler041_pandigital_prime",
        "description": "mid-range.euler041_pandigital_prime",
        "peekOfCode": "def pandigital_primes(digits=7):\n    for p in primes_upto(int(\"9\" * digits)):\n        if is_pandigital(p):\n            yield p\ndef test():\n    assert not is_prime(123)\n    assert not is_prime(132)\n    assert not is_prime(213)\n    assert not is_prime(231)\n    assert not is_prime(312)",
        "detail": "mid-range.euler041_pandigital_prime",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler041_pandigital_prime",
        "description": "mid-range.euler041_pandigital_prime",
        "peekOfCode": "def test():\n    assert not is_prime(123)\n    assert not is_prime(132)\n    assert not is_prime(213)\n    assert not is_prime(231)\n    assert not is_prime(312)\n    assert not is_prime(321)\n    assert is_prime(2143)\n    assert is_pandigital(2143)\n    assert 2143 in set(pandigital_primes(digits=4))",
        "detail": "mid-range.euler041_pandigital_prime",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler041_pandigital_prime",
        "description": "mid-range.euler041_pandigital_prime",
        "peekOfCode": "def run():\n    print(list(pandigital_primes())[-1])\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler041_pandigital_prime",
        "documentation": {}
    },
    {
        "label": "count_triangle_words",
        "kind": 2,
        "importPath": "mid-range.euler042_coded_triangle_numbers",
        "description": "mid-range.euler042_coded_triangle_numbers",
        "peekOfCode": "def count_triangle_words(names):\n    return sum(1 for w in names if is_triangle(alphabetical_value(w)))\ndef test():\n    assert 55 == alphabetical_value(\"SKY\")\n    assert is_triangle(55)\ndef run():\n    names = next(csv.reader(open(FILENAME)))\n    print(count_triangle_words(names))\nif __name__ == \"__main__\":\n    test()",
        "detail": "mid-range.euler042_coded_triangle_numbers",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler042_coded_triangle_numbers",
        "description": "mid-range.euler042_coded_triangle_numbers",
        "peekOfCode": "def test():\n    assert 55 == alphabetical_value(\"SKY\")\n    assert is_triangle(55)\ndef run():\n    names = next(csv.reader(open(FILENAME)))\n    print(count_triangle_words(names))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler042_coded_triangle_numbers",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler042_coded_triangle_numbers",
        "description": "mid-range.euler042_coded_triangle_numbers",
        "peekOfCode": "def run():\n    names = next(csv.reader(open(FILENAME)))\n    print(count_triangle_words(names))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler042_coded_triangle_numbers",
        "documentation": {}
    },
    {
        "label": "FILENAME",
        "kind": 5,
        "importPath": "mid-range.euler042_coded_triangle_numbers",
        "description": "mid-range.euler042_coded_triangle_numbers",
        "peekOfCode": "FILENAME = Path(__file__).parent / \"../data/words.txt\"\ndef count_triangle_words(names):\n    return sum(1 for w in names if is_triangle(alphabetical_value(w)))\ndef test():\n    assert 55 == alphabetical_value(\"SKY\")\n    assert is_triangle(55)\ndef run():\n    names = next(csv.reader(open(FILENAME)))\n    print(count_triangle_words(names))\nif __name__ == \"__main__\":",
        "detail": "mid-range.euler042_coded_triangle_numbers",
        "documentation": {}
    },
    {
        "label": "is_subdivisible",
        "kind": 2,
        "importPath": "mid-range.euler043_sub_string_divisibility",
        "description": "mid-range.euler043_sub_string_divisibility",
        "peekOfCode": "def is_subdivisible(n):\n    sn = str(n)\n    for i in range(1, 8):\n        if int(sn[i : i + 3]) % nth_prime(i):\n            break\n    else:\n        return True\ndef subdivisible_pandigitals(k, i=0):\n    digits = digits_upto(k, i)\n    for p in permutations(digits):",
        "detail": "mid-range.euler043_sub_string_divisibility",
        "documentation": {}
    },
    {
        "label": "subdivisible_pandigitals",
        "kind": 2,
        "importPath": "mid-range.euler043_sub_string_divisibility",
        "description": "mid-range.euler043_sub_string_divisibility",
        "peekOfCode": "def subdivisible_pandigitals(k, i=0):\n    digits = digits_upto(k, i)\n    for p in permutations(digits):\n        n = int(\"\".join(p))\n        if len(str(n)) != len(digits):\n            continue\n        if is_subdivisible(n):\n            yield n\ndef test():\n    assert is_subdivisible(1406357289)",
        "detail": "mid-range.euler043_sub_string_divisibility",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler043_sub_string_divisibility",
        "description": "mid-range.euler043_sub_string_divisibility",
        "peekOfCode": "def test():\n    assert is_subdivisible(1406357289)\ndef run():\n    print(sum(subdivisible_pandigitals(9)))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler043_sub_string_divisibility",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler043_sub_string_divisibility",
        "description": "mid-range.euler043_sub_string_divisibility",
        "peekOfCode": "def run():\n    print(sum(subdivisible_pandigitals(9)))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler043_sub_string_divisibility",
        "documentation": {}
    },
    {
        "label": "pentagonal_sum_and_diff",
        "kind": 2,
        "importPath": "mid-range.euler044_pentagon_numbers",
        "description": "mid-range.euler044_pentagon_numbers",
        "peekOfCode": "def pentagonal_sum_and_diff():\n    for k in pentagonals():\n        for d in pentagonals(upto=k):\n            j = abs(k - d)\n            if j > 0 and is_pentagonal(j) and is_pentagonal(j + k):\n                return j, k\ndef test():\n    assert is_pentagonal(pentagonal(4) + pentagonal(7))\n    assert not is_pentagonal(pentagonal(70) + pentagonal(22))\ndef run():",
        "detail": "mid-range.euler044_pentagon_numbers",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler044_pentagon_numbers",
        "description": "mid-range.euler044_pentagon_numbers",
        "peekOfCode": "def test():\n    assert is_pentagonal(pentagonal(4) + pentagonal(7))\n    assert not is_pentagonal(pentagonal(70) + pentagonal(22))\ndef run():\n    j, k = pentagonal_sum_and_diff()\n    print(abs(j - k))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler044_pentagon_numbers",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler044_pentagon_numbers",
        "description": "mid-range.euler044_pentagon_numbers",
        "peekOfCode": "def run():\n    j, k = pentagonal_sum_and_diff()\n    print(abs(j - k))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler044_pentagon_numbers",
        "documentation": {}
    },
    {
        "label": "next_multiagonal",
        "kind": 2,
        "importPath": "mid-range.euler045_triangular_pentagonal_and_exagonal",
        "description": "mid-range.euler045_triangular_pentagonal_and_exagonal",
        "peekOfCode": "def next_multiagonal(upfrom):\n    for n in exagonals():\n        if n > upfrom and is_pentagonal(n) and is_triangle(n):\n            return n\ndef test():\n    assert is_triangle(40755)\n    assert is_pentagonal(40755)\n    assert is_exagonal(40755)\n    assert 40755 == next_multiagonal(40750)\ndef run():",
        "detail": "mid-range.euler045_triangular_pentagonal_and_exagonal",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler045_triangular_pentagonal_and_exagonal",
        "description": "mid-range.euler045_triangular_pentagonal_and_exagonal",
        "peekOfCode": "def test():\n    assert is_triangle(40755)\n    assert is_pentagonal(40755)\n    assert is_exagonal(40755)\n    assert 40755 == next_multiagonal(40750)\ndef run():\n    print(next_multiagonal(40755))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler045_triangular_pentagonal_and_exagonal",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler045_triangular_pentagonal_and_exagonal",
        "description": "mid-range.euler045_triangular_pentagonal_and_exagonal",
        "peekOfCode": "def run():\n    print(next_multiagonal(40755))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler045_triangular_pentagonal_and_exagonal",
        "documentation": {}
    },
    {
        "label": "odd_composites",
        "kind": 2,
        "importPath": "mid-range.euler046_goldbachs_other_conjecture",
        "description": "mid-range.euler046_goldbachs_other_conjecture",
        "peekOfCode": "def odd_composites(upfrom=4):\n    for n in count(upfrom):\n        if n % 2 and not is_prime(n):\n            yield n\ndef is_prime_plus_2square(n):\n    for p in primes_upto(n):\n        c = sqrt((n - p) // 2)\n        if c == int(c):\n            return True\ndef first_non_prime_plus_2square():",
        "detail": "mid-range.euler046_goldbachs_other_conjecture",
        "documentation": {}
    },
    {
        "label": "is_prime_plus_2square",
        "kind": 2,
        "importPath": "mid-range.euler046_goldbachs_other_conjecture",
        "description": "mid-range.euler046_goldbachs_other_conjecture",
        "peekOfCode": "def is_prime_plus_2square(n):\n    for p in primes_upto(n):\n        c = sqrt((n - p) // 2)\n        if c == int(c):\n            return True\ndef first_non_prime_plus_2square():\n    for n in odd_composites():\n        if not is_prime_plus_2square(n):\n            return n\ndef test():",
        "detail": "mid-range.euler046_goldbachs_other_conjecture",
        "documentation": {}
    },
    {
        "label": "first_non_prime_plus_2square",
        "kind": 2,
        "importPath": "mid-range.euler046_goldbachs_other_conjecture",
        "description": "mid-range.euler046_goldbachs_other_conjecture",
        "peekOfCode": "def first_non_prime_plus_2square():\n    for n in odd_composites():\n        if not is_prime_plus_2square(n):\n            return n\ndef test():\n    assert is_prime_plus_2square(9)\n    assert is_prime_plus_2square(15)\n    assert is_prime_plus_2square(21)\n    assert is_prime_plus_2square(25)\n    assert is_prime_plus_2square(27)",
        "detail": "mid-range.euler046_goldbachs_other_conjecture",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler046_goldbachs_other_conjecture",
        "description": "mid-range.euler046_goldbachs_other_conjecture",
        "peekOfCode": "def test():\n    assert is_prime_plus_2square(9)\n    assert is_prime_plus_2square(15)\n    assert is_prime_plus_2square(21)\n    assert is_prime_plus_2square(25)\n    assert is_prime_plus_2square(27)\n    assert is_prime_plus_2square(33)\ndef run():\n    print(first_non_prime_plus_2square())\nif __name__ == \"__main__\":",
        "detail": "mid-range.euler046_goldbachs_other_conjecture",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler046_goldbachs_other_conjecture",
        "description": "mid-range.euler046_goldbachs_other_conjecture",
        "peekOfCode": "def run():\n    print(first_non_prime_plus_2square())\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler046_goldbachs_other_conjecture",
        "documentation": {}
    },
    {
        "label": "9",
        "kind": 5,
        "importPath": "mid-range.euler046_goldbachs_other_conjecture",
        "description": "mid-range.euler046_goldbachs_other_conjecture",
        "peekOfCode": "9 = 7 + 2×12\n15 = 7 + 2×22\n21 = 3 + 2×32\n25 = 7 + 2×32\n27 = 19 + 2×22\n33 = 31 + 2×12\nIt turns out that the conjecture was false.\nWhat is the smallest odd composite that cannot be written as the sum of a prime\nand twice a square?\n\"\"\"",
        "detail": "mid-range.euler046_goldbachs_other_conjecture",
        "documentation": {}
    },
    {
        "label": "15",
        "kind": 5,
        "importPath": "mid-range.euler046_goldbachs_other_conjecture",
        "description": "mid-range.euler046_goldbachs_other_conjecture",
        "peekOfCode": "15 = 7 + 2×22\n21 = 3 + 2×32\n25 = 7 + 2×32\n27 = 19 + 2×22\n33 = 31 + 2×12\nIt turns out that the conjecture was false.\nWhat is the smallest odd composite that cannot be written as the sum of a prime\nand twice a square?\n\"\"\"\nfrom math import sqrt",
        "detail": "mid-range.euler046_goldbachs_other_conjecture",
        "documentation": {}
    },
    {
        "label": "21",
        "kind": 5,
        "importPath": "mid-range.euler046_goldbachs_other_conjecture",
        "description": "mid-range.euler046_goldbachs_other_conjecture",
        "peekOfCode": "21 = 3 + 2×32\n25 = 7 + 2×32\n27 = 19 + 2×22\n33 = 31 + 2×12\nIt turns out that the conjecture was false.\nWhat is the smallest odd composite that cannot be written as the sum of a prime\nand twice a square?\n\"\"\"\nfrom math import sqrt\nfrom itertools import count",
        "detail": "mid-range.euler046_goldbachs_other_conjecture",
        "documentation": {}
    },
    {
        "label": "25",
        "kind": 5,
        "importPath": "mid-range.euler046_goldbachs_other_conjecture",
        "description": "mid-range.euler046_goldbachs_other_conjecture",
        "peekOfCode": "25 = 7 + 2×32\n27 = 19 + 2×22\n33 = 31 + 2×12\nIt turns out that the conjecture was false.\nWhat is the smallest odd composite that cannot be written as the sum of a prime\nand twice a square?\n\"\"\"\nfrom math import sqrt\nfrom itertools import count\nfrom primality import is_prime, primes_upto",
        "detail": "mid-range.euler046_goldbachs_other_conjecture",
        "documentation": {}
    },
    {
        "label": "27",
        "kind": 5,
        "importPath": "mid-range.euler046_goldbachs_other_conjecture",
        "description": "mid-range.euler046_goldbachs_other_conjecture",
        "peekOfCode": "27 = 19 + 2×22\n33 = 31 + 2×12\nIt turns out that the conjecture was false.\nWhat is the smallest odd composite that cannot be written as the sum of a prime\nand twice a square?\n\"\"\"\nfrom math import sqrt\nfrom itertools import count\nfrom primality import is_prime, primes_upto\ndef odd_composites(upfrom=4):",
        "detail": "mid-range.euler046_goldbachs_other_conjecture",
        "documentation": {}
    },
    {
        "label": "33",
        "kind": 5,
        "importPath": "mid-range.euler046_goldbachs_other_conjecture",
        "description": "mid-range.euler046_goldbachs_other_conjecture",
        "peekOfCode": "33 = 31 + 2×12\nIt turns out that the conjecture was false.\nWhat is the smallest odd composite that cannot be written as the sum of a prime\nand twice a square?\n\"\"\"\nfrom math import sqrt\nfrom itertools import count\nfrom primality import is_prime, primes_upto\ndef odd_composites(upfrom=4):\n    for n in count(upfrom):",
        "detail": "mid-range.euler046_goldbachs_other_conjecture",
        "documentation": {}
    },
    {
        "label": "n_factors",
        "kind": 2,
        "importPath": "mid-range.euler047_distinct_primes_factors",
        "description": "mid-range.euler047_distinct_primes_factors",
        "peekOfCode": "def n_factors(n):\n    return len(list(factors(n)))\ndef first_k_consecutive_with_k_factors(k):\n    n = k\n    while True:\n        for i in range(k):\n            if n_factors(n + i) != k:\n                n += i + 1\n                break\n        else:",
        "detail": "mid-range.euler047_distinct_primes_factors",
        "documentation": {}
    },
    {
        "label": "first_k_consecutive_with_k_factors",
        "kind": 2,
        "importPath": "mid-range.euler047_distinct_primes_factors",
        "description": "mid-range.euler047_distinct_primes_factors",
        "peekOfCode": "def first_k_consecutive_with_k_factors(k):\n    n = k\n    while True:\n        for i in range(k):\n            if n_factors(n + i) != k:\n                n += i + 1\n                break\n        else:\n            return n\ndef test():",
        "detail": "mid-range.euler047_distinct_primes_factors",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler047_distinct_primes_factors",
        "description": "mid-range.euler047_distinct_primes_factors",
        "peekOfCode": "def test():\n    assert 2 == n_factors(14)\n    assert 2 == n_factors(15)\n    assert 3 == n_factors(644), str(n_factors(644)) + \" - \" + str(factors(644))\n    assert 3 == n_factors(645)\n    assert 3 == n_factors(646)\n    assert 14 == first_k_consecutive_with_k_factors(2)\n    assert 644 == first_k_consecutive_with_k_factors(3)\ndef run():\n    print(first_k_consecutive_with_k_factors(4))",
        "detail": "mid-range.euler047_distinct_primes_factors",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler047_distinct_primes_factors",
        "description": "mid-range.euler047_distinct_primes_factors",
        "peekOfCode": "def run():\n    print(first_k_consecutive_with_k_factors(4))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler047_distinct_primes_factors",
        "documentation": {}
    },
    {
        "label": "14",
        "kind": 5,
        "importPath": "mid-range.euler047_distinct_primes_factors",
        "description": "mid-range.euler047_distinct_primes_factors",
        "peekOfCode": "14 = 2 × 7\n15 = 3 × 5\nThe first three consecutive numbers to have three distinct prime factors are:\n644 = 2² × 7 × 23\n645 = 3 × 5 × 43\n646 = 2 × 17 × 19.\nFind the first four consecutive integers to have four distinct primes factors.\nWhat is the first of these numbers?\n\"\"\"\nfrom factorization import factors",
        "detail": "mid-range.euler047_distinct_primes_factors",
        "documentation": {}
    },
    {
        "label": "15",
        "kind": 5,
        "importPath": "mid-range.euler047_distinct_primes_factors",
        "description": "mid-range.euler047_distinct_primes_factors",
        "peekOfCode": "15 = 3 × 5\nThe first three consecutive numbers to have three distinct prime factors are:\n644 = 2² × 7 × 23\n645 = 3 × 5 × 43\n646 = 2 × 17 × 19.\nFind the first four consecutive integers to have four distinct primes factors.\nWhat is the first of these numbers?\n\"\"\"\nfrom factorization import factors\ndef n_factors(n):",
        "detail": "mid-range.euler047_distinct_primes_factors",
        "documentation": {}
    },
    {
        "label": "644",
        "kind": 5,
        "importPath": "mid-range.euler047_distinct_primes_factors",
        "description": "mid-range.euler047_distinct_primes_factors",
        "peekOfCode": "644 = 2² × 7 × 23\n645 = 3 × 5 × 43\n646 = 2 × 17 × 19.\nFind the first four consecutive integers to have four distinct primes factors.\nWhat is the first of these numbers?\n\"\"\"\nfrom factorization import factors\ndef n_factors(n):\n    return len(list(factors(n)))\ndef first_k_consecutive_with_k_factors(k):",
        "detail": "mid-range.euler047_distinct_primes_factors",
        "documentation": {}
    },
    {
        "label": "645",
        "kind": 5,
        "importPath": "mid-range.euler047_distinct_primes_factors",
        "description": "mid-range.euler047_distinct_primes_factors",
        "peekOfCode": "645 = 3 × 5 × 43\n646 = 2 × 17 × 19.\nFind the first four consecutive integers to have four distinct primes factors.\nWhat is the first of these numbers?\n\"\"\"\nfrom factorization import factors\ndef n_factors(n):\n    return len(list(factors(n)))\ndef first_k_consecutive_with_k_factors(k):\n    n = k",
        "detail": "mid-range.euler047_distinct_primes_factors",
        "documentation": {}
    },
    {
        "label": "646",
        "kind": 5,
        "importPath": "mid-range.euler047_distinct_primes_factors",
        "description": "mid-range.euler047_distinct_primes_factors",
        "peekOfCode": "646 = 2 × 17 × 19.\nFind the first four consecutive integers to have four distinct primes factors.\nWhat is the first of these numbers?\n\"\"\"\nfrom factorization import factors\ndef n_factors(n):\n    return len(list(factors(n)))\ndef first_k_consecutive_with_k_factors(k):\n    n = k\n    while True:",
        "detail": "mid-range.euler047_distinct_primes_factors",
        "documentation": {}
    },
    {
        "label": "n_digits_from_power",
        "kind": 2,
        "importPath": "mid-range.euler048_self_powers",
        "description": "mid-range.euler048_self_powers",
        "peekOfCode": "def n_digits_from_power(k, n):\n    p = 1\n    for _ in range(n):\n        p = last_k_digits(k, p * n)\n    return p\ndef n_digits_from_sum_of_powers(k, p):\n    return last_k_digits(k, sum(n_digits_from_power(k, i) for i in range(1, p + 1)))\ndef test():\n    assert 10405071317 == n_digits_from_sum_of_powers(15, 10)\ndef run():",
        "detail": "mid-range.euler048_self_powers",
        "documentation": {}
    },
    {
        "label": "n_digits_from_sum_of_powers",
        "kind": 2,
        "importPath": "mid-range.euler048_self_powers",
        "description": "mid-range.euler048_self_powers",
        "peekOfCode": "def n_digits_from_sum_of_powers(k, p):\n    return last_k_digits(k, sum(n_digits_from_power(k, i) for i in range(1, p + 1)))\ndef test():\n    assert 10405071317 == n_digits_from_sum_of_powers(15, 10)\ndef run():\n    assert 9110846700 == n_digits_from_sum_of_powers(10, 1000)\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler048_self_powers",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler048_self_powers",
        "description": "mid-range.euler048_self_powers",
        "peekOfCode": "def test():\n    assert 10405071317 == n_digits_from_sum_of_powers(15, 10)\ndef run():\n    assert 9110846700 == n_digits_from_sum_of_powers(10, 1000)\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler048_self_powers",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler048_self_powers",
        "description": "mid-range.euler048_self_powers",
        "peekOfCode": "def run():\n    assert 9110846700 == n_digits_from_sum_of_powers(10, 1000)\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler048_self_powers",
        "documentation": {}
    },
    {
        "label": "consecutive_primes_that_sum_prime",
        "kind": 2,
        "importPath": "mid-range.euler050_consecutive_prime_sum",
        "description": "mid-range.euler050_consecutive_prime_sum",
        "peekOfCode": "def consecutive_primes_that_sum_prime(limit):\n    primes = list(primes_upto(limit))\n    while primes[0] + primes[-1] > limit:\n        del primes[-1]\n    for n in range(len(primes), 2, -1):\n        s = sum(primes[:n])\n        for i in range(len(primes) - n):\n            if s > limit:\n                break\n            elif is_prime(s):",
        "detail": "mid-range.euler050_consecutive_prime_sum",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler050_consecutive_prime_sum",
        "description": "mid-range.euler050_consecutive_prime_sum",
        "peekOfCode": "def test():\n    assert (41, 6) == consecutive_primes_that_sum_prime(10 ** 2)\ndef run():\n    assert 997651 == consecutive_primes_that_sum_prime(10 ** 6)[0]\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler050_consecutive_prime_sum",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler050_consecutive_prime_sum",
        "description": "mid-range.euler050_consecutive_prime_sum",
        "peekOfCode": "def run():\n    assert 997651 == consecutive_primes_that_sum_prime(10 ** 6)[0]\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler050_consecutive_prime_sum",
        "documentation": {}
    },
    {
        "label": "41",
        "kind": 5,
        "importPath": "mid-range.euler050_consecutive_prime_sum",
        "description": "mid-range.euler050_consecutive_prime_sum",
        "peekOfCode": "41 = 2 + 3 + 5 + 7 + 11 + 13\nThis is the longest sum of consecutive primes that adds to a prime below\none-hundred.\nThe longest sum of consecutive primes below one-thousand that adds to a\nprime, contains 21 terms, and is equal to 953.\nWhich prime, below one-million, can be written as the sum of the most\nconsecutive primes?\n\"\"\"\nfrom primality import primes_upto\nfrom primality import is_prime",
        "detail": "mid-range.euler050_consecutive_prime_sum",
        "documentation": {}
    },
    {
        "label": "same_digits_in_multiples",
        "kind": 2,
        "importPath": "mid-range.euler052_permuted_multiples",
        "description": "mid-range.euler052_permuted_multiples",
        "peekOfCode": "def same_digits_in_multiples(multiples):\n    for i in count(100000):\n        idigits = sorted_digits(i)\n        result = [i]\n        for j in multiples:\n            m = i * j\n            jdigits = sorted_digits(m)\n            if jdigits != idigits:\n                break\n            result.append(m)",
        "detail": "mid-range.euler052_permuted_multiples",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler052_permuted_multiples",
        "description": "mid-range.euler052_permuted_multiples",
        "peekOfCode": "def test():\n    assert [125874, 251748] == same_digits_in_multiples([2])\ndef run():\n    assert 142857 == same_digits_in_multiples([2, 3, 4, 5, 6])[0]\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler052_permuted_multiples",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler052_permuted_multiples",
        "description": "mid-range.euler052_permuted_multiples",
        "peekOfCode": "def run():\n    assert 142857 == same_digits_in_multiples([2, 3, 4, 5, 6])[0]\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler052_permuted_multiples",
        "documentation": {}
    },
    {
        "label": "combinations_greater",
        "kind": 2,
        "importPath": "mid-range.euler053_combinatoric_selections",
        "description": "mid-range.euler053_combinatoric_selections",
        "peekOfCode": "def combinations_greater(nlimit, target_max):\n    result = []\n    for n in range(1, nlimit + 1):\n        for r in range(2, n):\n            combinations = factorial(n) // (factorial(r) * factorial(n - r))\n            if combinations > target_max:\n                result.append((n, r, combinations))\n    return result\ndef test():\n    assert [(5, 2, 10), (5, 3, 10)] == combinations_greater(5, 9)",
        "detail": "mid-range.euler053_combinatoric_selections",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler053_combinatoric_selections",
        "description": "mid-range.euler053_combinatoric_selections",
        "peekOfCode": "def test():\n    assert [(5, 2, 10), (5, 3, 10)] == combinations_greater(5, 9)\ndef run():\n    assert 4075 == len(combinations_greater(100, 10 ** 6))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler053_combinatoric_selections",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler053_combinatoric_selections",
        "description": "mid-range.euler053_combinatoric_selections",
        "peekOfCode": "def run():\n    assert 4075 == len(combinations_greater(100, 10 ** 6))\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler053_combinatoric_selections",
        "documentation": {}
    },
    {
        "label": "nCr",
        "kind": 5,
        "importPath": "mid-range.euler053_combinatoric_selections",
        "description": "mid-range.euler053_combinatoric_selections",
        "peekOfCode": "nCr = n! / r!(n−r)! ,where r ≤ n, n! = n×(n−1)×...×3×2×1, and 0! = 1.\nIt is not until n = 23, that a value exceeds one-million: 23C10 = 1144066.\nHow many, not necessarily distinct, values of  nCr, for 1 ≤ n ≤ 100, are\ngreater than one-million?\n\"\"\"\nfrom math import factorial\ndef combinations_greater(nlimit, target_max):\n    result = []\n    for n in range(1, nlimit + 1):\n        for r in range(2, n):",
        "detail": "mid-range.euler053_combinatoric_selections",
        "documentation": {}
    },
    {
        "label": "sumdigits",
        "kind": 2,
        "importPath": "mid-range.euler056",
        "description": "mid-range.euler056",
        "peekOfCode": "def sumdigits(n):\n    return sum(digits(n))\ndef max_digit_sum(alimit, blimit):\n    result = 0\n    amax = 0\n    bmax = 0\n    for a in xrange(2,alimit):\n        for b in xrange(2,blimit):\n            s = sumdigits(a**b)\n            if s > result:",
        "detail": "mid-range.euler056",
        "documentation": {}
    },
    {
        "label": "max_digit_sum",
        "kind": 2,
        "importPath": "mid-range.euler056",
        "description": "mid-range.euler056",
        "peekOfCode": "def max_digit_sum(alimit, blimit):\n    result = 0\n    amax = 0\n    bmax = 0\n    for a in xrange(2,alimit):\n        for b in xrange(2,blimit):\n            s = sumdigits(a**b)\n            if s > result:\n                result = s\n                amax = a",
        "detail": "mid-range.euler056",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler056",
        "description": "mid-range.euler056",
        "peekOfCode": "def test():\n    assert 1 == sumdigits(100**100)\n    assert (45, 9, 7)  == max_digit_sum(10,10)\ndef run():\n    print max_digit_sum(100,100)\nif __name__ == '__main__':\n    test()\n    run()",
        "detail": "mid-range.euler056",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler056",
        "description": "mid-range.euler056",
        "peekOfCode": "def run():\n    print max_digit_sum(100,100)\nif __name__ == '__main__':\n    test()\n    run()",
        "detail": "mid-range.euler056",
        "documentation": {}
    },
    {
        "label": "root2_continued_fraction",
        "kind": 2,
        "importPath": "mid-range.euler057",
        "description": "mid-range.euler057",
        "peekOfCode": "def root2_continued_fraction(iters):\n    a = 1\n    for _ in xrange(iters):\n        a = 1 + frac(1, 1+a)\n        yield a\ndef dlen(n):\n    return len(str(n))\ndef test():\n    first4 = [frac(3,2),frac(7,5),frac(17,12),frac(41,29)]\n    assert first4 == list(root2_continued_fraction(4))",
        "detail": "mid-range.euler057",
        "documentation": {}
    },
    {
        "label": "dlen",
        "kind": 2,
        "importPath": "mid-range.euler057",
        "description": "mid-range.euler057",
        "peekOfCode": "def dlen(n):\n    return len(str(n))\ndef test():\n    first4 = [frac(3,2),frac(7,5),frac(17,12),frac(41,29)]\n    assert first4 == list(root2_continued_fraction(4))\ndef run():\n    expansion = root2_continued_fraction(1000)\n    print sum(dlen(f.numerator) > dlen(f.denominator) for f in expansion)\nif __name__ == '__main__':\n    test()",
        "detail": "mid-range.euler057",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler057",
        "description": "mid-range.euler057",
        "peekOfCode": "def test():\n    first4 = [frac(3,2),frac(7,5),frac(17,12),frac(41,29)]\n    assert first4 == list(root2_continued_fraction(4))\ndef run():\n    expansion = root2_continued_fraction(1000)\n    print sum(dlen(f.numerator) > dlen(f.denominator) for f in expansion)\nif __name__ == '__main__':\n    test()\n    run()",
        "detail": "mid-range.euler057",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler057",
        "description": "mid-range.euler057",
        "peekOfCode": "def run():\n    expansion = root2_continued_fraction(1000)\n    print sum(dlen(f.numerator) > dlen(f.denominator) for f in expansion)\nif __name__ == '__main__':\n    test()\n    run()",
        "detail": "mid-range.euler057",
        "documentation": {}
    },
    {
        "label": "find_sides_for_prime_ratio",
        "kind": 2,
        "importPath": "mid-range.euler058",
        "description": "mid-range.euler058",
        "peekOfCode": "def find_sides_for_prime_ratio(target_ratio, min_side_len=0):\n    numbers = spiral_diagonal_numbers()\n    numbers.next()\n    count = 1\n    primes = 0\n    ratio = 0.0\n    while True:\n        for _ in xrange(4):\n            n, side_len, _ = numbers.next()\n            count += 1",
        "detail": "mid-range.euler058",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler058",
        "description": "mid-range.euler058",
        "peekOfCode": "def test():\n    assert 0.62 == round(find_sides_for_prime_ratio(0.62, 7)[1], 2)\ndef run():\n    print find_sides_for_prime_ratio(0.10)\nif __name__ == '__main__':\n    test()\n    run()",
        "detail": "mid-range.euler058",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler058",
        "description": "mid-range.euler058",
        "peekOfCode": "def run():\n    print find_sides_for_prime_ratio(0.10)\nif __name__ == '__main__':\n    test()\n    run()",
        "detail": "mid-range.euler058",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler067",
        "description": "mid-range.euler067",
        "peekOfCode": "def test():\n    euler018.test()\nif __name__ == '__main__':\n    test()\n    print euler018.max_path_value_sweep(TRIANGLE)",
        "detail": "mid-range.euler067",
        "documentation": {}
    },
    {
        "label": "STRIANGLE",
        "kind": 5,
        "importPath": "mid-range.euler067",
        "description": "mid-range.euler067",
        "peekOfCode": "STRIANGLE = open('data/triangle.txt', 'r').read()\nLINES = [s.split() for s in STRIANGLE.strip().split('\\n')]\nTRIANGLE = [[int(s) for s in line] for line in LINES]\ndef test():\n    euler018.test()\nif __name__ == '__main__':\n    test()\n    print euler018.max_path_value_sweep(TRIANGLE)",
        "detail": "mid-range.euler067",
        "documentation": {}
    },
    {
        "label": "LINES",
        "kind": 5,
        "importPath": "mid-range.euler067",
        "description": "mid-range.euler067",
        "peekOfCode": "LINES = [s.split() for s in STRIANGLE.strip().split('\\n')]\nTRIANGLE = [[int(s) for s in line] for line in LINES]\ndef test():\n    euler018.test()\nif __name__ == '__main__':\n    test()\n    print euler018.max_path_value_sweep(TRIANGLE)",
        "detail": "mid-range.euler067",
        "documentation": {}
    },
    {
        "label": "TRIANGLE",
        "kind": 5,
        "importPath": "mid-range.euler067",
        "description": "mid-range.euler067",
        "peekOfCode": "TRIANGLE = [[int(s) for s in line] for line in LINES]\ndef test():\n    euler018.test()\nif __name__ == '__main__':\n    test()\n    print euler018.max_path_value_sweep(TRIANGLE)",
        "detail": "mid-range.euler067",
        "documentation": {}
    },
    {
        "label": "reduce_min_path",
        "kind": 2,
        "importPath": "mid-range.euler081",
        "description": "mid-range.euler081",
        "peekOfCode": "def reduce_min_path(matrix, reducer=min):\n    T = deepcopy(matrix)\n    ibot = len(T) - 1\n    # reduce the right column moving down\n    for i in range(ibot - 1, -1, -1):\n        if len(T[i + 1]) < len(T[i]):\n            continue\n        j = len(T[i]) - 1\n        T[i][j] += T[i + 1][j]\n    # reduce the bottom row moving right",
        "detail": "mid-range.euler081",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mid-range.euler081",
        "description": "mid-range.euler081",
        "peekOfCode": "def test():\n    assert 2427 == reduce_min_path(TEST_DATA)\ndef run():\n    assert 427337 == reduce_min_path(MATRIX)\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler081",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.euler081",
        "description": "mid-range.euler081",
        "peekOfCode": "def run():\n    assert 427337 == reduce_min_path(MATRIX)\nif __name__ == \"__main__\":\n    test()\n    run()",
        "detail": "mid-range.euler081",
        "documentation": {}
    },
    {
        "label": "FILENAME",
        "kind": 5,
        "importPath": "mid-range.euler081",
        "description": "mid-range.euler081",
        "peekOfCode": "FILENAME = Path(__file__).parent / \"../data/matrix.txt\"\nMATRIX = [[int(c) for c in line] for line in csv.reader(open(FILENAME))]\nTEST_DATA = [\n    [131, 673, 234, 103, 18],\n    [201, 96, 342, 965, 150],\n    [630, 803, 746, 422, 111],\n    [537, 699, 497, 121, 956],\n    [805, 732, 524, 37, 331],\n]\ndef reduce_min_path(matrix, reducer=min):",
        "detail": "mid-range.euler081",
        "documentation": {}
    },
    {
        "label": "MATRIX",
        "kind": 5,
        "importPath": "mid-range.euler081",
        "description": "mid-range.euler081",
        "peekOfCode": "MATRIX = [[int(c) for c in line] for line in csv.reader(open(FILENAME))]\nTEST_DATA = [\n    [131, 673, 234, 103, 18],\n    [201, 96, 342, 965, 150],\n    [630, 803, 746, 422, 111],\n    [537, 699, 497, 121, 956],\n    [805, 732, 524, 37, 331],\n]\ndef reduce_min_path(matrix, reducer=min):\n    T = deepcopy(matrix)",
        "detail": "mid-range.euler081",
        "documentation": {}
    },
    {
        "label": "TEST_DATA",
        "kind": 5,
        "importPath": "mid-range.euler081",
        "description": "mid-range.euler081",
        "peekOfCode": "TEST_DATA = [\n    [131, 673, 234, 103, 18],\n    [201, 96, 342, 965, 150],\n    [630, 803, 746, 422, 111],\n    [537, 699, 497, 121, 956],\n    [805, 732, 524, 37, 331],\n]\ndef reduce_min_path(matrix, reducer=min):\n    T = deepcopy(matrix)\n    ibot = len(T) - 1",
        "detail": "mid-range.euler081",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "mid-range.eulerian_path_and_circuit_for_undirected_graph",
        "description": "mid-range.eulerian_path_and_circuit_for_undirected_graph",
        "peekOfCode": "def dfs(u, graph, visited_edge, path=[]):\n    path = path + [u]\n    for v in graph[u]:\n        if visited_edge[u][v] is False:\n            visited_edge[u][v], visited_edge[v][u] = True, True\n            path = dfs(v, graph, visited_edge, path)\n    return path\n# for checking in graph has euler path or circuit\ndef check_circuit_or_path(graph, max_node):\n    odd_degree_nodes = 0",
        "detail": "mid-range.eulerian_path_and_circuit_for_undirected_graph",
        "documentation": {}
    },
    {
        "label": "check_circuit_or_path",
        "kind": 2,
        "importPath": "mid-range.eulerian_path_and_circuit_for_undirected_graph",
        "description": "mid-range.eulerian_path_and_circuit_for_undirected_graph",
        "peekOfCode": "def check_circuit_or_path(graph, max_node):\n    odd_degree_nodes = 0\n    odd_node = -1\n    for i in range(max_node):\n        if i not in graph.keys():\n            continue\n        if len(graph[i]) % 2 == 1:\n            odd_degree_nodes += 1\n            odd_node = i\n    if odd_degree_nodes == 0:",
        "detail": "mid-range.eulerian_path_and_circuit_for_undirected_graph",
        "documentation": {}
    },
    {
        "label": "check_euler",
        "kind": 2,
        "importPath": "mid-range.eulerian_path_and_circuit_for_undirected_graph",
        "description": "mid-range.eulerian_path_and_circuit_for_undirected_graph",
        "peekOfCode": "def check_euler(graph, max_node):\n    visited_edge = [[False for _ in range(max_node + 1)] for _ in range(max_node + 1)]\n    check, odd_node = check_circuit_or_path(graph, max_node)\n    if check == 3:\n        print(\"graph is not Eulerian\")\n        print(\"no path\")\n        return\n    start_node = 1\n    if check == 2:\n        start_node = odd_node",
        "detail": "mid-range.eulerian_path_and_circuit_for_undirected_graph",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.eulerian_path_and_circuit_for_undirected_graph",
        "description": "mid-range.eulerian_path_and_circuit_for_undirected_graph",
        "peekOfCode": "def main():\n    G1 = {1: [2, 3, 4], 2: [1, 3], 3: [1, 2], 4: [1, 5], 5: [4]}\n    G2 = {1: [2, 3, 4, 5], 2: [1, 3], 3: [1, 2], 4: [1, 5], 5: [1, 4]}\n    G3 = {1: [2, 3, 4], 2: [1, 3, 4], 3: [1, 2], 4: [1, 2, 5], 5: [4]}\n    G4 = {1: [2, 3], 2: [1, 3], 3: [1, 2]}\n    G5 = {\n        1: [],\n        2: []\n        # all degree is zero\n    }",
        "detail": "mid-range.eulerian_path_and_circuit_for_undirected_graph",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 2,
        "importPath": "mid-range.eulers_python",
        "description": "mid-range.eulers_python",
        "peekOfCode": "def E(f, v):\n    return f + v - 2\ndef V(e, f):\n    return e + 2 - f\ndef F(e, v):\n    return e + 2 - v\n# function to evaluate\n# By default datatype of raw_input() is string\nuser = raw_input(\"\\nE, V or F: \").upper()\nprint(\" \")",
        "detail": "mid-range.eulers_python",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 2,
        "importPath": "mid-range.eulers_python",
        "description": "mid-range.eulers_python",
        "peekOfCode": "def V(e, f):\n    return e + 2 - f\ndef F(e, v):\n    return e + 2 - v\n# function to evaluate\n# By default datatype of raw_input() is string\nuser = raw_input(\"\\nE, V or F: \").upper()\nprint(\" \")\n# evaluating function asked by user\nif user == \"E\":",
        "detail": "mid-range.eulers_python",
        "documentation": {}
    },
    {
        "label": "F",
        "kind": 2,
        "importPath": "mid-range.eulers_python",
        "description": "mid-range.eulers_python",
        "peekOfCode": "def F(e, v):\n    return e + 2 - v\n# function to evaluate\n# By default datatype of raw_input() is string\nuser = raw_input(\"\\nE, V or F: \").upper()\nprint(\" \")\n# evaluating function asked by user\nif user == \"E\":\n    print(\"\\nEdges: \" + str(E(input(\"Faces: \"), input(\"Vertices: \"))))\nelif user == \"V\":",
        "detail": "mid-range.eulers_python",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "mid-range.eulers_python",
        "description": "mid-range.eulers_python",
        "peekOfCode": "user = raw_input(\"\\nE, V or F: \").upper()\nprint(\" \")\n# evaluating function asked by user\nif user == \"E\":\n    print(\"\\nEdges: \" + str(E(input(\"Faces: \"), input(\"Vertices: \"))))\nelif user == \"V\":\n    print(\"\\nVertices: \" + str(V(input(\"Edges: \"), input(\"Faces: \"))))\nelif user == \"F\":\n    print(\"\\nFaces: \" + str(F(input(\"Edges: \"), input(\"Vertices: \"))))\nelse:",
        "detail": "mid-range.eulers_python",
        "documentation": {}
    },
    {
        "label": "totient",
        "kind": 2,
        "importPath": "mid-range.eulers_totient",
        "description": "mid-range.eulers_totient",
        "peekOfCode": "def totient(n: int) -> list:\n    is_prime = [True for i in range(n + 1)]\n    totients = [i - 1 for i in range(n + 1)]\n    primes = []\n    for i in range(2, n + 1):\n        if is_prime[i]:\n            primes.append(i)\n        for j in range(0, len(primes)):\n            if i * primes[j] >= n:\n                break",
        "detail": "mid-range.eulers_totient",
        "documentation": {}
    },
    {
        "label": "test_totient",
        "kind": 2,
        "importPath": "mid-range.eulers_totient",
        "description": "mid-range.eulers_totient",
        "peekOfCode": "def test_totient() -> None:\n    \"\"\"\n    >>> n = 10\n    >>> totient_calculation = totient(n)\n    >>> for i in range(1, n):\n    ...     print(f\"{i} has {totient_calculation[i]} relative primes.\")\n    1 has 0 relative primes.\n    2 has 1 relative primes.\n    3 has 2 relative primes.\n    4 has 2 relative primes.",
        "detail": "mid-range.eulers_totient",
        "documentation": {}
    },
    {
        "label": "explicit_euler",
        "kind": 2,
        "importPath": "mid-range.euler_method",
        "description": "mid-range.euler_method",
        "peekOfCode": "def explicit_euler(ode_func, y0, x0, step_size, x_end):\n    \"\"\"\n    Calculate numeric solution at each step to an ODE using Euler's Method\n    https://en.wikipedia.org/wiki/Euler_method\n    Arguments:\n    ode_func -- The ode as a function of x and y\n    y0 -- the initial value for y\n    x0 -- the initial value for x\n    stepsize -- the increment value for x\n    x_end -- the end value for x",
        "detail": "mid-range.euler_method",
        "documentation": {}
    },
    {
        "label": "evaluate_postfix",
        "kind": 2,
        "importPath": "mid-range.evaluate_postfix_notations",
        "description": "mid-range.evaluate_postfix_notations",
        "peekOfCode": "def evaluate_postfix(postfix_notation: list) -> int:\n    \"\"\"\n    >>> evaluate_postfix([\"2\", \"1\", \"+\", \"3\", \"*\"])\n    9\n    >>> evaluate_postfix([\"4\", \"13\", \"5\", \"/\", \"+\"])\n    6\n    >>> evaluate_postfix([])\n    0\n    \"\"\"\n    if not postfix_notation:",
        "detail": "mid-range.evaluate_postfix_notations",
        "documentation": {}
    },
    {
        "label": "even_occuring_element",
        "kind": 2,
        "importPath": "mid-range.even-occuring-element",
        "description": "mid-range.even-occuring-element",
        "peekOfCode": "def even_occuring_element(arr):\n    \"\"\"Returns the even occuring element within a list of integers\"\"\"\n    dict = {}\n    for num in arr:\n        if num in dict:\n            dict[num] += 1\n        else:\n            dict[num] = 1\n    for num in dict:\n        if not dict[num] & 1:  # bitwise check for parity.",
        "detail": "mid-range.even-occuring-element",
        "documentation": {}
    },
    {
        "label": "evenDigitsOnly",
        "kind": 2,
        "importPath": "mid-range.even_digits_only",
        "description": "mid-range.even_digits_only",
        "peekOfCode": "def evenDigitsOnly(n):\n    digits = [int(digit) for digit in str(n)]  # Convert digits to list of strings\n    for digit in digits:\n        if digit % 2 == 1:\n            return False\n    return True",
        "detail": "mid-range.even_digits_only",
        "documentation": {}
    },
    {
        "label": "even_odd_count",
        "kind": 2,
        "importPath": "mid-range.even_odd",
        "description": "mid-range.even_odd",
        "peekOfCode": "def even_odd_count(filename):\n    import os\n    fp = os.path.join(os.getcwd(), filename)\n    with open(fp, \"r\") as data:\n        stack = []\n        for line in data:\n            #  Push each int to stack\n            stack.extend([int(num) for num in line.split()])\n        even_count = 0\n        odd_count = 0",
        "detail": "mid-range.even_odd",
        "documentation": {}
    },
    {
        "label": "fn",
        "kind": 5,
        "importPath": "mid-range.even_odd",
        "description": "mid-range.even_odd",
        "peekOfCode": "fn = \"numbers.txt\"\nprint(\"Even numbers in the file list:\", even_odd_count(fn)[0])\nprint(\"Odd numbers in the file list:\", even_odd_count(fn)[1])",
        "detail": "mid-range.even_odd",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "mid-range.even_tree",
        "description": "mid-range.even_tree",
        "peekOfCode": "def dfs(start: int) -> int:\n    \"\"\"DFS traversal\"\"\"\n    # pylint: disable=redefined-outer-name\n    ret = 1\n    visited[start] = True\n    for v in tree[start]:\n        if v not in visited:\n            ret += dfs(v)\n    if ret % 2 == 0:\n        cuts.append(start)",
        "detail": "mid-range.even_tree",
        "documentation": {}
    },
    {
        "label": "even_tree",
        "kind": 2,
        "importPath": "mid-range.even_tree",
        "description": "mid-range.even_tree",
        "peekOfCode": "def even_tree():\n    \"\"\"\n    2 1\n    3 1\n    4 3\n    5 2\n    6 1\n    7 2\n    8 6\n    9 8",
        "detail": "mid-range.even_tree",
        "documentation": {}
    },
    {
        "label": "get_indices_of_item_weights",
        "kind": 2,
        "importPath": "mid-range.ex1",
        "description": "mid-range.ex1",
        "peekOfCode": "def get_indices_of_item_weights(weights, length, limit):\n    ht = HashTable(16)\n    \"\"\"\n    YOUR CODE HERE\n    \"\"\"\n    return None\ndef print_answer(answer):\n    if answer is None:\n        print(str(answer[0] + \" \" + answer[1]))\n    else:",
        "detail": "mid-range.ex1",
        "documentation": {}
    },
    {
        "label": "print_answer",
        "kind": 2,
        "importPath": "mid-range.ex1",
        "description": "mid-range.ex1",
        "peekOfCode": "def print_answer(answer):\n    if answer is None:\n        print(str(answer[0] + \" \" + answer[1]))\n    else:\n        print(\"None\")",
        "detail": "mid-range.ex1",
        "documentation": {}
    },
    {
        "label": "TestEx1",
        "kind": 6,
        "importPath": "mid-range.ex1_tests",
        "description": "mid-range.ex1_tests",
        "peekOfCode": "class TestEx1(unittest.TestCase):\n    def test_ex1_1(self):\n        weights_1 = [9]\n        answer_1 = get_indices_of_item_weights(weights_1, 1, 9)\n        self.assertTrue(answer_1 is None)\n    def test_ex1_2(self):\n        weights_2 = [4, 4]\n        answer_2 = get_indices_of_item_weights(weights_2, 2, 8)\n        self.assertTrue(answer_2[0] == 1)\n        self.assertTrue(answer_2[1] == 0)",
        "detail": "mid-range.ex1_tests",
        "documentation": {}
    },
    {
        "label": "Ticket",
        "kind": 6,
        "importPath": "mid-range.ex2",
        "description": "mid-range.ex2",
        "peekOfCode": "class Ticket:\n    def __init__(self, source, destination):\n        self.source = source\n        self.destination = destination\ndef reconstruct_trip(tickets, length):\n    hashtable = HashTable(length)\n    route = [None] * length\n    \"\"\"\n    YOUR CODE HERE\n    \"\"\"",
        "detail": "mid-range.ex2",
        "documentation": {}
    },
    {
        "label": "reconstruct_trip",
        "kind": 2,
        "importPath": "mid-range.ex2",
        "description": "mid-range.ex2",
        "peekOfCode": "def reconstruct_trip(tickets, length):\n    hashtable = HashTable(length)\n    route = [None] * length\n    \"\"\"\n    YOUR CODE HERE\n    \"\"\"\n    return route",
        "detail": "mid-range.ex2",
        "documentation": {}
    },
    {
        "label": "TestEx2",
        "kind": 6,
        "importPath": "mid-range.ex2_tests",
        "description": "mid-range.ex2_tests",
        "peekOfCode": "class TestEx2(unittest.TestCase):\n    def test_short_case(self):\n        ticket_1 = Ticket(\"NONE\", \"PDX\")\n        ticket_2 = Ticket(\"PDX\", \"DCA\")\n        ticket_3 = Ticket(\"DCA\", \"NONE\")\n        tickets = [ticket_1, ticket_2, ticket_3]\n        expected = [\"PDX\", \"DCA\", \"NONE\"]\n        result = reconstruct_trip(tickets, 3)\n        self.assertTrue(expected == result)\n    def test_long_case(self):",
        "detail": "mid-range.ex2_tests",
        "documentation": {}
    },
    {
        "label": "DATA",
        "kind": 5,
        "importPath": "mid-range.example",
        "description": "mid-range.example",
        "peekOfCode": "DATA = \"This is example B\"",
        "detail": "mid-range.example",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.excel_file_automation",
        "description": "mid-range.excel_file_automation",
        "peekOfCode": "data = {\n    \"Joe\": {\"math\": 65, \"science\": 78, \"english\": 98, \"gym\": 89},\n    \"Bill\": {\"math\": 55, \"science\": 72, \"english\": 87, \"gym\": 95},\n    \"Tim\": {\"math\": 100, \"science\": 45, \"english\": 75, \"gym\": 92},\n    \"Sally\": {\"math\": 30, \"science\": 25, \"english\": 45, \"gym\": 100},\n    \"Jane\": {\"math\": 100, \"science\": 100, \"english\": 100, \"gym\": 60},\n}\nwb = Workbook()\nws = wb.active\nws.title = \"Grades\"",
        "detail": "mid-range.excel_file_automation",
        "documentation": {}
    },
    {
        "label": "wb",
        "kind": 5,
        "importPath": "mid-range.excel_file_automation",
        "description": "mid-range.excel_file_automation",
        "peekOfCode": "wb = Workbook()\nws = wb.active\nws.title = \"Grades\"\nheadings = [\"Name\"] + list(data[\"Joe\"].keys())\nws.append(headings)\n# reading the data for persom\nfor person in data:\n    grades = list(data[person].values())\n    ws.append([person] + grades)\nfor col in range(2, len(data[\"Joe\"]) + 2):",
        "detail": "mid-range.excel_file_automation",
        "documentation": {}
    },
    {
        "label": "ws",
        "kind": 5,
        "importPath": "mid-range.excel_file_automation",
        "description": "mid-range.excel_file_automation",
        "peekOfCode": "ws = wb.active\nws.title = \"Grades\"\nheadings = [\"Name\"] + list(data[\"Joe\"].keys())\nws.append(headings)\n# reading the data for persom\nfor person in data:\n    grades = list(data[person].values())\n    ws.append([person] + grades)\nfor col in range(2, len(data[\"Joe\"]) + 2):\n    char = get_column_letter(col)",
        "detail": "mid-range.excel_file_automation",
        "documentation": {}
    },
    {
        "label": "ws.title",
        "kind": 5,
        "importPath": "mid-range.excel_file_automation",
        "description": "mid-range.excel_file_automation",
        "peekOfCode": "ws.title = \"Grades\"\nheadings = [\"Name\"] + list(data[\"Joe\"].keys())\nws.append(headings)\n# reading the data for persom\nfor person in data:\n    grades = list(data[person].values())\n    ws.append([person] + grades)\nfor col in range(2, len(data[\"Joe\"]) + 2):\n    char = get_column_letter(col)\n    ws[char + \"7\"] = f\"=SUM({char + '2'}:{char + '6'})/{len(data)}\"",
        "detail": "mid-range.excel_file_automation",
        "documentation": {}
    },
    {
        "label": "headings",
        "kind": 5,
        "importPath": "mid-range.excel_file_automation",
        "description": "mid-range.excel_file_automation",
        "peekOfCode": "headings = [\"Name\"] + list(data[\"Joe\"].keys())\nws.append(headings)\n# reading the data for persom\nfor person in data:\n    grades = list(data[person].values())\n    ws.append([person] + grades)\nfor col in range(2, len(data[\"Joe\"]) + 2):\n    char = get_column_letter(col)\n    ws[char + \"7\"] = f\"=SUM({char + '2'}:{char + '6'})/{len(data)}\"\nfor col in range(1, 6):",
        "detail": "mid-range.excel_file_automation",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Excel_Sheet_Column_Number",
        "description": "mid-range.Excel_Sheet_Column_Number",
        "peekOfCode": "class Solution:\n    def titleToNumber(self, s):\n        Sum = 0\n        for exp, char in enumerate(s[::-1]):\n            Sum += (ord(char) - 65 + 1) * 26 ** exp\n        return Sum",
        "detail": "mid-range.Excel_Sheet_Column_Number",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Excel_Sheet_Column_Title",
        "description": "mid-range.Excel_Sheet_Column_Title",
        "peekOfCode": "class Solution:\n    def convertToTitle(self, n):\n        dict = {\n            0: \"Z\",\n            1: \"A\",\n            2: \"B\",\n            3: \"C\",\n            4: \"D\",\n            5: \"E\",\n            6: \"F\",",
        "detail": "mid-range.Excel_Sheet_Column_Title",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Exceptionally-Odd",
        "description": "mid-range.Exceptionally-Odd",
        "peekOfCode": "class Solution:\n    def getOddOccurrence(self, arr, n):\n        # code here\n        ans = 0\n        for i in range(n):\n            ans ^= arr[i]\n        return ans",
        "detail": "mid-range.Exceptionally-Odd",
        "documentation": {}
    },
    {
        "label": "UnpackException",
        "kind": 6,
        "importPath": "mid-range.exceptions",
        "description": "mid-range.exceptions",
        "peekOfCode": "class UnpackException(Exception):\n    \"\"\"Base class for some exceptions raised while unpacking.\n    NOTE: unpack may raise exception other than subclass of\n    UnpackException.  If you want to catch all error, catch\n    Exception instead.\n    \"\"\"\nclass BufferFull(UnpackException):\n    pass\nclass OutOfData(UnpackException):\n    pass",
        "detail": "mid-range.exceptions",
        "documentation": {}
    },
    {
        "label": "BufferFull",
        "kind": 6,
        "importPath": "mid-range.exceptions",
        "description": "mid-range.exceptions",
        "peekOfCode": "class BufferFull(UnpackException):\n    pass\nclass OutOfData(UnpackException):\n    pass\nclass FormatError(ValueError, UnpackException):\n    \"\"\"Invalid msgpack format\"\"\"\nclass StackError(ValueError, UnpackException):\n    \"\"\"Too nested\"\"\"\n# Deprecated.  Use ValueError instead\nUnpackValueError = ValueError",
        "detail": "mid-range.exceptions",
        "documentation": {}
    },
    {
        "label": "OutOfData",
        "kind": 6,
        "importPath": "mid-range.exceptions",
        "description": "mid-range.exceptions",
        "peekOfCode": "class OutOfData(UnpackException):\n    pass\nclass FormatError(ValueError, UnpackException):\n    \"\"\"Invalid msgpack format\"\"\"\nclass StackError(ValueError, UnpackException):\n    \"\"\"Too nested\"\"\"\n# Deprecated.  Use ValueError instead\nUnpackValueError = ValueError\nclass ExtraData(UnpackValueError):\n    \"\"\"ExtraData is raised when there is trailing data.",
        "detail": "mid-range.exceptions",
        "documentation": {}
    },
    {
        "label": "FormatError",
        "kind": 6,
        "importPath": "mid-range.exceptions",
        "description": "mid-range.exceptions",
        "peekOfCode": "class FormatError(ValueError, UnpackException):\n    \"\"\"Invalid msgpack format\"\"\"\nclass StackError(ValueError, UnpackException):\n    \"\"\"Too nested\"\"\"\n# Deprecated.  Use ValueError instead\nUnpackValueError = ValueError\nclass ExtraData(UnpackValueError):\n    \"\"\"ExtraData is raised when there is trailing data.\n    This exception is raised while only one-shot (not streaming)\n    unpack.",
        "detail": "mid-range.exceptions",
        "documentation": {}
    },
    {
        "label": "StackError",
        "kind": 6,
        "importPath": "mid-range.exceptions",
        "description": "mid-range.exceptions",
        "peekOfCode": "class StackError(ValueError, UnpackException):\n    \"\"\"Too nested\"\"\"\n# Deprecated.  Use ValueError instead\nUnpackValueError = ValueError\nclass ExtraData(UnpackValueError):\n    \"\"\"ExtraData is raised when there is trailing data.\n    This exception is raised while only one-shot (not streaming)\n    unpack.\n    \"\"\"\n    def __init__(self, unpacked, extra):",
        "detail": "mid-range.exceptions",
        "documentation": {}
    },
    {
        "label": "ExtraData",
        "kind": 6,
        "importPath": "mid-range.exceptions",
        "description": "mid-range.exceptions",
        "peekOfCode": "class ExtraData(UnpackValueError):\n    \"\"\"ExtraData is raised when there is trailing data.\n    This exception is raised while only one-shot (not streaming)\n    unpack.\n    \"\"\"\n    def __init__(self, unpacked, extra):\n        self.unpacked = unpacked\n        self.extra = extra\n    def __str__(self):\n        return \"unpack(b) received extra data.\"",
        "detail": "mid-range.exceptions",
        "documentation": {}
    },
    {
        "label": "UnpackValueError",
        "kind": 5,
        "importPath": "mid-range.exceptions",
        "description": "mid-range.exceptions",
        "peekOfCode": "UnpackValueError = ValueError\nclass ExtraData(UnpackValueError):\n    \"\"\"ExtraData is raised when there is trailing data.\n    This exception is raised while only one-shot (not streaming)\n    unpack.\n    \"\"\"\n    def __init__(self, unpacked, extra):\n        self.unpacked = unpacked\n        self.extra = extra\n    def __str__(self):",
        "detail": "mid-range.exceptions",
        "documentation": {}
    },
    {
        "label": "PackException",
        "kind": 5,
        "importPath": "mid-range.exceptions",
        "description": "mid-range.exceptions",
        "peekOfCode": "PackException = Exception\nPackValueError = ValueError\nPackOverflowError = OverflowError",
        "detail": "mid-range.exceptions",
        "documentation": {}
    },
    {
        "label": "PackValueError",
        "kind": 5,
        "importPath": "mid-range.exceptions",
        "description": "mid-range.exceptions",
        "peekOfCode": "PackValueError = ValueError\nPackOverflowError = OverflowError",
        "detail": "mid-range.exceptions",
        "documentation": {}
    },
    {
        "label": "PackOverflowError",
        "kind": 5,
        "importPath": "mid-range.exceptions",
        "description": "mid-range.exceptions",
        "peekOfCode": "PackOverflowError = OverflowError",
        "detail": "mid-range.exceptions",
        "documentation": {}
    },
    {
        "label": "ExecuteTimePreprocessor",
        "kind": 6,
        "importPath": "mid-range.execute_time",
        "description": "mid-range.execute_time",
        "peekOfCode": "class ExecuteTimePreprocessor(ExecutePreprocessor):\n    \"\"\"\n    Executes all the cells in a notebook, updating their ExecuteTime metadata.\n    \"\"\"\n    def run_cell(self, cell, cell_index, *args, **kwargs):\n        before = datetime.utcnow()\n        exec_reply, outs = super(ExecuteTimePreprocessor, self).run_cell(\n            cell, cell_index, *args, **kwargs\n        )\n        if exec_reply.get(\"msg_type\", \"\") == \"execute_reply\":",
        "detail": "mid-range.execute_time",
        "documentation": {}
    },
    {
        "label": "find",
        "kind": 2,
        "importPath": "mid-range.exists_in",
        "description": "mid-range.exists_in",
        "peekOfCode": "def find(arr, search, n):\n    for i in range(n):\n        if arr[i] == search:\n            return True\n            break\narr = [1, 2, 3, 4, 5, 6]\nsearch = 4\nprint(find(arr, search, 6))",
        "detail": "mid-range.exists_in",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.exists_in",
        "description": "mid-range.exists_in",
        "peekOfCode": "arr = [1, 2, 3, 4, 5, 6]\nsearch = 4\nprint(find(arr, search, 6))",
        "detail": "mid-range.exists_in",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 5,
        "importPath": "mid-range.exists_in",
        "description": "mid-range.exists_in",
        "peekOfCode": "search = 4\nprint(find(arr, search, 6))",
        "detail": "mid-range.exists_in",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "mid-range.exponential_search",
        "description": "mid-range.exponential_search",
        "peekOfCode": "def binary_search(_list, left, right, target):\n    if right >= left:\n        mid = (left + right) // 2\n        # if element is present at the mid itself\n        if _list[mid] == target:\n            return mid\n        # If the element is smaller than mid, then it\n        # can only be present in the left subarray\n        if _list[mid] > target:\n            return binary_search(_list, left, mid - 1, target)",
        "detail": "mid-range.exponential_search",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "mid-range.exponential_search",
        "description": "mid-range.exponential_search",
        "peekOfCode": "def search(_list, target):\n    \"\"\"\n    This function performs a exponential search\n    on a sorted list and returns the index\n    of item if successful else returns False\n    :param _list: list to search\n    :param target: item to search for\n    :return: index of item if successful else returns False\n    \"\"\"\n    if type(_list) is not list:",
        "detail": "mid-range.exponential_search",
        "documentation": {}
    },
    {
        "label": "time_complexities",
        "kind": 2,
        "importPath": "mid-range.exponential_search",
        "description": "mid-range.exponential_search",
        "peekOfCode": "def time_complexities():\n    \"\"\"\n    Return information on functions\n    time complexity\n    :return: string\n    \"\"\"\n    return \"Best Case: O(1), Average Case: O(logn), Worst Case: O(logn)\"\ndef get_code():\n    \"\"\"\n    easily retrieve the source code",
        "detail": "mid-range.exponential_search",
        "documentation": {}
    },
    {
        "label": "get_code",
        "kind": 2,
        "importPath": "mid-range.exponential_search",
        "description": "mid-range.exponential_search",
        "peekOfCode": "def get_code():\n    \"\"\"\n    easily retrieve the source code\n    of the function\n    :return: source code\n    \"\"\"\n    return inspect.getsource(search)",
        "detail": "mid-range.exponential_search",
        "documentation": {}
    },
    {
        "label": "ExporterInliner",
        "kind": 6,
        "importPath": "mid-range.exporter_inliner",
        "description": "mid-range.exporter_inliner",
        "peekOfCode": "class ExporterInliner(HTMLExporter):\n    inliner_resources = Dict(\n        {\"css\": [], \"js\": []},\n        config=True,\n        help=\"css and js scripts to wrap in html <style> or <script> tags\",\n    )\n    def _template_file_default(self):\n        return \"inliner\"\n    def from_notebook_node(self, nb, resources=None, **kw):\n        # ensure resources used by template actually exist, add in any from",
        "detail": "mid-range.exporter_inliner",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.expression",
        "description": "mid-range.expression",
        "peekOfCode": "def main():\n    # This is a simple integer\n    x = 1\n    # Its value can be used as part of expressions\n    assert x + 1 == 2\n    # An expression can be chained indefinitely. This concept of chaining\n    # expressions is powerful because it allows us to compose simple pieces\n    # of code into larger pieces of code over time\n    assert x * 2 * 2 * 2 == 8\n    # Division is tricky because Python 3.x returns 0.5 of type `float`",
        "detail": "mid-range.expression",
        "documentation": {}
    },
    {
        "label": "extended_euclidean_algorithm",
        "kind": 2,
        "importPath": "mid-range.extended_euclidean_algorithm",
        "description": "mid-range.extended_euclidean_algorithm",
        "peekOfCode": "def extended_euclidean_algorithm(a: int, b: int) -> Tuple[int, int]:\n    \"\"\"\n    Extended Euclidean Algorithm.\n    Finds 2 numbers a and b such that it satisfies\n    the equation am + bn = gcd(m, n) (a.k.a Bezout's Identity)\n    >>> extended_euclidean_algorithm(1, 24)\n    (1, 0)\n    >>> extended_euclidean_algorithm(8, 14)\n    (2, -1)\n    >>> extended_euclidean_algorithm(240, 46)",
        "detail": "mid-range.extended_euclidean_algorithm",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.extended_euclidean_algorithm",
        "description": "mid-range.extended_euclidean_algorithm",
        "peekOfCode": "def main():\n    \"\"\"Call Extended Euclidean Algorithm.\"\"\"\n    if len(sys.argv) < 3:\n        print(\"2 integer arguments required\")\n        exit(1)\n    a = int(sys.argv[1])\n    b = int(sys.argv[2])\n    print(extended_euclidean_algorithm(a, b))\nif __name__ == \"__main__\":\n    main()",
        "detail": "mid-range.extended_euclidean_algorithm",
        "documentation": {}
    },
    {
        "label": "ffi",
        "kind": 5,
        "importPath": "mid-range.extending",
        "description": "mid-range.extending",
        "peekOfCode": "ffi = cffi.FFI()\ninc_dir = os.path.join(np.get_include(), \"numpy\")\n# Basic numpy types\nffi.cdef(\n    \"\"\"\n    typedef intptr_t npy_intp;\n    typedef unsigned char npy_bool;\n\"\"\"\n)\nparse_distributions_h(ffi, inc_dir)",
        "detail": "mid-range.extending",
        "documentation": {}
    },
    {
        "label": "inc_dir",
        "kind": 5,
        "importPath": "mid-range.extending",
        "description": "mid-range.extending",
        "peekOfCode": "inc_dir = os.path.join(np.get_include(), \"numpy\")\n# Basic numpy types\nffi.cdef(\n    \"\"\"\n    typedef intptr_t npy_intp;\n    typedef unsigned char npy_bool;\n\"\"\"\n)\nparse_distributions_h(ffi, inc_dir)\nlib = ffi.dlopen(np.random._generator.__file__)",
        "detail": "mid-range.extending",
        "documentation": {}
    },
    {
        "label": "lib",
        "kind": 5,
        "importPath": "mid-range.extending",
        "description": "mid-range.extending",
        "peekOfCode": "lib = ffi.dlopen(np.random._generator.__file__)\n# Compare the distributions.h random_standard_normal_fill to\n# Generator.standard_random\nbit_gen = np.random.PCG64()\nrng = np.random.Generator(bit_gen)\nstate = bit_gen.state\ninterface = rng.bit_generator.cffi\nn = 100\nvals_cffi = ffi.new(\"double[%d]\" % n)\nlib.random_standard_normal_fill(interface.bit_generator, n, vals_cffi)",
        "detail": "mid-range.extending",
        "documentation": {}
    },
    {
        "label": "bit_gen",
        "kind": 5,
        "importPath": "mid-range.extending",
        "description": "mid-range.extending",
        "peekOfCode": "bit_gen = np.random.PCG64()\nrng = np.random.Generator(bit_gen)\nstate = bit_gen.state\ninterface = rng.bit_generator.cffi\nn = 100\nvals_cffi = ffi.new(\"double[%d]\" % n)\nlib.random_standard_normal_fill(interface.bit_generator, n, vals_cffi)\n# reset the state\nbit_gen.state = state\nvals = rng.standard_normal(n)",
        "detail": "mid-range.extending",
        "documentation": {}
    },
    {
        "label": "rng",
        "kind": 5,
        "importPath": "mid-range.extending",
        "description": "mid-range.extending",
        "peekOfCode": "rng = np.random.Generator(bit_gen)\nstate = bit_gen.state\ninterface = rng.bit_generator.cffi\nn = 100\nvals_cffi = ffi.new(\"double[%d]\" % n)\nlib.random_standard_normal_fill(interface.bit_generator, n, vals_cffi)\n# reset the state\nbit_gen.state = state\nvals = rng.standard_normal(n)\nfor i in range(n):",
        "detail": "mid-range.extending",
        "documentation": {}
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "mid-range.extending",
        "description": "mid-range.extending",
        "peekOfCode": "state = bit_gen.state\ninterface = rng.bit_generator.cffi\nn = 100\nvals_cffi = ffi.new(\"double[%d]\" % n)\nlib.random_standard_normal_fill(interface.bit_generator, n, vals_cffi)\n# reset the state\nbit_gen.state = state\nvals = rng.standard_normal(n)\nfor i in range(n):\n    assert vals[i] == vals_cffi[i]",
        "detail": "mid-range.extending",
        "documentation": {}
    },
    {
        "label": "interface",
        "kind": 5,
        "importPath": "mid-range.extending",
        "description": "mid-range.extending",
        "peekOfCode": "interface = rng.bit_generator.cffi\nn = 100\nvals_cffi = ffi.new(\"double[%d]\" % n)\nlib.random_standard_normal_fill(interface.bit_generator, n, vals_cffi)\n# reset the state\nbit_gen.state = state\nvals = rng.standard_normal(n)\nfor i in range(n):\n    assert vals[i] == vals_cffi[i]",
        "detail": "mid-range.extending",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.extending",
        "description": "mid-range.extending",
        "peekOfCode": "n = 100\nvals_cffi = ffi.new(\"double[%d]\" % n)\nlib.random_standard_normal_fill(interface.bit_generator, n, vals_cffi)\n# reset the state\nbit_gen.state = state\nvals = rng.standard_normal(n)\nfor i in range(n):\n    assert vals[i] == vals_cffi[i]",
        "detail": "mid-range.extending",
        "documentation": {}
    },
    {
        "label": "vals_cffi",
        "kind": 5,
        "importPath": "mid-range.extending",
        "description": "mid-range.extending",
        "peekOfCode": "vals_cffi = ffi.new(\"double[%d]\" % n)\nlib.random_standard_normal_fill(interface.bit_generator, n, vals_cffi)\n# reset the state\nbit_gen.state = state\nvals = rng.standard_normal(n)\nfor i in range(n):\n    assert vals[i] == vals_cffi[i]",
        "detail": "mid-range.extending",
        "documentation": {}
    },
    {
        "label": "bit_gen.state",
        "kind": 5,
        "importPath": "mid-range.extending",
        "description": "mid-range.extending",
        "peekOfCode": "bit_gen.state = state\nvals = rng.standard_normal(n)\nfor i in range(n):\n    assert vals[i] == vals_cffi[i]",
        "detail": "mid-range.extending",
        "documentation": {}
    },
    {
        "label": "vals",
        "kind": 5,
        "importPath": "mid-range.extending",
        "description": "mid-range.extending",
        "peekOfCode": "vals = rng.standard_normal(n)\nfor i in range(n):\n    assert vals[i] == vals_cffi[i]",
        "detail": "mid-range.extending",
        "documentation": {}
    },
    {
        "label": "normals",
        "kind": 2,
        "importPath": "mid-range.extending_distributions",
        "description": "mid-range.extending_distributions",
        "peekOfCode": "def normals(n, bit_generator):\n    out = np.empty(n)\n    for i in range(n):\n        out[i] = random_standard_normal(bit_generator)\n    return out\nnormalsj = nb.jit(normals, nopython=True)\n# Numba requires a memory address for void *\n# Can also get address from x.ctypes.bit_generator.value\nbit_generator_address = int(ffi.cast(\"uintptr_t\", bit_generator))\nnorm = normalsj(1000, bit_generator_address)",
        "detail": "mid-range.extending_distributions",
        "documentation": {}
    },
    {
        "label": "ffi",
        "kind": 5,
        "importPath": "mid-range.extending_distributions",
        "description": "mid-range.extending_distributions",
        "peekOfCode": "ffi = FFI()\nif os.path.exists(\"./distributions.dll\"):\n    lib = ffi.dlopen(\"./distributions.dll\")\nelif os.path.exists(\"./libdistributions.so\"):\n    lib = ffi.dlopen(\"./libdistributions.so\")\nelse:\n    raise RuntimeError(\"Required DLL/so file was not found.\")\nffi.cdef(\n    \"\"\"\ndouble random_standard_normal(void *bitgen_state);",
        "detail": "mid-range.extending_distributions",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.extending_distributions",
        "description": "mid-range.extending_distributions",
        "peekOfCode": "x = PCG64()\nxffi = x.cffi\nbit_generator = xffi.bit_generator\nrandom_standard_normal = lib.random_standard_normal\ndef normals(n, bit_generator):\n    out = np.empty(n)\n    for i in range(n):\n        out[i] = random_standard_normal(bit_generator)\n    return out\nnormalsj = nb.jit(normals, nopython=True)",
        "detail": "mid-range.extending_distributions",
        "documentation": {}
    },
    {
        "label": "xffi",
        "kind": 5,
        "importPath": "mid-range.extending_distributions",
        "description": "mid-range.extending_distributions",
        "peekOfCode": "xffi = x.cffi\nbit_generator = xffi.bit_generator\nrandom_standard_normal = lib.random_standard_normal\ndef normals(n, bit_generator):\n    out = np.empty(n)\n    for i in range(n):\n        out[i] = random_standard_normal(bit_generator)\n    return out\nnormalsj = nb.jit(normals, nopython=True)\n# Numba requires a memory address for void *",
        "detail": "mid-range.extending_distributions",
        "documentation": {}
    },
    {
        "label": "bit_generator",
        "kind": 5,
        "importPath": "mid-range.extending_distributions",
        "description": "mid-range.extending_distributions",
        "peekOfCode": "bit_generator = xffi.bit_generator\nrandom_standard_normal = lib.random_standard_normal\ndef normals(n, bit_generator):\n    out = np.empty(n)\n    for i in range(n):\n        out[i] = random_standard_normal(bit_generator)\n    return out\nnormalsj = nb.jit(normals, nopython=True)\n# Numba requires a memory address for void *\n# Can also get address from x.ctypes.bit_generator.value",
        "detail": "mid-range.extending_distributions",
        "documentation": {}
    },
    {
        "label": "random_standard_normal",
        "kind": 5,
        "importPath": "mid-range.extending_distributions",
        "description": "mid-range.extending_distributions",
        "peekOfCode": "random_standard_normal = lib.random_standard_normal\ndef normals(n, bit_generator):\n    out = np.empty(n)\n    for i in range(n):\n        out[i] = random_standard_normal(bit_generator)\n    return out\nnormalsj = nb.jit(normals, nopython=True)\n# Numba requires a memory address for void *\n# Can also get address from x.ctypes.bit_generator.value\nbit_generator_address = int(ffi.cast(\"uintptr_t\", bit_generator))",
        "detail": "mid-range.extending_distributions",
        "documentation": {}
    },
    {
        "label": "normalsj",
        "kind": 5,
        "importPath": "mid-range.extending_distributions",
        "description": "mid-range.extending_distributions",
        "peekOfCode": "normalsj = nb.jit(normals, nopython=True)\n# Numba requires a memory address for void *\n# Can also get address from x.ctypes.bit_generator.value\nbit_generator_address = int(ffi.cast(\"uintptr_t\", bit_generator))\nnorm = normalsj(1000, bit_generator_address)\nprint(norm[:12])",
        "detail": "mid-range.extending_distributions",
        "documentation": {}
    },
    {
        "label": "bit_generator_address",
        "kind": 5,
        "importPath": "mid-range.extending_distributions",
        "description": "mid-range.extending_distributions",
        "peekOfCode": "bit_generator_address = int(ffi.cast(\"uintptr_t\", bit_generator))\nnorm = normalsj(1000, bit_generator_address)\nprint(norm[:12])",
        "detail": "mid-range.extending_distributions",
        "documentation": {}
    },
    {
        "label": "norm",
        "kind": 5,
        "importPath": "mid-range.extending_distributions",
        "description": "mid-range.extending_distributions",
        "peekOfCode": "norm = normalsj(1000, bit_generator_address)\nprint(norm[:12])",
        "detail": "mid-range.extending_distributions",
        "documentation": {}
    },
    {
        "label": "Extension",
        "kind": 6,
        "importPath": "mid-range.extension",
        "description": "mid-range.extension",
        "peekOfCode": "class Extension(_Extension):\n    \"\"\"Extension that uses '.c' files in place of '.pyx' files\"\"\"\n    def __init__(self, name, sources, *args, **kw):\n        # The *args is needed for compatibility as calls may use positional\n        # arguments. py_limited_api may be set only via keyword.\n        self.py_limited_api = kw.pop(\"py_limited_api\", False)\n        _Extension.__init__(self, name, sources, *args, **kw)\n    def _convert_pyx_sources_to_lang(self):\n        \"\"\"\n        Replace sources with .pyx extensions to sources with the target",
        "detail": "mid-range.extension",
        "documentation": {}
    },
    {
        "label": "Library",
        "kind": 6,
        "importPath": "mid-range.extension",
        "description": "mid-range.extension",
        "peekOfCode": "class Library(Extension):\n    \"\"\"Just like a regular Extension, but built as a library instead\"\"\"",
        "detail": "mid-range.extension",
        "documentation": {}
    },
    {
        "label": "have_pyrex",
        "kind": 5,
        "importPath": "mid-range.extension",
        "description": "mid-range.extension",
        "peekOfCode": "have_pyrex = _have_cython\n_Extension = get_unpatched(distutils.core.Extension)\nclass Extension(_Extension):\n    \"\"\"Extension that uses '.c' files in place of '.pyx' files\"\"\"\n    def __init__(self, name, sources, *args, **kw):\n        # The *args is needed for compatibility as calls may use positional\n        # arguments. py_limited_api may be set only via keyword.\n        self.py_limited_api = kw.pop(\"py_limited_api\", False)\n        _Extension.__init__(self, name, sources, *args, **kw)\n    def _convert_pyx_sources_to_lang(self):",
        "detail": "mid-range.extension",
        "documentation": {}
    },
    {
        "label": "_Extension",
        "kind": 5,
        "importPath": "mid-range.extension",
        "description": "mid-range.extension",
        "peekOfCode": "_Extension = get_unpatched(distutils.core.Extension)\nclass Extension(_Extension):\n    \"\"\"Extension that uses '.c' files in place of '.pyx' files\"\"\"\n    def __init__(self, name, sources, *args, **kw):\n        # The *args is needed for compatibility as calls may use positional\n        # arguments. py_limited_api may be set only via keyword.\n        self.py_limited_api = kw.pop(\"py_limited_api\", False)\n        _Extension.__init__(self, name, sources, *args, **kw)\n    def _convert_pyx_sources_to_lang(self):\n        \"\"\"",
        "detail": "mid-range.extension",
        "documentation": {}
    },
    {
        "label": "fname",
        "kind": 5,
        "importPath": "mid-range.extract",
        "description": "mid-range.extract",
        "peekOfCode": "fname = \"spark-3.0.2-bin-hadoop2.7.tgz\"\nif fname.endswith(\"tgz\"):\n    tar = tarfile.open(\n        \"C:\\\\Users\\\\ag16000\\Downloads\\\\spark-3.0.2-bin-hadoop2.7.tgz\", \"r:gz\"\n    )\n    tar.extractall()\n    tar.close()\nelif fname.endswith(\"tar\"):\n    tar = tarfile.open(\n        \"C:\\\\Users\\\\ag16000\\Downloads\\\\spark-3.0.2-bin-hadoop2.7.tgz\", \"r:\"",
        "detail": "mid-range.extract",
        "documentation": {}
    },
    {
        "label": "split_list",
        "kind": 2,
        "importPath": "mid-range.extractnumber",
        "description": "mid-range.extractnumber",
        "peekOfCode": "def split_list(seq):\n    stack = []\n    for item in seq:\n        stack.append(item.split(\".\"))\n    # remove 0 for each col\n    for row in stack:\n        row.remove(\"0\")\n    ret = []\n    # Append dot for each item\n    for row in stack:",
        "detail": "mid-range.extractnumber",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "mid-range.extractnumber",
        "description": "mid-range.extractnumber",
        "peekOfCode": "l = [\n    \"0.5550.51080.446159.09210.53940.77390.85033.9272\",\n    \"0.0150.01380.01211.59890.01460.02090.0230.1063\",\n]\n# Split item\ndef split_list(seq):\n    stack = []\n    for item in seq:\n        stack.append(item.split(\".\"))\n    # remove 0 for each col",
        "detail": "mid-range.extractnumber",
        "documentation": {}
    },
    {
        "label": "extractEachKth",
        "kind": 2,
        "importPath": "mid-range.extract_each_kth",
        "description": "mid-range.extract_each_kth",
        "peekOfCode": "def extractEachKth(inputArray, k):\n    \"\"\"Function to remove each kth element from list of integers\n    Args:\n        inputArray(int): List of integers\n        k(int): position of elements to remove from list\n    Return:\n        The list with kth elements removed\n    Raises:\n    \"\"\"\n    new_list = []",
        "detail": "mid-range.extract_each_kth",
        "documentation": {}
    },
    {
        "label": "extraNumber",
        "kind": 2,
        "importPath": "mid-range.extra_number",
        "description": "mid-range.extra_number",
        "peekOfCode": "def extraNumber(a, b, c):\n    \"\"\"\n    You're given three integers, a, b and c. It is \n    guaranteed that two of these integers are equal \n    to each other. What is the value of the third integer?\n    \"\"\"\n    if a == b:\n        return c\n    elif a == c:\n        return b",
        "detail": "mid-range.extra_number",
        "documentation": {}
    },
    {
        "label": "cmdline",
        "kind": 2,
        "importPath": "mid-range.f2py_testing",
        "description": "mid-range.f2py_testing",
        "peekOfCode": "def cmdline():\n    m = re.compile(r\"\\A\\d+\\Z\")\n    args = []\n    repeat = 1\n    for a in sys.argv[1:]:\n        if m.match(a):\n            repeat = eval(a)\n        else:\n            args.append(a)\n    f2py_opts = \" \".join(args)",
        "detail": "mid-range.f2py_testing",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.f2py_testing",
        "description": "mid-range.f2py_testing",
        "peekOfCode": "def run(runtest, test_functions, repeat=1):\n    l = [(t, repr(t.__doc__.split(\"\\n\")[1].strip())) for t in test_functions]\n    start_memusage = memusage()\n    diff_memusage = None\n    start_jiffies = jiffies()\n    i = 0\n    while i < repeat:\n        i += 1\n        for t, fname in l:\n            runtest(t)",
        "detail": "mid-range.f2py_testing",
        "documentation": {}
    },
    {
        "label": "__docformat__",
        "kind": 5,
        "importPath": "mid-range.fa",
        "description": "mid-range.fa",
        "peekOfCode": "__docformat__ = \"reStructuredText\"\nlabels = {\n    # fixed: language-dependent\n    u\"author\": u\"نویسنده\",\n    u\"authors\": u\"نویسندگان\",\n    u\"organization\": u\"سازمان\",\n    u\"address\": u\"آدرس\",\n    u\"contact\": u\"تماس\",\n    u\"version\": u\"نسخه\",\n    u\"revision\": u\"بازبینی\",",
        "detail": "mid-range.fa",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "mid-range.fa",
        "description": "mid-range.fa",
        "peekOfCode": "labels = {\n    # fixed: language-dependent\n    u\"author\": u\"نویسنده\",\n    u\"authors\": u\"نویسندگان\",\n    u\"organization\": u\"سازمان\",\n    u\"address\": u\"آدرس\",\n    u\"contact\": u\"تماس\",\n    u\"version\": u\"نسخه\",\n    u\"revision\": u\"بازبینی\",\n    u\"status\": u\"وضعیت\",",
        "detail": "mid-range.fa",
        "documentation": {}
    },
    {
        "label": "bibliographic_fields",
        "kind": 5,
        "importPath": "mid-range.fa",
        "description": "mid-range.fa",
        "peekOfCode": "bibliographic_fields = {\n    # language-dependent: fixed\n    u\"نویسنده\": u\"author\",\n    u\"نویسندگان\": u\"authors\",\n    u\"سازمان\": u\"organization\",\n    u\"آدرس\": u\"address\",\n    u\"تماس\": u\"contact\",\n    u\"نسخه\": u\"version\",\n    u\"بازبینی\": u\"revision\",\n    u\"وضعیت\": u\"status\",",
        "detail": "mid-range.fa",
        "documentation": {}
    },
    {
        "label": "author_separators",
        "kind": 5,
        "importPath": "mid-range.fa",
        "description": "mid-range.fa",
        "peekOfCode": "author_separators = [u\"؛\", u\"،\"]\n\"\"\"List of separator strings for the 'Authors' bibliographic field. Tried in\norder.\"\"\"",
        "detail": "mid-range.fa",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "mid-range.facebook_messenger_automation",
        "description": "mid-range.facebook_messenger_automation",
        "peekOfCode": "message = 1  # Here message variable stores the no. of times message prints\nwhile message:\n    time.sleep(4)\n    pyautogui.typewrite(\n        \"Hello ,How are you?\"\n        \"What is your today's schedule , I want a meet with you?\"\n        \"Please reply me as early as possible.\"\n    )\n    time.sleep(2)\n    pyautogui.press(\"enter\")",
        "detail": "mid-range.facebook_messenger_automation",
        "documentation": {}
    },
    {
        "label": "trailingZeros",
        "kind": 2,
        "importPath": "mid-range.factorial",
        "description": "mid-range.factorial",
        "peekOfCode": "def trailingZeros(N):\n    mul = 5\n    zeros = 0\n    while True:\n        zeros += N // mul\n        if mul > N:\n            break\n        mul = mul * 5\n    return zeros\nfor _ in range(int(stdin.readline())):",
        "detail": "mid-range.factorial",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.FactorialTrailingZeros",
        "description": "mid-range.FactorialTrailingZeros",
        "peekOfCode": "class Solution:\n    def trailingZeroes(self, n: int) -> int:\n        count = 0\n        m = 5\n        while n / m >= 1:\n            count += int(n / m)\n            m *= 5\n        return count",
        "detail": "mid-range.FactorialTrailingZeros",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "mid-range.factorial_iterative",
        "description": "mid-range.factorial_iterative",
        "peekOfCode": "def factorial(n: int) -> int:\n    \"\"\"\n    >>> import math\n    >>> all(factorial(i) == math.factorial(i) for i in range(20))\n    True\n    >>> factorial(0.1)\n    Traceback (most recent call last):\n        ...\n    ValueError: factorial() only accepts integral values\n    >>> factorial(-1)",
        "detail": "mid-range.factorial_iterative",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "mid-range.factorial_python",
        "description": "mid-range.factorial_python",
        "peekOfCode": "def factorial(input_number: int) -> int:\n    \"\"\"\n    Calculate the factorial of specified number\n    >>> factorial(1)\n    1\n    >>> factorial(6)\n    720\n    >>> factorial(0)\n    1\n    >>> factorial(-1)",
        "detail": "mid-range.factorial_python",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "mid-range.factorial_recursive",
        "description": "mid-range.factorial_recursive",
        "peekOfCode": "def factorial(n: int) -> int:\n    \"\"\"\n    Calculate the factorial of a positive integer\n    https://en.wikipedia.org/wiki/Factorial\n    >>> import math\n    >>> all(factorial(i) == math.factorial(i) for i in range(20))\n    True\n    >>> factorial(0.1)\n    Traceback (most recent call last):\n        ...",
        "detail": "mid-range.factorial_recursive",
        "documentation": {}
    },
    {
        "label": "trailing_zeroes",
        "kind": 2,
        "importPath": "mid-range.factorial_trailing_zeroes",
        "description": "mid-range.factorial_trailing_zeroes",
        "peekOfCode": "def trailing_zeroes(n):\n    # 0s are produced when 2 and 5 are multiplied\n    # because 2 * 5 = 10\n    # so you'll need to count how many 2s and 5s are there\n    # 2s are always more than 5s\n    # so count just how many 5s are in that range\n    res = 0\n    k = 5\n    # find all powers of 5\n    # 25 has 2 5s, 125 has 3 5s, etc",
        "detail": "mid-range.factorial_trailing_zeroes",
        "documentation": {}
    },
    {
        "label": "factors_of_a_number",
        "kind": 2,
        "importPath": "mid-range.factors",
        "description": "mid-range.factors",
        "peekOfCode": "def factors_of_a_number(num: int) -> list:\n    \"\"\"\n    >>> factors_of_a_number(1)\n    [1]\n    >>> factors_of_a_number(5)\n    [1, 5]\n    >>> factors_of_a_number(24)\n    [1, 2, 3, 4, 6, 8, 12, 24]\n    >>> factors_of_a_number(-24)\n    []",
        "detail": "mid-range.factors",
        "documentation": {}
    },
    {
        "label": "Failure",
        "kind": 6,
        "importPath": "mid-range.failure",
        "description": "mid-range.failure",
        "peekOfCode": "class Failure(unittest.TestCase):\n    \"\"\"Unloadable or unexecutable test.\n    A Failure case is placed in a test suite to indicate the presence of a\n    test that could not be loaded or executed. A common example is a test\n    module that fails to import.\n    \"\"\"\n    __test__ = False  # do not collect\n    def __init__(self, exc_class, exc_val, tb=None, address=None):\n        log.debug(\"A failure! %s %s %s\", exc_class, exc_val, format_tb(tb))\n        self.exc_class = exc_class",
        "detail": "mid-range.failure",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "mid-range.failure",
        "description": "mid-range.failure",
        "peekOfCode": "log = logging.getLogger(__name__)\n__all__ = [\"Failure\"]\nclass Failure(unittest.TestCase):\n    \"\"\"Unloadable or unexecutable test.\n    A Failure case is placed in a test suite to indicate the presence of a\n    test that could not be loaded or executed. A common example is a test\n    module that fails to import.\n    \"\"\"\n    __test__ = False  # do not collect\n    def __init__(self, exc_class, exc_val, tb=None, address=None):",
        "detail": "mid-range.failure",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.failure",
        "description": "mid-range.failure",
        "peekOfCode": "__all__ = [\"Failure\"]\nclass Failure(unittest.TestCase):\n    \"\"\"Unloadable or unexecutable test.\n    A Failure case is placed in a test suite to indicate the presence of a\n    test that could not be loaded or executed. A common example is a test\n    module that fails to import.\n    \"\"\"\n    __test__ = False  # do not collect\n    def __init__(self, exc_class, exc_val, tb=None, address=None):\n        log.debug(\"A failure! %s %s %s\", exc_class, exc_val, format_tb(tb))",
        "detail": "mid-range.failure",
        "documentation": {}
    },
    {
        "label": "FailureDetail",
        "kind": 6,
        "importPath": "mid-range.failuredetail",
        "description": "mid-range.failuredetail",
        "peekOfCode": "class FailureDetail(Plugin):\n    \"\"\"\n    Plugin that provides extra information in tracebacks of test failures.\n    \"\"\"\n    score = 1600  # before capture\n    def options(self, parser, env):\n        \"\"\"Register commmandline options.\n        \"\"\"\n        parser.add_option(\n            \"-d\",",
        "detail": "mid-range.failuredetail",
        "documentation": {}
    },
    {
        "label": "coin",
        "kind": 2,
        "importPath": "mid-range.fairCoin",
        "description": "mid-range.fairCoin",
        "peekOfCode": "def coin(p=0.5):\n    \"\"\" 1 with probability = p, 0 with probability 1 - p. \"\"\"\n    return 1 * (np.random.random() < p)\ndef vonNeumann(q=0.5):\n    \"\"\" Use von Neumann's rejection algorithm with an unknown coin (Bernoulli q). \"\"\"\n    x, y = coin(q), coin(q)\n    while x == y:  # (x, y) not in {(1, 0), (1, 0)}\n        x, y = coin(q), coin(q)\n    return x\ndef main(n=1000):",
        "detail": "mid-range.fairCoin",
        "documentation": {}
    },
    {
        "label": "vonNeumann",
        "kind": 2,
        "importPath": "mid-range.fairCoin",
        "description": "mid-range.fairCoin",
        "peekOfCode": "def vonNeumann(q=0.5):\n    \"\"\" Use von Neumann's rejection algorithm with an unknown coin (Bernoulli q). \"\"\"\n    x, y = coin(q), coin(q)\n    while x == y:  # (x, y) not in {(1, 0), (1, 0)}\n        x, y = coin(q), coin(q)\n    return x\ndef main(n=1000):\n    \"\"\" Check that the von Neumann method is indeed simulating a fair coin. \"\"\"\n    print(\n        \"\\n\\n- Using n = {} tests of the von Neumann method, with unknown q in (0, 1).\".format(",
        "detail": "mid-range.fairCoin",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.fairCoin",
        "description": "mid-range.fairCoin",
        "peekOfCode": "def main(n=1000):\n    \"\"\" Check that the von Neumann method is indeed simulating a fair coin. \"\"\"\n    print(\n        \"\\n\\n- Using n = {} tests of the von Neumann method, with unknown q in (0, 1).\".format(\n            n\n        )\n    )\n    q = 1.0 / np.pi  # Unknown float number 0.3183098861837907\n    tests = [vonNeumann(q) for _ in range(n)]\n    assert all(",
        "detail": "mid-range.fairCoin",
        "documentation": {}
    },
    {
        "label": "MyExporter",
        "kind": 6,
        "importPath": "mid-range.fake_exporters",
        "description": "mid-range.fake_exporters",
        "peekOfCode": "class MyExporter(HTMLExporter):\n    \"\"\"\n    My custom exporter\n    \"\"\"\n    @default(\"file_extension\")\n    def _file_extension_default(self):\n        \"\"\"\n        The new file extension is `.test_ext`\n        \"\"\"\n        return \".test_ext\"",
        "detail": "mid-range.fake_exporters",
        "documentation": {}
    },
    {
        "label": "FakeCustomKernelManager",
        "kind": 6,
        "importPath": "mid-range.fake_kernelmanager",
        "description": "mid-range.fake_kernelmanager",
        "peekOfCode": "class FakeCustomKernelManager(KernelManager):\n    expected_methods = {\"__init__\": 0, \"client\": 0, \"start_kernel\": 0}\n    def __init__(self, *args, **kwargs):\n        self.log.info(\"FakeCustomKernelManager initialized\")\n        self.expected_methods[\"__init__\"] += 1\n        super().__init__(*args, **kwargs)\n    def start_kernel(self, *args, **kwargs):\n        self.log.info(\"FakeCustomKernelManager started a kernel\")\n        self.expected_methods[\"start_kernel\"] += 1\n        return super().start_kernel(*args, **kwargs)",
        "detail": "mid-range.fake_kernelmanager",
        "documentation": {}
    },
    {
        "label": "merge_sort",
        "kind": 2,
        "importPath": "mid-range.fancy_merge",
        "description": "mid-range.fancy_merge",
        "peekOfCode": "def merge_sort(A):\n    if len(A) > 1:\n        mid = len(A) // 2\n        L = A[:mid]\n        R = A[mid:]\n        merge_sort(L)\n        merge_sort(R)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if L[i] <= R[j]:",
        "detail": "mid-range.fancy_merge",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 2,
        "importPath": "mid-range.fastfibonacci",
        "description": "mid-range.fastfibonacci",
        "peekOfCode": "def fibonacci(n: int):  # noqa: E999 This syntax is Python 3 only\n    if n < 0:\n        raise ValueError(\"Negative arguments are not supported\")\n    return _fib(n)[0]\n# returns (F(n), F(n-1))\ndef _fib(n: int):  # noqa: E999 This syntax is Python 3 only\n    if n == 0:\n        # (F(0), F(1))\n        return (0, 1)\n    else:",
        "detail": "mid-range.fastfibonacci",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 2,
        "importPath": "mid-range.fast_fibonacci",
        "description": "mid-range.fast_fibonacci",
        "peekOfCode": "def fibonacci(n: int) -> int:\n    \"\"\"\n    return F(n)\n    >>> [fibonacci(i) for i in range(13)]\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Negative arguments are not supported\")\n    return _fib(n)[0]\n# returns (F(n), F(n-1))",
        "detail": "mid-range.fast_fibonacci",
        "documentation": {}
    },
    {
        "label": "cmp_to_key",
        "kind": 2,
        "importPath": "mid-range.fb1",
        "description": "mid-range.fb1",
        "peekOfCode": "def cmp_to_key(mycmp):\n    \"Convert a cmp= function into a key= function\"\n    class K(object):\n        def __init__(self, obj, *args):\n            self.obj = obj\n        def __lt__(self, other):\n            return mycmp(self.obj, other.obj) < 0\n        def __gt__(self, other):\n            return mycmp(self.obj, other.obj) > 0\n        def __eq__(self, other):",
        "detail": "mid-range.fb1",
        "documentation": {}
    },
    {
        "label": "mycmp",
        "kind": 2,
        "importPath": "mid-range.fb1",
        "description": "mid-range.fb1",
        "peekOfCode": "def mycmp(s1, s2):\n    if not s1 and not s2:\n        return 0\n    if not s1:\n        return 1\n    if not s2:\n        return -1\n    l1, l2 = len(s1), len(s2)\n    i, j = 0, 0\n    while i < l1 and j < l2:",
        "detail": "mid-range.fb1",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.fb1",
        "description": "mid-range.fb1",
        "peekOfCode": "s = [\"ab012b\", \"ab12a\"]\ns.sort(key=cmp_to_key(mycmp))\nprint(s)",
        "detail": "mid-range.fb1",
        "documentation": {}
    },
    {
        "label": "thm",
        "kind": 5,
        "importPath": "mid-range.fcfs",
        "description": "mid-range.fcfs",
        "peekOfCode": "thm = int(0)\nprint(\"Enter the Number of Requests : \")  # Number of I/O Requests\nreq = int(input())\nprint(\"Enter the Initial Head Position : \")  # Initial Position of Disk Head\nhp = int(input())\nprint(\"Enter the Seek Rate : \")\nsrate = int(input())\nprint(\"Enter the Requests : \")\narr = [int(input()) for i in range(req)]\nthm = thm + abs(hp - arr[0])",
        "detail": "mid-range.fcfs",
        "documentation": {}
    },
    {
        "label": "req",
        "kind": 5,
        "importPath": "mid-range.fcfs",
        "description": "mid-range.fcfs",
        "peekOfCode": "req = int(input())\nprint(\"Enter the Initial Head Position : \")  # Initial Position of Disk Head\nhp = int(input())\nprint(\"Enter the Seek Rate : \")\nsrate = int(input())\nprint(\"Enter the Requests : \")\narr = [int(input()) for i in range(req)]\nthm = thm + abs(hp - arr[0])\nprint(str(hp) + \" -> \" + str(arr[0]), end=\"\")\nfor i in range(1, req):  # Iterates in Order of Arrival",
        "detail": "mid-range.fcfs",
        "documentation": {}
    },
    {
        "label": "hp",
        "kind": 5,
        "importPath": "mid-range.fcfs",
        "description": "mid-range.fcfs",
        "peekOfCode": "hp = int(input())\nprint(\"Enter the Seek Rate : \")\nsrate = int(input())\nprint(\"Enter the Requests : \")\narr = [int(input()) for i in range(req)]\nthm = thm + abs(hp - arr[0])\nprint(str(hp) + \" -> \" + str(arr[0]), end=\"\")\nfor i in range(1, req):  # Iterates in Order of Arrival\n    thm = thm + abs(arr[i] - arr[i - 1])\n    print(\" -> \" + str(arr[i]), end=\"\")",
        "detail": "mid-range.fcfs",
        "documentation": {}
    },
    {
        "label": "srate",
        "kind": 5,
        "importPath": "mid-range.fcfs",
        "description": "mid-range.fcfs",
        "peekOfCode": "srate = int(input())\nprint(\"Enter the Requests : \")\narr = [int(input()) for i in range(req)]\nthm = thm + abs(hp - arr[0])\nprint(str(hp) + \" -> \" + str(arr[0]), end=\"\")\nfor i in range(1, req):  # Iterates in Order of Arrival\n    thm = thm + abs(arr[i] - arr[i - 1])\n    print(\" -> \" + str(arr[i]), end=\"\")\nstime = srate * thm\nprint(\"\\nThe Total Head Movement is\", thm)",
        "detail": "mid-range.fcfs",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.fcfs",
        "description": "mid-range.fcfs",
        "peekOfCode": "arr = [int(input()) for i in range(req)]\nthm = thm + abs(hp - arr[0])\nprint(str(hp) + \" -> \" + str(arr[0]), end=\"\")\nfor i in range(1, req):  # Iterates in Order of Arrival\n    thm = thm + abs(arr[i] - arr[i - 1])\n    print(\" -> \" + str(arr[i]), end=\"\")\nstime = srate * thm\nprint(\"\\nThe Total Head Movement is\", thm)\nprint(\"The Seek Time is\", stime)",
        "detail": "mid-range.fcfs",
        "documentation": {}
    },
    {
        "label": "thm",
        "kind": 5,
        "importPath": "mid-range.fcfs",
        "description": "mid-range.fcfs",
        "peekOfCode": "thm = thm + abs(hp - arr[0])\nprint(str(hp) + \" -> \" + str(arr[0]), end=\"\")\nfor i in range(1, req):  # Iterates in Order of Arrival\n    thm = thm + abs(arr[i] - arr[i - 1])\n    print(\" -> \" + str(arr[i]), end=\"\")\nstime = srate * thm\nprint(\"\\nThe Total Head Movement is\", thm)\nprint(\"The Seek Time is\", stime)",
        "detail": "mid-range.fcfs",
        "documentation": {}
    },
    {
        "label": "stime",
        "kind": 5,
        "importPath": "mid-range.fcfs",
        "description": "mid-range.fcfs",
        "peekOfCode": "stime = srate * thm\nprint(\"\\nThe Total Head Movement is\", thm)\nprint(\"The Seek Time is\", stime)",
        "detail": "mid-range.fcfs",
        "documentation": {}
    },
    {
        "label": "FenwickTree",
        "kind": 6,
        "importPath": "mid-range.FenwickTree",
        "description": "mid-range.FenwickTree",
        "peekOfCode": "class FenwickTree:\n    def __init__(self, SIZE):  # create fenwick tree with size SIZE\n        self.Size = SIZE\n        self.ft = [0 for i in range(0, SIZE)]\n    def update(self, i, val):  # update data (adding) in index i in O(lg N)\n        while i < self.Size:\n            self.ft[i] += val\n            i += i & (-i)\n    def query(self, i):  # query cumulative data from index 0 to i in O(lg N)\n        ret = 0",
        "detail": "mid-range.FenwickTree",
        "documentation": {}
    },
    {
        "label": "FenwickTree",
        "kind": 6,
        "importPath": "mid-range.fenwick_tree",
        "description": "mid-range.fenwick_tree",
        "peekOfCode": "class FenwickTree:\n    def __init__(self, SIZE):  # create fenwick tree with size SIZE\n        self.Size = SIZE\n        self.ft = [0 for i in range(0, SIZE)]\n    def update(self, i, val):  # update data (adding) in index i in O(lg N)\n        while i < self.Size:\n            self.ft[i] += val\n            i += i & (-i)\n    def query(self, i):  # query cumulative data from index 0 to i in O(lg N)\n        ret = 0",
        "detail": "mid-range.fenwick_tree",
        "documentation": {}
    },
    {
        "label": "binary_exponentiation",
        "kind": 2,
        "importPath": "mid-range.fermat_little_theorem",
        "description": "mid-range.fermat_little_theorem",
        "peekOfCode": "def binary_exponentiation(a, n, mod):\n    if n == 0:\n        return 1\n    elif n % 2 == 1:\n        return (binary_exponentiation(a, n - 1, mod) * a) % mod\n    else:\n        b = binary_exponentiation(a, n / 2, mod)\n        return (b * b) % mod\n# a prime number\np = 701",
        "detail": "mid-range.fermat_little_theorem",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "mid-range.fermat_little_theorem",
        "description": "mid-range.fermat_little_theorem",
        "peekOfCode": "p = 701\na = 1000000000\nb = 10\n# using binary exponentiation function, O(log(p)):\nprint((a / b) % p == (a * binary_exponentiation(b, p - 2, p)) % p)\n# using Python operators:\nprint((a / b) % p == (a * b ** (p - 2)) % p)",
        "detail": "mid-range.fermat_little_theorem",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.fermat_little_theorem",
        "description": "mid-range.fermat_little_theorem",
        "peekOfCode": "a = 1000000000\nb = 10\n# using binary exponentiation function, O(log(p)):\nprint((a / b) % p == (a * binary_exponentiation(b, p - 2, p)) % p)\n# using Python operators:\nprint((a / b) % p == (a * b ** (p - 2)) % p)",
        "detail": "mid-range.fermat_little_theorem",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.fermat_little_theorem",
        "description": "mid-range.fermat_little_theorem",
        "peekOfCode": "b = 10\n# using binary exponentiation function, O(log(p)):\nprint((a / b) % p == (a * binary_exponentiation(b, p - 2, p)) % p)\n# using Python operators:\nprint((a / b) % p == (a * b ** (p - 2)) % p)",
        "detail": "mid-range.fermat_little_theorem",
        "documentation": {}
    },
    {
        "label": "fetch_bbc_news",
        "kind": 2,
        "importPath": "mid-range.fetch_bbc_news",
        "description": "mid-range.fetch_bbc_news",
        "peekOfCode": "def fetch_bbc_news(bbc_news_api_key: str) -> None:\n    # fetching a list of articles in json format\n    bbc_news_page = requests.get(_NEWS_API + bbc_news_api_key).json()\n    # each article in the list is a dict\n    for i, article in enumerate(bbc_news_page[\"articles\"], 1):\n        print(f\"{i}.) {article['title']}\")\nif __name__ == \"__main__\":\n    fetch_bbc_news(bbc_news_api_key=\"<Your BBC News API key goes here>\")",
        "detail": "mid-range.fetch_bbc_news",
        "documentation": {}
    },
    {
        "label": "_NEWS_API",
        "kind": 5,
        "importPath": "mid-range.fetch_bbc_news",
        "description": "mid-range.fetch_bbc_news",
        "peekOfCode": "_NEWS_API = \"https://newsapi.org/v1/articles?source=bbc-news&sortBy=top&apiKey=\"\ndef fetch_bbc_news(bbc_news_api_key: str) -> None:\n    # fetching a list of articles in json format\n    bbc_news_page = requests.get(_NEWS_API + bbc_news_api_key).json()\n    # each article in the list is a dict\n    for i, article in enumerate(bbc_news_page[\"articles\"], 1):\n        print(f\"{i}.) {article['title']}\")\nif __name__ == \"__main__\":\n    fetch_bbc_news(bbc_news_api_key=\"<Your BBC News API key goes here>\")",
        "detail": "mid-range.fetch_bbc_news",
        "documentation": {}
    },
    {
        "label": "fetch_github_info",
        "kind": 2,
        "importPath": "mid-range.fetch_github_info",
        "description": "mid-range.fetch_github_info",
        "peekOfCode": "def fetch_github_info(auth_token: str) -> Dict[Any, Any]:\n    \"\"\"\n    Fetch GitHub info of a user using the requests module\n    \"\"\"\n    headers = {\n        \"Authorization\": f\"token {auth_token}\",\n        \"Accept\": \"application/vnd.github.v3+json\",\n    }\n    return requests.get(AUTHENTICATED_USER_ENDPOINT, headers=headers).json()\nif __name__ == \"__main__\":  # pragma: no cover",
        "detail": "mid-range.fetch_github_info",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "mid-range.fetch_github_info",
        "description": "mid-range.fetch_github_info",
        "peekOfCode": "BASE_URL = \"https://api.github.com\"\n# https://docs.github.com/en/free-pro-team@latest/rest/reference/users#get-the-authenticated-user\nAUTHENTICATED_USER_ENDPOINT = BASE_URL + \"/user\"\n# https://github.com/settings/tokens\nUSER_TOKEN = os.environ.get(\"USER_TOKEN\", \"\")\ndef fetch_github_info(auth_token: str) -> Dict[Any, Any]:\n    \"\"\"\n    Fetch GitHub info of a user using the requests module\n    \"\"\"\n    headers = {",
        "detail": "mid-range.fetch_github_info",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATED_USER_ENDPOINT",
        "kind": 5,
        "importPath": "mid-range.fetch_github_info",
        "description": "mid-range.fetch_github_info",
        "peekOfCode": "AUTHENTICATED_USER_ENDPOINT = BASE_URL + \"/user\"\n# https://github.com/settings/tokens\nUSER_TOKEN = os.environ.get(\"USER_TOKEN\", \"\")\ndef fetch_github_info(auth_token: str) -> Dict[Any, Any]:\n    \"\"\"\n    Fetch GitHub info of a user using the requests module\n    \"\"\"\n    headers = {\n        \"Authorization\": f\"token {auth_token}\",\n        \"Accept\": \"application/vnd.github.v3+json\",",
        "detail": "mid-range.fetch_github_info",
        "documentation": {}
    },
    {
        "label": "USER_TOKEN",
        "kind": 5,
        "importPath": "mid-range.fetch_github_info",
        "description": "mid-range.fetch_github_info",
        "peekOfCode": "USER_TOKEN = os.environ.get(\"USER_TOKEN\", \"\")\ndef fetch_github_info(auth_token: str) -> Dict[Any, Any]:\n    \"\"\"\n    Fetch GitHub info of a user using the requests module\n    \"\"\"\n    headers = {\n        \"Authorization\": f\"token {auth_token}\",\n        \"Accept\": \"application/vnd.github.v3+json\",\n    }\n    return requests.get(AUTHENTICATED_USER_ENDPOINT, headers=headers).json()",
        "detail": "mid-range.fetch_github_info",
        "documentation": {}
    },
    {
        "label": "fetch_jobs",
        "kind": 2,
        "importPath": "mid-range.fetch_jobs",
        "description": "mid-range.fetch_jobs",
        "peekOfCode": "def fetch_jobs(location: str = \"mumbai\") -> Generator[tuple[str, str], None, None]:\n    soup = BeautifulSoup(requests.get(url + location).content, \"html.parser\")\n    # This attribute finds out all the specifics listed in a job\n    for job in soup.find_all(\"div\", attrs={\"data-tn-component\": \"organicJob\"}):\n        job_title = job.find(\"a\", attrs={\"data-tn-element\": \"jobTitle\"}).text.strip()\n        company_name = job.find(\"span\", {\"class\": \"company\"}).text.strip()\n        yield job_title, company_name\nif __name__ == \"__main__\":\n    for i, job in enumerate(fetch_jobs(\"Bangalore\"), 1):\n        print(f\"Job {i:>2} is {job[0]} at {job[1]}\")",
        "detail": "mid-range.fetch_jobs",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "mid-range.fetch_jobs",
        "description": "mid-range.fetch_jobs",
        "peekOfCode": "url = \"https://www.indeed.co.in/jobs?q=mobile+app+development&l=\"\ndef fetch_jobs(location: str = \"mumbai\") -> Generator[tuple[str, str], None, None]:\n    soup = BeautifulSoup(requests.get(url + location).content, \"html.parser\")\n    # This attribute finds out all the specifics listed in a job\n    for job in soup.find_all(\"div\", attrs={\"data-tn-component\": \"organicJob\"}):\n        job_title = job.find(\"a\", attrs={\"data-tn-element\": \"jobTitle\"}).text.strip()\n        company_name = job.find(\"span\", {\"class\": \"company\"}).text.strip()\n        yield job_title, company_name\nif __name__ == \"__main__\":\n    for i, job in enumerate(fetch_jobs(\"Bangalore\"), 1):",
        "detail": "mid-range.fetch_jobs",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 2,
        "importPath": "mid-range.fetch_podcasts",
        "description": "mid-range.fetch_podcasts",
        "peekOfCode": "def message(s):\n    print(\"{}: {}\".format(threading.current_thread().name, s))\ndef download_enclosures(q):\n    \"\"\"This is the worker thread function.\n    It processes items in the queue one after\n    another.  These daemon threads go into an\n    infinite loop, and exit only when\n    the main thread ends.\n    \"\"\"\n    while True:",
        "detail": "mid-range.fetch_podcasts",
        "documentation": {}
    },
    {
        "label": "download_enclosures",
        "kind": 2,
        "importPath": "mid-range.fetch_podcasts",
        "description": "mid-range.fetch_podcasts",
        "peekOfCode": "def download_enclosures(q):\n    \"\"\"This is the worker thread function.\n    It processes items in the queue one after\n    another.  These daemon threads go into an\n    infinite loop, and exit only when\n    the main thread ends.\n    \"\"\"\n    while True:\n        message(\"looking for the next enclosure\")\n        url = q.get()",
        "detail": "mid-range.fetch_podcasts",
        "documentation": {}
    },
    {
        "label": "num_fetch_threads",
        "kind": 5,
        "importPath": "mid-range.fetch_podcasts",
        "description": "mid-range.fetch_podcasts",
        "peekOfCode": "num_fetch_threads = 2\nenclosure_queue = Queue()\n# A real app wouldn't use hard-coded data...\nfeed_urls = [\"http://talkpython.fm/episodes/rss\"]\ndef message(s):\n    print(\"{}: {}\".format(threading.current_thread().name, s))\ndef download_enclosures(q):\n    \"\"\"This is the worker thread function.\n    It processes items in the queue one after\n    another.  These daemon threads go into an",
        "detail": "mid-range.fetch_podcasts",
        "documentation": {}
    },
    {
        "label": "enclosure_queue",
        "kind": 5,
        "importPath": "mid-range.fetch_podcasts",
        "description": "mid-range.fetch_podcasts",
        "peekOfCode": "enclosure_queue = Queue()\n# A real app wouldn't use hard-coded data...\nfeed_urls = [\"http://talkpython.fm/episodes/rss\"]\ndef message(s):\n    print(\"{}: {}\".format(threading.current_thread().name, s))\ndef download_enclosures(q):\n    \"\"\"This is the worker thread function.\n    It processes items in the queue one after\n    another.  These daemon threads go into an\n    infinite loop, and exit only when",
        "detail": "mid-range.fetch_podcasts",
        "documentation": {}
    },
    {
        "label": "feed_urls",
        "kind": 5,
        "importPath": "mid-range.fetch_podcasts",
        "description": "mid-range.fetch_podcasts",
        "peekOfCode": "feed_urls = [\"http://talkpython.fm/episodes/rss\"]\ndef message(s):\n    print(\"{}: {}\".format(threading.current_thread().name, s))\ndef download_enclosures(q):\n    \"\"\"This is the worker thread function.\n    It processes items in the queue one after\n    another.  These daemon threads go into an\n    infinite loop, and exit only when\n    the main thread ends.\n    \"\"\"",
        "detail": "mid-range.fetch_podcasts",
        "documentation": {}
    },
    {
        "label": "__docformat__",
        "kind": 5,
        "importPath": "mid-range.fi",
        "description": "mid-range.fi",
        "peekOfCode": "__docformat__ = \"reStructuredText\"\nlabels = {\n    # fixed: language-dependent\n    u\"author\": u\"Tekij\\u00e4\",\n    u\"authors\": u\"Tekij\\u00e4t\",\n    u\"organization\": u\"Yhteis\\u00f6\",\n    u\"address\": u\"Osoite\",\n    u\"contact\": u\"Yhteystiedot\",\n    u\"version\": u\"Versio\",\n    u\"revision\": u\"Vedos\",",
        "detail": "mid-range.fi",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "mid-range.fi",
        "description": "mid-range.fi",
        "peekOfCode": "labels = {\n    # fixed: language-dependent\n    u\"author\": u\"Tekij\\u00e4\",\n    u\"authors\": u\"Tekij\\u00e4t\",\n    u\"organization\": u\"Yhteis\\u00f6\",\n    u\"address\": u\"Osoite\",\n    u\"contact\": u\"Yhteystiedot\",\n    u\"version\": u\"Versio\",\n    u\"revision\": u\"Vedos\",\n    u\"status\": u\"Tila\",",
        "detail": "mid-range.fi",
        "documentation": {}
    },
    {
        "label": "bibliographic_fields",
        "kind": 5,
        "importPath": "mid-range.fi",
        "description": "mid-range.fi",
        "peekOfCode": "bibliographic_fields = {\n    # language-dependent: fixed\n    u\"tekij\\u00e4\": u\"author\",\n    u\"tekij\\u00e4t\": u\"authors\",\n    u\"yhteis\\u00f6\": u\"organization\",\n    u\"osoite\": u\"address\",\n    u\"yhteystiedot\": u\"contact\",\n    u\"versio\": u\"version\",\n    u\"vedos\": u\"revision\",\n    u\"tila\": u\"status\",",
        "detail": "mid-range.fi",
        "documentation": {}
    },
    {
        "label": "author_separators",
        "kind": 5,
        "importPath": "mid-range.fi",
        "description": "mid-range.fi",
        "peekOfCode": "author_separators = [\";\", \",\"]\n\"\"\"List of separator strings for the 'Authors' bibliographic field. Tried in\norder.\"\"\"",
        "detail": "mid-range.fi",
        "documentation": {}
    },
    {
        "label": "fib_iter",
        "kind": 2,
        "importPath": "mid-range.fib",
        "description": "mid-range.fib",
        "peekOfCode": "def fib_iter(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    p0 = 0\n    p1 = 1\n    for i in range(n - 1):\n        next_val = p0 + p1\n        p0 = p1",
        "detail": "mid-range.fib",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.fibonacci",
        "description": "mid-range.fibonacci",
        "peekOfCode": "class Solution:\n    def fib(self, N: int) -> int:\n        if N == 0:\n            return 0\n        if N == 1:\n            return 1\n        dp = [0 for _ in range(N + 1)]\n        dp[1] = 1\n        for i in range(2, N + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]",
        "detail": "mid-range.fibonacci",
        "documentation": {}
    },
    {
        "label": "fib",
        "kind": 2,
        "importPath": "mid-range.Fibonacci_Number",
        "description": "mid-range.Fibonacci_Number",
        "peekOfCode": "def fib(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    for i in range(2, n + 1):\n        value = a + b\n        a = b",
        "detail": "mid-range.Fibonacci_Number",
        "documentation": {}
    },
    {
        "label": "recur_fibo",
        "kind": 2,
        "importPath": "mid-range.fibonacci_sequence_recursion",
        "description": "mid-range.fibonacci_sequence_recursion",
        "peekOfCode": "def recur_fibo(n: int) -> int:\n    \"\"\"\n    >>> [recur_fibo(i) for i in range(12)]\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n    \"\"\"\n    return n if n <= 1 else recur_fibo(n - 1) + recur_fibo(n - 2)\ndef main() -> None:\n    limit = int(input(\"How many terms to include in fibonacci series: \"))\n    if limit > 0:\n        print(f\"The first {limit} terms of the fibonacci series are as follows:\")",
        "detail": "mid-range.fibonacci_sequence_recursion",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.fibonacci_sequence_recursion",
        "description": "mid-range.fibonacci_sequence_recursion",
        "peekOfCode": "def main() -> None:\n    limit = int(input(\"How many terms to include in fibonacci series: \"))\n    if limit > 0:\n        print(f\"The first {limit} terms of the fibonacci series are as follows:\")\n        print([recur_fibo(n) for n in range(limit)])\n    else:\n        print(\"Please enter a positive integer: \")\nif __name__ == \"__main__\":\n    main()",
        "detail": "mid-range.fibonacci_sequence_recursion",
        "documentation": {}
    },
    {
        "label": "fib_series",
        "kind": 2,
        "importPath": "mid-range.fib_series",
        "description": "mid-range.fib_series",
        "peekOfCode": "def fib_series(count):\n    a = 0\n    b = 1\n    c = 1\n    for i in range(count):\n        a = b\n        b = c\n        c = a + b\n        print(a)\nfib_series(10)",
        "detail": "mid-range.fib_series",
        "documentation": {}
    },
    {
        "label": "figureref",
        "kind": 6,
        "importPath": "mid-range.figureref",
        "description": "mid-range.figureref",
        "peekOfCode": "class figureref(nodes.reference):\n    pass\ndef _role(typ, rawtext, text, lineno, inliner, options={}, content=[], nodeclass=None):\n    text = utils.unescape(text)\n    pnode = nodeclass(rawsource=text, text=\"\", internal=True, refuri=text)\n    return [pnode], []\ndef latex_visit_figureref(self, node):\n    id = \"figure:\" + node[\"refuri\"]\n    self.body.append(r\"Figure~\\ref{%s}\" % self.idescape(id))\n    raise nodes.SkipNode",
        "detail": "mid-range.figureref",
        "documentation": {}
    },
    {
        "label": "latex_visit_figureref",
        "kind": 2,
        "importPath": "mid-range.figureref",
        "description": "mid-range.figureref",
        "peekOfCode": "def latex_visit_figureref(self, node):\n    id = \"figure:\" + node[\"refuri\"]\n    self.body.append(r\"Figure~\\ref{%s}\" % self.idescape(id))\n    raise nodes.SkipNode\ndef latex_depart_figureref(self, node):\n    return\ndef html_visit_figureref(self, node):\n    self.body.append(r\"the figure\")\n    raise nodes.SkipNode\ndef html_depart_figureref(self, node):",
        "detail": "mid-range.figureref",
        "documentation": {}
    },
    {
        "label": "latex_depart_figureref",
        "kind": 2,
        "importPath": "mid-range.figureref",
        "description": "mid-range.figureref",
        "peekOfCode": "def latex_depart_figureref(self, node):\n    return\ndef html_visit_figureref(self, node):\n    self.body.append(r\"the figure\")\n    raise nodes.SkipNode\ndef html_depart_figureref(self, node):\n    return\ndef builder_inited(app):\n    LOG.info(\"defining figure role\")\n    app.add_role(\"figure\", functools.partial(_role, nodeclass=figureref))",
        "detail": "mid-range.figureref",
        "documentation": {}
    },
    {
        "label": "html_visit_figureref",
        "kind": 2,
        "importPath": "mid-range.figureref",
        "description": "mid-range.figureref",
        "peekOfCode": "def html_visit_figureref(self, node):\n    self.body.append(r\"the figure\")\n    raise nodes.SkipNode\ndef html_depart_figureref(self, node):\n    return\ndef builder_inited(app):\n    LOG.info(\"defining figure role\")\n    app.add_role(\"figure\", functools.partial(_role, nodeclass=figureref))\ndef setup(app):\n    LOG.info(\"initializing figureref\")",
        "detail": "mid-range.figureref",
        "documentation": {}
    },
    {
        "label": "html_depart_figureref",
        "kind": 2,
        "importPath": "mid-range.figureref",
        "description": "mid-range.figureref",
        "peekOfCode": "def html_depart_figureref(self, node):\n    return\ndef builder_inited(app):\n    LOG.info(\"defining figure role\")\n    app.add_role(\"figure\", functools.partial(_role, nodeclass=figureref))\ndef setup(app):\n    LOG.info(\"initializing figureref\")\n    app.add_node(\n        figureref,\n        latex=(latex_visit_figureref, None),",
        "detail": "mid-range.figureref",
        "documentation": {}
    },
    {
        "label": "builder_inited",
        "kind": 2,
        "importPath": "mid-range.figureref",
        "description": "mid-range.figureref",
        "peekOfCode": "def builder_inited(app):\n    LOG.info(\"defining figure role\")\n    app.add_role(\"figure\", functools.partial(_role, nodeclass=figureref))\ndef setup(app):\n    LOG.info(\"initializing figureref\")\n    app.add_node(\n        figureref,\n        latex=(latex_visit_figureref, None),\n        html=(html_visit_figureref, html_depart_figureref),\n    )",
        "detail": "mid-range.figureref",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "mid-range.figureref",
        "description": "mid-range.figureref",
        "peekOfCode": "def setup(app):\n    LOG.info(\"initializing figureref\")\n    app.add_node(\n        figureref,\n        latex=(latex_visit_figureref, None),\n        html=(html_visit_figureref, html_depart_figureref),\n    )\n    app.connect(\"builder-inited\", builder_inited)",
        "detail": "mid-range.figureref",
        "documentation": {}
    },
    {
        "label": "LOG",
        "kind": 5,
        "importPath": "mid-range.figureref",
        "description": "mid-range.figureref",
        "peekOfCode": "LOG = logging.getLogger(__name__)\nclass figureref(nodes.reference):\n    pass\ndef _role(typ, rawtext, text, lineno, inliner, options={}, content=[], nodeclass=None):\n    text = utils.unescape(text)\n    pnode = nodeclass(rawsource=text, text=\"\", internal=True, refuri=text)\n    return [pnode], []\ndef latex_visit_figureref(self, node):\n    id = \"figure:\" + node[\"refuri\"]\n    self.body.append(r\"Figure~\\ref{%s}\" % self.idescape(id))",
        "detail": "mid-range.figureref",
        "documentation": {}
    },
    {
        "label": "d1_contents",
        "kind": 5,
        "importPath": "mid-range.filecmp_cmpfiles",
        "description": "mid-range.filecmp_cmpfiles",
        "peekOfCode": "d1_contents = set(os.listdir(\"example/dir1\"))\nd2_contents = set(os.listdir(\"example/dir2\"))\ncommon = list(d1_contents & d2_contents)\ncommon_files = [f for f in common if os.path.isfile(os.path.join(\"example/dir1\", f))]\nprint(\"Common files:\", common_files)\n# Compare the directories\nmatch, mismatch, errors = filecmp.cmpfiles(\"example/dir1\", \"example/dir2\", common_files)\nprint(\"Match       :\", match)\nprint(\"Mismatch    :\", mismatch)\nprint(\"Errors      :\", errors)",
        "detail": "mid-range.filecmp_cmpfiles",
        "documentation": {}
    },
    {
        "label": "d2_contents",
        "kind": 5,
        "importPath": "mid-range.filecmp_cmpfiles",
        "description": "mid-range.filecmp_cmpfiles",
        "peekOfCode": "d2_contents = set(os.listdir(\"example/dir2\"))\ncommon = list(d1_contents & d2_contents)\ncommon_files = [f for f in common if os.path.isfile(os.path.join(\"example/dir1\", f))]\nprint(\"Common files:\", common_files)\n# Compare the directories\nmatch, mismatch, errors = filecmp.cmpfiles(\"example/dir1\", \"example/dir2\", common_files)\nprint(\"Match       :\", match)\nprint(\"Mismatch    :\", mismatch)\nprint(\"Errors      :\", errors)",
        "detail": "mid-range.filecmp_cmpfiles",
        "documentation": {}
    },
    {
        "label": "common",
        "kind": 5,
        "importPath": "mid-range.filecmp_cmpfiles",
        "description": "mid-range.filecmp_cmpfiles",
        "peekOfCode": "common = list(d1_contents & d2_contents)\ncommon_files = [f for f in common if os.path.isfile(os.path.join(\"example/dir1\", f))]\nprint(\"Common files:\", common_files)\n# Compare the directories\nmatch, mismatch, errors = filecmp.cmpfiles(\"example/dir1\", \"example/dir2\", common_files)\nprint(\"Match       :\", match)\nprint(\"Mismatch    :\", mismatch)\nprint(\"Errors      :\", errors)",
        "detail": "mid-range.filecmp_cmpfiles",
        "documentation": {}
    },
    {
        "label": "common_files",
        "kind": 5,
        "importPath": "mid-range.filecmp_cmpfiles",
        "description": "mid-range.filecmp_cmpfiles",
        "peekOfCode": "common_files = [f for f in common if os.path.isfile(os.path.join(\"example/dir1\", f))]\nprint(\"Common files:\", common_files)\n# Compare the directories\nmatch, mismatch, errors = filecmp.cmpfiles(\"example/dir1\", \"example/dir2\", common_files)\nprint(\"Match       :\", match)\nprint(\"Mismatch    :\", mismatch)\nprint(\"Errors      :\", errors)",
        "detail": "mid-range.filecmp_cmpfiles",
        "documentation": {}
    },
    {
        "label": "dc",
        "kind": 5,
        "importPath": "mid-range.filecmp_dircmp_common",
        "description": "mid-range.filecmp_dircmp_common",
        "peekOfCode": "dc = filecmp.dircmp(\"example/dir1\", \"example/dir2\")\nprint(\"Common:\")\npprint.pprint(dc.common)\nprint(\"\\nDirectories:\")\npprint.pprint(dc.common_dirs)\nprint(\"\\nFiles:\")\npprint.pprint(dc.common_files)\nprint(\"\\nFunny:\")\npprint.pprint(dc.common_funny)",
        "detail": "mid-range.filecmp_dircmp_common",
        "documentation": {}
    },
    {
        "label": "dc",
        "kind": 5,
        "importPath": "mid-range.filecmp_dircmp_diff",
        "description": "mid-range.filecmp_dircmp_diff",
        "peekOfCode": "dc = filecmp.dircmp(\"example/dir1\", \"example/dir2\")\nprint(\"Same      :\", dc.same_files)\nprint(\"Different :\", dc.diff_files)\nprint(\"Funny     :\", dc.funny_files)",
        "detail": "mid-range.filecmp_dircmp_diff",
        "documentation": {}
    },
    {
        "label": "dc",
        "kind": 5,
        "importPath": "mid-range.filecmp_dircmp_list",
        "description": "mid-range.filecmp_dircmp_list",
        "peekOfCode": "dc = filecmp.dircmp(\"example/dir1\", \"example/dir2\")\nprint(\"Left:\")\npprint.pprint(dc.left_list)\nprint(\"\\nRight:\")\npprint.pprint(dc.right_list)",
        "detail": "mid-range.filecmp_dircmp_list",
        "documentation": {}
    },
    {
        "label": "dc",
        "kind": 5,
        "importPath": "mid-range.filecmp_dircmp_list_filter",
        "description": "mid-range.filecmp_dircmp_list_filter",
        "peekOfCode": "dc = filecmp.dircmp(\"example/dir1\", \"example/dir2\", ignore=[\"common_file\"])\nprint(\"Left:\")\npprint.pprint(dc.left_list)\nprint(\"\\nRight:\")\npprint.pprint(dc.right_list)",
        "detail": "mid-range.filecmp_dircmp_list_filter",
        "documentation": {}
    },
    {
        "label": "dc",
        "kind": 5,
        "importPath": "mid-range.filecmp_dircmp_membership",
        "description": "mid-range.filecmp_dircmp_membership",
        "peekOfCode": "dc = filecmp.dircmp(\"example/dir1\", \"example/dir2\")\nprint(\"Common:\")\npprint.pprint(dc.common)\nprint(\"\\nLeft:\")\npprint.pprint(dc.left_only)\nprint(\"\\nRight:\")\npprint.pprint(dc.right_only)",
        "detail": "mid-range.filecmp_dircmp_membership",
        "documentation": {}
    },
    {
        "label": "dc",
        "kind": 5,
        "importPath": "mid-range.filecmp_dircmp_report_full_closure",
        "description": "mid-range.filecmp_dircmp_report_full_closure",
        "peekOfCode": "dc = filecmp.dircmp(\"example/dir1\", \"example/dir2\")\ndc.report_full_closure()",
        "detail": "mid-range.filecmp_dircmp_report_full_closure",
        "documentation": {}
    },
    {
        "label": "dc",
        "kind": 5,
        "importPath": "mid-range.filecmp_dircmp_subdirs",
        "description": "mid-range.filecmp_dircmp_subdirs",
        "peekOfCode": "dc = filecmp.dircmp(\"example/dir1\", \"example/dir2\")\nprint(\"Subdirectories:\")\nprint(dc.subdirs)",
        "detail": "mid-range.filecmp_dircmp_subdirs",
        "documentation": {}
    },
    {
        "label": "mkfile",
        "kind": 2,
        "importPath": "mid-range.filecmp_mkexamples",
        "description": "mid-range.filecmp_mkexamples",
        "peekOfCode": "def mkfile(filename, body=None):\n    with open(filename, \"w\") as f:\n        f.write(body or filename)\n    return\ndef make_example_dir(top):\n    if not os.path.exists(top):\n        os.mkdir(top)\n    curdir = os.getcwd()\n    os.chdir(top)\n    os.mkdir(\"dir1\")",
        "detail": "mid-range.filecmp_mkexamples",
        "documentation": {}
    },
    {
        "label": "make_example_dir",
        "kind": 2,
        "importPath": "mid-range.filecmp_mkexamples",
        "description": "mid-range.filecmp_mkexamples",
        "peekOfCode": "def make_example_dir(top):\n    if not os.path.exists(top):\n        os.mkdir(top)\n    curdir = os.getcwd()\n    os.chdir(top)\n    os.mkdir(\"dir1\")\n    os.mkdir(\"dir2\")\n    mkfile(\"dir1/file_only_in_dir1\")\n    mkfile(\"dir2/file_only_in_dir2\")\n    os.mkdir(\"dir1/dir_only_in_dir1\")",
        "detail": "mid-range.filecmp_mkexamples",
        "documentation": {}
    },
    {
        "label": "from_base",
        "kind": 5,
        "importPath": "mid-range.fileinput_change_subnet",
        "description": "mid-range.fileinput_change_subnet",
        "peekOfCode": "from_base = sys.argv[1]\nto_base = sys.argv[2]\nfiles = sys.argv[3:]\nfor line in fileinput.input(files, inplace=True):\n    line = line.rstrip().replace(from_base, to_base)\n    print(line)",
        "detail": "mid-range.fileinput_change_subnet",
        "documentation": {}
    },
    {
        "label": "to_base",
        "kind": 5,
        "importPath": "mid-range.fileinput_change_subnet",
        "description": "mid-range.fileinput_change_subnet",
        "peekOfCode": "to_base = sys.argv[2]\nfiles = sys.argv[3:]\nfor line in fileinput.input(files, inplace=True):\n    line = line.rstrip().replace(from_base, to_base)\n    print(line)",
        "detail": "mid-range.fileinput_change_subnet",
        "documentation": {}
    },
    {
        "label": "files",
        "kind": 5,
        "importPath": "mid-range.fileinput_change_subnet",
        "description": "mid-range.fileinput_change_subnet",
        "peekOfCode": "files = sys.argv[3:]\nfor line in fileinput.input(files, inplace=True):\n    line = line.rstrip().replace(from_base, to_base)\n    print(line)",
        "detail": "mid-range.fileinput_change_subnet",
        "documentation": {}
    },
    {
        "label": "from_base",
        "kind": 5,
        "importPath": "mid-range.fileinput_change_subnet_noisy",
        "description": "mid-range.fileinput_change_subnet_noisy",
        "peekOfCode": "from_base = sys.argv[1]\nto_base = sys.argv[2]\nfiles = sys.argv[3:]\nfor line in fileinput.input(files, inplace=True):\n    if fileinput.isfirstline():\n        sys.stderr.write(\"Started processing {}\\n\".format(fileinput.filename()))\n        sys.stderr.write(\"Directory contains: {}\\n\".format(glob.glob(\"etc_hosts.txt*\")))\n    line = line.rstrip().replace(from_base, to_base)\n    print(line)\nsys.stderr.write(\"Finished processing\\n\")",
        "detail": "mid-range.fileinput_change_subnet_noisy",
        "documentation": {}
    },
    {
        "label": "to_base",
        "kind": 5,
        "importPath": "mid-range.fileinput_change_subnet_noisy",
        "description": "mid-range.fileinput_change_subnet_noisy",
        "peekOfCode": "to_base = sys.argv[2]\nfiles = sys.argv[3:]\nfor line in fileinput.input(files, inplace=True):\n    if fileinput.isfirstline():\n        sys.stderr.write(\"Started processing {}\\n\".format(fileinput.filename()))\n        sys.stderr.write(\"Directory contains: {}\\n\".format(glob.glob(\"etc_hosts.txt*\")))\n    line = line.rstrip().replace(from_base, to_base)\n    print(line)\nsys.stderr.write(\"Finished processing\\n\")\nsys.stderr.write(\"Directory contains: {}\\n\".format(glob.glob(\"etc_hosts.txt*\")))",
        "detail": "mid-range.fileinput_change_subnet_noisy",
        "documentation": {}
    },
    {
        "label": "files",
        "kind": 5,
        "importPath": "mid-range.fileinput_change_subnet_noisy",
        "description": "mid-range.fileinput_change_subnet_noisy",
        "peekOfCode": "files = sys.argv[3:]\nfor line in fileinput.input(files, inplace=True):\n    if fileinput.isfirstline():\n        sys.stderr.write(\"Started processing {}\\n\".format(fileinput.filename()))\n        sys.stderr.write(\"Directory contains: {}\\n\".format(glob.glob(\"etc_hosts.txt*\")))\n    line = line.rstrip().replace(from_base, to_base)\n    print(line)\nsys.stderr.write(\"Finished processing\\n\")\nsys.stderr.write(\"Directory contains: {}\\n\".format(glob.glob(\"etc_hosts.txt*\")))",
        "detail": "mid-range.fileinput_change_subnet_noisy",
        "documentation": {}
    },
    {
        "label": "rss",
        "kind": 5,
        "importPath": "mid-range.fileinput_example",
        "description": "mid-range.fileinput_example",
        "peekOfCode": "rss = Element(\"rss\", {\"xmlns:dc\": \"http://purl.org/dc/elements/1.1/\", \"version\": \"2.0\"})\nchannel = SubElement(rss, \"channel\")\ntitle = SubElement(channel, \"title\")\ntitle.text = \"Sample podcast feed\"\ndesc = SubElement(channel, \"description\")\ndesc.text = \"Generated for PyMOTW\"\npubdate = SubElement(channel, \"pubDate\")\npubdate.text = time.asctime()\ngen = SubElement(channel, \"generator\")\ngen.text = \"https://pymotw.com/\"",
        "detail": "mid-range.fileinput_example",
        "documentation": {}
    },
    {
        "label": "channel",
        "kind": 5,
        "importPath": "mid-range.fileinput_example",
        "description": "mid-range.fileinput_example",
        "peekOfCode": "channel = SubElement(rss, \"channel\")\ntitle = SubElement(channel, \"title\")\ntitle.text = \"Sample podcast feed\"\ndesc = SubElement(channel, \"description\")\ndesc.text = \"Generated for PyMOTW\"\npubdate = SubElement(channel, \"pubDate\")\npubdate.text = time.asctime()\ngen = SubElement(channel, \"generator\")\ngen.text = \"https://pymotw.com/\"\nfor line in fileinput.input(sys.argv[1:]):",
        "detail": "mid-range.fileinput_example",
        "documentation": {}
    },
    {
        "label": "title",
        "kind": 5,
        "importPath": "mid-range.fileinput_example",
        "description": "mid-range.fileinput_example",
        "peekOfCode": "title = SubElement(channel, \"title\")\ntitle.text = \"Sample podcast feed\"\ndesc = SubElement(channel, \"description\")\ndesc.text = \"Generated for PyMOTW\"\npubdate = SubElement(channel, \"pubDate\")\npubdate.text = time.asctime()\ngen = SubElement(channel, \"generator\")\ngen.text = \"https://pymotw.com/\"\nfor line in fileinput.input(sys.argv[1:]):\n    mp3filename = line.strip()",
        "detail": "mid-range.fileinput_example",
        "documentation": {}
    },
    {
        "label": "title.text",
        "kind": 5,
        "importPath": "mid-range.fileinput_example",
        "description": "mid-range.fileinput_example",
        "peekOfCode": "title.text = \"Sample podcast feed\"\ndesc = SubElement(channel, \"description\")\ndesc.text = \"Generated for PyMOTW\"\npubdate = SubElement(channel, \"pubDate\")\npubdate.text = time.asctime()\ngen = SubElement(channel, \"generator\")\ngen.text = \"https://pymotw.com/\"\nfor line in fileinput.input(sys.argv[1:]):\n    mp3filename = line.strip()\n    if not mp3filename or mp3filename.startswith(\"#\"):",
        "detail": "mid-range.fileinput_example",
        "documentation": {}
    },
    {
        "label": "desc",
        "kind": 5,
        "importPath": "mid-range.fileinput_example",
        "description": "mid-range.fileinput_example",
        "peekOfCode": "desc = SubElement(channel, \"description\")\ndesc.text = \"Generated for PyMOTW\"\npubdate = SubElement(channel, \"pubDate\")\npubdate.text = time.asctime()\ngen = SubElement(channel, \"generator\")\ngen.text = \"https://pymotw.com/\"\nfor line in fileinput.input(sys.argv[1:]):\n    mp3filename = line.strip()\n    if not mp3filename or mp3filename.startswith(\"#\"):\n        continue",
        "detail": "mid-range.fileinput_example",
        "documentation": {}
    },
    {
        "label": "desc.text",
        "kind": 5,
        "importPath": "mid-range.fileinput_example",
        "description": "mid-range.fileinput_example",
        "peekOfCode": "desc.text = \"Generated for PyMOTW\"\npubdate = SubElement(channel, \"pubDate\")\npubdate.text = time.asctime()\ngen = SubElement(channel, \"generator\")\ngen.text = \"https://pymotw.com/\"\nfor line in fileinput.input(sys.argv[1:]):\n    mp3filename = line.strip()\n    if not mp3filename or mp3filename.startswith(\"#\"):\n        continue\n    item = SubElement(rss, \"item\")",
        "detail": "mid-range.fileinput_example",
        "documentation": {}
    },
    {
        "label": "pubdate",
        "kind": 5,
        "importPath": "mid-range.fileinput_example",
        "description": "mid-range.fileinput_example",
        "peekOfCode": "pubdate = SubElement(channel, \"pubDate\")\npubdate.text = time.asctime()\ngen = SubElement(channel, \"generator\")\ngen.text = \"https://pymotw.com/\"\nfor line in fileinput.input(sys.argv[1:]):\n    mp3filename = line.strip()\n    if not mp3filename or mp3filename.startswith(\"#\"):\n        continue\n    item = SubElement(rss, \"item\")\n    title = SubElement(item, \"title\")",
        "detail": "mid-range.fileinput_example",
        "documentation": {}
    },
    {
        "label": "pubdate.text",
        "kind": 5,
        "importPath": "mid-range.fileinput_example",
        "description": "mid-range.fileinput_example",
        "peekOfCode": "pubdate.text = time.asctime()\ngen = SubElement(channel, \"generator\")\ngen.text = \"https://pymotw.com/\"\nfor line in fileinput.input(sys.argv[1:]):\n    mp3filename = line.strip()\n    if not mp3filename or mp3filename.startswith(\"#\"):\n        continue\n    item = SubElement(rss, \"item\")\n    title = SubElement(item, \"title\")\n    title.text = mp3filename",
        "detail": "mid-range.fileinput_example",
        "documentation": {}
    },
    {
        "label": "gen",
        "kind": 5,
        "importPath": "mid-range.fileinput_example",
        "description": "mid-range.fileinput_example",
        "peekOfCode": "gen = SubElement(channel, \"generator\")\ngen.text = \"https://pymotw.com/\"\nfor line in fileinput.input(sys.argv[1:]):\n    mp3filename = line.strip()\n    if not mp3filename or mp3filename.startswith(\"#\"):\n        continue\n    item = SubElement(rss, \"item\")\n    title = SubElement(item, \"title\")\n    title.text = mp3filename\n    encl = SubElement(item, \"enclosure\", {\"type\": \"audio/mpeg\", \"url\": mp3filename})",
        "detail": "mid-range.fileinput_example",
        "documentation": {}
    },
    {
        "label": "gen.text",
        "kind": 5,
        "importPath": "mid-range.fileinput_example",
        "description": "mid-range.fileinput_example",
        "peekOfCode": "gen.text = \"https://pymotw.com/\"\nfor line in fileinput.input(sys.argv[1:]):\n    mp3filename = line.strip()\n    if not mp3filename or mp3filename.startswith(\"#\"):\n        continue\n    item = SubElement(rss, \"item\")\n    title = SubElement(item, \"title\")\n    title.text = mp3filename\n    encl = SubElement(item, \"enclosure\", {\"type\": \"audio/mpeg\", \"url\": mp3filename})\nrough_string = tostring(rss)",
        "detail": "mid-range.fileinput_example",
        "documentation": {}
    },
    {
        "label": "rough_string",
        "kind": 5,
        "importPath": "mid-range.fileinput_example",
        "description": "mid-range.fileinput_example",
        "peekOfCode": "rough_string = tostring(rss)\nreparsed = minidom.parseString(rough_string)\nprint(reparsed.toprettyxml(indent=\"  \"))",
        "detail": "mid-range.fileinput_example",
        "documentation": {}
    },
    {
        "label": "reparsed",
        "kind": 5,
        "importPath": "mid-range.fileinput_example",
        "description": "mid-range.fileinput_example",
        "peekOfCode": "reparsed = minidom.parseString(rough_string)\nprint(reparsed.toprettyxml(indent=\"  \"))",
        "detail": "mid-range.fileinput_example",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "mid-range.fileinput_grep",
        "description": "mid-range.fileinput_grep",
        "peekOfCode": "pattern = re.compile(sys.argv[1])\nfor line in fileinput.input(sys.argv[2:]):\n    if pattern.search(line):\n        if fileinput.isstdin():\n            fmt = \"{lineno}:{line}\"\n        else:\n            fmt = \"{filename}:{lineno}:{line}\"\n        print(\n            fmt.format(\n                filename=fileinput.filename(),",
        "detail": "mid-range.fileinput_grep",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "mid-range.fileio",
        "description": "mid-range.fileio",
        "peekOfCode": "file = open(\"foo.txt\", \"r\")\n# Print all the lines in the file\nprint(file.read())\n# Close the file\nfile.close()\n# Use open to open file \"bar.txt\" for writing\nfile = open(\"bar.txt\", \"w\")\n# Use the write() method to write three lines to the file\nlines = [\n    \"number one, the larch, the larch\\n\",",
        "detail": "mid-range.fileio",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "mid-range.fileio",
        "description": "mid-range.fileio",
        "peekOfCode": "file = open(\"bar.txt\", \"w\")\n# Use the write() method to write three lines to the file\nlines = [\n    \"number one, the larch, the larch\\n\",\n    \"number two, the larch, the larch\\n\",\n    \"number three, the larch, the larch\\n\",\n]\nfor line in lines:\n    file.write(line)\n# Close the file",
        "detail": "mid-range.fileio",
        "documentation": {}
    },
    {
        "label": "lines",
        "kind": 5,
        "importPath": "mid-range.fileio",
        "description": "mid-range.fileio",
        "peekOfCode": "lines = [\n    \"number one, the larch, the larch\\n\",\n    \"number two, the larch, the larch\\n\",\n    \"number three, the larch, the larch\\n\",\n]\nfor line in lines:\n    file.write(line)\n# Close the file\nfile.close()",
        "detail": "mid-range.fileio",
        "documentation": {}
    },
    {
        "label": "fileName",
        "kind": 5,
        "importPath": "mid-range.files",
        "description": "mid-range.files",
        "peekOfCode": "fileName = str(input(\"File name : \"))\nfileToRead = open(fileName, \"r\")  # 'r' reads the file\nprint(fileToRead.read())  # reading file\nfileToRead.close()  # closing the file",
        "detail": "mid-range.files",
        "documentation": {}
    },
    {
        "label": "fileToRead",
        "kind": 5,
        "importPath": "mid-range.files",
        "description": "mid-range.files",
        "peekOfCode": "fileToRead = open(fileName, \"r\")  # 'r' reads the file\nprint(fileToRead.read())  # reading file\nfileToRead.close()  # closing the file",
        "detail": "mid-range.files",
        "documentation": {}
    },
    {
        "label": "is_archive_file",
        "kind": 2,
        "importPath": "mid-range.filetypes",
        "description": "mid-range.filetypes",
        "peekOfCode": "def is_archive_file(name):\n    # type: (str) -> bool\n    \"\"\"Return True if `name` is a considered as an archive file.\"\"\"\n    ext = splitext(name)[1].lower()\n    if ext in ARCHIVE_EXTENSIONS:\n        return True\n    return False",
        "detail": "mid-range.filetypes",
        "documentation": {}
    },
    {
        "label": "WHEEL_EXTENSION",
        "kind": 5,
        "importPath": "mid-range.filetypes",
        "description": "mid-range.filetypes",
        "peekOfCode": "WHEEL_EXTENSION = \".whl\"\nBZ2_EXTENSIONS = (\".tar.bz2\", \".tbz\")  # type: Tuple[str, ...]\nXZ_EXTENSIONS = (\n    \".tar.xz\",\n    \".txz\",\n    \".tlz\",\n    \".tar.lz\",\n    \".tar.lzma\",\n)  # type: Tuple[str, ...]\nZIP_EXTENSIONS = (\".zip\", WHEEL_EXTENSION)  # type: Tuple[str, ...]",
        "detail": "mid-range.filetypes",
        "documentation": {}
    },
    {
        "label": "BZ2_EXTENSIONS",
        "kind": 5,
        "importPath": "mid-range.filetypes",
        "description": "mid-range.filetypes",
        "peekOfCode": "BZ2_EXTENSIONS = (\".tar.bz2\", \".tbz\")  # type: Tuple[str, ...]\nXZ_EXTENSIONS = (\n    \".tar.xz\",\n    \".txz\",\n    \".tlz\",\n    \".tar.lz\",\n    \".tar.lzma\",\n)  # type: Tuple[str, ...]\nZIP_EXTENSIONS = (\".zip\", WHEEL_EXTENSION)  # type: Tuple[str, ...]\nTAR_EXTENSIONS = (\".tar.gz\", \".tgz\", \".tar\")  # type: Tuple[str, ...]",
        "detail": "mid-range.filetypes",
        "documentation": {}
    },
    {
        "label": "XZ_EXTENSIONS",
        "kind": 5,
        "importPath": "mid-range.filetypes",
        "description": "mid-range.filetypes",
        "peekOfCode": "XZ_EXTENSIONS = (\n    \".tar.xz\",\n    \".txz\",\n    \".tlz\",\n    \".tar.lz\",\n    \".tar.lzma\",\n)  # type: Tuple[str, ...]\nZIP_EXTENSIONS = (\".zip\", WHEEL_EXTENSION)  # type: Tuple[str, ...]\nTAR_EXTENSIONS = (\".tar.gz\", \".tgz\", \".tar\")  # type: Tuple[str, ...]\nARCHIVE_EXTENSIONS = ZIP_EXTENSIONS + BZ2_EXTENSIONS + TAR_EXTENSIONS + XZ_EXTENSIONS",
        "detail": "mid-range.filetypes",
        "documentation": {}
    },
    {
        "label": "ZIP_EXTENSIONS",
        "kind": 5,
        "importPath": "mid-range.filetypes",
        "description": "mid-range.filetypes",
        "peekOfCode": "ZIP_EXTENSIONS = (\".zip\", WHEEL_EXTENSION)  # type: Tuple[str, ...]\nTAR_EXTENSIONS = (\".tar.gz\", \".tgz\", \".tar\")  # type: Tuple[str, ...]\nARCHIVE_EXTENSIONS = ZIP_EXTENSIONS + BZ2_EXTENSIONS + TAR_EXTENSIONS + XZ_EXTENSIONS\ndef is_archive_file(name):\n    # type: (str) -> bool\n    \"\"\"Return True if `name` is a considered as an archive file.\"\"\"\n    ext = splitext(name)[1].lower()\n    if ext in ARCHIVE_EXTENSIONS:\n        return True\n    return False",
        "detail": "mid-range.filetypes",
        "documentation": {}
    },
    {
        "label": "TAR_EXTENSIONS",
        "kind": 5,
        "importPath": "mid-range.filetypes",
        "description": "mid-range.filetypes",
        "peekOfCode": "TAR_EXTENSIONS = (\".tar.gz\", \".tgz\", \".tar\")  # type: Tuple[str, ...]\nARCHIVE_EXTENSIONS = ZIP_EXTENSIONS + BZ2_EXTENSIONS + TAR_EXTENSIONS + XZ_EXTENSIONS\ndef is_archive_file(name):\n    # type: (str) -> bool\n    \"\"\"Return True if `name` is a considered as an archive file.\"\"\"\n    ext = splitext(name)[1].lower()\n    if ext in ARCHIVE_EXTENSIONS:\n        return True\n    return False",
        "detail": "mid-range.filetypes",
        "documentation": {}
    },
    {
        "label": "ARCHIVE_EXTENSIONS",
        "kind": 5,
        "importPath": "mid-range.filetypes",
        "description": "mid-range.filetypes",
        "peekOfCode": "ARCHIVE_EXTENSIONS = ZIP_EXTENSIONS + BZ2_EXTENSIONS + TAR_EXTENSIONS + XZ_EXTENSIONS\ndef is_archive_file(name):\n    # type: (str) -> bool\n    \"\"\"Return True if `name` is a considered as an archive file.\"\"\"\n    ext = splitext(name)[1].lower()\n    if ext in ARCHIVE_EXTENSIONS:\n        return True\n    return False",
        "detail": "mid-range.filetypes",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "mid-range.file_downloader",
        "description": "mid-range.file_downloader",
        "peekOfCode": "url = input(\"Enter the url of the file you want to download: \")\nr = requests.get(url)\n# receives data from the url\nfile_size = int(r.headers[\"Content-Length\"])\nchunk_size = 256\n\"\"\"Chunk size is the\nnumber of bytes downloaded at a time\n\"\"\"\nr = requests.get(url, stream=True)\n\"\"\"streams=True ensures that",
        "detail": "mid-range.file_downloader",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "mid-range.file_downloader",
        "description": "mid-range.file_downloader",
        "peekOfCode": "r = requests.get(url)\n# receives data from the url\nfile_size = int(r.headers[\"Content-Length\"])\nchunk_size = 256\n\"\"\"Chunk size is the\nnumber of bytes downloaded at a time\n\"\"\"\nr = requests.get(url, stream=True)\n\"\"\"streams=True ensures that\nwill not get data at once, but will get data one by one",
        "detail": "mid-range.file_downloader",
        "documentation": {}
    },
    {
        "label": "file_size",
        "kind": 5,
        "importPath": "mid-range.file_downloader",
        "description": "mid-range.file_downloader",
        "peekOfCode": "file_size = int(r.headers[\"Content-Length\"])\nchunk_size = 256\n\"\"\"Chunk size is the\nnumber of bytes downloaded at a time\n\"\"\"\nr = requests.get(url, stream=True)\n\"\"\"streams=True ensures that\nwill not get data at once, but will get data one by one\n\"\"\"\nextension = (os.path.splitext(url))[-1]",
        "detail": "mid-range.file_downloader",
        "documentation": {}
    },
    {
        "label": "chunk_size",
        "kind": 5,
        "importPath": "mid-range.file_downloader",
        "description": "mid-range.file_downloader",
        "peekOfCode": "chunk_size = 256\n\"\"\"Chunk size is the\nnumber of bytes downloaded at a time\n\"\"\"\nr = requests.get(url, stream=True)\n\"\"\"streams=True ensures that\nwill not get data at once, but will get data one by one\n\"\"\"\nextension = (os.path.splitext(url))[-1]\nfile = \"file\" + extension",
        "detail": "mid-range.file_downloader",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "mid-range.file_downloader",
        "description": "mid-range.file_downloader",
        "peekOfCode": "r = requests.get(url, stream=True)\n\"\"\"streams=True ensures that\nwill not get data at once, but will get data one by one\n\"\"\"\nextension = (os.path.splitext(url))[-1]\nfile = \"file\" + extension\niterations = math.ceil(file_size / chunk_size)\nwith open(file, \"wb\") as file:\n    for chunk in tqdm(r.iter_content(chunk_size=chunk_size), total=iterations):\n        time.sleep(0.5)",
        "detail": "mid-range.file_downloader",
        "documentation": {}
    },
    {
        "label": "extension",
        "kind": 5,
        "importPath": "mid-range.file_downloader",
        "description": "mid-range.file_downloader",
        "peekOfCode": "extension = (os.path.splitext(url))[-1]\nfile = \"file\" + extension\niterations = math.ceil(file_size / chunk_size)\nwith open(file, \"wb\") as file:\n    for chunk in tqdm(r.iter_content(chunk_size=chunk_size), total=iterations):\n        time.sleep(0.5)\n        file.write(chunk)",
        "detail": "mid-range.file_downloader",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "mid-range.file_downloader",
        "description": "mid-range.file_downloader",
        "peekOfCode": "file = \"file\" + extension\niterations = math.ceil(file_size / chunk_size)\nwith open(file, \"wb\") as file:\n    for chunk in tqdm(r.iter_content(chunk_size=chunk_size), total=iterations):\n        time.sleep(0.5)\n        file.write(chunk)",
        "detail": "mid-range.file_downloader",
        "documentation": {}
    },
    {
        "label": "iterations",
        "kind": 5,
        "importPath": "mid-range.file_downloader",
        "description": "mid-range.file_downloader",
        "peekOfCode": "iterations = math.ceil(file_size / chunk_size)\nwith open(file, \"wb\") as file:\n    for chunk in tqdm(r.iter_content(chunk_size=chunk_size), total=iterations):\n        time.sleep(0.5)\n        file.write(chunk)",
        "detail": "mid-range.file_downloader",
        "documentation": {}
    },
    {
        "label": "FileIO",
        "kind": 6,
        "importPath": "mid-range.file_io",
        "description": "mid-range.file_io",
        "peekOfCode": "class FileIO:\n    def __init__(self, path: Union[os.PathLike, str]):\n        if isinstance(path, str):\n            path = Path(path)\n        self.path = path\n    def read(self):  # Returns bytes/str\n        # We would like to read unicode here, but we cannot, because we are not\n        # sure if it is a valid unicode file. Therefore just read whatever is\n        # here.\n        with open(self.path, \"rb\") as f:",
        "detail": "mid-range.file_io",
        "documentation": {}
    },
    {
        "label": "KnownContentFileIO",
        "kind": 6,
        "importPath": "mid-range.file_io",
        "description": "mid-range.file_io",
        "peekOfCode": "class KnownContentFileIO(FileIO):\n    def __init__(self, path, content):\n        super().__init__(path)\n        self._content = content\n    def read(self):\n        return self._content",
        "detail": "mid-range.file_io",
        "documentation": {}
    },
    {
        "label": "fileNaming",
        "kind": 2,
        "importPath": "mid-range.file_naming",
        "description": "mid-range.file_naming",
        "peekOfCode": "def fileNaming(names):\n    \"\"\"\n    Since two files cannot have equal names, \n    the one which comes later will have an addition \n    to its name in a form of (k), where k is the smallest \n    positive integer such that the obtained name is not \n    used yet. Return an array of names that will be given \n    to the files.\n    \"\"\"\n    new_file_names = []",
        "detail": "mid-range.file_naming",
        "documentation": {}
    },
    {
        "label": "filename",
        "kind": 5,
        "importPath": "mid-range.file_to_string",
        "description": "mid-range.file_to_string",
        "peekOfCode": "filename = sys.argv[1]\n# These do not remove \\n\nwith open(filename) as f:\n    s = \"\".join(f.readlines())\nwith open(filename) as f:\n    s = \"\".join(f)\nwith open(filename) as f:\n    s = f.read()  # Fastest according to my tests.\n# These remove \\n\nwith open(filename) as f:",
        "detail": "mid-range.file_to_string",
        "documentation": {}
    },
    {
        "label": "create_socket",
        "kind": 2,
        "importPath": "mid-range.file_transfer_client",
        "description": "mid-range.file_transfer_client",
        "peekOfCode": "def create_socket():\n    try:\n        global host\n        global port\n        global s\n        host = \"192.168.29.185\"  # ip of the server\n        port = 2110  # port no through which communication will take place\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # creating a socket\n    except socket.error as msg:  # error message in case a socket can't be created\n        print(\"Socket Creation Error:\" + str(msg))",
        "detail": "mid-range.file_transfer_client",
        "documentation": {}
    },
    {
        "label": "socket_connect",
        "kind": 2,
        "importPath": "mid-range.file_transfer_client",
        "description": "mid-range.file_transfer_client",
        "peekOfCode": "def socket_connect():\n    global host\n    global port\n    global s\n    s.connect((host, port))  # connecting to the socket\ndef send_receive():\n    file = open(\"data.txt\", \"r\")  # opening the file in read mode\n    data = file.read()  # reading the data of the file\n    s.send(\"data.txt\".encode(\"utf-8\"))  # encoding and sending the name of the file\n    s.send(data.encode(\"utf-8\"))  # encoding and sending the data of the file",
        "detail": "mid-range.file_transfer_client",
        "documentation": {}
    },
    {
        "label": "send_receive",
        "kind": 2,
        "importPath": "mid-range.file_transfer_client",
        "description": "mid-range.file_transfer_client",
        "peekOfCode": "def send_receive():\n    file = open(\"data.txt\", \"r\")  # opening the file in read mode\n    data = file.read()  # reading the data of the file\n    s.send(\"data.txt\".encode(\"utf-8\"))  # encoding and sending the name of the file\n    s.send(data.encode(\"utf-8\"))  # encoding and sending the data of the file\n    msg = s.recv(1024).decode(\n        \"utf-8\"\n    )  # receiving if the file has received by the server\n    print(\"Response:\" + msg)\n    file.close()  # closing the file",
        "detail": "mid-range.file_transfer_client",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.file_transfer_client",
        "description": "mid-range.file_transfer_client",
        "peekOfCode": "def main():\n    create_socket()\n    socket_connect()\n    send_receive()\nmain()",
        "detail": "mid-range.file_transfer_client",
        "documentation": {}
    },
    {
        "label": "create_socket",
        "kind": 2,
        "importPath": "mid-range.file_transfer_server",
        "description": "mid-range.file_transfer_server",
        "peekOfCode": "def create_socket():\n    try:\n        global host\n        global port\n        global s\n        host = \"\"\n        port = 2110  # port no through which communication will take place\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # creating a socket\n    except socket.error as msg:\n        print(",
        "detail": "mid-range.file_transfer_server",
        "documentation": {}
    },
    {
        "label": "bind_socket",
        "kind": 2,
        "importPath": "mid-range.file_transfer_server",
        "description": "mid-range.file_transfer_server",
        "peekOfCode": "def bind_socket():\n    try:\n        global host\n        global port\n        global s\n        print(\"Binding with port:\" + str(port))\n        s.bind((host, port))  # to bind with the port\n        s.listen(5)  # to listen to the client for information\n    except socket.error as msg:  # error in case the socket could not be binded\n        print(\"Socket Binding error:\" + str(msg))",
        "detail": "mid-range.file_transfer_server",
        "documentation": {}
    },
    {
        "label": "socket_accept",
        "kind": 2,
        "importPath": "mid-range.file_transfer_server",
        "description": "mid-range.file_transfer_server",
        "peekOfCode": "def socket_accept():\n    while True:\n        clt_soc, add = s.accept()  # to accept the client socket and address\n        # print the I/P and port no through which communication has been established\n        print(\n            \"Connection has been established:IP.......\"\n            + add[0]\n            + \" and Port:\"\n            + str(add[-1])\n        )",
        "detail": "mid-range.file_transfer_server",
        "documentation": {}
    },
    {
        "label": "receive_file",
        "kind": 2,
        "importPath": "mid-range.file_transfer_server",
        "description": "mid-range.file_transfer_server",
        "peekOfCode": "def receive_file(clt_soc):\n    filename = clt_soc.recv(1024).decode(\"utf-8\")  # to receive file name and decode it\n    file = open(\n        filename, \"w\"\n    )  # to open a file with the received filename in write mode\n    print(filename)  # to print the file name\n    data = clt_soc.recv(1024).decode(\"utf-8\")  # to receive the data of the file\n    file.write(data)  # to write the contents of the file in the new file\n    clt_soc.send(\n        \"File received.\".encode(\"utf-8\")",
        "detail": "mid-range.file_transfer_server",
        "documentation": {}
    },
    {
        "label": "include",
        "kind": 2,
        "importPath": "mid-range.filters",
        "description": "mid-range.filters",
        "peekOfCode": "def include(*what):\n    \"\"\"\n    Whitelist *what*.\n    :param what: What to whitelist.\n    :type what: `list` of `type` or `attr.Attribute`\\\\ s\n    :rtype: `callable`\n    \"\"\"\n    cls, attrs = _split_what(what)\n    def include_(attribute, value):\n        return value.__class__ in cls or attribute in attrs",
        "detail": "mid-range.filters",
        "documentation": {}
    },
    {
        "label": "exclude",
        "kind": 2,
        "importPath": "mid-range.filters",
        "description": "mid-range.filters",
        "peekOfCode": "def exclude(*what):\n    \"\"\"\n    Blacklist *what*.\n    :param what: What to blacklist.\n    :type what: `list` of classes or `attr.Attribute`\\\\ s.\n    :rtype: `callable`\n    \"\"\"\n    cls, attrs = _split_what(what)\n    def exclude_(attribute, value):\n        return value.__class__ not in cls and attribute not in attrs",
        "detail": "mid-range.filters",
        "documentation": {}
    },
    {
        "label": "resolve_references",
        "kind": 2,
        "importPath": "mid-range.filter_links",
        "description": "mid-range.filter_links",
        "peekOfCode": "def resolve_references(source):\n    \"\"\"\n    This applies the resolve_one_reference to the text passed in via the source argument.\n    This expects content in the form of a string encoded JSON object as represented\n    internally in ``pandoc``.\n    \"\"\"\n    return applyJSONFilters([resolve_one_reference], source)\ndef resolve_one_reference(key, val, fmt, meta):\n    \"\"\"\n    This takes a tuple of arguments that are compatible with ``pandocfilters.walk()`` that",
        "detail": "mid-range.filter_links",
        "documentation": {}
    },
    {
        "label": "resolve_one_reference",
        "kind": 2,
        "importPath": "mid-range.filter_links",
        "description": "mid-range.filter_links",
        "peekOfCode": "def resolve_one_reference(key, val, fmt, meta):\n    \"\"\"\n    This takes a tuple of arguments that are compatible with ``pandocfilters.walk()`` that\n    allows identifying hyperlinks in the document and transforms them into valid LaTeX \n    \\\\hyperref{} calls so that linking to headers between cells is possible.\n    See the documentation in ``pandocfilters.walk()`` for further information on the meaning\n    and specification of ``key``, ``val``, ``fmt``, and ``meta``. \n    \"\"\"\n    if key == \"Link\":\n        text = stringify(val[1])",
        "detail": "mid-range.filter_links",
        "documentation": {}
    },
    {
        "label": "findDuplicate",
        "kind": 2,
        "importPath": "mid-range.Find the Duplicate Number",
        "description": "mid-range.Find the Duplicate Number",
        "peekOfCode": "def findDuplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] == arr[i + 1]:\n            return arr[i]\n        else:\n            pass\narr = [1, 3, 4, 2, 2]\nprint(findDuplicate(arr))",
        "detail": "mid-range.Find the Duplicate Number",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.Find the Duplicate Number",
        "description": "mid-range.Find the Duplicate Number",
        "peekOfCode": "arr = [1, 3, 4, 2, 2]\nprint(findDuplicate(arr))",
        "detail": "mid-range.Find the Duplicate Number",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "mid-range.Find-A-Pair-With-Given-Target",
        "description": "mid-range.Find-A-Pair-With-Given-Target",
        "peekOfCode": "class Node:\n    def __init__(self, val):\n        self.right = None\n        self.data = val\n        self.left = None\n\"\"\"\n# root : the root Node of the given BST\n# target : the target sum\ndef isPairPresent(root, target):\n    # code here.",
        "detail": "mid-range.Find-A-Pair-With-Given-Target",
        "documentation": {}
    },
    {
        "label": "isPairPresent",
        "kind": 2,
        "importPath": "mid-range.Find-A-Pair-With-Given-Target",
        "description": "mid-range.Find-A-Pair-With-Given-Target",
        "peekOfCode": "def isPairPresent(root, target):\n    # code here.\n    inorderArr = set()\n    def inorder(node):\n        if node:\n            inorder(node.left)\n            inorderArr.add(node.data)\n            inorder(node.right)\n    inorder(root)\n    for i in inorderArr:",
        "detail": "mid-range.Find-A-Pair-With-Given-Target",
        "documentation": {}
    },
    {
        "label": "count_substring",
        "kind": 2,
        "importPath": "mid-range.Find-a-String",
        "description": "mid-range.Find-a-String",
        "peekOfCode": "def count_substring(string, sub_string):\n    c = 0\n    for i in range(0, len(string) - len(sub_string) + 1):\n        if string[i : i + len(sub_string)] == sub_string:\n            c += 1\n    return c\nif __name__ == \"__main__\":\n    string = input().strip()\n    sub_string = input().strip()\n    count = count_substring(string, sub_string)",
        "detail": "mid-range.Find-a-String",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Find-Botton-Left-Tree-Value",
        "description": "mid-range.Find-Botton-Left-Tree-Value",
        "peekOfCode": "class Solution:\n    def findBottomLeftValue(self, root: TreeNode) -> int:\n        queue = deque([root])\n        visited = set()\n        while queue:\n            size = len(queue)\n            leftmost = math.inf\n            for i in range(size):\n                node = queue.popleft()\n                if leftmost == math.inf:",
        "detail": "mid-range.Find-Botton-Left-Tree-Value",
        "documentation": {}
    },
    {
        "label": "duplicates",
        "kind": 2,
        "importPath": "mid-range.Find-Duplicates",
        "description": "mid-range.Find-Duplicates",
        "peekOfCode": "def duplicates(arr, n):\n    # code here\n    duplicates = []\n    for i in range(n):\n        arr[arr[i] % n] += n\n    for i in range(n):\n        if (arr[i] / n) >= 2:\n            duplicates.append(i)\n    duplicates.sort()\n    return duplicates if duplicates else [-1]",
        "detail": "mid-range.Find-Duplicates",
        "documentation": {}
    },
    {
        "label": "get_file_names",
        "kind": 2,
        "importPath": "mid-range.find-files-recursively",
        "description": "mid-range.find-files-recursively",
        "peekOfCode": "def get_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                # matches.append(os.path.join(root, filename))  # full path\n                matches.append(os.path.join(filename))  # just file name\n        if matches:\n            print(\"Found {} files:\".format(len(matches)))\n            output_files(matches)",
        "detail": "mid-range.find-files-recursively",
        "documentation": {}
    },
    {
        "label": "output_files",
        "kind": 2,
        "importPath": "mid-range.find-files-recursively",
        "description": "mid-range.find-files-recursively",
        "peekOfCode": "def output_files(list_of_files):\n    for filename in list_of_files:\n        print(filename)\nif __name__ == \"__main__\":\n    get_file_names(PATH, PATTERN)",
        "detail": "mid-range.find-files-recursively",
        "documentation": {}
    },
    {
        "label": "PATH",
        "kind": 5,
        "importPath": "mid-range.find-files-recursively",
        "description": "mid-range.find-files-recursively",
        "peekOfCode": "PATH = \"./\"\nPATTERN = \"*.md\"\ndef get_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                # matches.append(os.path.join(root, filename))  # full path\n                matches.append(os.path.join(filename))  # just file name\n        if matches:",
        "detail": "mid-range.find-files-recursively",
        "documentation": {}
    },
    {
        "label": "PATTERN",
        "kind": 5,
        "importPath": "mid-range.find-files-recursively",
        "description": "mid-range.find-files-recursively",
        "peekOfCode": "PATTERN = \"*.md\"\ndef get_file_names(filepath, pattern):\n    matches = []\n    if os.path.exists(filepath):\n        for root, dirnames, filenames in os.walk(filepath):\n            for filename in fnmatch.filter(filenames, pattern):\n                # matches.append(os.path.join(root, filename))  # full path\n                matches.append(os.path.join(filename))  # just file name\n        if matches:\n            print(\"Found {} files:\".format(len(matches)))",
        "detail": "mid-range.find-files-recursively",
        "documentation": {}
    },
    {
        "label": "help",
        "kind": 2,
        "importPath": "mid-range.find-in-file",
        "description": "mid-range.find-in-file",
        "peekOfCode": "def help():\n    print(f\"Syntax: {basename(argv[0])} (-i|-v|-h)\")\n    print(\"\\t-i:\\tCase insensitive search.\")\n    print(\"\\t-v:\\tVerbose.\")\n    print(\"\\t-h:\\tHelp.\")\ndef green(text):\n    return \"\\33[32m\" + text + \"\\33[0m\"\ndef main():\n    # configure extension\n    ext = input(\"Extensions: [c|cpp] \")",
        "detail": "mid-range.find-in-file",
        "documentation": {}
    },
    {
        "label": "green",
        "kind": 2,
        "importPath": "mid-range.find-in-file",
        "description": "mid-range.find-in-file",
        "peekOfCode": "def green(text):\n    return \"\\33[32m\" + text + \"\\33[0m\"\ndef main():\n    # configure extension\n    ext = input(\"Extensions: [c|cpp] \")\n    if ext == \"\":\n        ext = \"c|cpp\"\n    elif ext.startswith(\"[\") and ext.endswith(\"]\"):\n        ext.strip(\"[]\")\n    elif ext.startswith(\"(\") and ext.endswith(\")\"):",
        "detail": "mid-range.find-in-file",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.find-in-file",
        "description": "mid-range.find-in-file",
        "peekOfCode": "def main():\n    # configure extension\n    ext = input(\"Extensions: [c|cpp] \")\n    if ext == \"\":\n        ext = \"c|cpp\"\n    elif ext.startswith(\"[\") and ext.endswith(\"]\"):\n        ext.strip(\"[]\")\n    elif ext.startswith(\"(\") and ext.endswith(\")\"):\n        ext.strip(\"()\")\n    r = run(",
        "detail": "mid-range.find-in-file",
        "documentation": {}
    },
    {
        "label": "VERBOSE",
        "kind": 5,
        "importPath": "mid-range.find-in-file",
        "description": "mid-range.find-in-file",
        "peekOfCode": "VERBOSE = False\nINSENSITIVE = False\ndef help():\n    print(f\"Syntax: {basename(argv[0])} (-i|-v|-h)\")\n    print(\"\\t-i:\\tCase insensitive search.\")\n    print(\"\\t-v:\\tVerbose.\")\n    print(\"\\t-h:\\tHelp.\")\ndef green(text):\n    return \"\\33[32m\" + text + \"\\33[0m\"\ndef main():",
        "detail": "mid-range.find-in-file",
        "documentation": {}
    },
    {
        "label": "INSENSITIVE",
        "kind": 5,
        "importPath": "mid-range.find-in-file",
        "description": "mid-range.find-in-file",
        "peekOfCode": "INSENSITIVE = False\ndef help():\n    print(f\"Syntax: {basename(argv[0])} (-i|-v|-h)\")\n    print(\"\\t-i:\\tCase insensitive search.\")\n    print(\"\\t-v:\\tVerbose.\")\n    print(\"\\t-h:\\tHelp.\")\ndef green(text):\n    return \"\\33[32m\" + text + \"\\33[0m\"\ndef main():\n    # configure extension",
        "detail": "mid-range.find-in-file",
        "documentation": {}
    },
    {
        "label": "difference_set",
        "kind": 2,
        "importPath": "mid-range.find-missing-element",
        "description": "mid-range.find-missing-element",
        "peekOfCode": "def difference_set(orig, shuffled):\n    \"\"\"finds the missing element using a set.\"\"\"\n    return set(orig).difference(set(shuffled)).pop()\ndef difference_iterative(orig, shuffled):\n    \"\"\"finds the missing element by iterating over the list\"\"\"\n    for x in orig:\n        if not x in shuffled:\n            return x",
        "detail": "mid-range.find-missing-element",
        "documentation": {}
    },
    {
        "label": "difference_iterative",
        "kind": 2,
        "importPath": "mid-range.find-missing-element",
        "description": "mid-range.find-missing-element",
        "peekOfCode": "def difference_iterative(orig, shuffled):\n    \"\"\"finds the missing element by iterating over the list\"\"\"\n    for x in orig:\n        if not x in shuffled:\n            return x",
        "detail": "mid-range.find-missing-element",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Find-Swap-Values",
        "description": "mid-range.Find-Swap-Values",
        "peekOfCode": "class Solution:\n    def findSwapValues(self, a, n, b, m):\n        # Your code goes here\n        sa = sum(a)\n        sb = sum(b)\n        itb = iter(b)\n        b = dict(zip(itb, itb))\n        for i in a:\n            if ((sb - sa + 2 * i) / 2) in b:\n                return 1",
        "detail": "mid-range.Find-Swap-Values",
        "documentation": {}
    },
    {
        "label": "balance",
        "kind": 2,
        "importPath": "mid-range.find-the-median-in-the-stream",
        "description": "mid-range.find-the-median-in-the-stream",
        "peekOfCode": "def balance(minh, maxh):\n    while abs(len(minh) - len(maxh)) > 1:\n        if len(minh) > len(maxh):\n            heapq.heappush(maxh, -heapq.heappop(minh))\n        else:\n            heapq.heappush(minh, -heapq.heappop(maxh))\ndef main():\n    N = int(input())\n    i = int(input())\n    minh = []",
        "detail": "mid-range.find-the-median-in-the-stream",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.find-the-median-in-the-stream",
        "description": "mid-range.find-the-median-in-the-stream",
        "peekOfCode": "def main():\n    N = int(input())\n    i = int(input())\n    minh = []\n    maxh = [-i]\n    print(i)\n    for _ in range(N - 1):\n        inp = int(input())\n        if inp < (-1 * maxh[0]):\n            heapq.heappush(maxh, -1 * inp)",
        "detail": "mid-range.find-the-median-in-the-stream",
        "documentation": {}
    },
    {
        "label": "findMergeNode",
        "kind": 2,
        "importPath": "mid-range.Find-The-Merge-Point-of-Two-Lists",
        "description": "mid-range.Find-The-Merge-Point-of-Two-Lists",
        "peekOfCode": "def findMergeNode(head1, head2):\n    ptr1 = head1\n    ptr2 = head2\n    while ptr1 != ptr2:\n        if ptr1.next == None:\n            ptr1 = head2\n        else:\n            ptr1 = ptr1.next\n        if ptr2.next == None:\n            ptr2 = head1",
        "detail": "mid-range.Find-The-Merge-Point-of-Two-Lists",
        "documentation": {}
    },
    {
        "label": "csFindAddedLetter",
        "kind": 2,
        "importPath": "mid-range.findAddedLetter",
        "description": "mid-range.findAddedLetter",
        "peekOfCode": "def csFindAddedLetter(str_1, str_2):\n    m1 = {}\n    for i in str_2:\n        if i in m1:\n            m1[i] += 1\n        else:\n            m1[i] = 1\n    for i in str_1:\n        m1[i] -= 1\n    for h1 in m1:",
        "detail": "mid-range.findAddedLetter",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.FindDuplicateSubTrees",
        "description": "mid-range.FindDuplicateSubTrees",
        "peekOfCode": "class Solution:\n    def findDuplicateSubtrees(self, root: TreeNode) -> List[TreeNode]:\n        tree = collections.defaultdict()\n        tree.default_factory = tree.__len__\n        c = collections.Counter()\n        anslist = []\n        def find(node):\n            if node:\n                tid = tree[node.val, find(node.left), find(node.right)]\n                c[tid] += 1",
        "detail": "mid-range.FindDuplicateSubTrees",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "kind": 2,
        "importPath": "mid-range.finder",
        "description": "mid-range.finder",
        "peekOfCode": "def send_mail(email, password, message):\n    server = smtplib.SMTP(\"smtp.gmail.com\", 587)\n    server.starttls()\n    server.login(email, password)\n    server.sendmail(email, email, message)\n    server.quit()\nemail = input(\"[+] Enter Email on which you want to recieve WIFI passwords: \")\nprint(\"[-] please enable -less secured apps-  to recieve an email\")\npassword = input(\"[+] Enter Password : \")\nlisti = []",
        "detail": "mid-range.finder",
        "documentation": {}
    },
    {
        "label": "email",
        "kind": 5,
        "importPath": "mid-range.finder",
        "description": "mid-range.finder",
        "peekOfCode": "email = input(\"[+] Enter Email on which you want to recieve WIFI passwords: \")\nprint(\"[-] please enable -less secured apps-  to recieve an email\")\npassword = input(\"[+] Enter Password : \")\nlisti = []\ndata = (\n    subprocess.check_output([\"netsh\", \"wlan\", \"show\", \"profiles\"])\n    .decode(\"utf-8\")\n    .split(\"\\n\")\n)\nprofiles = [i.split(\":\")[1][1:-1] for i in data if \"All User Profile\" in i]",
        "detail": "mid-range.finder",
        "documentation": {}
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "mid-range.finder",
        "description": "mid-range.finder",
        "peekOfCode": "password = input(\"[+] Enter Password : \")\nlisti = []\ndata = (\n    subprocess.check_output([\"netsh\", \"wlan\", \"show\", \"profiles\"])\n    .decode(\"utf-8\")\n    .split(\"\\n\")\n)\nprofiles = [i.split(\":\")[1][1:-1] for i in data if \"All User Profile\" in i]\nfor i in profiles:\n    results = (",
        "detail": "mid-range.finder",
        "documentation": {}
    },
    {
        "label": "listi",
        "kind": 5,
        "importPath": "mid-range.finder",
        "description": "mid-range.finder",
        "peekOfCode": "listi = []\ndata = (\n    subprocess.check_output([\"netsh\", \"wlan\", \"show\", \"profiles\"])\n    .decode(\"utf-8\")\n    .split(\"\\n\")\n)\nprofiles = [i.split(\":\")[1][1:-1] for i in data if \"All User Profile\" in i]\nfor i in profiles:\n    results = (\n        subprocess.check_output([\"netsh\", \"wlan\", \"show\", \"profile\", i, \"key=clear\"])",
        "detail": "mid-range.finder",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.finder",
        "description": "mid-range.finder",
        "peekOfCode": "data = (\n    subprocess.check_output([\"netsh\", \"wlan\", \"show\", \"profiles\"])\n    .decode(\"utf-8\")\n    .split(\"\\n\")\n)\nprofiles = [i.split(\":\")[1][1:-1] for i in data if \"All User Profile\" in i]\nfor i in profiles:\n    results = (\n        subprocess.check_output([\"netsh\", \"wlan\", \"show\", \"profile\", i, \"key=clear\"])\n        .decode(\"utf-8\")",
        "detail": "mid-range.finder",
        "documentation": {}
    },
    {
        "label": "profiles",
        "kind": 5,
        "importPath": "mid-range.finder",
        "description": "mid-range.finder",
        "peekOfCode": "profiles = [i.split(\":\")[1][1:-1] for i in data if \"All User Profile\" in i]\nfor i in profiles:\n    results = (\n        subprocess.check_output([\"netsh\", \"wlan\", \"show\", \"profile\", i, \"key=clear\"])\n        .decode(\"utf-8\")\n        .split(\"\\n\")\n    )\n    results = [b.split(\":\")[1][1:-1] for b in results if \"Key Content\" in b]\n    try:\n        listi.append((\"{:<30}|  {:<}\".format(i, results[0])))",
        "detail": "mid-range.finder",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "mid-range.finder",
        "description": "mid-range.finder",
        "peekOfCode": "res = \"\"\nfor msg in listi:\n    res = res + msg + \"\\n\"\n# print(res)\ntry:\n    send_mail(email, password, res)\n    print(\"[+] email successfully sent\\n\")\nexcept smtplib.SMTPAuthenticationError:\n    print(\"[+] Incorrect Email or Password\")",
        "detail": "mid-range.finder",
        "documentation": {}
    },
    {
        "label": "SOE",
        "kind": 2,
        "importPath": "mid-range.FindingPrimes",
        "description": "mid-range.FindingPrimes",
        "peekOfCode": "def SOE(n):\n    check = round(sqrt(n))  # Need not check for multiples past the square root of n\n    sieve = [\n        False if i < 2 else True for i in range(n + 1)\n    ]  # Set every index to False except for index 0 and 1\n    for i in range(2, check):\n        if sieve[i] == True:  # If i is a prime\n            for j in range(\n                i + i, n + 1, i\n            ):  # Step through the list in increments of i(the multiples of the prime)",
        "detail": "mid-range.FindingPrimes",
        "documentation": {}
    },
    {
        "label": "computeBridges",
        "kind": 2,
        "importPath": "mid-range.finding_bridges",
        "description": "mid-range.finding_bridges",
        "peekOfCode": "def computeBridges(graph):\n    id = 0\n    n = len(graph)  # No of vertices in graph\n    low = [0] * n\n    visited = [False] * n\n    def dfs(at, parent, bridges, id):\n        visited[at] = True\n        low[at] = id\n        id += 1\n        for to in graph[at]:",
        "detail": "mid-range.finding_bridges",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "mid-range.finding_bridges",
        "description": "mid-range.finding_bridges",
        "peekOfCode": "graph = {\n    0: [1, 2],\n    1: [0, 2],\n    2: [0, 1, 3, 5],\n    3: [2, 4],\n    4: [3],\n    5: [2, 6, 8],\n    6: [5, 7],\n    7: [6, 8],\n    8: [5, 7],",
        "detail": "mid-range.finding_bridges",
        "documentation": {}
    },
    {
        "label": "findLcm",
        "kind": 2,
        "importPath": "mid-range.findLcm",
        "description": "mid-range.findLcm",
        "peekOfCode": "def findLcm(i, v):\n    if i > v:\n        x = i\n    else:\n        x = v\n    while True:\n        if (x % i == 0) and (x % v == 0):\n            lcm = x\n            return x\n            break",
        "detail": "mid-range.findLcm",
        "documentation": {}
    },
    {
        "label": "findAdjacentCells",
        "kind": 2,
        "importPath": "mid-range.findPathInMatrix",
        "description": "mid-range.findPathInMatrix",
        "peekOfCode": "def findAdjacentCells(i, j, n, m):\n    l = []\n    if i > 0:\n        l += [(i - 1, j)]\n    if i < (n - 1):\n        l += [(i + 1, j)]\n    if j > 0:\n        l += [(i, j - 1)]\n    if j < m - 1:\n        l += [(i, j + 1)]",
        "detail": "mid-range.findPathInMatrix",
        "documentation": {}
    },
    {
        "label": "findPath",
        "kind": 2,
        "importPath": "mid-range.findPathInMatrix",
        "description": "mid-range.findPathInMatrix",
        "peekOfCode": "def findPath(matrix):\n    starti = -1\n    startj = -1\n    found = False\n    for i in range(len(matrix)):\n        if found:\n            break\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == 1:\n                starti, startj = i, j",
        "detail": "mid-range.findPathInMatrix",
        "documentation": {}
    },
    {
        "label": "findProfession",
        "kind": 2,
        "importPath": "mid-range.findProfession",
        "description": "mid-range.findProfession",
        "peekOfCode": "def findProfession(level, pos):\n    # Base case\n    if level == 1:\n        return \"Engineer\"\n    # Recursively find parent's profession. If parent\n    # is a doctar, this node will be a doctal if it is\n    # at odd position and an engineer if at even position\n    if findProfession(level - 1, (pos + 1) // 2) == \"Doctor\":\n        if pos % 2:\n            return \"Doctor\"",
        "detail": "mid-range.findProfession",
        "documentation": {}
    },
    {
        "label": "csFindTheSingleNumber",
        "kind": 2,
        "importPath": "mid-range.findTheSingleNumber",
        "description": "mid-range.findTheSingleNumber",
        "peekOfCode": "def csFindTheSingleNumber(nums):\n    frequency = Counter(nums)\n    for i in frequency:\n        if frequency[i] == 1:\n            return i",
        "detail": "mid-range.findTheSingleNumber",
        "documentation": {}
    },
    {
        "label": "binarySearch",
        "kind": 2,
        "importPath": "mid-range.findValueInShiftedArray",
        "description": "mid-range.findValueInShiftedArray",
        "peekOfCode": "def binarySearch(arr, key):\n    min = 0\n    max = len(arr) - 1\n    while not max < min:\n        guess = (max + min) // 2\n        if key == arr[guess]:\n            return arr[guess]\n        elif key > arr[guess]:\n            min = guess + 1\n        else:",
        "detail": "mid-range.findValueInShiftedArray",
        "documentation": {}
    },
    {
        "label": "findValueSortedShiftedArray",
        "kind": 2,
        "importPath": "mid-range.findValueInShiftedArray",
        "description": "mid-range.findValueInShiftedArray",
        "peekOfCode": "def findValueSortedShiftedArray(nums, target):\n    pivot = 3\n    if nums[pivot] == target:\n        return pivot\n    if nums[pivot] >= target:\n        value = binarySearch(nums[pivot + 1 :], target)\n        print(value)\n        if value == target:\n            return nums.index(value)",
        "detail": "mid-range.findValueInShiftedArray",
        "documentation": {}
    },
    {
        "label": "bussiest_interval",
        "kind": 2,
        "importPath": "mid-range.find_busiest_interval",
        "description": "mid-range.find_busiest_interval",
        "peekOfCode": "def bussiest_interval(arriving, leaving):\n    # sort both arrays (don't care about pairs)\n    arriving.sort()\n    leaving.sort()\n    n = len(arriving)\n    i, j = 0, 0\n    start, end = 0, 0\n    overlapping = 0\n    max_overlapping = 0\n    # both arrays have same number of elements",
        "detail": "mid-range.find_busiest_interval",
        "documentation": {}
    },
    {
        "label": "find_cube_root",
        "kind": 2,
        "importPath": "mid-range.find_cube_root",
        "description": "mid-range.find_cube_root",
        "peekOfCode": "def find_cube_root(x):\n    if type(x) == str:\n        return \"Expected an integer! Cannot find cube root of an string!\"\n    for i in range(0, x):\n        if i ** 3 == x:\n            return i\n    return \"{} is not a perfect cube\".format(x)\n# Test\nx = 27\nresult = find_cube_root(x)",
        "detail": "mid-range.find_cube_root",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.find_cube_root",
        "description": "mid-range.find_cube_root",
        "peekOfCode": "x = 27\nresult = find_cube_root(x)\nprint(\"Cube root of {} is {}\".format(x, result))",
        "detail": "mid-range.find_cube_root",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "mid-range.find_cube_root",
        "description": "mid-range.find_cube_root",
        "peekOfCode": "result = find_cube_root(x)\nprint(\"Cube root of {} is {}\".format(x, result))",
        "detail": "mid-range.find_cube_root",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Find_Difference_Two_String",
        "description": "mid-range.Find_Difference_Two_String",
        "peekOfCode": "class Solution:\n    def findTheDifference(self, s, t):\n        if not s:\n            return t\n        c = ord(s[0])\n        for i in s[1:]:\n            c = c ^ ord(i)\n        for j in t:\n            c = c ^ ord(j)\n        return chr(c)",
        "detail": "mid-range.Find_Difference_Two_String",
        "documentation": {}
    },
    {
        "label": "search_range",
        "kind": 2,
        "importPath": "mid-range.find_element_range_sorted_array",
        "description": "mid-range.find_element_range_sorted_array",
        "peekOfCode": "def search_range(nums, target):\n    left_idx = binary_search(nums, target, True)\n    if (left_idx == len(nums)) or (nums[left_idx] != target):\n        return [-1, -1]\n    right_idx = binary_search(nums, target, False) - 1\n    return [left_idx, right_idx]\ndef binary_search(nums, target, equal=True):\n    left = 0\n    right = len(nums)\n    while left < right:",
        "detail": "mid-range.find_element_range_sorted_array",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "mid-range.find_element_range_sorted_array",
        "description": "mid-range.find_element_range_sorted_array",
        "peekOfCode": "def binary_search(nums, target, equal=True):\n    left = 0\n    right = len(nums)\n    while left < right:\n        mid = (left + right) // 2\n        if (nums[mid] > target) or (equal and nums[mid] == target):\n            right = mid\n        else:\n            left = mid + 1\n    return left",
        "detail": "mid-range.find_element_range_sorted_array",
        "documentation": {}
    },
    {
        "label": "find_element_smaller_left_bigger_right",
        "kind": 2,
        "importPath": "mid-range.find_el_smaller_left_bigger_right",
        "description": "mid-range.find_el_smaller_left_bigger_right",
        "peekOfCode": "def find_element_smaller_left_bigger_right(arr):\n    n = len(arr)\n    left_maxs = [-math.inf]\n    right_min = math.inf\n    # find all mins from the front\n    for i in range(n - 1):\n        left_maxs.append(max(left_maxs[-1], arr[i]))\n    for i in range(n - 1, -1, -1):\n        # check if all left are smaller\n        # and all right are bigger",
        "detail": "mid-range.find_el_smaller_left_bigger_right",
        "documentation": {}
    },
    {
        "label": "get_minimum_X",
        "kind": 2,
        "importPath": "mid-range.find_el_where_k_greater_or_equal",
        "description": "mid-range.find_el_where_k_greater_or_equal",
        "peekOfCode": "def get_minimum_X(arr, k):\n    n = len(arr)\n    if n == 0 or k > n:\n        return -1\n    if k == n:\n        return 1\n    arr.sort()\n    if k == 0:\n        return arr[-1] + 1\n    if arr[-k] == arr[-(k + 1)]:",
        "detail": "mid-range.find_el_where_k_greater_or_equal",
        "documentation": {}
    },
    {
        "label": "find_max",
        "kind": 2,
        "importPath": "mid-range.find_max",
        "description": "mid-range.find_max",
        "peekOfCode": "def find_max(nums):\n    \"\"\"\n    >>> for nums in ([3, 2, 1], [-3, -2, -1], [3, -3, 0], [3.0, 3.1, 2.9]):\n    ...     find_max(nums) == max(nums)\n    True\n    True\n    True\n    True\n    \"\"\"\n    max_num = nums[0]",
        "detail": "mid-range.find_max",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.find_max",
        "description": "mid-range.find_max",
        "peekOfCode": "def main():\n    print(find_max([2, 4, 9, 7, 19, 94, 5]))  # 94\nif __name__ == \"__main__\":\n    main()",
        "detail": "mid-range.find_max",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Find_Maximum_Time",
        "description": "mid-range.Find_Maximum_Time",
        "peekOfCode": "class Solution:\n    def findMax(self, time):\n        arr = []\n        for c in time:\n            arr.append(c)\n        if arr[0] == \"?\":\n            if arr[1] <= \"3\" or arr[1] == \"?\":\n                arr[0] = \"2\"\n            else:\n                arr[0] = \"1\"",
        "detail": "mid-range.Find_Maximum_Time",
        "documentation": {}
    },
    {
        "label": "max_branch_sum",
        "kind": 2,
        "importPath": "mid-range.find_max_branch_sum",
        "description": "mid-range.find_max_branch_sum",
        "peekOfCode": "def max_branch_sum(node):\n    if node is None:\n        return 0\n    # take the max left subbranch sum and add the current node value\n    left_max_sum = max_branch_sum(node.left) + node.val\n    # take the max right subbranch sum and add the current node value\n    right_max_sum = max_branch_sum(node.right) + node.val\n    # return the bigger sum\n    return max(left_max_sum, right_max_sum)\n###########",
        "detail": "mid-range.find_max_branch_sum",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "mid-range.find_max_branch_sum",
        "description": "mid-range.find_max_branch_sum",
        "peekOfCode": "tree = TreeNode(\n    1, TreeNode(2, TreeNode(4), TreeNode(5)), TreeNode(3, TreeNode(6), TreeNode(7))\n)\nprint(max_branch_sum(tree))",
        "detail": "mid-range.find_max_branch_sum",
        "documentation": {}
    },
    {
        "label": "find_max",
        "kind": 2,
        "importPath": "mid-range.find_max_recursion",
        "description": "mid-range.find_max_recursion",
        "peekOfCode": "def find_max(nums, left, right):\n    \"\"\"\n    find max value in list\n    :param nums: contains elements\n    :param left: index of first element\n    :param right: index of last element\n    :return: max in nums\n    >>> nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n    >>> find_max(nums, 0, len(nums) - 1) == max(nums)\n    True",
        "detail": "mid-range.find_max_recursion",
        "documentation": {}
    },
    {
        "label": "find_min",
        "kind": 2,
        "importPath": "mid-range.find_min",
        "description": "mid-range.find_min",
        "peekOfCode": "def find_min(nums):\n    \"\"\"\n    Find Minimum Number in a List\n    :param nums: contains elements\n    :return: min number in list\n    >>> for nums in ([3, 2, 1], [-3, -2, -1], [3, -3, 0], [3.0, 3.1, 2.9]):\n    ...     find_min(nums) == min(nums)\n    True\n    True\n    True",
        "detail": "mid-range.find_min",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.find_min",
        "description": "mid-range.find_min",
        "peekOfCode": "def main():\n    assert find_min([0, 1, 2, 3, 4, 5, -3, 24, -56]) == -56\nif __name__ == \"__main__\":\n    main()",
        "detail": "mid-range.find_min",
        "documentation": {}
    },
    {
        "label": "find_min",
        "kind": 2,
        "importPath": "mid-range.find_min_recursion",
        "description": "mid-range.find_min_recursion",
        "peekOfCode": "def find_min(nums, left, right):\n    \"\"\"\n    find min value in list\n    :param nums: contains elements\n    :param left: index of first element\n    :param right: index of last element\n    :return: min in nums\n    >>> nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n    >>> find_min(nums, 0, len(nums) - 1) == min(nums)\n    True",
        "detail": "mid-range.find_min_recursion",
        "documentation": {}
    },
    {
        "label": "missing_number",
        "kind": 2,
        "importPath": "mid-range.find_one_missing_number",
        "description": "mid-range.find_one_missing_number",
        "peekOfCode": "def missing_number(nums):\n    s = sum(nums)\n    n = len(nums) + 1\n    # sum formula (sum of the first n numbers) = (N*(N+1))/2\n    return n * (n + 1) // 2 - s\n###########\n# Testing #\n###########\n# Test 1\n# Correct result => 4",
        "detail": "mid-range.find_one_missing_number",
        "documentation": {}
    },
    {
        "label": "find_pairs",
        "kind": 2,
        "importPath": "mid-range.find_pairs_with_sum_k",
        "description": "mid-range.find_pairs_with_sum_k",
        "peekOfCode": "def find_pairs(arr, K):\n    # set to save all complements\n    complements = set()\n    # set to save all unique complements that form a pair\n    pair_complements = set()\n    for el in arr:\n        c = K - el\n        # if complement exists, then a pair is found\n        if c in complements:\n            pair_complements.add(c)",
        "detail": "mid-range.find_pairs_with_sum_k",
        "documentation": {}
    },
    {
        "label": "find_peak_element",
        "kind": 2,
        "importPath": "mid-range.find_peak_element",
        "description": "mid-range.find_peak_element",
        "peekOfCode": "def find_peak_element(nums):\n    l = 0\n    r = len(nums) - 1\n    while l < r:\n        mid = (l + r) // 2\n        if nums[mid] > nums[mid + 1]:\n            # go left if the current value is smaller than the next one\n            # in this moment you're sure that there is a peak element left from this one\n            r = mid\n        else:",
        "detail": "mid-range.find_peak_element",
        "documentation": {}
    },
    {
        "label": "find_variable",
        "kind": 2,
        "importPath": "mid-range.find_roots",
        "description": "mid-range.find_roots",
        "peekOfCode": "def find_variable(string):\n    splitted = string.split()\n    for i in splitted:\n        if i in ascii_letters:\n            return i\n        else:\n            continue\n    return None\n# Input format for function:\n# \"z ** 2 + 97 * z + (-4)\"",
        "detail": "mid-range.find_roots",
        "documentation": {}
    },
    {
        "label": "find_roots",
        "kind": 2,
        "importPath": "mid-range.find_roots",
        "description": "mid-range.find_roots",
        "peekOfCode": "def find_roots(S, rng=[-10000, 10000]):\n    res = []\n    for v in range(rng[0], rng[1]):\n        try:\n            test_case = S.replace(find_variable(S), str(v))\n        except Exception as e:\n            print(e)\n            return \"\"\n        if eval(test_case) == 0:\n            res.append(v)",
        "detail": "mid-range.find_roots",
        "documentation": {}
    },
    {
        "label": "test_str",
        "kind": 5,
        "importPath": "mid-range.find_roots",
        "description": "mid-range.find_roots",
        "peekOfCode": "test_str = \"x ** 2 + 5 * x - 6\"\nresult = find_roots(test_str, [-10, -2])\nfor i in result:\n\tprint(\"Root of the equation is {}\".format(i))\n\"\"\"",
        "detail": "mid-range.find_roots",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "mid-range.find_roots",
        "description": "mid-range.find_roots",
        "peekOfCode": "result = find_roots(test_str, [-10, -2])\nfor i in result:\n\tprint(\"Root of the equation is {}\".format(i))\n\"\"\"",
        "detail": "mid-range.find_roots",
        "documentation": {}
    },
    {
        "label": "find_second_largest",
        "kind": 2,
        "importPath": "mid-range.find_second_largest_node",
        "description": "mid-range.find_second_largest_node",
        "peekOfCode": "def find_second_largest(root):\n    arr = [TreeNode(-math.inf), TreeNode(-math.inf)]\n    traverse_tree(root, arr)\n    if arr[1] == -math.inf:\n        # the tree has 0 or 1 elements\n        return None\n    return arr[1]\ndef traverse_tree(node, arr):\n    if node == None:\n        return",
        "detail": "mid-range.find_second_largest_node",
        "documentation": {}
    },
    {
        "label": "traverse_tree",
        "kind": 2,
        "importPath": "mid-range.find_second_largest_node",
        "description": "mid-range.find_second_largest_node",
        "peekOfCode": "def traverse_tree(node, arr):\n    if node == None:\n        return\n    if arr[0].val < node.val:\n        arr[1] = arr[0]\n        arr[0] = node\n    elif arr[1].val < node.val:\n        arr[1] = node\n    # search left\n    traverse_tree(node.left, arr)",
        "detail": "mid-range.find_second_largest_node",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "mid-range.find_second_largest_node",
        "description": "mid-range.find_second_largest_node",
        "peekOfCode": "tree = TreeNode(\n    1, TreeNode(5, TreeNode(2), TreeNode(8)), TreeNode(4, TreeNode(12), TreeNode(7))\n)\nprint(find_second_largest(tree).val)",
        "detail": "mid-range.find_second_largest_node",
        "documentation": {}
    },
    {
        "label": "find_square_root",
        "kind": 2,
        "importPath": "mid-range.find_square_root",
        "description": "mid-range.find_square_root",
        "peekOfCode": "def find_square_root(x):\n    if type(x) == str:\n        return \"Expected an integer! Cannot find square root of an string!\"\n    for i in range(x):\n        if i ** 2 == x:\n            return i\n    return \"{} is not a perfect square\".format(x)\n# Test\nx = 2\nresult = find_square_root(x)",
        "detail": "mid-range.find_square_root",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.find_square_root",
        "description": "mid-range.find_square_root",
        "peekOfCode": "x = 2\nresult = find_square_root(x)\nprint(\"Square root of {} is {}\".format(x, result))",
        "detail": "mid-range.find_square_root",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "mid-range.find_square_root",
        "description": "mid-range.find_square_root",
        "peekOfCode": "result = find_square_root(x)\nprint(\"Square root of {} is {}\".format(x, result))",
        "detail": "mid-range.find_square_root",
        "documentation": {}
    },
    {
        "label": "is_perfect_square",
        "kind": 2,
        "importPath": "mid-range.find_square_root_of_imperfect_square",
        "description": "mid-range.find_square_root_of_imperfect_square",
        "peekOfCode": "def is_perfect_square(n):\n    if isinstance(n, float):\n        return (False, None)\n    for i in range(n + 1):\n        if i * i == n:\n            return (True, i)\n    return (False, None)\n# Average\ndef average(*args):\n    hold = list(args)",
        "detail": "mid-range.find_square_root_of_imperfect_square",
        "documentation": {}
    },
    {
        "label": "average",
        "kind": 2,
        "importPath": "mid-range.find_square_root_of_imperfect_square",
        "description": "mid-range.find_square_root_of_imperfect_square",
        "peekOfCode": "def average(*args):\n    hold = list(args)\n    return sum(hold) / len(hold)\n# Method\n# Just implementation of steps on above webpage\ndef sqrt_of_imperfect_square(a, certainty=6):\n    is_square = is_perfect_square(a)\n    if is_square[0]:\n        return \"{} is a perfect square .It's root is {}.\".format(a, is_square[1])\n    else:",
        "detail": "mid-range.find_square_root_of_imperfect_square",
        "documentation": {}
    },
    {
        "label": "sqrt_of_imperfect_square",
        "kind": 2,
        "importPath": "mid-range.find_square_root_of_imperfect_square",
        "description": "mid-range.find_square_root_of_imperfect_square",
        "peekOfCode": "def sqrt_of_imperfect_square(a, certainty=6):\n    is_square = is_perfect_square(a)\n    if is_square[0]:\n        return \"{} is a perfect square .It's root is {}.\".format(a, is_square[1])\n    else:\n        a = int(a)\n        tmp = None\n        s1 = max([float(x * x) for x in range(0, a)])\n        while True:\n            s2 = a / s1",
        "detail": "mid-range.find_square_root_of_imperfect_square",
        "documentation": {}
    },
    {
        "label": "case",
        "kind": 5,
        "importPath": "mid-range.find_square_root_of_imperfect_square",
        "description": "mid-range.find_square_root_of_imperfect_square",
        "peekOfCode": "case = 2613\nres = sqrt_of_imperfect_square(case, 9)\nprint(\"Test case: \" + str(case))\nprint(\"Root: \" + str(res))\nprint(\"Root Squared: \" + str(res * res))",
        "detail": "mid-range.find_square_root_of_imperfect_square",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "mid-range.find_square_root_of_imperfect_square",
        "description": "mid-range.find_square_root_of_imperfect_square",
        "peekOfCode": "res = sqrt_of_imperfect_square(case, 9)\nprint(\"Test case: \" + str(case))\nprint(\"Root: \" + str(res))\nprint(\"Root Squared: \" + str(res * res))",
        "detail": "mid-range.find_square_root_of_imperfect_square",
        "documentation": {}
    },
    {
        "label": "findDuplicate",
        "kind": 2,
        "importPath": "mid-range.Find_the_Duplicate_Number",
        "description": "mid-range.Find_the_Duplicate_Number",
        "peekOfCode": "def findDuplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] == arr[i + 1]:\n            return arr[i]\n        else:\n            pass\narr = [1, 3, 4, 2, 2]\nprint(findDuplicate(arr))",
        "detail": "mid-range.Find_the_Duplicate_Number",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.Find_the_Duplicate_Number",
        "description": "mid-range.Find_the_Duplicate_Number",
        "peekOfCode": "arr = [1, 3, 4, 2, 2]\nprint(findDuplicate(arr))",
        "detail": "mid-range.Find_the_Duplicate_Number",
        "documentation": {}
    },
    {
        "label": "findJudge",
        "kind": 2,
        "importPath": "mid-range.find_the_judge",
        "description": "mid-range.find_the_judge",
        "peekOfCode": "def findJudge(self, N: int, trusts: List[List[int]]) -> int:\n        # Build our dict\n        trust_dict = {}\n        # Add the keys\n        for i in range(1, N+1):\n            trust_dict[i] = [0, 0]\n        # Add the in/out degrees\n        for trust in trusts:\n            a = trust[0]\n            b = trust[1]",
        "detail": "mid-range.find_the_judge",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Find_the_nonduplicate_number",
        "description": "mid-range.Find_the_nonduplicate_number",
        "peekOfCode": "class Solution:\n    def find(self, arr):\n        dic = {}\n        for num in arr:\n            dic[num] = dic.get(num, 0) + 1\n        for num in arr:\n            if dic[num] == 1:\n                return num\nif __name__ == \"__main__\":\n    arr = [2, 2, 3, 4, 2, 3, 4, 1, 5, 5, 6, 6]",
        "detail": "mid-range.Find_the_nonduplicate_number",
        "documentation": {}
    },
    {
        "label": "missing_numbers",
        "kind": 2,
        "importPath": "mid-range.find_two_missing_numbers",
        "description": "mid-range.find_two_missing_numbers",
        "peekOfCode": "def missing_numbers(nums):\n    # find sums from the array\n    s = 0\n    s_2 = 0\n    for i in nums:\n        s += i\n        s_2 += i * i\n    n = len(nums) + 2\n    # using formulas, compute the sums of the sequence\n    f_s = n * (n + 1) // 2",
        "detail": "mid-range.find_two_missing_numbers",
        "documentation": {}
    },
    {
        "label": "b1,2",
        "kind": 5,
        "importPath": "mid-range.find_two_missing_numbers",
        "description": "mid-range.find_two_missing_numbers",
        "peekOfCode": "b1,2 = (diff_sum +- sqrt(2*diff_squared_sum - diff_sum^2)) / 2\nSum formula = N*(N+1)/2\nSquared sum formula = N*(N+1)*(2*N+1)/6\n    Time Complexity:    O(N)\n    Space Complexity:   O(1)\nNote: this idea also could be used when more than 2 numbers are missing,\nbut you'll need more computations/equations, because you'll have K unknowns.\n\"\"\"\n############\n# Solution #",
        "detail": "mid-range.find_two_missing_numbers",
        "documentation": {}
    },
    {
        "label": "find_unpaired_element",
        "kind": 2,
        "importPath": "mid-range.find_unpaired",
        "description": "mid-range.find_unpaired",
        "peekOfCode": "def find_unpaired_element(arr):\n    unique = 0\n    for el in arr:\n        unique ^= el\n    return unique\n###########\n# Testing #\n###########\n# Test 1\n# Correct result => 3",
        "detail": "mid-range.find_unpaired",
        "documentation": {}
    },
    {
        "label": "first_non_repeated_character",
        "kind": 2,
        "importPath": "mid-range.first-non-repeated-character",
        "description": "mid-range.first-non-repeated-character",
        "peekOfCode": "def first_non_repeated_character(str):\n    \"\"\"finds the first character in a string that's not repreated\"\"\"\n    for i, char in enumerate(str):\n        if i - 1 >= 0 and char == str[i - 1]:\n            continue\n        if i + 1 < len(str) and char == str[i + 1]:\n            continue\n        return char",
        "detail": "mid-range.first-non-repeated-character",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character",
        "kind": 2,
        "importPath": "mid-range.first-non-repeating",
        "description": "mid-range.first-non-repeating",
        "peekOfCode": "def first_not_repeating_character(s):\n    c = {}\n    for i in s:\n        c[i] = c.get(i, 0) + 1\n    return next((i for i in s if c[i] == 1), \"_\")",
        "detail": "mid-range.first-non-repeating",
        "documentation": {}
    },
    {
        "label": "first",
        "kind": 2,
        "importPath": "mid-range.first",
        "description": "mid-range.first",
        "peekOfCode": "def first(iterable, default=None, key=None):\n    \"\"\"\n    Return first element of `iterable` that evaluates true, else return None\n    (or an optional default value).\n    >>> first([0, False, None, [], (), 42])\n    42\n    >>> first([0, False, None, [], ()]) is None\n    True\n    >>> first([0, False, None, [], ()], default='ohai')\n    'ohai'",
        "detail": "mid-range.first",
        "documentation": {}
    },
    {
        "label": "__title__",
        "kind": 5,
        "importPath": "mid-range.first",
        "description": "mid-range.first",
        "peekOfCode": "__title__ = \"first\"\n__version__ = \"2.0.2\"\n__author__ = \"Hynek Schlawack\"\n__license__ = \"MIT\"\n__copyright__ = \"Copyright 2012 Hynek Schlawack\"\ndef first(iterable, default=None, key=None):\n    \"\"\"\n    Return first element of `iterable` that evaluates true, else return None\n    (or an optional default value).\n    >>> first([0, False, None, [], (), 42])",
        "detail": "mid-range.first",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "mid-range.first",
        "description": "mid-range.first",
        "peekOfCode": "__version__ = \"2.0.2\"\n__author__ = \"Hynek Schlawack\"\n__license__ = \"MIT\"\n__copyright__ = \"Copyright 2012 Hynek Schlawack\"\ndef first(iterable, default=None, key=None):\n    \"\"\"\n    Return first element of `iterable` that evaluates true, else return None\n    (or an optional default value).\n    >>> first([0, False, None, [], (), 42])\n    42",
        "detail": "mid-range.first",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "mid-range.first",
        "description": "mid-range.first",
        "peekOfCode": "__author__ = \"Hynek Schlawack\"\n__license__ = \"MIT\"\n__copyright__ = \"Copyright 2012 Hynek Schlawack\"\ndef first(iterable, default=None, key=None):\n    \"\"\"\n    Return first element of `iterable` that evaluates true, else return None\n    (or an optional default value).\n    >>> first([0, False, None, [], (), 42])\n    42\n    >>> first([0, False, None, [], ()]) is None",
        "detail": "mid-range.first",
        "documentation": {}
    },
    {
        "label": "__license__",
        "kind": 5,
        "importPath": "mid-range.first",
        "description": "mid-range.first",
        "peekOfCode": "__license__ = \"MIT\"\n__copyright__ = \"Copyright 2012 Hynek Schlawack\"\ndef first(iterable, default=None, key=None):\n    \"\"\"\n    Return first element of `iterable` that evaluates true, else return None\n    (or an optional default value).\n    >>> first([0, False, None, [], (), 42])\n    42\n    >>> first([0, False, None, [], ()]) is None\n    True",
        "detail": "mid-range.first",
        "documentation": {}
    },
    {
        "label": "__copyright__",
        "kind": 5,
        "importPath": "mid-range.first",
        "description": "mid-range.first",
        "peekOfCode": "__copyright__ = \"Copyright 2012 Hynek Schlawack\"\ndef first(iterable, default=None, key=None):\n    \"\"\"\n    Return first element of `iterable` that evaluates true, else return None\n    (or an optional default value).\n    >>> first([0, False, None, [], (), 42])\n    42\n    >>> first([0, False, None, [], ()]) is None\n    True\n    >>> first([0, False, None, [], ()], default='ohai')",
        "detail": "mid-range.first",
        "documentation": {}
    },
    {
        "label": "firstDuplicate",
        "kind": 2,
        "importPath": "mid-range.firstDuplicate",
        "description": "mid-range.firstDuplicate",
        "peekOfCode": "def firstDuplicate(a):\n    d = {}\n    found = 0\n    for i in range(len(a)):\n        if a[i] in d:\n            d[a[i]] += 1\n        else:\n            d[a[i]] = 1\n        if d[a[i]] == 2:\n            return a[i]",
        "detail": "mid-range.firstDuplicate",
        "documentation": {}
    },
    {
        "label": "firstNotRepeatingCharacter",
        "kind": 2,
        "importPath": "mid-range.firstNotRepeatingCharacter",
        "description": "mid-range.firstNotRepeatingCharacter",
        "peekOfCode": "def firstNotRepeatingCharacter(s):\n    occ_dict = {}\n    index_dict = {}\n    for i in range(len(s)):\n        ch = s[i]\n        if ch in occ_dict:\n            occ_dict[ch] += 1\n        else:\n            occ_dict[ch] = 1\n        if ch not in index_dict:",
        "detail": "mid-range.firstNotRepeatingCharacter",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.FirstUniqueCharacterInAString",
        "description": "mid-range.FirstUniqueCharacterInAString",
        "peekOfCode": "class Solution:\n    def firstUniqChar(self, s: str) -> int:\n        c = Counter(s)\n        for i in range(len(s)):\n            if c[s[i]] == 1:\n                return i\n        return -1",
        "detail": "mid-range.FirstUniqueCharacterInAString",
        "documentation": {}
    },
    {
        "label": "first_not_repeating_character",
        "kind": 2,
        "importPath": "mid-range.firstUniqueCharacterInString",
        "description": "mid-range.firstUniqueCharacterInString",
        "peekOfCode": "def first_not_repeating_character(s):\n    count = Counter(s)\n    for char in s:\n        if count[char] == 1:\n            return char\n    return \"_\"",
        "detail": "mid-range.firstUniqueCharacterInString",
        "documentation": {}
    },
    {
        "label": "firstDigit",
        "kind": 2,
        "importPath": "mid-range.first_digit",
        "description": "mid-range.first_digit",
        "peekOfCode": "def firstDigit(inputString):\n    \"\"\"Finds leftmost digit that occurs in a given string\n    Args:\n        inputString(string): input string\n    Return:\n        Leftmost digit occurring in string\n    Raises:\n    \"\"\"\n    for char in inputString:\n        if char.isdigit():",
        "detail": "mid-range.first_digit",
        "documentation": {}
    },
    {
        "label": "firstDuplicate",
        "kind": 2,
        "importPath": "mid-range.first_duplicate",
        "description": "mid-range.first_duplicate",
        "peekOfCode": "def firstDuplicate(a):\n    number_frequencies, number_indices, duplicate_index = {}, {}, {}\n    # Iterate through list and increment frequency count\n    # if number not in dict. Also, note the index asscoiated\n    # with the value\n    for i in range(len(a)):\n        if a[i] not in number_frequencies:\n            number_frequencies[a[i]] = 1\n            number_indices[a[i]] = i\n        elif a[i] in number_frequencies:",
        "detail": "mid-range.first_duplicate",
        "documentation": {}
    },
    {
        "label": "firstIndex",
        "kind": 2,
        "importPath": "mid-range.first_index_of_array",
        "description": "mid-range.first_index_of_array",
        "peekOfCode": "def firstIndex(arr, si, x):\n    l = len(arr)  # length of array.\n    if l == 0:  # base case\n        return -1\n    if (\n        arr[si] == x\n    ):  # if element is found at start index of an array then return that index.\n        return si\n    return firstIndex(arr, si + 1, x)  # recursive call.\narr = []  # initialised array.",
        "detail": "mid-range.first_index_of_array",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.first_index_of_array",
        "description": "mid-range.first_index_of_array",
        "peekOfCode": "arr = []  # initialised array.\nn = int(input(\"Enter size of array : \"))\nfor i in range(n):  # input array.\n    ele = int(input())\n    arr.append(ele)\nx = int(input(\"Enter element to be searched \"))  # element to be searched\nprint(firstIndex(arr, 0, x))",
        "detail": "mid-range.first_index_of_array",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.first_index_of_array",
        "description": "mid-range.first_index_of_array",
        "peekOfCode": "n = int(input(\"Enter size of array : \"))\nfor i in range(n):  # input array.\n    ele = int(input())\n    arr.append(ele)\nx = int(input(\"Enter element to be searched \"))  # element to be searched\nprint(firstIndex(arr, 0, x))",
        "detail": "mid-range.first_index_of_array",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.first_index_of_array",
        "description": "mid-range.first_index_of_array",
        "peekOfCode": "x = int(input(\"Enter element to be searched \"))  # element to be searched\nprint(firstIndex(arr, 0, x))",
        "detail": "mid-range.first_index_of_array",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.First_Missing_Positive",
        "description": "mid-range.First_Missing_Positive",
        "peekOfCode": "class Solution:\n    def firstMissingPositive(self, nums):\n        dict = {}\n        for num in nums:\n            dict[num] = 1\n        for i in range(1, len(nums) + 2):\n            if i not in dict:\n                return i\n        return -1",
        "detail": "mid-range.First_Missing_Positive",
        "documentation": {}
    },
    {
        "label": "firstNotRepeatingCharacter",
        "kind": 2,
        "importPath": "mid-range.first_not_repeating_character",
        "description": "mid-range.first_not_repeating_character",
        "peekOfCode": "def firstNotRepeatingCharacter(s):\n    character_count, character_index, non_repeat_index = {}, {}, {}\n    # Iterate through string and count\n    # character occurences and note\n    # index of first repetition\n    for i in range(len(s)):\n        if s[i] not in character_count:\n            character_count[s[i]] = 1\n            character_index[s[i]] = i\n        elif s[i] in character_count:",
        "detail": "mid-range.first_not_repeating_character",
        "documentation": {}
    },
    {
        "label": "left_search",
        "kind": 2,
        "importPath": "mid-range.first_occurance",
        "description": "mid-range.first_occurance",
        "peekOfCode": "def left_search(arr, low, high, x):\n    temp = -1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            temp = mid",
        "detail": "mid-range.first_occurance",
        "documentation": {}
    },
    {
        "label": "right_search",
        "kind": 2,
        "importPath": "mid-range.first_occurance",
        "description": "mid-range.first_occurance",
        "peekOfCode": "def right_search(arr, low, high, x):\n    temp = -1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            temp = mid",
        "detail": "mid-range.first_occurance",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.first_occurance",
        "description": "mid-range.first_occurance",
        "peekOfCode": "arr = [1, 4, 4, 4, 5, 6, 7]\nl_result = left_search(arr, 0, len(arr), 4)\nr_result = right_search(arr, 0, len(arr), 4)\nprint(\"first occurance:\" + str(l_result))\nprint(\"last occurance: \" + str(r_result))",
        "detail": "mid-range.first_occurance",
        "documentation": {}
    },
    {
        "label": "l_result",
        "kind": 5,
        "importPath": "mid-range.first_occurance",
        "description": "mid-range.first_occurance",
        "peekOfCode": "l_result = left_search(arr, 0, len(arr), 4)\nr_result = right_search(arr, 0, len(arr), 4)\nprint(\"first occurance:\" + str(l_result))\nprint(\"last occurance: \" + str(r_result))",
        "detail": "mid-range.first_occurance",
        "documentation": {}
    },
    {
        "label": "r_result",
        "kind": 5,
        "importPath": "mid-range.first_occurance",
        "description": "mid-range.first_occurance",
        "peekOfCode": "r_result = right_search(arr, 0, len(arr), 4)\nprint(\"first occurance:\" + str(l_result))\nprint(\"last occurance: \" + str(r_result))",
        "detail": "mid-range.first_occurance",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.First_Unique_Character",
        "description": "mid-range.First_Unique_Character",
        "peekOfCode": "class Solution:\n    def firstUniqChar(self, s):\n        if s == \"\":\n            return -1\n        dict = collections.defaultdict(int)\n        for c in s:\n            dict[c] += 1\n        for c in s:\n            if dict[c] == 1:\n                return s.index(c)",
        "detail": "mid-range.First_Unique_Character",
        "documentation": {}
    },
    {
        "label": "FYshuffle",
        "kind": 2,
        "importPath": "mid-range.Fischer-Yates_Shuffle",
        "description": "mid-range.Fischer-Yates_Shuffle",
        "peekOfCode": "def FYshuffle(LIST):\n    for i in range(len(LIST)):\n        a = random.randint(0, len(LIST) - 1)\n        b = random.randint(0, len(LIST) - 1)\n        LIST[a], LIST[b] = LIST[b], LIST[a]\n    return LIST\nif __name__ == \"__main__\":\n    integers = [0, 1, 2, 3, 4, 5, 6, 7]\n    strings = [\"python\", \"says\", \"hello\", \"!\"]\n    print(\"Fisher-Yates Shuffle:\")",
        "detail": "mid-range.Fischer-Yates_Shuffle",
        "documentation": {}
    },
    {
        "label": "FYshuffle",
        "kind": 2,
        "importPath": "mid-range.fischer_yates_shuffle",
        "description": "mid-range.fischer_yates_shuffle",
        "peekOfCode": "def FYshuffle(list):\n    for i in range(len(list)):\n        a = random.randint(0, len(list) - 1)\n        b = random.randint(0, len(list) - 1)\n        list[a], list[b] = list[b], list[a]\n    return list\nif __name__ == \"__main__\":\n    integers = [0, 1, 2, 3, 4, 5, 6, 7]\n    strings = [\"python\", \"says\", \"hello\", \"!\"]\n    print(\"Fisher-Yates Shuffle:\")",
        "detail": "mid-range.fischer_yates_shuffle",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.fizzbuzz",
        "description": "mid-range.fizzbuzz",
        "peekOfCode": "class Solution:\n    def fizzBuzz(self, n: int) -> List[str]:\n        res = []\n        for i in range(1, n + 1):\n            if i % 3 == 0 and i % 5 == 0:\n                res.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                res.append(\"Fizz\")\n            elif i % 5 == 0:\n                res.append(\"Buzz\")",
        "detail": "mid-range.fizzbuzz",
        "documentation": {}
    },
    {
        "label": "import_module",
        "kind": 2,
        "importPath": "mid-range.flask",
        "description": "mid-range.flask",
        "peekOfCode": "def import_module(callback):\n    \"\"\"\n    Handle \"magic\" Flask extension imports:\n    ``flask.ext.foo`` is really ``flask_foo`` or ``flaskext.foo``.\n    \"\"\"\n    def wrapper(inference_state, import_names, module_context, *args, **kwargs):\n        if len(import_names) == 3 and import_names[:2] == (\"flask\", \"ext\"):\n            # New style.\n            ipath = ((\"flask_\" + import_names[2]),)\n            value_set = callback(inference_state, ipath, None, *args, **kwargs)",
        "detail": "mid-range.flask",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.flatiter",
        "description": "mid-range.flatiter",
        "peekOfCode": "a = np.empty((2, 2)).flat\na.base\na.copy()\na.coords\na.index\niter(a)\nnext(a)\na[0]\na[[0, 1, 2]]\na[...]",
        "detail": "mid-range.flatiter",
        "documentation": {}
    },
    {
        "label": "flatten_array",
        "kind": 2,
        "importPath": "mid-range.flatten-array",
        "description": "mid-range.flatten-array",
        "peekOfCode": "def flatten_array(orig):\n    \"\"\"returns a new, flattened, list\"\"\"\n    flattened_list = []\n    for item in orig:\n        if isinstance(item, list):\n            flattened_list += flatten_array(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list\ndef flatten_in_place(orig):",
        "detail": "mid-range.flatten-array",
        "documentation": {}
    },
    {
        "label": "flatten_in_place",
        "kind": 2,
        "importPath": "mid-range.flatten-array",
        "description": "mid-range.flatten-array",
        "peekOfCode": "def flatten_in_place(orig):\n    \"\"\"flattens a given list in place\"\"\"\n    is_flattened = False\n    while not is_flattened:  # iterating until no more lists are found\n        is_flattened = True\n        for i, item in enumerate(orig):\n            if isinstance(item, list):\n                is_flattened = False\n                orig = orig[:i] + item + orig[i + 1 :]\n    return orig",
        "detail": "mid-range.flatten-array",
        "documentation": {}
    },
    {
        "label": "squash_my_list",
        "kind": 2,
        "importPath": "mid-range.flattening",
        "description": "mid-range.flattening",
        "peekOfCode": "def squash_my_list(l):\n    # l is a list, possibly nested\n    result_l = []  # empty, result list\n    for i in l:\n        if type(i) is list:\n            # if we have a list, then extend\n            result_l.extend(i)\n        else:  # otherwise append to the result, one item\n            result_l.append(i)\n    return result_l",
        "detail": "mid-range.flattening",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.flattening",
        "description": "mid-range.flattening",
        "peekOfCode": "arr = [[1, 2, 3, 4], 23, [5, 6, 7, 8], 19, [9, 10, 11, 12], [13, 14, 15, 16]]\narr2 = []\nfor i in range(1, 17):\n    arr2.append(i)\nprint(arr)\n# print(arr2)\n# print(arr[0][1])\n# # x + y * width\n# print(arr2[1 + 0 * 4])\ndef squash_my_list(l):",
        "detail": "mid-range.flattening",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "mid-range.flattening",
        "description": "mid-range.flattening",
        "peekOfCode": "arr2 = []\nfor i in range(1, 17):\n    arr2.append(i)\nprint(arr)\n# print(arr2)\n# print(arr[0][1])\n# # x + y * width\n# print(arr2[1 + 0 * 4])\ndef squash_my_list(l):\n    # l is a list, possibly nested",
        "detail": "mid-range.flattening",
        "documentation": {}
    },
    {
        "label": "arr3",
        "kind": 5,
        "importPath": "mid-range.flattening",
        "description": "mid-range.flattening",
        "peekOfCode": "arr3 = squash_my_list(arr)\nprint(arr3)",
        "detail": "mid-range.flattening",
        "documentation": {}
    },
    {
        "label": "flatten",
        "kind": 2,
        "importPath": "mid-range.flattenlist",
        "description": "mid-range.flattenlist",
        "peekOfCode": "def flatten(l):\n    tmp = [val for sublist in l for val in sublist]\n    stack = []\n    for item in tmp:\n        if isinstance(item, list):\n            tmp2 = [val for val in item]\n            for val in tmp2:\n                stack.append(val)\n            break\n        else:",
        "detail": "mid-range.flattenlist",
        "documentation": {}
    },
    {
        "label": "sample_list",
        "kind": 5,
        "importPath": "mid-range.flattenlist",
        "description": "mid-range.flattenlist",
        "peekOfCode": "sample_list = [[1], [[2, [5]]], [4, 5], [[6]], [7]]\nprint(flatten(sample_list))",
        "detail": "mid-range.flattenlist",
        "documentation": {}
    },
    {
        "label": "flatten_deep_list",
        "kind": 2,
        "importPath": "mid-range.flatten_deep_list",
        "description": "mid-range.flatten_deep_list",
        "peekOfCode": "def flatten_deep_list(arr):\n    if not isinstance(arr, list):\n        return [arr]\n    result = []\n    for a in arr:\n        result.extend(flatten_deep_list(a))\n    return result\n###########\n# Testing #\n###########",
        "detail": "mid-range.flatten_deep_list",
        "documentation": {}
    },
    {
        "label": "flippingBits",
        "kind": 2,
        "importPath": "mid-range.Flipping-Bits",
        "description": "mid-range.Flipping-Bits",
        "peekOfCode": "def flippingBits(n):\n    max = (2 ** 32) - 1\n    return max - n\nif __name__ == \"__main__\":\n    fptr = open(os.environ[\"OUTPUT_PATH\"], \"w\")\n    q = int(input())\n    for q_itr in range(q):\n        n = int(input())\n        result = flippingBits(n)\n        fptr.write(str(result) + \"\\n\")",
        "detail": "mid-range.Flipping-Bits",
        "documentation": {}
    },
    {
        "label": "flippingMatrix",
        "kind": 2,
        "importPath": "mid-range.Flipping-The-Matrix",
        "description": "mid-range.Flipping-The-Matrix",
        "peekOfCode": "def flippingMatrix(matrix):\n    n = len(matrix)\n    seen = set()\n    maxes = []\n    for i in range(len(matrix) - 1):\n        for j in range(i + 1, len(matrix[0])):\n            if (i, j) not in seen:\n                ri, rj = mirror_row(i, j, n)\n                di, dj = mirror_col(ri, rj, n)\n                li, lj = mirror_row(di, dj, n)",
        "detail": "mid-range.Flipping-The-Matrix",
        "documentation": {}
    },
    {
        "label": "mirror_row",
        "kind": 2,
        "importPath": "mid-range.Flipping-The-Matrix",
        "description": "mid-range.Flipping-The-Matrix",
        "peekOfCode": "def mirror_row(i, j, n):\n    return i, n - j - 1\ndef mirror_col(i, j, n):\n    return n - i - 1, j\nif __name__ == \"__main__\":\n    fptr = open(os.environ[\"OUTPUT_PATH\"], \"w\")\n    q = int(input())\n    for q_itr in range(q):\n        n = int(input())\n        matrix = []",
        "detail": "mid-range.Flipping-The-Matrix",
        "documentation": {}
    },
    {
        "label": "mirror_col",
        "kind": 2,
        "importPath": "mid-range.Flipping-The-Matrix",
        "description": "mid-range.Flipping-The-Matrix",
        "peekOfCode": "def mirror_col(i, j, n):\n    return n - i - 1, j\nif __name__ == \"__main__\":\n    fptr = open(os.environ[\"OUTPUT_PATH\"], \"w\")\n    q = int(input())\n    for q_itr in range(q):\n        n = int(input())\n        matrix = []\n        for _ in range(2 * n):\n            matrix.append(list(map(int, input().rstrip().split())))",
        "detail": "mid-range.Flipping-The-Matrix",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Flip_Game",
        "description": "mid-range.Flip_Game",
        "peekOfCode": "class Solution:\n    def generatePossibleNextMoves(self, s):\n        res = []\n        strs = []\n        for c in s:\n            strs.append(c)\n        for i in range(len(strs) - 1):\n            if strs[i] == \"+\" and strs[i + 1] == \"+\":\n                res.append(s[:i] + \"--\" + s[i + 2 :])\n        return res",
        "detail": "mid-range.Flip_Game",
        "documentation": {}
    },
    {
        "label": "floor",
        "kind": 2,
        "importPath": "mid-range.floor",
        "description": "mid-range.floor",
        "peekOfCode": "def floor(x) -> int:\n    \"\"\"\n    Return the floor of x as an Integral.\n    :param x: the number\n    :return: the largest integer <= x.\n    >>> import math\n    >>> all(floor(n) == math.floor(n) for n\n    ...     in (1, -1, 0, -0, 1.1, -1.1, 1.0, -1.0, 1_000_000_000))\n    True\n    \"\"\"",
        "detail": "mid-range.floor",
        "documentation": {}
    },
    {
        "label": "printDist",
        "kind": 2,
        "importPath": "mid-range.FloydWarshall",
        "description": "mid-range.FloydWarshall",
        "peekOfCode": "def printDist(dist, V):\n    print(\"\\nThe shortest path matrix using Floyd Warshall algorithm\\n\")\n    for i in range(V):\n        for j in range(V):\n            if dist[i][j] != float(\"inf\"):\n                print(int(dist[i][j]), end=\"\\t\")\n            else:\n                print(\"INF\", end=\"\\t\")\n        print()\ndef FloydWarshall(graph, V):",
        "detail": "mid-range.FloydWarshall",
        "documentation": {}
    },
    {
        "label": "FloydWarshall",
        "kind": 2,
        "importPath": "mid-range.FloydWarshall",
        "description": "mid-range.FloydWarshall",
        "peekOfCode": "def FloydWarshall(graph, V):\n    dist = [[float(\"inf\") for i in range(V)] for j in range(V)]\n    for i in range(V):\n        for j in range(V):\n            dist[i][j] = graph[i][j]\n    for k in range(V):\n        for i in range(V):\n            for j in range(V):\n                if (\n                    dist[i][k] != float(\"inf\")",
        "detail": "mid-range.FloydWarshall",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 5,
        "importPath": "mid-range.FloydWarshall",
        "description": "mid-range.FloydWarshall",
        "peekOfCode": "V = int(input(\"Enter number of vertices: \"))\nE = int(input(\"Enter number of edges: \"))\ngraph = [[float(\"inf\") for i in range(V)] for j in range(V)]\nfor i in range(V):\n    graph[i][i] = 0.0\nfor i in range(E):\n    print(\"\\nEdge \", i + 1)\n    src = int(input(\"Enter source:\"))\n    dst = int(input(\"Enter destination:\"))\n    weight = float(input(\"Enter weight:\"))",
        "detail": "mid-range.FloydWarshall",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 5,
        "importPath": "mid-range.FloydWarshall",
        "description": "mid-range.FloydWarshall",
        "peekOfCode": "E = int(input(\"Enter number of edges: \"))\ngraph = [[float(\"inf\") for i in range(V)] for j in range(V)]\nfor i in range(V):\n    graph[i][i] = 0.0\nfor i in range(E):\n    print(\"\\nEdge \", i + 1)\n    src = int(input(\"Enter source:\"))\n    dst = int(input(\"Enter destination:\"))\n    weight = float(input(\"Enter weight:\"))\n    graph[src][dst] = weight",
        "detail": "mid-range.FloydWarshall",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "mid-range.FloydWarshall",
        "description": "mid-range.FloydWarshall",
        "peekOfCode": "graph = [[float(\"inf\") for i in range(V)] for j in range(V)]\nfor i in range(V):\n    graph[i][i] = 0.0\nfor i in range(E):\n    print(\"\\nEdge \", i + 1)\n    src = int(input(\"Enter source:\"))\n    dst = int(input(\"Enter destination:\"))\n    weight = float(input(\"Enter weight:\"))\n    graph[src][dst] = weight\nFloydWarshall(graph, V)",
        "detail": "mid-range.FloydWarshall",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "mid-range.floyd_warshall",
        "description": "mid-range.floyd_warshall",
        "peekOfCode": "class Graph:\n    def __init__(self, N=0):  # a graph with Node 0,1,...,N-1\n        self.N = N\n        self.W = [\n            [math.inf for j in range(0, N)] for i in range(0, N)\n        ]  # adjacency matrix for weight\n        self.dp = [\n            [math.inf for j in range(0, N)] for i in range(0, N)\n        ]  # dp[i][j] stores minimum distance from i to j\n    def addEdge(self, u, v, w):",
        "detail": "mid-range.floyd_warshall",
        "documentation": {}
    },
    {
        "label": "Formatter",
        "kind": 6,
        "importPath": "mid-range.fmt",
        "description": "mid-range.fmt",
        "peekOfCode": "class Formatter(string.Formatter, types.ModuleType):\n    \"\"\"A custom string.Formatter with support for JSON pretty-printing.\n    Adds {!j} format specification. When used, the corresponding value is converted\n    to string using json_encoder.encode().\n    Since string.Formatter in Python <3.4 does not support unnumbered placeholders,\n    they must always be numbered explicitly - \"{0} {1}\" rather than \"{} {}\". Named\n    placeholders are supported.\n    \"\"\"\n    # Because globals() go away after the module object substitution, all method bodies\n    # below must access globals via self instead, or re-import modules locally.",
        "detail": "mid-range.fmt",
        "documentation": {}
    },
    {
        "label": "sys.modules[__name__]",
        "kind": 5,
        "importPath": "mid-range.fmt",
        "description": "mid-range.fmt",
        "peekOfCode": "sys.modules[__name__] = Formatter()",
        "detail": "mid-range.fmt",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "mid-range.fnmatch_filter",
        "description": "mid-range.fnmatch_filter",
        "peekOfCode": "pattern = \"fnmatch_*.py\"\nprint(\"Pattern :\", pattern)\nfiles = list(sorted(os.listdir(\".\")))\nprint(\"\\nFiles   :\")\npprint.pprint(files)\nprint(\"\\nMatches :\")\npprint.pprint(fnmatch.filter(files, pattern))",
        "detail": "mid-range.fnmatch_filter",
        "documentation": {}
    },
    {
        "label": "files",
        "kind": 5,
        "importPath": "mid-range.fnmatch_filter",
        "description": "mid-range.fnmatch_filter",
        "peekOfCode": "files = list(sorted(os.listdir(\".\")))\nprint(\"\\nFiles   :\")\npprint.pprint(files)\nprint(\"\\nMatches :\")\npprint.pprint(fnmatch.filter(files, pattern))",
        "detail": "mid-range.fnmatch_filter",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "mid-range.fnmatch_fnmatch",
        "description": "mid-range.fnmatch_fnmatch",
        "peekOfCode": "pattern = \"fnmatch_*.py\"\nprint(\"Pattern :\", pattern)\nprint()\nfiles = os.listdir(\".\")\nfor name in sorted(files):\n    print(\"Filename: {:<25} {}\".format(name, fnmatch.fnmatch(name, pattern)))",
        "detail": "mid-range.fnmatch_fnmatch",
        "documentation": {}
    },
    {
        "label": "files",
        "kind": 5,
        "importPath": "mid-range.fnmatch_fnmatch",
        "description": "mid-range.fnmatch_fnmatch",
        "peekOfCode": "files = os.listdir(\".\")\nfor name in sorted(files):\n    print(\"Filename: {:<25} {}\".format(name, fnmatch.fnmatch(name, pattern)))",
        "detail": "mid-range.fnmatch_fnmatch",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "mid-range.fnmatch_fnmatchcase",
        "description": "mid-range.fnmatch_fnmatchcase",
        "peekOfCode": "pattern = \"FNMATCH_*.PY\"\nprint(\"Pattern :\", pattern)\nprint()\nfiles = os.listdir(\".\")\nfor name in sorted(files):\n    print(\"Filename: {:<25} {}\".format(name, fnmatch.fnmatchcase(name, pattern)))",
        "detail": "mid-range.fnmatch_fnmatchcase",
        "documentation": {}
    },
    {
        "label": "files",
        "kind": 5,
        "importPath": "mid-range.fnmatch_fnmatchcase",
        "description": "mid-range.fnmatch_fnmatchcase",
        "peekOfCode": "files = os.listdir(\".\")\nfor name in sorted(files):\n    print(\"Filename: {:<25} {}\".format(name, fnmatch.fnmatchcase(name, pattern)))",
        "detail": "mid-range.fnmatch_fnmatchcase",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "mid-range.fnmatch_translate",
        "description": "mid-range.fnmatch_translate",
        "peekOfCode": "pattern = \"fnmatch_*.py\"\nprint(\"Pattern :\", pattern)\nprint(\"Regex   :\", fnmatch.translate(pattern))",
        "detail": "mid-range.fnmatch_translate",
        "documentation": {}
    },
    {
        "label": "focus_next",
        "kind": 2,
        "importPath": "mid-range.focus",
        "description": "mid-range.focus",
        "peekOfCode": "def focus_next(event: E) -> None:\n    \"\"\"\n    Focus the next visible Window.\n    (Often bound to the `Tab` key.)\n    \"\"\"\n    event.app.layout.focus_next()\ndef focus_previous(event: E) -> None:\n    \"\"\"\n    Focus the previous visible Window.\n    (Often bound to the `BackTab` key.)",
        "detail": "mid-range.focus",
        "documentation": {}
    },
    {
        "label": "focus_previous",
        "kind": 2,
        "importPath": "mid-range.focus",
        "description": "mid-range.focus",
        "peekOfCode": "def focus_previous(event: E) -> None:\n    \"\"\"\n    Focus the previous visible Window.\n    (Often bound to the `BackTab` key.)\n    \"\"\"\n    event.app.layout.focus_previous()",
        "detail": "mid-range.focus",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.focus",
        "description": "mid-range.focus",
        "peekOfCode": "__all__ = [\"focus_next\", \"focus_previous\"]\nE = KeyPressEvent\ndef focus_next(event: E) -> None:\n    \"\"\"\n    Focus the next visible Window.\n    (Often bound to the `Tab` key.)\n    \"\"\"\n    event.app.layout.focus_next()\ndef focus_previous(event: E) -> None:\n    \"\"\"",
        "detail": "mid-range.focus",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 5,
        "importPath": "mid-range.focus",
        "description": "mid-range.focus",
        "peekOfCode": "E = KeyPressEvent\ndef focus_next(event: E) -> None:\n    \"\"\"\n    Focus the next visible Window.\n    (Often bound to the `Tab` key.)\n    \"\"\"\n    event.app.layout.focus_next()\ndef focus_previous(event: E) -> None:\n    \"\"\"\n    Focus the previous visible Window.",
        "detail": "mid-range.focus",
        "documentation": {}
    },
    {
        "label": "current_dir",
        "kind": 5,
        "importPath": "mid-range.folder_content_sorter",
        "description": "mid-range.folder_content_sorter",
        "peekOfCode": "current_dir = os.path.dirname(os.path.realpath(__file__))\nfor filename in os.listdir(current_dir):\n    # for images\n    if filename.endswith((\".jpg\", \".png\", \".gif\")):\n        if not os.path.exists(\"Images\"):\n            os.makedirs(\"Images\")\n        shutil.copy(filename, \"Images\")\n        os.remove(filename)\n        print(\"Images folder done\")\n    # for documents",
        "detail": "mid-range.folder_content_sorter",
        "documentation": {}
    },
    {
        "label": "areFollowingPatterns",
        "kind": 2,
        "importPath": "mid-range.followingPatterns",
        "description": "mid-range.followingPatterns",
        "peekOfCode": "def areFollowingPatterns(strings, patterns):\n    pattern_to_string = {}\n    string_to_pattern = {}\n    for i in range(len(patterns)):\n        # first, check condition that strings are equal for patterns[i]=patterns[j]\n        this_pattern = patterns[i]\n        if patterns[i] in pattern_to_string:\n            if strings[i] != pattern_to_string[this_pattern]:\n                return False\n        else:",
        "detail": "mid-range.followingPatterns",
        "documentation": {}
    },
    {
        "label": "BFS",
        "kind": 2,
        "importPath": "mid-range.ford_fulkerson",
        "description": "mid-range.ford_fulkerson",
        "peekOfCode": "def BFS(graph, s, t, parent):\n    # Return True if there is node that has not iterated.\n    visited = [False] * len(graph)\n    queue = []\n    queue.append(s)\n    visited[s] = True\n    while queue:\n        u = queue.pop(0)\n        for ind in range(len(graph[u])):\n            if visited[ind] is False and graph[u][ind] > 0:",
        "detail": "mid-range.ford_fulkerson",
        "documentation": {}
    },
    {
        "label": "FordFulkerson",
        "kind": 2,
        "importPath": "mid-range.ford_fulkerson",
        "description": "mid-range.ford_fulkerson",
        "peekOfCode": "def FordFulkerson(graph, source, sink):\n    # This array is filled by BFS and to store path\n    parent = [-1] * (len(graph))\n    max_flow = 0\n    while BFS(graph, source, sink, parent):\n        path_flow = float(\"Inf\")\n        s = sink\n        while s != source:\n            # Find the minimum value in select path\n            path_flow = min(path_flow, graph[parent[s]][s])",
        "detail": "mid-range.ford_fulkerson",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "mid-range.ford_fulkerson",
        "description": "mid-range.ford_fulkerson",
        "peekOfCode": "graph = [\n    [0, 16, 13, 0, 0, 0],\n    [0, 0, 10, 12, 0, 0],\n    [0, 4, 0, 0, 14, 0],\n    [0, 0, 9, 0, 0, 20],\n    [0, 0, 0, 7, 0, 4],\n    [0, 0, 0, 0, 0, 0],\n]\nsource, sink = 0, 5\nprint(FordFulkerson(graph, source, sink))",
        "detail": "mid-range.ford_fulkerson",
        "documentation": {}
    },
    {
        "label": "NBFormatTest",
        "kind": 6,
        "importPath": "mid-range.formattest",
        "description": "mid-range.formattest",
        "peekOfCode": "class NBFormatTest:\n    \"\"\"Mixin for writing notebook format tests\"\"\"\n    # override with appropriate values in subclasses\n    nb0_ref = None\n    ext = None\n    mod = None\n    def setUp(self):\n        self.wd = tempfile.mkdtemp()\n    def tearDown(self):\n        shutil.rmtree(self.wd)",
        "detail": "mid-range.formattest",
        "documentation": {}
    },
    {
        "label": "open_utf8",
        "kind": 2,
        "importPath": "mid-range.formattest",
        "description": "mid-range.formattest",
        "peekOfCode": "def open_utf8(fname, mode):\n    return io.open(fname, mode=mode, encoding=\"utf-8\")\nclass NBFormatTest:\n    \"\"\"Mixin for writing notebook format tests\"\"\"\n    # override with appropriate values in subclasses\n    nb0_ref = None\n    ext = None\n    mod = None\n    def setUp(self):\n        self.wd = tempfile.mkdtemp()",
        "detail": "mid-range.formattest",
        "documentation": {}
    },
    {
        "label": "pjoin",
        "kind": 5,
        "importPath": "mid-range.formattest",
        "description": "mid-range.formattest",
        "peekOfCode": "pjoin = os.path.join\nfrom .nbexamples import nb0\ndef open_utf8(fname, mode):\n    return io.open(fname, mode=mode, encoding=\"utf-8\")\nclass NBFormatTest:\n    \"\"\"Mixin for writing notebook format tests\"\"\"\n    # override with appropriate values in subclasses\n    nb0_ref = None\n    ext = None\n    mod = None",
        "detail": "mid-range.formattest",
        "documentation": {}
    },
    {
        "label": "MeasurementModelForm",
        "kind": 6,
        "importPath": "mid-range.forms",
        "description": "mid-range.forms",
        "peekOfCode": "class MeasurementModelForm(forms.ModelForm):\n    class Meta:\n        model = Measurement\n        fields = (\"destination\",)",
        "detail": "mid-range.forms",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.for_loop_mountain",
        "description": "mid-range.for_loop_mountain",
        "peekOfCode": "n = int(raw_input(\"How big? \"))\n# Building block of our mountain of money\ns = \"$\"\n# Process for constructing mountain\n# Since n = 4,\n# range (1, n+1) would be all the integers from 1 to 4 including 1 and 4\n# Mountain formed would be:\n#    $    i = 1,   ' ' * n-i = 4-1 = 3  is empty space taken 3 times,    s*i is '$' taken once(i times)\n#   $$    i = 2,   ' ' * n-i = 4-2 = 2  ,  s*i is '$' taken twice(i times)\n#  $$$    and so on",
        "detail": "mid-range.for_loop_mountain",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.for_loop_mountain",
        "description": "mid-range.for_loop_mountain",
        "peekOfCode": "s = \"$\"\n# Process for constructing mountain\n# Since n = 4,\n# range (1, n+1) would be all the integers from 1 to 4 including 1 and 4\n# Mountain formed would be:\n#    $    i = 1,   ' ' * n-i = 4-1 = 3  is empty space taken 3 times,    s*i is '$' taken once(i times)\n#   $$    i = 2,   ' ' * n-i = 4-2 = 2  ,  s*i is '$' taken twice(i times)\n#  $$$    and so on\n# $$$$\n# Again, notice how i and n change for each iteration",
        "detail": "mid-range.for_loop_mountain",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.for_loop_mountain",
        "description": "mid-range.for_loop_mountain",
        "peekOfCode": "s = \"$$\"\nfor i in range(1, n + 1):\n    print(\" \" * (n - i) + s * i)",
        "detail": "mid-range.for_loop_mountain",
        "documentation": {}
    },
    {
        "label": "__docformat__",
        "kind": 5,
        "importPath": "mid-range.fr",
        "description": "mid-range.fr",
        "peekOfCode": "__docformat__ = \"reStructuredText\"\nlabels = {\n    u\"author\": u\"Auteur\",\n    u\"authors\": u\"Auteurs\",\n    u\"organization\": u\"Organisation\",\n    u\"address\": u\"Adresse\",\n    u\"contact\": u\"Contact\",\n    u\"version\": u\"Version\",\n    u\"revision\": u\"R\\u00e9vision\",\n    u\"status\": u\"Statut\",",
        "detail": "mid-range.fr",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "mid-range.fr",
        "description": "mid-range.fr",
        "peekOfCode": "labels = {\n    u\"author\": u\"Auteur\",\n    u\"authors\": u\"Auteurs\",\n    u\"organization\": u\"Organisation\",\n    u\"address\": u\"Adresse\",\n    u\"contact\": u\"Contact\",\n    u\"version\": u\"Version\",\n    u\"revision\": u\"R\\u00e9vision\",\n    u\"status\": u\"Statut\",\n    u\"date\": u\"Date\",",
        "detail": "mid-range.fr",
        "documentation": {}
    },
    {
        "label": "bibliographic_fields",
        "kind": 5,
        "importPath": "mid-range.fr",
        "description": "mid-range.fr",
        "peekOfCode": "bibliographic_fields = {\n    u\"auteur\": u\"author\",\n    u\"auteurs\": u\"authors\",\n    u\"organisation\": u\"organization\",\n    u\"adresse\": u\"address\",\n    u\"contact\": u\"contact\",\n    u\"version\": u\"version\",\n    u\"r\\u00e9vision\": u\"revision\",\n    u\"statut\": u\"status\",\n    u\"date\": u\"date\",",
        "detail": "mid-range.fr",
        "documentation": {}
    },
    {
        "label": "author_separators",
        "kind": 5,
        "importPath": "mid-range.fr",
        "description": "mid-range.fr",
        "peekOfCode": "author_separators = [\";\", \",\"]\n\"\"\"List of separator strings for the 'Authors' bibliographic field. Tried in\norder.\"\"\"",
        "detail": "mid-range.fr",
        "documentation": {}
    },
    {
        "label": "fracKnapsack",
        "kind": 2,
        "importPath": "mid-range.fractional_knapsack",
        "description": "mid-range.fractional_knapsack",
        "peekOfCode": "def fracKnapsack(vl, wt, W, n):\n    \"\"\"\n    >>> fracKnapsack([60, 100, 120], [10, 20, 30], 50, 3)\n    240.0\n    \"\"\"\n    r = list(sorted(zip(vl, wt), key=lambda x: x[0] / x[1], reverse=True))\n    vl, wt = [i[0] for i in r], [i[1] for i in r]\n    acc = list(accumulate(wt))\n    k = bisect(acc, W)\n    return (",
        "detail": "mid-range.fractional_knapsack",
        "documentation": {}
    },
    {
        "label": "fractional_knapsack",
        "kind": 2,
        "importPath": "mid-range.fractional_knapsack_2",
        "description": "mid-range.fractional_knapsack_2",
        "peekOfCode": "def fractional_knapsack(\n    value: list[int], weight: list[int], capacity: int\n) -> tuple[int, list[int]]:\n    \"\"\"\n    >>> value = [1, 3, 5, 7, 9]\n    >>> weight = [0.9, 0.7, 0.5, 0.3, 0.1]\n    >>> fractional_knapsack(value, weight, 5)\n    (25, [1, 1, 1, 1, 1])\n    >>> fractional_knapsack(value, weight, 15)\n    (25, [1, 1, 1, 1, 1])",
        "detail": "mid-range.fractional_knapsack_2",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "mid-range.fractionComparison",
        "description": "mid-range.fractionComparison",
        "peekOfCode": "r = (a * d) / (b * c)\nreturn \"<\" if r < 1 else \">\" if r > 1 else \"=\"\n# 72 chars",
        "detail": "mid-range.fractionComparison",
        "documentation": {}
    },
    {
        "label": "f,",
        "kind": 5,
        "importPath": "mid-range.fractionReducing",
        "description": "mid-range.fractionReducing",
        "peekOfCode": "f, = eval(dir()[0])\nreturn [i / math.gcd(f[0], f[1]) for i in f]",
        "detail": "mid-range.fractionReducing",
        "documentation": {}
    },
    {
        "label": "f1",
        "kind": 5,
        "importPath": "mid-range.fractions_arithmetic",
        "description": "mid-range.fractions_arithmetic",
        "peekOfCode": "f1 = fractions.Fraction(1, 2)\nf2 = fractions.Fraction(3, 4)\nprint(\"{} + {} = {}\".format(f1, f2, f1 + f2))\nprint(\"{} - {} = {}\".format(f1, f2, f1 - f2))\nprint(\"{} * {} = {}\".format(f1, f2, f1 * f2))\nprint(\"{} / {} = {}\".format(f1, f2, f1 / f2))",
        "detail": "mid-range.fractions_arithmetic",
        "documentation": {}
    },
    {
        "label": "f2",
        "kind": 5,
        "importPath": "mid-range.fractions_arithmetic",
        "description": "mid-range.fractions_arithmetic",
        "peekOfCode": "f2 = fractions.Fraction(3, 4)\nprint(\"{} + {} = {}\".format(f1, f2, f1 + f2))\nprint(\"{} - {} = {}\".format(f1, f2, f1 - f2))\nprint(\"{} * {} = {}\".format(f1, f2, f1 * f2))\nprint(\"{} / {} = {}\".format(f1, f2, f1 / f2))",
        "detail": "mid-range.fractions_arithmetic",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "mid-range.fractions_from_decimal",
        "description": "mid-range.fractions_from_decimal",
        "peekOfCode": "values = [\n    decimal.Decimal(\"0.1\"),\n    decimal.Decimal(\"0.5\"),\n    decimal.Decimal(\"1.5\"),\n    decimal.Decimal(\"2.0\"),\n]\nfor v in values:\n    print(\"{} = {}\".format(v, fractions.Fraction(v)))",
        "detail": "mid-range.fractions_from_decimal",
        "documentation": {}
    },
    {
        "label": "f_pi",
        "kind": 5,
        "importPath": "mid-range.fractions_limit_denominator",
        "description": "mid-range.fractions_limit_denominator",
        "peekOfCode": "f_pi = fractions.Fraction(str(math.pi))\nprint(\"No limit =\", f_pi)\nfor i in [1, 6, 11, 60, 70, 90, 100]:\n    limited = f_pi.limit_denominator(i)\n    print(\"{0:8} = {1}\".format(i, limited))",
        "detail": "mid-range.fractions_limit_denominator",
        "documentation": {}
    },
    {
        "label": "dumpFrames",
        "kind": 2,
        "importPath": "mid-range.frame_utils",
        "description": "mid-range.frame_utils",
        "peekOfCode": "def dumpFrames(frame: Frame, indentation: str = \"\") -> str:\n    results = []\n    results.append(indentation + frame.url)\n    for child in frame.childFrames:\n        results.append(dumpFrames(child, \"    \" + indentation))\n    return \"\\n\".join(results)",
        "detail": "mid-range.frame_utils",
        "documentation": {}
    },
    {
        "label": "freeze_includes",
        "kind": 2,
        "importPath": "mid-range.freeze_support",
        "description": "mid-range.freeze_support",
        "peekOfCode": "def freeze_includes() -> List[str]:\n    \"\"\"Return a list of module names used by pytest that should be\n    included by cx_freeze.\"\"\"\n    import py\n    import _pytest\n    result = list(_iter_all_modules(py))\n    result += list(_iter_all_modules(_pytest))\n    return result\ndef _iter_all_modules(\n    package: Union[str, types.ModuleType], prefix: str = \"\"",
        "detail": "mid-range.freeze_support",
        "documentation": {}
    },
    {
        "label": "frequency_sort",
        "kind": 2,
        "importPath": "mid-range.frequency_sort",
        "description": "mid-range.frequency_sort",
        "peekOfCode": "def frequency_sort(s):\n    \"\"\"\n    Inputs:\n    s -> str\n    Output:\n    str\n     \"\"\"\n    # Your code here\n    freq_dict = {}\n    for ch in s:",
        "detail": "mid-range.frequency_sort",
        "documentation": {}
    },
    {
        "label": "DFS",
        "kind": 2,
        "importPath": "mid-range.friend-circle",
        "description": "mid-range.friend-circle",
        "peekOfCode": "def DFS(friendships, n, visited, v):\n    for x in range(n):\n        # A student is in the friend circle if he/she is friendships with the student represented by\n        # studentIndex and if he/she is not already in a friend circle\n        if friendships[v, x] and visited[x] == 0:\n            if x != v:\n                visited[x] = 1\n                DFS(friendships, n, visited, x)\nn = 4\ndef csFriendCircles(friendships):",
        "detail": "mid-range.friend-circle",
        "documentation": {}
    },
    {
        "label": "csFriendCircles",
        "kind": 2,
        "importPath": "mid-range.friend-circle",
        "description": "mid-range.friend-circle",
        "peekOfCode": "def csFriendCircles(friendships):\n    numCircles = 0  # Number of friend circles\n    # Keep track of whether a student is already in a friend circle\n    visited = np.zeros((n))\n    # Start with the first student and recursively find all other students in his/her\n    # friend circle. Then, do the same thing for the next student that is not already\n    # in a friend circle. Repeat until all students are in a friend circle.\n    for i in range(n):\n        if visited[i] == 0:\n            visited[i] = 1",
        "detail": "mid-range.friend-circle",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.friend-circle",
        "description": "mid-range.friend-circle",
        "peekOfCode": "n = 4\ndef csFriendCircles(friendships):\n    numCircles = 0  # Number of friend circles\n    # Keep track of whether a student is already in a friend circle\n    visited = np.zeros((n))\n    # Start with the first student and recursively find all other students in his/her\n    # friend circle. Then, do the same thing for the next student that is not already\n    # in a friend circle. Repeat until all students are in a friend circle.\n    for i in range(n):\n        if visited[i] == 0:",
        "detail": "mid-range.friend-circle",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "mid-range.friendsCircle",
        "description": "mid-range.friendsCircle",
        "peekOfCode": "def dfs(row, friends, visited_arr):\n    visited_arr.add(row)\n    for neighbor in range(len(friends[row])):\n        if friends[row][neighbor] == 1 and neighbor not in visited_arr:\n            dfs(neighbor, friends, visited_arr)\n    return visited_arr\ndef csFriendCircles(friendships):\n    count = 0\n    visited = set()\n    if friendships is None or len(friendships) == 0:",
        "detail": "mid-range.friendsCircle",
        "documentation": {}
    },
    {
        "label": "csFriendCircles",
        "kind": 2,
        "importPath": "mid-range.friendsCircle",
        "description": "mid-range.friendsCircle",
        "peekOfCode": "def csFriendCircles(friendships):\n    count = 0\n    visited = set()\n    if friendships is None or len(friendships) == 0:\n        return 0\n    for row in range(len(friendships)):\n        if friendships[row][row] == 1 and row not in visited:\n            count += 1\n            visited = dfs(row, friendships, visited)\n    return count",
        "detail": "mid-range.friendsCircle",
        "documentation": {}
    },
    {
        "label": "messageFromBinaryCode",
        "kind": 2,
        "importPath": "mid-range.FromBinaryCode",
        "description": "mid-range.FromBinaryCode",
        "peekOfCode": "def messageFromBinaryCode(code):\n    phrase = \"\"\n    bits = [int(code[i * 8 : i * 8 + 8], 2) for i in range(len(code) // 8)]\n    for j in range(len(bits)):\n        phrase += chr(bits[j])\n    return phrase",
        "detail": "mid-range.FromBinaryCode",
        "documentation": {}
    },
    {
        "label": "centuryFromYear",
        "kind": 2,
        "importPath": "mid-range.FromYear",
        "description": "mid-range.FromYear",
        "peekOfCode": "def centuryFromYear(year):\n    # We begin by getting the INTEGER quotient of the division of the year given by 100.\n    # This will give us the first two digits, which would be the century.\n    cen = int(year / 100)\n    # However, we should keep in mind that we refer to years between e.g. 1701 - 1800\n    # as the \"18th century\". Hence, we implement a while loop, where the condition is\n    # that the year is a positive integer (which is always true). If the remainder of the\n    # division of the year by 100 is 0, then the two first digits of the division represent\n    # the century. Otherwise, if the remainder is non-zero, the century is found by adding 1\n    # to the result of the division (i.e. \"cen\").",
        "detail": "mid-range.FromYear",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "mid-range.from_sequence",
        "description": "mid-range.from_sequence",
        "peekOfCode": "class Node:\n    def __init__(self, data=None):\n        self.data = data\n        self.next = None\n    def __repr__(self):\n        \"\"\"Returns a visual representation of the node and all its following nodes.\"\"\"\n        string_rep = \"\"\n        temp = self\n        while temp:\n            string_rep += f\"<{temp.data}> ---> \"",
        "detail": "mid-range.from_sequence",
        "documentation": {}
    },
    {
        "label": "make_linked_list",
        "kind": 2,
        "importPath": "mid-range.from_sequence",
        "description": "mid-range.from_sequence",
        "peekOfCode": "def make_linked_list(elements_list):\n    \"\"\"Creates a Linked List from the elements of the given sequence\n    (list/tuple) and returns the head of the Linked List.\"\"\"\n    # if elements_list is empty\n    if not elements_list:\n        raise Exception(\"The Elements List is empty\")\n    # Set first element as Head\n    head = Node(elements_list[0])\n    current = head\n    # Loop through elements from position 1",
        "detail": "mid-range.from_sequence",
        "documentation": {}
    },
    {
        "label": "list_data",
        "kind": 5,
        "importPath": "mid-range.from_sequence",
        "description": "mid-range.from_sequence",
        "peekOfCode": "list_data = [1, 3, 5, 32, 44, 12, 43]\nprint(f\"List: {list_data}\")\nprint(\"Creating Linked List from List.\")\nlinked_list = make_linked_list(list_data)\nprint(\"Linked List:\")\nprint(linked_list)",
        "detail": "mid-range.from_sequence",
        "documentation": {}
    },
    {
        "label": "linked_list",
        "kind": 5,
        "importPath": "mid-range.from_sequence",
        "description": "mid-range.from_sequence",
        "peekOfCode": "linked_list = make_linked_list(list_data)\nprint(\"Linked List:\")\nprint(linked_list)",
        "detail": "mid-range.from_sequence",
        "documentation": {}
    },
    {
        "label": "FruityStyle",
        "kind": 6,
        "importPath": "mid-range.fruity",
        "description": "mid-range.fruity",
        "peekOfCode": "class FruityStyle(Style):\n    \"\"\"\n    Pygments version of the \"native\" vim theme.\n    \"\"\"\n    background_color = \"#111111\"\n    highlight_color = \"#333333\"\n    styles = {\n        Whitespace: \"#888888\",\n        Token: \"#ffffff\",\n        Generic.Output: \"#444444 bg:#222222\",",
        "detail": "mid-range.fruity",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Fruit_Into_Basked",
        "description": "mid-range.Fruit_Into_Basked",
        "peekOfCode": "class Solution:\n    def totalFruits(self, Tree):\n        last_fruit = -1\n        second_last_fruit = -1\n        last_fruit_count = 0\n        current_max = 0\n        maximum = 0\n        for fruit in Tree:\n            if fruit == last_fruit or fruit == second_last_fruit:\n                current_max += 1",
        "detail": "mid-range.Fruit_Into_Basked",
        "documentation": {}
    },
    {
        "label": "port",
        "kind": 5,
        "importPath": "mid-range.ftp_client_server",
        "description": "mid-range.ftp_client_server",
        "peekOfCode": "port = 60000  # Reserve a port for your service.\ns = socket.socket()  # Create a socket object\nhost = socket.gethostname()  # Get local machine name\ns.bind((host, port))  # Bind to the port\ns.listen(5)  # Now wait for client connection.\nprint(\"Server listening....\")\nwhile True:\n    conn, addr = s.accept()  # Establish connection with client.\n    print(\"Got connection from\", addr)\n    data = conn.recv(1024)",
        "detail": "mid-range.ftp_client_server",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.ftp_client_server",
        "description": "mid-range.ftp_client_server",
        "peekOfCode": "s = socket.socket()  # Create a socket object\nhost = socket.gethostname()  # Get local machine name\ns.bind((host, port))  # Bind to the port\ns.listen(5)  # Now wait for client connection.\nprint(\"Server listening....\")\nwhile True:\n    conn, addr = s.accept()  # Establish connection with client.\n    print(\"Got connection from\", addr)\n    data = conn.recv(1024)\n    print(\"Server received\", repr(data))",
        "detail": "mid-range.ftp_client_server",
        "documentation": {}
    },
    {
        "label": "host",
        "kind": 5,
        "importPath": "mid-range.ftp_client_server",
        "description": "mid-range.ftp_client_server",
        "peekOfCode": "host = socket.gethostname()  # Get local machine name\ns.bind((host, port))  # Bind to the port\ns.listen(5)  # Now wait for client connection.\nprint(\"Server listening....\")\nwhile True:\n    conn, addr = s.accept()  # Establish connection with client.\n    print(\"Got connection from\", addr)\n    data = conn.recv(1024)\n    print(\"Server received\", repr(data))\n    filename = \"mytext.txt\"",
        "detail": "mid-range.ftp_client_server",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.ftp_client_server",
        "description": "mid-range.ftp_client_server",
        "peekOfCode": "s = socket.socket()  # Create a socket object\nhost = socket.gethostname()  # Get local machine name\nport = 60000  # Reserve a port for your service.\ns.connect((host, port))\ns.send(\"Hello server!\")\nwith open(\"received_file\", \"wb\") as f:\n    print(\"file opened\")\n    while True:\n        print(\"receiving data...\")\n        data = s.recv(1024)",
        "detail": "mid-range.ftp_client_server",
        "documentation": {}
    },
    {
        "label": "host",
        "kind": 5,
        "importPath": "mid-range.ftp_client_server",
        "description": "mid-range.ftp_client_server",
        "peekOfCode": "host = socket.gethostname()  # Get local machine name\nport = 60000  # Reserve a port for your service.\ns.connect((host, port))\ns.send(\"Hello server!\")\nwith open(\"received_file\", \"wb\") as f:\n    print(\"file opened\")\n    while True:\n        print(\"receiving data...\")\n        data = s.recv(1024)\n        print(\"data=%s\", (data))",
        "detail": "mid-range.ftp_client_server",
        "documentation": {}
    },
    {
        "label": "port",
        "kind": 5,
        "importPath": "mid-range.ftp_client_server",
        "description": "mid-range.ftp_client_server",
        "peekOfCode": "port = 60000  # Reserve a port for your service.\ns.connect((host, port))\ns.send(\"Hello server!\")\nwith open(\"received_file\", \"wb\") as f:\n    print(\"file opened\")\n    while True:\n        print(\"receiving data...\")\n        data = s.recv(1024)\n        print(\"data=%s\", (data))\n        if not data:",
        "detail": "mid-range.ftp_client_server",
        "documentation": {}
    },
    {
        "label": "ReceiveFile",
        "kind": 2,
        "importPath": "mid-range.ftp_send_receive",
        "description": "mid-range.ftp_send_receive",
        "peekOfCode": "def ReceiveFile():\n    FileName = \"example.txt\" \"\"\" Enter the location of the file \"\"\"\n    LocalFile = open(FileName, \"wb\")\n    ftp.retrbinary(\"RETR \" + FileName, LocalFile.write, 1024)\n    ftp.quit()\n    LocalFile.close()\n\"\"\"\n\tThe file which will be sent via the FTP server\n\tThe file send will be send to the current working directory\n\"\"\"",
        "detail": "mid-range.ftp_send_receive",
        "documentation": {}
    },
    {
        "label": "SendFile",
        "kind": 2,
        "importPath": "mid-range.ftp_send_receive",
        "description": "mid-range.ftp_send_receive",
        "peekOfCode": "def SendFile():\n    FileName = \"example.txt\" \"\"\" Enter the name of the file \"\"\"\n    ftp.storbinary(\"STOR \" + FileName, open(FileName, \"rb\"))\n    ftp.quit()",
        "detail": "mid-range.ftp_send_receive",
        "documentation": {}
    },
    {
        "label": "ftp",
        "kind": 5,
        "importPath": "mid-range.ftp_send_receive",
        "description": "mid-range.ftp_send_receive",
        "peekOfCode": "ftp = FTP(\"xxx.xxx.x.x\")  # Enter the ip address or the domain name here\nftp.login(user=\"username\", passwd=\"password\")\nftp.cwd(\"/Enter the directory here/\")\n\"\"\"\n\tThe file which will be received via the FTP server\n\tEnter the location of the file where the file is received\n\"\"\"\ndef ReceiveFile():\n    FileName = \"example.txt\" \"\"\" Enter the location of the file \"\"\"\n    LocalFile = open(FileName, \"wb\")",
        "detail": "mid-range.ftp_send_receive",
        "documentation": {}
    },
    {
        "label": "FujitsuFCompiler",
        "kind": 6,
        "importPath": "mid-range.fujitsu",
        "description": "mid-range.fujitsu",
        "peekOfCode": "class FujitsuFCompiler(FCompiler):\n    compiler_type = \"fujitsu\"\n    description = \"Fujitsu Fortran Compiler\"\n    possible_executables = [\"frt\"]\n    version_pattern = r\"frt \\(FRT\\) (?P<version>[a-z\\d.]+)\"\n    # $ frt --version\n    # frt (FRT) x.x.x yyyymmdd\n    executables = {\n        \"version_cmd\": [\"<F77>\", \"--version\"],\n        \"compiler_f77\": [\"frt\", \"-Fixed\"],",
        "detail": "mid-range.fujitsu",
        "documentation": {}
    },
    {
        "label": "compilers",
        "kind": 5,
        "importPath": "mid-range.fujitsu",
        "description": "mid-range.fujitsu",
        "peekOfCode": "compilers = [\"FujitsuFCompiler\"]\nclass FujitsuFCompiler(FCompiler):\n    compiler_type = \"fujitsu\"\n    description = \"Fujitsu Fortran Compiler\"\n    possible_executables = [\"frt\"]\n    version_pattern = r\"frt \\(FRT\\) (?P<version>[a-z\\d.]+)\"\n    # $ frt --version\n    # frt (FRT) x.x.x yyyymmdd\n    executables = {\n        \"version_cmd\": [\"<F77>\", \"--version\"],",
        "detail": "mid-range.fujitsu",
        "documentation": {}
    },
    {
        "label": "is_even",
        "kind": 2,
        "importPath": "mid-range.func",
        "description": "mid-range.func",
        "peekOfCode": "def is_even(num):\n    if int(num) % 2 == 0:\n        return True\n    else:\n        return False\n# Read a number from the keyboard\nnum = input(\"Enter a number: \")\n# Print out \"Even!\" if the number is even. Otherwise print \"Odd\"\neven = is_even(num)\nif even == True:",
        "detail": "mid-range.func",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "mid-range.func",
        "description": "mid-range.func",
        "peekOfCode": "num = input(\"Enter a number: \")\n# Print out \"Even!\" if the number is even. Otherwise print \"Odd\"\neven = is_even(num)\nif even == True:\n    print(\"Even!\")\nelse:\n    print(\"Odd!\")",
        "detail": "mid-range.func",
        "documentation": {}
    },
    {
        "label": "even",
        "kind": 5,
        "importPath": "mid-range.func",
        "description": "mid-range.func",
        "peekOfCode": "even = is_even(num)\nif even == True:\n    print(\"Even!\")\nelse:\n    print(\"Odd!\")",
        "detail": "mid-range.func",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "mid-range.function",
        "description": "mid-range.function",
        "peekOfCode": "def add(x, y):\n    \"\"\"Add two objects together to produce a new object.\n    Two differences between `add` and `main` are that:\n    - It accepts input parameters\n    - It returns a value\n    \"\"\"\n    return x + y\ndef sum_until(fn, n):\n    \"\"\"Sum function results from 0 until n - 1.\n    This expects a function to be provided as its first input and an integer",
        "detail": "mid-range.function",
        "documentation": {}
    },
    {
        "label": "sum_until",
        "kind": 2,
        "importPath": "mid-range.function",
        "description": "mid-range.function",
        "peekOfCode": "def sum_until(fn, n):\n    \"\"\"Sum function results from 0 until n - 1.\n    This expects a function to be provided as its first input and an integer\n    as its second input. Like `add`, `sum_until` returns a value.\n    The fact that a function can be passed into `sum_until` highlights a core\n    concept that was mentioned before: everything in Python is an object, and\n    that includes this docstring!\n    \"\"\"\n    total = 0\n    for i in range(n):",
        "detail": "mid-range.function",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.function",
        "description": "mid-range.function",
        "peekOfCode": "def main():\n    # The `add` function can be used for numbers as expected\n    add_result_int = add(1, 2)\n    assert add_result_int == 3\n    # The `add` function can be used for strings as well\n    add_result_string = add(\"hello\", \" world\")\n    assert add_result_string == \"hello world\"\n    # Run the input function multiple times. Notice that we make use of\n    # `lambda` to create an anonymous function (i.e. a function without\n    # a name) that accepts one input and does something with it. Anonymous",
        "detail": "mid-range.function",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.functional",
        "description": "mid-range.functional",
        "peekOfCode": "__all__ = []",
        "detail": "mid-range.functional",
        "documentation": {}
    },
    {
        "label": "NoFileError",
        "kind": 6,
        "importPath": "mid-range.functional_test_file",
        "description": "mid-range.functional_test_file",
        "peekOfCode": "class NoFileError(Exception):\n    pass\nclass FunctionalTestFile:\n    \"\"\"A single functional test case file with options.\"\"\"\n    _CONVERTERS = {\n        \"min_pyver\": parse_python_version,\n        \"max_pyver\": parse_python_version,\n        \"requires\": lambda s: s.split(\",\"),\n    }\n    def __init__(self, directory, filename):",
        "detail": "mid-range.functional_test_file",
        "documentation": {}
    },
    {
        "label": "FunctionalTestFile",
        "kind": 6,
        "importPath": "mid-range.functional_test_file",
        "description": "mid-range.functional_test_file",
        "peekOfCode": "class FunctionalTestFile:\n    \"\"\"A single functional test case file with options.\"\"\"\n    _CONVERTERS = {\n        \"min_pyver\": parse_python_version,\n        \"max_pyver\": parse_python_version,\n        \"requires\": lambda s: s.split(\",\"),\n    }\n    def __init__(self, directory, filename):\n        self._directory = directory\n        self.base = filename.replace(\".py\", \"\")",
        "detail": "mid-range.functional_test_file",
        "documentation": {}
    },
    {
        "label": "parse_python_version",
        "kind": 2,
        "importPath": "mid-range.functional_test_file",
        "description": "mid-range.functional_test_file",
        "peekOfCode": "def parse_python_version(ver_str):\n    return tuple(int(digit) for digit in ver_str.split(\".\"))\nclass NoFileError(Exception):\n    pass\nclass FunctionalTestFile:\n    \"\"\"A single functional test case file with options.\"\"\"\n    _CONVERTERS = {\n        \"min_pyver\": parse_python_version,\n        \"max_pyver\": parse_python_version,\n        \"requires\": lambda s: s.split(\",\"),",
        "detail": "mid-range.functional_test_file",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "mid-range.functions",
        "description": "mid-range.functions",
        "peekOfCode": "def add(a, b):\n    # ADD R0 R1\n    return a + b  # RET\n# CALL reg\n# RET\n# store our variables on the stack\n# store our variables in registers R0 R1\n# return value can be stored in a register R0",
        "detail": "mid-range.functions",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.functions",
        "description": "mid-range.functions",
        "peekOfCode": "x = 2  # SAVE 2 R0\ny = 4  # SAVE 4 R1\nadd(x, y)  # CALL 11\nprint(\"R0\")  # PRINT_REG R0\n# halt\ndef add(a, b):\n    # ADD R0 R1\n    return a + b  # RET\n# CALL reg\n# RET",
        "detail": "mid-range.functions",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "mid-range.functions",
        "description": "mid-range.functions",
        "peekOfCode": "y = 4  # SAVE 4 R1\nadd(x, y)  # CALL 11\nprint(\"R0\")  # PRINT_REG R0\n# halt\ndef add(a, b):\n    # ADD R0 R1\n    return a + b  # RET\n# CALL reg\n# RET\n# store our variables on the stack",
        "detail": "mid-range.functions",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "mid-range.functools_callable",
        "description": "mid-range.functools_callable",
        "peekOfCode": "class MyClass:\n    \"Demonstration class for functools\"\n    def __call__(self, e, f=6):\n        \"Docstring for MyClass.__call__\"\n        print(\"  called object with:\", (self, e, f))\ndef show_details(name, f):\n    \"Show details of a callable object.\"\n    print(\"{}:\".format(name))\n    print(\"  object:\", f)\n    print(\"  __name__:\", end=\" \")",
        "detail": "mid-range.functools_callable",
        "documentation": {}
    },
    {
        "label": "show_details",
        "kind": 2,
        "importPath": "mid-range.functools_callable",
        "description": "mid-range.functools_callable",
        "peekOfCode": "def show_details(name, f):\n    \"Show details of a callable object.\"\n    print(\"{}:\".format(name))\n    print(\"  object:\", f)\n    print(\"  __name__:\", end=\" \")\n    try:\n        print(f.__name__)\n    except AttributeError:\n        print(\"(no __name__)\")\n    print(\"  __doc__\", repr(f.__doc__))",
        "detail": "mid-range.functools_callable",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "mid-range.functools_callable",
        "description": "mid-range.functools_callable",
        "peekOfCode": "o = MyClass()\nshow_details(\"instance\", o)\no(\"e goes here\")\nprint()\np = functools.partial(o, e=\"default for e\", f=8)\nfunctools.update_wrapper(p, o)\nshow_details(\"instance wrapper\", p)\np()",
        "detail": "mid-range.functools_callable",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "mid-range.functools_callable",
        "description": "mid-range.functools_callable",
        "peekOfCode": "p = functools.partial(o, e=\"default for e\", f=8)\nfunctools.update_wrapper(p, o)\nshow_details(\"instance wrapper\", p)\np()",
        "detail": "mid-range.functools_callable",
        "documentation": {}
    },
    {
        "label": "MyObject",
        "kind": 6,
        "importPath": "mid-range.functools_cmp_to_key",
        "description": "mid-range.functools_cmp_to_key",
        "peekOfCode": "class MyObject:\n    def __init__(self, val):\n        self.val = val\n    def __str__(self):\n        return \"MyObject({})\".format(self.val)\ndef compare_obj(a, b):\n    \"\"\"Old-style comparison function.\n    \"\"\"\n    print(\"comparing {} and {}\".format(a, b))\n    if a.val < b.val:",
        "detail": "mid-range.functools_cmp_to_key",
        "documentation": {}
    },
    {
        "label": "compare_obj",
        "kind": 2,
        "importPath": "mid-range.functools_cmp_to_key",
        "description": "mid-range.functools_cmp_to_key",
        "peekOfCode": "def compare_obj(a, b):\n    \"\"\"Old-style comparison function.\n    \"\"\"\n    print(\"comparing {} and {}\".format(a, b))\n    if a.val < b.val:\n        return -1\n    elif a.val > b.val:\n        return 1\n    return 0\n# Make a key function using cmp_to_key()",
        "detail": "mid-range.functools_cmp_to_key",
        "documentation": {}
    },
    {
        "label": "get_key_wrapper",
        "kind": 2,
        "importPath": "mid-range.functools_cmp_to_key",
        "description": "mid-range.functools_cmp_to_key",
        "peekOfCode": "def get_key_wrapper(o):\n    \"Wrapper function for get_key to allow for print statements.\"\n    new_key = get_key(o)\n    print(\"key_wrapper({}) -> {!r}\".format(o, new_key))\n    return new_key\nobjs = [MyObject(x) for x in range(5, 0, -1)]\nfor o in sorted(objs, key=get_key_wrapper):\n    print(o)",
        "detail": "mid-range.functools_cmp_to_key",
        "documentation": {}
    },
    {
        "label": "get_key",
        "kind": 5,
        "importPath": "mid-range.functools_cmp_to_key",
        "description": "mid-range.functools_cmp_to_key",
        "peekOfCode": "get_key = functools.cmp_to_key(compare_obj)\ndef get_key_wrapper(o):\n    \"Wrapper function for get_key to allow for print statements.\"\n    new_key = get_key(o)\n    print(\"key_wrapper({}) -> {!r}\".format(o, new_key))\n    return new_key\nobjs = [MyObject(x) for x in range(5, 0, -1)]\nfor o in sorted(objs, key=get_key_wrapper):\n    print(o)",
        "detail": "mid-range.functools_cmp_to_key",
        "documentation": {}
    },
    {
        "label": "objs",
        "kind": 5,
        "importPath": "mid-range.functools_cmp_to_key",
        "description": "mid-range.functools_cmp_to_key",
        "peekOfCode": "objs = [MyObject(x) for x in range(5, 0, -1)]\nfor o in sorted(objs, key=get_key_wrapper):\n    print(o)",
        "detail": "mid-range.functools_cmp_to_key",
        "documentation": {}
    },
    {
        "label": "expensive",
        "kind": 2,
        "importPath": "mid-range.functools_lru_cache",
        "description": "mid-range.functools_lru_cache",
        "peekOfCode": "def expensive(a, b):\n    print(\"expensive({}, {})\".format(a, b))\n    return a * b\nMAX = 2\nprint(\"First set of calls:\")\nfor i in range(MAX):\n    for j in range(MAX):\n        expensive(i, j)\nprint(expensive.cache_info())\nprint(\"\\nSecond set of calls:\")",
        "detail": "mid-range.functools_lru_cache",
        "documentation": {}
    },
    {
        "label": "MAX",
        "kind": 5,
        "importPath": "mid-range.functools_lru_cache",
        "description": "mid-range.functools_lru_cache",
        "peekOfCode": "MAX = 2\nprint(\"First set of calls:\")\nfor i in range(MAX):\n    for j in range(MAX):\n        expensive(i, j)\nprint(expensive.cache_info())\nprint(\"\\nSecond set of calls:\")\nfor i in range(MAX + 1):\n    for j in range(MAX + 1):\n        expensive(i, j)",
        "detail": "mid-range.functools_lru_cache",
        "documentation": {}
    },
    {
        "label": "expensive",
        "kind": 2,
        "importPath": "mid-range.functools_lru_cache_arguments",
        "description": "mid-range.functools_lru_cache_arguments",
        "peekOfCode": "def expensive(a, b):\n    print(\"called expensive({}, {})\".format(a, b))\n    return a * b\ndef make_call(a, b):\n    print(\"({}, {})\".format(a, b), end=\" \")\n    pre_hits = expensive.cache_info().hits\n    expensive(a, b)\n    post_hits = expensive.cache_info().hits\n    if post_hits > pre_hits:\n        print(\"cache hit\")",
        "detail": "mid-range.functools_lru_cache_arguments",
        "documentation": {}
    },
    {
        "label": "make_call",
        "kind": 2,
        "importPath": "mid-range.functools_lru_cache_arguments",
        "description": "mid-range.functools_lru_cache_arguments",
        "peekOfCode": "def make_call(a, b):\n    print(\"({}, {})\".format(a, b), end=\" \")\n    pre_hits = expensive.cache_info().hits\n    expensive(a, b)\n    post_hits = expensive.cache_info().hits\n    if post_hits > pre_hits:\n        print(\"cache hit\")\nmake_call(1, 2)\ntry:\n    make_call([1], 2)",
        "detail": "mid-range.functools_lru_cache_arguments",
        "documentation": {}
    },
    {
        "label": "expensive",
        "kind": 2,
        "importPath": "mid-range.functools_lru_cache_expire",
        "description": "mid-range.functools_lru_cache_expire",
        "peekOfCode": "def expensive(a, b):\n    print(\"called expensive({}, {})\".format(a, b))\n    return a * b\ndef make_call(a, b):\n    print(\"({}, {})\".format(a, b), end=\" \")\n    pre_hits = expensive.cache_info().hits\n    expensive(a, b)\n    post_hits = expensive.cache_info().hits\n    if post_hits > pre_hits:\n        print(\"cache hit\")",
        "detail": "mid-range.functools_lru_cache_expire",
        "documentation": {}
    },
    {
        "label": "make_call",
        "kind": 2,
        "importPath": "mid-range.functools_lru_cache_expire",
        "description": "mid-range.functools_lru_cache_expire",
        "peekOfCode": "def make_call(a, b):\n    print(\"({}, {})\".format(a, b), end=\" \")\n    pre_hits = expensive.cache_info().hits\n    expensive(a, b)\n    post_hits = expensive.cache_info().hits\n    if post_hits > pre_hits:\n        print(\"cache hit\")\nprint(\"Establish the cache\")\nmake_call(1, 2)\nmake_call(2, 3)",
        "detail": "mid-range.functools_lru_cache_expire",
        "documentation": {}
    },
    {
        "label": "myfunc",
        "kind": 2,
        "importPath": "mid-range.functools_partial",
        "description": "mid-range.functools_partial",
        "peekOfCode": "def myfunc(a, b=2):\n    \"Docstring for myfunc().\"\n    print(\"  called myfunc with:\", (a, b))\ndef show_details(name, f, is_partial=False):\n    \"Show details of a callable object.\"\n    print(\"{}:\".format(name))\n    print(\"  object:\", f)\n    if not is_partial:\n        print(\"  __name__:\", f.__name__)\n    if is_partial:",
        "detail": "mid-range.functools_partial",
        "documentation": {}
    },
    {
        "label": "show_details",
        "kind": 2,
        "importPath": "mid-range.functools_partial",
        "description": "mid-range.functools_partial",
        "peekOfCode": "def show_details(name, f, is_partial=False):\n    \"Show details of a callable object.\"\n    print(\"{}:\".format(name))\n    print(\"  object:\", f)\n    if not is_partial:\n        print(\"  __name__:\", f.__name__)\n    if is_partial:\n        print(\"  func:\", f.func)\n        print(\"  args:\", f.args)\n        print(\"  keywords:\", f.keywords)",
        "detail": "mid-range.functools_partial",
        "documentation": {}
    },
    {
        "label": "p1",
        "kind": 5,
        "importPath": "mid-range.functools_partial",
        "description": "mid-range.functools_partial",
        "peekOfCode": "p1 = functools.partial(myfunc, b=4)\nshow_details(\"partial with named default\", p1, True)\np1(\"passing a\")\np1(\"override b\", b=5)\nprint()\n# Set default values for both 'a' and 'b'.\np2 = functools.partial(myfunc, \"default a\", b=99)\nshow_details(\"partial with defaults\", p2, True)\np2()\np2(b=\"override b\")",
        "detail": "mid-range.functools_partial",
        "documentation": {}
    },
    {
        "label": "p2",
        "kind": 5,
        "importPath": "mid-range.functools_partial",
        "description": "mid-range.functools_partial",
        "peekOfCode": "p2 = functools.partial(myfunc, \"default a\", b=99)\nshow_details(\"partial with defaults\", p2, True)\np2()\np2(b=\"override b\")\nprint()\nprint(\"Insufficient arguments:\")\np1()",
        "detail": "mid-range.functools_partial",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "mid-range.functools_partialmethod",
        "description": "mid-range.functools_partialmethod",
        "peekOfCode": "class MyClass:\n    \"Demonstration class for functools\"\n    def __init__(self):\n        self.attr = \"instance attribute\"\n    method1 = functools.partialmethod(standalone)\n    method2 = functools.partial(standalone)\no = MyClass()\nprint(\"standalone\")\nstandalone(None)\nprint()",
        "detail": "mid-range.functools_partialmethod",
        "documentation": {}
    },
    {
        "label": "standalone",
        "kind": 2,
        "importPath": "mid-range.functools_partialmethod",
        "description": "mid-range.functools_partialmethod",
        "peekOfCode": "def standalone(self, a=1, b=2):\n    \"Standalone function\"\n    print(\"  called standalone with:\", (self, a, b))\n    if self is not None:\n        print(\"  self.attr =\", self.attr)\nclass MyClass:\n    \"Demonstration class for functools\"\n    def __init__(self):\n        self.attr = \"instance attribute\"\n    method1 = functools.partialmethod(standalone)",
        "detail": "mid-range.functools_partialmethod",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "mid-range.functools_partialmethod",
        "description": "mid-range.functools_partialmethod",
        "peekOfCode": "o = MyClass()\nprint(\"standalone\")\nstandalone(None)\nprint()\nprint(\"method1 as partialmethod\")\no.method1()\nprint()\nprint(\"method2 as partial\")\ntry:\n    o.method2()",
        "detail": "mid-range.functools_partialmethod",
        "documentation": {}
    },
    {
        "label": "do_reduce",
        "kind": 2,
        "importPath": "mid-range.functools_reduce",
        "description": "mid-range.functools_reduce",
        "peekOfCode": "def do_reduce(a, b):\n    print(\"do_reduce({}, {})\".format(a, b))\n    return a + b\ndata = range(1, 5)\nprint(data)\nresult = functools.reduce(do_reduce, data)\nprint(\"result: {}\".format(result))",
        "detail": "mid-range.functools_reduce",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.functools_reduce",
        "description": "mid-range.functools_reduce",
        "peekOfCode": "data = range(1, 5)\nprint(data)\nresult = functools.reduce(do_reduce, data)\nprint(\"result: {}\".format(result))",
        "detail": "mid-range.functools_reduce",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "mid-range.functools_reduce",
        "description": "mid-range.functools_reduce",
        "peekOfCode": "result = functools.reduce(do_reduce, data)\nprint(\"result: {}\".format(result))",
        "detail": "mid-range.functools_reduce",
        "documentation": {}
    },
    {
        "label": "do_reduce",
        "kind": 2,
        "importPath": "mid-range.functools_reduce_initializer",
        "description": "mid-range.functools_reduce_initializer",
        "peekOfCode": "def do_reduce(a, b):\n    print(\"do_reduce({}, {})\".format(a, b))\n    return a + b\ndata = range(1, 5)\nprint(data)\nresult = functools.reduce(do_reduce, data, 99)\nprint(\"result: {}\".format(result))",
        "detail": "mid-range.functools_reduce_initializer",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.functools_reduce_initializer",
        "description": "mid-range.functools_reduce_initializer",
        "peekOfCode": "data = range(1, 5)\nprint(data)\nresult = functools.reduce(do_reduce, data, 99)\nprint(\"result: {}\".format(result))",
        "detail": "mid-range.functools_reduce_initializer",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "mid-range.functools_reduce_initializer",
        "description": "mid-range.functools_reduce_initializer",
        "peekOfCode": "result = functools.reduce(do_reduce, data, 99)\nprint(\"result: {}\".format(result))",
        "detail": "mid-range.functools_reduce_initializer",
        "documentation": {}
    },
    {
        "label": "do_reduce",
        "kind": 2,
        "importPath": "mid-range.functools_reduce_short_sequences",
        "description": "mid-range.functools_reduce_short_sequences",
        "peekOfCode": "def do_reduce(a, b):\n    print(\"do_reduce({}, {})\".format(a, b))\n    return a + b\nprint(\"Single item in sequence:\", functools.reduce(do_reduce, [1]))\nprint(\"Single item in sequence with initializer:\", functools.reduce(do_reduce, [1], 99))\nprint(\"Empty sequence with initializer:\", functools.reduce(do_reduce, [], 99))\ntry:\n    print(\"Empty sequence:\", functools.reduce(do_reduce, []))\nexcept TypeError as err:\n    print(\"ERROR: {}\".format(err))",
        "detail": "mid-range.functools_reduce_short_sequences",
        "documentation": {}
    },
    {
        "label": "myfunc",
        "kind": 2,
        "importPath": "mid-range.functools_singledispatch",
        "description": "mid-range.functools_singledispatch",
        "peekOfCode": "def myfunc(arg):\n    print(\"default myfunc({!r})\".format(arg))\n@myfunc.register(int)\ndef myfunc_int(arg):\n    print(\"myfunc_int({})\".format(arg))\n@myfunc.register(list)\ndef myfunc_list(arg):\n    print(\"myfunc_list()\")\n    for item in arg:\n        print(\"  {}\".format(item))",
        "detail": "mid-range.functools_singledispatch",
        "documentation": {}
    },
    {
        "label": "myfunc_int",
        "kind": 2,
        "importPath": "mid-range.functools_singledispatch",
        "description": "mid-range.functools_singledispatch",
        "peekOfCode": "def myfunc_int(arg):\n    print(\"myfunc_int({})\".format(arg))\n@myfunc.register(list)\ndef myfunc_list(arg):\n    print(\"myfunc_list()\")\n    for item in arg:\n        print(\"  {}\".format(item))\nmyfunc(\"string argument\")\nmyfunc(1)\nmyfunc(2.3)",
        "detail": "mid-range.functools_singledispatch",
        "documentation": {}
    },
    {
        "label": "myfunc_list",
        "kind": 2,
        "importPath": "mid-range.functools_singledispatch",
        "description": "mid-range.functools_singledispatch",
        "peekOfCode": "def myfunc_list(arg):\n    print(\"myfunc_list()\")\n    for item in arg:\n        print(\"  {}\".format(item))\nmyfunc(\"string argument\")\nmyfunc(1)\nmyfunc(2.3)\nmyfunc([\"a\", \"b\", \"c\"])",
        "detail": "mid-range.functools_singledispatch",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "mid-range.functools_singledispatch_mro",
        "description": "mid-range.functools_singledispatch_mro",
        "peekOfCode": "class A:\n    pass\nclass B(A):\n    pass\nclass C(A):\n    pass\nclass D(B):\n    pass\nclass E(C, D):\n    pass",
        "detail": "mid-range.functools_singledispatch_mro",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "mid-range.functools_singledispatch_mro",
        "description": "mid-range.functools_singledispatch_mro",
        "peekOfCode": "class B(A):\n    pass\nclass C(A):\n    pass\nclass D(B):\n    pass\nclass E(C, D):\n    pass\n@functools.singledispatch\ndef myfunc(arg):",
        "detail": "mid-range.functools_singledispatch_mro",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "mid-range.functools_singledispatch_mro",
        "description": "mid-range.functools_singledispatch_mro",
        "peekOfCode": "class C(A):\n    pass\nclass D(B):\n    pass\nclass E(C, D):\n    pass\n@functools.singledispatch\ndef myfunc(arg):\n    print(\"default myfunc({})\".format(arg.__class__.__name__))\n@myfunc.register(A)",
        "detail": "mid-range.functools_singledispatch_mro",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 6,
        "importPath": "mid-range.functools_singledispatch_mro",
        "description": "mid-range.functools_singledispatch_mro",
        "peekOfCode": "class D(B):\n    pass\nclass E(C, D):\n    pass\n@functools.singledispatch\ndef myfunc(arg):\n    print(\"default myfunc({})\".format(arg.__class__.__name__))\n@myfunc.register(A)\ndef myfunc_A(arg):\n    print(\"myfunc_A({})\".format(arg.__class__.__name__))",
        "detail": "mid-range.functools_singledispatch_mro",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 6,
        "importPath": "mid-range.functools_singledispatch_mro",
        "description": "mid-range.functools_singledispatch_mro",
        "peekOfCode": "class E(C, D):\n    pass\n@functools.singledispatch\ndef myfunc(arg):\n    print(\"default myfunc({})\".format(arg.__class__.__name__))\n@myfunc.register(A)\ndef myfunc_A(arg):\n    print(\"myfunc_A({})\".format(arg.__class__.__name__))\n@myfunc.register(B)\ndef myfunc_B(arg):",
        "detail": "mid-range.functools_singledispatch_mro",
        "documentation": {}
    },
    {
        "label": "myfunc",
        "kind": 2,
        "importPath": "mid-range.functools_singledispatch_mro",
        "description": "mid-range.functools_singledispatch_mro",
        "peekOfCode": "def myfunc(arg):\n    print(\"default myfunc({})\".format(arg.__class__.__name__))\n@myfunc.register(A)\ndef myfunc_A(arg):\n    print(\"myfunc_A({})\".format(arg.__class__.__name__))\n@myfunc.register(B)\ndef myfunc_B(arg):\n    print(\"myfunc_B({})\".format(arg.__class__.__name__))\n@myfunc.register(C)\ndef myfunc_C(arg):",
        "detail": "mid-range.functools_singledispatch_mro",
        "documentation": {}
    },
    {
        "label": "myfunc_A",
        "kind": 2,
        "importPath": "mid-range.functools_singledispatch_mro",
        "description": "mid-range.functools_singledispatch_mro",
        "peekOfCode": "def myfunc_A(arg):\n    print(\"myfunc_A({})\".format(arg.__class__.__name__))\n@myfunc.register(B)\ndef myfunc_B(arg):\n    print(\"myfunc_B({})\".format(arg.__class__.__name__))\n@myfunc.register(C)\ndef myfunc_C(arg):\n    print(\"myfunc_C({})\".format(arg.__class__.__name__))\nmyfunc(A())\nmyfunc(B())",
        "detail": "mid-range.functools_singledispatch_mro",
        "documentation": {}
    },
    {
        "label": "myfunc_B",
        "kind": 2,
        "importPath": "mid-range.functools_singledispatch_mro",
        "description": "mid-range.functools_singledispatch_mro",
        "peekOfCode": "def myfunc_B(arg):\n    print(\"myfunc_B({})\".format(arg.__class__.__name__))\n@myfunc.register(C)\ndef myfunc_C(arg):\n    print(\"myfunc_C({})\".format(arg.__class__.__name__))\nmyfunc(A())\nmyfunc(B())\nmyfunc(C())\nmyfunc(D())\nmyfunc(E())",
        "detail": "mid-range.functools_singledispatch_mro",
        "documentation": {}
    },
    {
        "label": "myfunc_C",
        "kind": 2,
        "importPath": "mid-range.functools_singledispatch_mro",
        "description": "mid-range.functools_singledispatch_mro",
        "peekOfCode": "def myfunc_C(arg):\n    print(\"myfunc_C({})\".format(arg.__class__.__name__))\nmyfunc(A())\nmyfunc(B())\nmyfunc(C())\nmyfunc(D())\nmyfunc(E())",
        "detail": "mid-range.functools_singledispatch_mro",
        "documentation": {}
    },
    {
        "label": "MyObject",
        "kind": 6,
        "importPath": "mid-range.functools_total_ordering",
        "description": "mid-range.functools_total_ordering",
        "peekOfCode": "class MyObject:\n    def __init__(self, val):\n        self.val = val\n    def __eq__(self, other):\n        print(\"  testing __eq__({}, {})\".format(self.val, other.val))\n        return self.val == other.val\n    def __gt__(self, other):\n        print(\"  testing __gt__({}, {})\".format(self.val, other.val))\n        return self.val > other.val\nprint(\"Methods:\\n\")",
        "detail": "mid-range.functools_total_ordering",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.functools_total_ordering",
        "description": "mid-range.functools_total_ordering",
        "peekOfCode": "a = MyObject(1)\nb = MyObject(2)\nprint(\"\\nComparisons:\")\nfor expr in [\"a < b\", \"a <= b\", \"a == b\", \"a >= b\", \"a > b\"]:\n    print(\"\\n{:<6}:\".format(expr))\n    result = eval(expr)\n    print(\"  result of {}: {}\".format(expr, result))",
        "detail": "mid-range.functools_total_ordering",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.functools_total_ordering",
        "description": "mid-range.functools_total_ordering",
        "peekOfCode": "b = MyObject(2)\nprint(\"\\nComparisons:\")\nfor expr in [\"a < b\", \"a <= b\", \"a == b\", \"a >= b\", \"a > b\"]:\n    print(\"\\n{:<6}:\".format(expr))\n    result = eval(expr)\n    print(\"  result of {}: {}\".format(expr, result))",
        "detail": "mid-range.functools_total_ordering",
        "documentation": {}
    },
    {
        "label": "myfunc",
        "kind": 2,
        "importPath": "mid-range.functools_update_wrapper",
        "description": "mid-range.functools_update_wrapper",
        "peekOfCode": "def myfunc(a, b=2):\n    \"Docstring for myfunc().\"\n    print(\"  called myfunc with:\", (a, b))\ndef show_details(name, f):\n    \"Show details of a callable object.\"\n    print(\"{}:\".format(name))\n    print(\"  object:\", f)\n    print(\"  __name__:\", end=\" \")\n    try:\n        print(f.__name__)",
        "detail": "mid-range.functools_update_wrapper",
        "documentation": {}
    },
    {
        "label": "show_details",
        "kind": 2,
        "importPath": "mid-range.functools_update_wrapper",
        "description": "mid-range.functools_update_wrapper",
        "peekOfCode": "def show_details(name, f):\n    \"Show details of a callable object.\"\n    print(\"{}:\".format(name))\n    print(\"  object:\", f)\n    print(\"  __name__:\", end=\" \")\n    try:\n        print(f.__name__)\n    except AttributeError:\n        print(\"(no __name__)\")\n    print(\"  __doc__\", repr(f.__doc__))",
        "detail": "mid-range.functools_update_wrapper",
        "documentation": {}
    },
    {
        "label": "p1",
        "kind": 5,
        "importPath": "mid-range.functools_update_wrapper",
        "description": "mid-range.functools_update_wrapper",
        "peekOfCode": "p1 = functools.partial(myfunc, b=4)\nshow_details(\"raw wrapper\", p1)\nprint(\"Updating wrapper:\")\nprint(\"  assign:\", functools.WRAPPER_ASSIGNMENTS)\nprint(\"  update:\", functools.WRAPPER_UPDATES)\nprint()\nfunctools.update_wrapper(p1, myfunc)\nshow_details(\"updated wrapper\", p1)",
        "detail": "mid-range.functools_update_wrapper",
        "documentation": {}
    },
    {
        "label": "show_details",
        "kind": 2,
        "importPath": "mid-range.functools_wraps",
        "description": "mid-range.functools_wraps",
        "peekOfCode": "def show_details(name, f):\n    \"Show details of a callable object.\"\n    print(\"{}:\".format(name))\n    print(\"  object:\", f)\n    print(\"  __name__:\", end=\" \")\n    try:\n        print(f.__name__)\n    except AttributeError:\n        print(\"(no __name__)\")\n    print(\"  __doc__\", repr(f.__doc__))",
        "detail": "mid-range.functools_wraps",
        "documentation": {}
    },
    {
        "label": "simple_decorator",
        "kind": 2,
        "importPath": "mid-range.functools_wraps",
        "description": "mid-range.functools_wraps",
        "peekOfCode": "def simple_decorator(f):\n    @functools.wraps(f)\n    def decorated(a=\"decorated defaults\", b=1):\n        print(\"  decorated:\", (a, b))\n        print(\"  \", end=\" \")\n        return f(a, b=b)\n    return decorated\ndef myfunc(a, b=2):\n    \"myfunc() is not complicated\"\n    print(\"  myfunc:\", (a, b))",
        "detail": "mid-range.functools_wraps",
        "documentation": {}
    },
    {
        "label": "myfunc",
        "kind": 2,
        "importPath": "mid-range.functools_wraps",
        "description": "mid-range.functools_wraps",
        "peekOfCode": "def myfunc(a, b=2):\n    \"myfunc() is not complicated\"\n    print(\"  myfunc:\", (a, b))\n    return\n# The raw function\nshow_details(\"myfunc\", myfunc)\nmyfunc(\"unwrapped, default b\")\nmyfunc(\"unwrapped, passing b\", 3)\nprint()\n# Wrap explicitly",
        "detail": "mid-range.functools_wraps",
        "documentation": {}
    },
    {
        "label": "decorated_myfunc",
        "kind": 2,
        "importPath": "mid-range.functools_wraps",
        "description": "mid-range.functools_wraps",
        "peekOfCode": "def decorated_myfunc(a, b):\n    myfunc(a, b)\n    return\nshow_details(\"decorated_myfunc\", decorated_myfunc)\ndecorated_myfunc()\ndecorated_myfunc(\"args to decorated\", 4)",
        "detail": "mid-range.functools_wraps",
        "documentation": {}
    },
    {
        "label": "wrapped_myfunc",
        "kind": 5,
        "importPath": "mid-range.functools_wraps",
        "description": "mid-range.functools_wraps",
        "peekOfCode": "wrapped_myfunc = simple_decorator(myfunc)\nshow_details(\"wrapped_myfunc\", wrapped_myfunc)\nwrapped_myfunc()\nwrapped_myfunc(\"args to wrapped\", 4)\nprint()\n# Wrap with decorator syntax\n@simple_decorator\ndef decorated_myfunc(a, b):\n    myfunc(a, b)\n    return",
        "detail": "mid-range.functools_wraps",
        "documentation": {}
    },
    {
        "label": "date",
        "kind": 5,
        "importPath": "mid-range.future",
        "description": "mid-range.future",
        "peekOfCode": "date = datetime(10_000, 1, 1)\nprint(f\"The party started on {date:%B, %d %Y} and lasted a 10 days\")",
        "detail": "mid-range.future",
        "documentation": {}
    },
    {
        "label": "task",
        "kind": 2,
        "importPath": "mid-range.futures_as_completed",
        "description": "mid-range.futures_as_completed",
        "peekOfCode": "def task(n):\n    time.sleep(random.random())\n    return (n, n / 10)\nex = futures.ThreadPoolExecutor(max_workers=5)\nprint(\"main: starting\")\nwait_for = [ex.submit(task, i) for i in range(5, 0, -1)]\nfor f in futures.as_completed(wait_for):\n    print(\"main: result: {}\".format(f.result()))",
        "detail": "mid-range.futures_as_completed",
        "documentation": {}
    },
    {
        "label": "ex",
        "kind": 5,
        "importPath": "mid-range.futures_as_completed",
        "description": "mid-range.futures_as_completed",
        "peekOfCode": "ex = futures.ThreadPoolExecutor(max_workers=5)\nprint(\"main: starting\")\nwait_for = [ex.submit(task, i) for i in range(5, 0, -1)]\nfor f in futures.as_completed(wait_for):\n    print(\"main: result: {}\".format(f.result()))",
        "detail": "mid-range.futures_as_completed",
        "documentation": {}
    },
    {
        "label": "wait_for",
        "kind": 5,
        "importPath": "mid-range.futures_as_completed",
        "description": "mid-range.futures_as_completed",
        "peekOfCode": "wait_for = [ex.submit(task, i) for i in range(5, 0, -1)]\nfor f in futures.as_completed(wait_for):\n    print(\"main: result: {}\".format(f.result()))",
        "detail": "mid-range.futures_as_completed",
        "documentation": {}
    },
    {
        "label": "task",
        "kind": 2,
        "importPath": "mid-range.futures_context_manager",
        "description": "mid-range.futures_context_manager",
        "peekOfCode": "def task(n):\n    print(n)\nwith futures.ThreadPoolExecutor(max_workers=2) as ex:\n    print(\"main: starting\")\n    ex.submit(task, 1)\n    ex.submit(task, 2)\n    ex.submit(task, 3)\n    ex.submit(task, 4)\nprint(\"main: done\")",
        "detail": "mid-range.futures_context_manager",
        "documentation": {}
    },
    {
        "label": "task",
        "kind": 2,
        "importPath": "mid-range.futures_future_callback",
        "description": "mid-range.futures_future_callback",
        "peekOfCode": "def task(n):\n    print(\"{}: sleeping\".format(n))\n    time.sleep(0.5)\n    print(\"{}: done\".format(n))\n    return n / 10\ndef done(fn):\n    if fn.cancelled():\n        print(\"{}: canceled\".format(fn.arg))\n    elif fn.done():\n        error = fn.exception()",
        "detail": "mid-range.futures_future_callback",
        "documentation": {}
    },
    {
        "label": "done",
        "kind": 2,
        "importPath": "mid-range.futures_future_callback",
        "description": "mid-range.futures_future_callback",
        "peekOfCode": "def done(fn):\n    if fn.cancelled():\n        print(\"{}: canceled\".format(fn.arg))\n    elif fn.done():\n        error = fn.exception()\n        if error:\n            print(\"{}: error returned: {}\".format(fn.arg, error))\n        else:\n            result = fn.result()\n            print(\"{}: value returned: {}\".format(fn.arg, result))",
        "detail": "mid-range.futures_future_callback",
        "documentation": {}
    },
    {
        "label": "task",
        "kind": 2,
        "importPath": "mid-range.futures_future_callback_cancel",
        "description": "mid-range.futures_future_callback_cancel",
        "peekOfCode": "def task(n):\n    print(\"{}: sleeping\".format(n))\n    time.sleep(0.5)\n    print(\"{}: done\".format(n))\n    return n / 10\ndef done(fn):\n    if fn.cancelled():\n        print(\"{}: canceled\".format(fn.arg))\n    elif fn.done():\n        print(\"{}: not canceled\".format(fn.arg))",
        "detail": "mid-range.futures_future_callback_cancel",
        "documentation": {}
    },
    {
        "label": "done",
        "kind": 2,
        "importPath": "mid-range.futures_future_callback_cancel",
        "description": "mid-range.futures_future_callback_cancel",
        "peekOfCode": "def done(fn):\n    if fn.cancelled():\n        print(\"{}: canceled\".format(fn.arg))\n    elif fn.done():\n        print(\"{}: not canceled\".format(fn.arg))\nif __name__ == \"__main__\":\n    ex = futures.ThreadPoolExecutor(max_workers=2)\n    print(\"main: starting\")\n    tasks = []\n    for i in range(10, 0, -1):",
        "detail": "mid-range.futures_future_callback_cancel",
        "documentation": {}
    },
    {
        "label": "task",
        "kind": 2,
        "importPath": "mid-range.futures_future_exception",
        "description": "mid-range.futures_future_exception",
        "peekOfCode": "def task(n):\n    print(\"{}: starting\".format(n))\n    raise ValueError(\"the value {} is no good\".format(n))\nex = futures.ThreadPoolExecutor(max_workers=2)\nprint(\"main: starting\")\nf = ex.submit(task, 5)\nerror = f.exception()\nprint(\"main: error: {}\".format(error))\ntry:\n    result = f.result()",
        "detail": "mid-range.futures_future_exception",
        "documentation": {}
    },
    {
        "label": "ex",
        "kind": 5,
        "importPath": "mid-range.futures_future_exception",
        "description": "mid-range.futures_future_exception",
        "peekOfCode": "ex = futures.ThreadPoolExecutor(max_workers=2)\nprint(\"main: starting\")\nf = ex.submit(task, 5)\nerror = f.exception()\nprint(\"main: error: {}\".format(error))\ntry:\n    result = f.result()\nexcept ValueError as e:\n    print('main: saw error \"{}\" when accessing result'.format(e))",
        "detail": "mid-range.futures_future_exception",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "mid-range.futures_future_exception",
        "description": "mid-range.futures_future_exception",
        "peekOfCode": "f = ex.submit(task, 5)\nerror = f.exception()\nprint(\"main: error: {}\".format(error))\ntry:\n    result = f.result()\nexcept ValueError as e:\n    print('main: saw error \"{}\" when accessing result'.format(e))",
        "detail": "mid-range.futures_future_exception",
        "documentation": {}
    },
    {
        "label": "error",
        "kind": 5,
        "importPath": "mid-range.futures_future_exception",
        "description": "mid-range.futures_future_exception",
        "peekOfCode": "error = f.exception()\nprint(\"main: error: {}\".format(error))\ntry:\n    result = f.result()\nexcept ValueError as e:\n    print('main: saw error \"{}\" when accessing result'.format(e))",
        "detail": "mid-range.futures_future_exception",
        "documentation": {}
    },
    {
        "label": "task",
        "kind": 2,
        "importPath": "mid-range.futures_process_pool_map",
        "description": "mid-range.futures_process_pool_map",
        "peekOfCode": "def task(n):\n    return (n, os.getpid())\nex = futures.ProcessPoolExecutor(max_workers=2)\nresults = ex.map(task, range(5, 0, -1))\nfor n, pid in results:\n    print(\"ran task {} in process {}\".format(n, pid))",
        "detail": "mid-range.futures_process_pool_map",
        "documentation": {}
    },
    {
        "label": "ex",
        "kind": 5,
        "importPath": "mid-range.futures_process_pool_map",
        "description": "mid-range.futures_process_pool_map",
        "peekOfCode": "ex = futures.ProcessPoolExecutor(max_workers=2)\nresults = ex.map(task, range(5, 0, -1))\nfor n, pid in results:\n    print(\"ran task {} in process {}\".format(n, pid))",
        "detail": "mid-range.futures_process_pool_map",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": "mid-range.futures_process_pool_map",
        "description": "mid-range.futures_process_pool_map",
        "peekOfCode": "results = ex.map(task, range(5, 0, -1))\nfor n, pid in results:\n    print(\"ran task {} in process {}\".format(n, pid))",
        "detail": "mid-range.futures_process_pool_map",
        "documentation": {}
    },
    {
        "label": "task",
        "kind": 2,
        "importPath": "mid-range.futures_thread_pool_map",
        "description": "mid-range.futures_thread_pool_map",
        "peekOfCode": "def task(n):\n    print(\"{}: sleeping {}\".format(threading.current_thread().name, n))\n    time.sleep(n / 10)\n    print(\"{}: done with {}\".format(threading.current_thread().name, n))\n    return n / 10\nex = futures.ThreadPoolExecutor(max_workers=2)\nprint(\"main: starting\")\nresults = ex.map(task, range(5, 0, -1))\nprint(\"main: unprocessed results {}\".format(results))\nprint(\"main: waiting for real results\")",
        "detail": "mid-range.futures_thread_pool_map",
        "documentation": {}
    },
    {
        "label": "ex",
        "kind": 5,
        "importPath": "mid-range.futures_thread_pool_map",
        "description": "mid-range.futures_thread_pool_map",
        "peekOfCode": "ex = futures.ThreadPoolExecutor(max_workers=2)\nprint(\"main: starting\")\nresults = ex.map(task, range(5, 0, -1))\nprint(\"main: unprocessed results {}\".format(results))\nprint(\"main: waiting for real results\")\nreal_results = list(results)\nprint(\"main: results: {}\".format(real_results))",
        "detail": "mid-range.futures_thread_pool_map",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": "mid-range.futures_thread_pool_map",
        "description": "mid-range.futures_thread_pool_map",
        "peekOfCode": "results = ex.map(task, range(5, 0, -1))\nprint(\"main: unprocessed results {}\".format(results))\nprint(\"main: waiting for real results\")\nreal_results = list(results)\nprint(\"main: results: {}\".format(real_results))",
        "detail": "mid-range.futures_thread_pool_map",
        "documentation": {}
    },
    {
        "label": "real_results",
        "kind": 5,
        "importPath": "mid-range.futures_thread_pool_map",
        "description": "mid-range.futures_thread_pool_map",
        "peekOfCode": "real_results = list(results)\nprint(\"main: results: {}\".format(real_results))",
        "detail": "mid-range.futures_thread_pool_map",
        "documentation": {}
    },
    {
        "label": "task",
        "kind": 2,
        "importPath": "mid-range.futures_thread_pool_submit",
        "description": "mid-range.futures_thread_pool_submit",
        "peekOfCode": "def task(n):\n    print(\"{}: sleeping {}\".format(threading.current_thread().name, n))\n    time.sleep(n / 10)\n    print(\"{}: done with {}\".format(threading.current_thread().name, n))\n    return n / 10\nex = futures.ThreadPoolExecutor(max_workers=2)\nprint(\"main: starting\")\nf = ex.submit(task, 5)\nprint(\"main: future: {}\".format(f))\nprint(\"main: waiting for results\")",
        "detail": "mid-range.futures_thread_pool_submit",
        "documentation": {}
    },
    {
        "label": "ex",
        "kind": 5,
        "importPath": "mid-range.futures_thread_pool_submit",
        "description": "mid-range.futures_thread_pool_submit",
        "peekOfCode": "ex = futures.ThreadPoolExecutor(max_workers=2)\nprint(\"main: starting\")\nf = ex.submit(task, 5)\nprint(\"main: future: {}\".format(f))\nprint(\"main: waiting for results\")\nresult = f.result()\nprint(\"main: result: {}\".format(result))\nprint(\"main: future after result: {}\".format(f))",
        "detail": "mid-range.futures_thread_pool_submit",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "mid-range.futures_thread_pool_submit",
        "description": "mid-range.futures_thread_pool_submit",
        "peekOfCode": "f = ex.submit(task, 5)\nprint(\"main: future: {}\".format(f))\nprint(\"main: waiting for results\")\nresult = f.result()\nprint(\"main: result: {}\".format(result))\nprint(\"main: future after result: {}\".format(f))",
        "detail": "mid-range.futures_thread_pool_submit",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "mid-range.futures_thread_pool_submit",
        "description": "mid-range.futures_thread_pool_submit",
        "peekOfCode": "result = f.result()\nprint(\"main: result: {}\".format(result))\nprint(\"main: future after result: {}\".format(f))",
        "detail": "mid-range.futures_thread_pool_submit",
        "documentation": {}
    },
    {
        "label": "G95FCompiler",
        "kind": 6,
        "importPath": "mid-range.g95",
        "description": "mid-range.g95",
        "peekOfCode": "class G95FCompiler(FCompiler):\n    compiler_type = \"g95\"\n    description = \"G95 Fortran Compiler\"\n    #    version_pattern = r'G95 \\((GCC (?P<gccversion>[\\d.]+)|.*?) \\(g95!\\) (?P<version>.*)\\).*'\n    # $ g95 --version\n    # G95 (GCC 4.0.3 (g95!) May 22 2006)\n    version_pattern = r\"G95 \\((GCC (?P<gccversion>[\\d.]+)|.*?) \\(g95 (?P<version>.*)!\\) (?P<date>.*)\\).*\"\n    # $ g95 --version\n    # G95 (GCC 4.0.3 (g95 0.90!) Aug 22 2006)\n    executables = {",
        "detail": "mid-range.g95",
        "documentation": {}
    },
    {
        "label": "compilers",
        "kind": 5,
        "importPath": "mid-range.g95",
        "description": "mid-range.g95",
        "peekOfCode": "compilers = [\"G95FCompiler\"]\nclass G95FCompiler(FCompiler):\n    compiler_type = \"g95\"\n    description = \"G95 Fortran Compiler\"\n    #    version_pattern = r'G95 \\((GCC (?P<gccversion>[\\d.]+)|.*?) \\(g95!\\) (?P<version>.*)\\).*'\n    # $ g95 --version\n    # G95 (GCC 4.0.3 (g95!) May 22 2006)\n    version_pattern = r\"G95 \\((GCC (?P<gccversion>[\\d.]+)|.*?) \\(g95 (?P<version>.*)!\\) (?P<date>.*)\\).*\"\n    # $ g95 --version\n    # G95 (GCC 4.0.3 (g95 0.90!) Aug 22 2006)",
        "detail": "mid-range.g95",
        "documentation": {}
    },
    {
        "label": "stable_matching",
        "kind": 2,
        "importPath": "mid-range.gale_shapley_bigraph",
        "description": "mid-range.gale_shapley_bigraph",
        "peekOfCode": "def stable_matching(\n    donor_pref: list[list[int]], recipient_pref: list[list[int]]\n) -> list[int]:\n    \"\"\"\n    Finds the stable match in any bipartite graph, i.e a pairing where no 2 objects\n    prefer each other over their partner.  The function accepts the preferences of\n    oegan donors and recipients (where both are assigned numbers from 0 to n-1) and\n    returns a list where the index position corresponds to the donor and value at the\n    index is the organ recipient.\n    To better understand the algorithm, see also:",
        "detail": "mid-range.gale_shapley_bigraph",
        "documentation": {}
    },
    {
        "label": "move",
        "kind": 2,
        "importPath": "mid-range.game",
        "description": "mid-range.game",
        "peekOfCode": "def move(player, direction):\n    player.move(direction)\n# REPL === Parser\nwhile running:\n    cmd = input(\">>> \")\n    # split the cmd in to commands\n    # if commands length is 1\n    if cmd in [\"n\", \"s\", \"e\", \"w\"]:\n        move(player, cmd)\n    # if commands length is 2",
        "detail": "mid-range.game",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "mid-range.game",
        "description": "mid-range.game",
        "peekOfCode": "running = True\nplayer = Player()\ndef move(player, direction):\n    player.move(direction)\n# REPL === Parser\nwhile running:\n    cmd = input(\">>> \")\n    # split the cmd in to commands\n    # if commands length is 1\n    if cmd in [\"n\", \"s\", \"e\", \"w\"]:",
        "detail": "mid-range.game",
        "documentation": {}
    },
    {
        "label": "player",
        "kind": 5,
        "importPath": "mid-range.game",
        "description": "mid-range.game",
        "peekOfCode": "player = Player()\ndef move(player, direction):\n    player.move(direction)\n# REPL === Parser\nwhile running:\n    cmd = input(\">>> \")\n    # split the cmd in to commands\n    # if commands length is 1\n    if cmd in [\"n\", \"s\", \"e\", \"w\"]:\n        move(player, cmd)",
        "detail": "mid-range.game",
        "documentation": {}
    },
    {
        "label": "gamma",
        "kind": 2,
        "importPath": "mid-range.gamma",
        "description": "mid-range.gamma",
        "peekOfCode": "def gamma(num: float) -> float:\n    \"\"\"\n    https://en.wikipedia.org/wiki/Gamma_function\n    In mathematics, the gamma function is one commonly\n    used extension of the factorial function to complex numbers.\n    The gamma function is defined for all complex numbers except the non-positive\n    integers\n    >>> gamma(-1)\n    Traceback (most recent call last):\n        ...",
        "detail": "mid-range.gamma",
        "documentation": {}
    },
    {
        "label": "integrand",
        "kind": 2,
        "importPath": "mid-range.gamma",
        "description": "mid-range.gamma",
        "peekOfCode": "def integrand(x: float, z: float) -> float:\n    return math.pow(x, z - 1) * math.exp(-x)\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()",
        "detail": "mid-range.gamma",
        "documentation": {}
    },
    {
        "label": "gasPrediction",
        "kind": 5,
        "importPath": "mid-range.gasPrediction",
        "description": "mid-range.gasPrediction",
        "peekOfCode": "gasPrediction = lambda d, c, a: sum(d) / 12 / a > c",
        "detail": "mid-range.gasPrediction",
        "documentation": {}
    },
    {
        "label": "gaussian",
        "kind": 2,
        "importPath": "mid-range.gaussian",
        "description": "mid-range.gaussian",
        "peekOfCode": "def gaussian(x, mu: float = 0.0, sigma: float = 1.0) -> int:\n    \"\"\"\n    >>> gaussian(1)\n    0.24197072451914337\n    >>> gaussian(24)\n    3.342714441794458e-126\n    >>> gaussian(1, 4, 2)\n    0.06475879783294587\n    >>> gaussian(1, 5, 3)\n    0.05467002489199788",
        "detail": "mid-range.gaussian",
        "documentation": {}
    },
    {
        "label": "gen_gaussian_kernel",
        "kind": 2,
        "importPath": "mid-range.gaussian_filter",
        "description": "mid-range.gaussian_filter",
        "peekOfCode": "def gen_gaussian_kernel(k_size, sigma):\n    center = k_size // 2\n    x, y = mgrid[0 - center : k_size - center, 0 - center : k_size - center]\n    g = 1 / (2 * pi * sigma) * exp(-(square(x) + square(y)) / (2 * square(sigma)))\n    return g\ndef gaussian_filter(image, k_size, sigma):\n    height, width = image.shape[0], image.shape[1]\n    # dst image height and width\n    dst_height = height - k_size + 1\n    dst_width = width - k_size + 1",
        "detail": "mid-range.gaussian_filter",
        "documentation": {}
    },
    {
        "label": "gaussian_filter",
        "kind": 2,
        "importPath": "mid-range.gaussian_filter",
        "description": "mid-range.gaussian_filter",
        "peekOfCode": "def gaussian_filter(image, k_size, sigma):\n    height, width = image.shape[0], image.shape[1]\n    # dst image height and width\n    dst_height = height - k_size + 1\n    dst_width = width - k_size + 1\n    # im2col, turn the k_size*k_size pixels into a row and np.vstack all rows\n    image_array = zeros((dst_height * dst_width, k_size * k_size))\n    row = 0\n    for i, j in product(range(dst_height), range(dst_width)):\n        window = ravel(image[i : i + k_size, j : j + k_size])",
        "detail": "mid-range.gaussian_filter",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.gaussian_naive_bayes",
        "description": "mid-range.gaussian_naive_bayes",
        "peekOfCode": "def main():\n    \"\"\"\n    Gaussian Naive Bayes Example using sklearn function.\n    Iris type dataset is used to demonstrate algorithm.\n    \"\"\"\n    # Load Iris dataset\n    iris = load_iris()\n    # Split dataset into train and test data\n    X = iris[\"data\"]  # features\n    Y = iris[\"target\"]",
        "detail": "mid-range.gaussian_naive_bayes",
        "documentation": {}
    },
    {
        "label": "gauss_easter",
        "kind": 2,
        "importPath": "mid-range.gauss_easter",
        "description": "mid-range.gauss_easter",
        "peekOfCode": "def gauss_easter(year: int) -> datetime:\n    \"\"\"\n    Calculation Gregorian easter date for given year\n    >>> gauss_easter(2007)\n    datetime.datetime(2007, 4, 8, 0, 0)\n    >>> gauss_easter(2008)\n    datetime.datetime(2008, 3, 23, 0, 0)\n    >>> gauss_easter(2020)\n    datetime.datetime(2020, 4, 12, 0, 0)\n    >>> gauss_easter(2021)",
        "detail": "mid-range.gauss_easter",
        "documentation": {}
    },
    {
        "label": "GB2312Prober",
        "kind": 6,
        "importPath": "mid-range.gb2312prober",
        "description": "mid-range.gb2312prober",
        "peekOfCode": "class GB2312Prober(MultiByteCharSetProber):\n    def __init__(self):\n        super(GB2312Prober, self).__init__()\n        self.coding_sm = CodingStateMachine(GB2312_SM_MODEL)\n        self.distribution_analyzer = GB2312DistributionAnalysis()\n        self.reset()\n    @property\n    def charset_name(self):\n        return \"GB2312\"\n    @property",
        "detail": "mid-range.gb2312prober",
        "documentation": {}
    },
    {
        "label": "find_gcd",
        "kind": 2,
        "importPath": "mid-range.GCD",
        "description": "mid-range.GCD",
        "peekOfCode": "def find_gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\nl = [2, 4, 6, 8, 16]\nnum1 = l[0]\nnum2 = l[1]\ngcd = find_gcd(num1, num2)\nfor i in range(2, len(l)):\n    gcd = find_gcd(gcd, l[i])",
        "detail": "mid-range.GCD",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "mid-range.GCD",
        "description": "mid-range.GCD",
        "peekOfCode": "l = [2, 4, 6, 8, 16]\nnum1 = l[0]\nnum2 = l[1]\ngcd = find_gcd(num1, num2)\nfor i in range(2, len(l)):\n    gcd = find_gcd(gcd, l[i])\nprint(gcd)",
        "detail": "mid-range.GCD",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "mid-range.GCD",
        "description": "mid-range.GCD",
        "peekOfCode": "num1 = l[0]\nnum2 = l[1]\ngcd = find_gcd(num1, num2)\nfor i in range(2, len(l)):\n    gcd = find_gcd(gcd, l[i])\nprint(gcd)",
        "detail": "mid-range.GCD",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "mid-range.GCD",
        "description": "mid-range.GCD",
        "peekOfCode": "num2 = l[1]\ngcd = find_gcd(num1, num2)\nfor i in range(2, len(l)):\n    gcd = find_gcd(gcd, l[i])\nprint(gcd)",
        "detail": "mid-range.GCD",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 5,
        "importPath": "mid-range.GCD",
        "description": "mid-range.GCD",
        "peekOfCode": "gcd = find_gcd(num1, num2)\nfor i in range(2, len(l)):\n    gcd = find_gcd(gcd, l[i])\nprint(gcd)",
        "detail": "mid-range.GCD",
        "documentation": {}
    },
    {
        "label": "GcodeLexer",
        "kind": 6,
        "importPath": "mid-range.gcodelexer",
        "description": "mid-range.gcodelexer",
        "peekOfCode": "class GcodeLexer(RegexLexer):\n    \"\"\"\n    For gcode source code.\n    .. versionadded:: 2.9\n    \"\"\"\n    name = \"g-code\"\n    aliases = [\"gcode\"]\n    filenames = [\"*.gcode\"]\n    tokens = {\n        \"root\": [",
        "detail": "mid-range.gcodelexer",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.gcodelexer",
        "description": "mid-range.gcodelexer",
        "peekOfCode": "__all__ = [\"GcodeLexer\"]\nclass GcodeLexer(RegexLexer):\n    \"\"\"\n    For gcode source code.\n    .. versionadded:: 2.9\n    \"\"\"\n    name = \"g-code\"\n    aliases = [\"gcode\"]\n    filenames = [\"*.gcode\"]\n    tokens = {",
        "detail": "mid-range.gcodelexer",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "mid-range.gc_collect",
        "description": "mid-range.gc_collect",
        "peekOfCode": "class Graph:\n    def __init__(self, name):\n        self.name = name\n        self.next = None\n    def set_next(self, next):\n        print(\"Linking nodes {}.next = {}\".format(self, next))\n        self.next = next\n    def __repr__(self):\n        return \"{}({})\".format(self.__class__.__name__, self.name)\n# Construct a graph cycle",
        "detail": "mid-range.gc_collect",
        "documentation": {}
    },
    {
        "label": "one",
        "kind": 5,
        "importPath": "mid-range.gc_collect",
        "description": "mid-range.gc_collect",
        "peekOfCode": "one = Graph(\"one\")\ntwo = Graph(\"two\")\nthree = Graph(\"three\")\none.set_next(two)\ntwo.set_next(three)\nthree.set_next(one)\n# Remove references to the graph nodes in this module's namespace\none = two = three = None\n# Show the effect of garbage collection\nfor i in range(2):",
        "detail": "mid-range.gc_collect",
        "documentation": {}
    },
    {
        "label": "two",
        "kind": 5,
        "importPath": "mid-range.gc_collect",
        "description": "mid-range.gc_collect",
        "peekOfCode": "two = Graph(\"two\")\nthree = Graph(\"three\")\none.set_next(two)\ntwo.set_next(three)\nthree.set_next(one)\n# Remove references to the graph nodes in this module's namespace\none = two = three = None\n# Show the effect of garbage collection\nfor i in range(2):\n    print(\"\\nCollecting {} ...\".format(i))",
        "detail": "mid-range.gc_collect",
        "documentation": {}
    },
    {
        "label": "three",
        "kind": 5,
        "importPath": "mid-range.gc_collect",
        "description": "mid-range.gc_collect",
        "peekOfCode": "three = Graph(\"three\")\none.set_next(two)\ntwo.set_next(three)\nthree.set_next(one)\n# Remove references to the graph nodes in this module's namespace\none = two = three = None\n# Show the effect of garbage collection\nfor i in range(2):\n    print(\"\\nCollecting {} ...\".format(i))\n    n = gc.collect()",
        "detail": "mid-range.gc_collect",
        "documentation": {}
    },
    {
        "label": "one",
        "kind": 5,
        "importPath": "mid-range.gc_collect",
        "description": "mid-range.gc_collect",
        "peekOfCode": "one = two = three = None\n# Show the effect of garbage collection\nfor i in range(2):\n    print(\"\\nCollecting {} ...\".format(i))\n    n = gc.collect()\n    print(\"Unreachable objects:\", n)\n    print(\"Remaining Garbage:\", end=\" \")\n    pprint.pprint(gc.garbage)",
        "detail": "mid-range.gc_collect",
        "documentation": {}
    },
    {
        "label": "GCCollector",
        "kind": 6,
        "importPath": "mid-range.gc_collector",
        "description": "mid-range.gc_collector",
        "peekOfCode": "class GCCollector(object):\n    \"\"\"Collector for Garbage collection statistics.\"\"\"\n    def __init__(self, registry=REGISTRY):\n        if (\n            not hasattr(gc, \"get_stats\")\n            or platform.python_implementation() != \"CPython\"\n        ):\n            return\n        registry.register(self)\n    def collect(self):",
        "detail": "mid-range.gc_collector",
        "documentation": {}
    },
    {
        "label": "GC_COLLECTOR",
        "kind": 5,
        "importPath": "mid-range.gc_collector",
        "description": "mid-range.gc_collector",
        "peekOfCode": "GC_COLLECTOR = GCCollector()\n\"\"\"Default GCCollector in default Registry REGISTRY.\"\"\"",
        "detail": "mid-range.gc_collector",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "mid-range.gc_debug_leak",
        "description": "mid-range.gc_debug_leak",
        "peekOfCode": "class Graph:\n    def __init__(self, name):\n        self.name = name\n        self.next = None\n    def set_next(self, next):\n        self.next = next\n    def __repr__(self):\n        return \"{}({})\".format(self.__class__.__name__, self.name)\nclass CleanupGraph(Graph):\n    def __del__(self):",
        "detail": "mid-range.gc_debug_leak",
        "documentation": {}
    },
    {
        "label": "CleanupGraph",
        "kind": 6,
        "importPath": "mid-range.gc_debug_leak",
        "description": "mid-range.gc_debug_leak",
        "peekOfCode": "class CleanupGraph(Graph):\n    def __del__(self):\n        print(\"{}.__del__()\".format(self))\n# Construct a graph cycle\none = Graph(\"one\")\ntwo = Graph(\"two\")\none.set_next(two)\ntwo.set_next(one)\n# Construct another node that stands on its own\nthree = CleanupGraph(\"three\")",
        "detail": "mid-range.gc_debug_leak",
        "documentation": {}
    },
    {
        "label": "flags",
        "kind": 5,
        "importPath": "mid-range.gc_debug_leak",
        "description": "mid-range.gc_debug_leak",
        "peekOfCode": "flags = gc.DEBUG_LEAK\ngc.set_debug(flags)\nclass Graph:\n    def __init__(self, name):\n        self.name = name\n        self.next = None\n    def set_next(self, next):\n        self.next = next\n    def __repr__(self):\n        return \"{}({})\".format(self.__class__.__name__, self.name)",
        "detail": "mid-range.gc_debug_leak",
        "documentation": {}
    },
    {
        "label": "one",
        "kind": 5,
        "importPath": "mid-range.gc_debug_leak",
        "description": "mid-range.gc_debug_leak",
        "peekOfCode": "one = Graph(\"one\")\ntwo = Graph(\"two\")\none.set_next(two)\ntwo.set_next(one)\n# Construct another node that stands on its own\nthree = CleanupGraph(\"three\")\n# Construct a graph cycle with a finalizer\nfour = CleanupGraph(\"four\")\nfive = CleanupGraph(\"five\")\nfour.set_next(five)",
        "detail": "mid-range.gc_debug_leak",
        "documentation": {}
    },
    {
        "label": "two",
        "kind": 5,
        "importPath": "mid-range.gc_debug_leak",
        "description": "mid-range.gc_debug_leak",
        "peekOfCode": "two = Graph(\"two\")\none.set_next(two)\ntwo.set_next(one)\n# Construct another node that stands on its own\nthree = CleanupGraph(\"three\")\n# Construct a graph cycle with a finalizer\nfour = CleanupGraph(\"four\")\nfive = CleanupGraph(\"five\")\nfour.set_next(five)\nfive.set_next(four)",
        "detail": "mid-range.gc_debug_leak",
        "documentation": {}
    },
    {
        "label": "three",
        "kind": 5,
        "importPath": "mid-range.gc_debug_leak",
        "description": "mid-range.gc_debug_leak",
        "peekOfCode": "three = CleanupGraph(\"three\")\n# Construct a graph cycle with a finalizer\nfour = CleanupGraph(\"four\")\nfive = CleanupGraph(\"five\")\nfour.set_next(five)\nfive.set_next(four)\n# Remove references to the graph nodes in this module's namespace\none = two = three = four = five = None\n# Force a sweep\nprint(\"Collecting\")",
        "detail": "mid-range.gc_debug_leak",
        "documentation": {}
    },
    {
        "label": "four",
        "kind": 5,
        "importPath": "mid-range.gc_debug_leak",
        "description": "mid-range.gc_debug_leak",
        "peekOfCode": "four = CleanupGraph(\"four\")\nfive = CleanupGraph(\"five\")\nfour.set_next(five)\nfive.set_next(four)\n# Remove references to the graph nodes in this module's namespace\none = two = three = four = five = None\n# Force a sweep\nprint(\"Collecting\")\ngc.collect()\nprint(\"Done\")",
        "detail": "mid-range.gc_debug_leak",
        "documentation": {}
    },
    {
        "label": "five",
        "kind": 5,
        "importPath": "mid-range.gc_debug_leak",
        "description": "mid-range.gc_debug_leak",
        "peekOfCode": "five = CleanupGraph(\"five\")\nfour.set_next(five)\nfive.set_next(four)\n# Remove references to the graph nodes in this module's namespace\none = two = three = four = five = None\n# Force a sweep\nprint(\"Collecting\")\ngc.collect()\nprint(\"Done\")\n# Report on what was left",
        "detail": "mid-range.gc_debug_leak",
        "documentation": {}
    },
    {
        "label": "one",
        "kind": 5,
        "importPath": "mid-range.gc_debug_leak",
        "description": "mid-range.gc_debug_leak",
        "peekOfCode": "one = two = three = four = five = None\n# Force a sweep\nprint(\"Collecting\")\ngc.collect()\nprint(\"Done\")\n# Report on what was left\nfor o in gc.garbage:\n    if isinstance(o, Graph):\n        print(\"Retained: {} 0x{:x}\".format(o, id(o)))\n# Reset the debug flags before exiting to avoid dumping a lot",
        "detail": "mid-range.gc_debug_leak",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "mid-range.gc_debug_saveall",
        "description": "mid-range.gc_debug_saveall",
        "peekOfCode": "class Graph:\n    def __init__(self, name):\n        self.name = name\n        self.next = None\n    def set_next(self, next):\n        self.next = next\n    def __repr__(self):\n        return \"{}({})\".format(self.__class__.__name__, self.name)\nclass CleanupGraph(Graph):\n    def __del__(self):",
        "detail": "mid-range.gc_debug_saveall",
        "documentation": {}
    },
    {
        "label": "CleanupGraph",
        "kind": 6,
        "importPath": "mid-range.gc_debug_saveall",
        "description": "mid-range.gc_debug_saveall",
        "peekOfCode": "class CleanupGraph(Graph):\n    def __del__(self):\n        print(\"{}.__del__()\".format(self))\n# Construct a graph cycle\none = Graph(\"one\")\ntwo = Graph(\"two\")\none.set_next(two)\ntwo.set_next(one)\n# Construct another node that stands on its own\nthree = CleanupGraph(\"three\")",
        "detail": "mid-range.gc_debug_saveall",
        "documentation": {}
    },
    {
        "label": "flags",
        "kind": 5,
        "importPath": "mid-range.gc_debug_saveall",
        "description": "mid-range.gc_debug_saveall",
        "peekOfCode": "flags = gc.DEBUG_COLLECTABLE | gc.DEBUG_UNCOLLECTABLE | gc.DEBUG_SAVEALL\ngc.set_debug(flags)\nclass Graph:\n    def __init__(self, name):\n        self.name = name\n        self.next = None\n    def set_next(self, next):\n        self.next = next\n    def __repr__(self):\n        return \"{}({})\".format(self.__class__.__name__, self.name)",
        "detail": "mid-range.gc_debug_saveall",
        "documentation": {}
    },
    {
        "label": "one",
        "kind": 5,
        "importPath": "mid-range.gc_debug_saveall",
        "description": "mid-range.gc_debug_saveall",
        "peekOfCode": "one = Graph(\"one\")\ntwo = Graph(\"two\")\none.set_next(two)\ntwo.set_next(one)\n# Construct another node that stands on its own\nthree = CleanupGraph(\"three\")\n# Construct a graph cycle with a finalizer\nfour = CleanupGraph(\"four\")\nfive = CleanupGraph(\"five\")\nfour.set_next(five)",
        "detail": "mid-range.gc_debug_saveall",
        "documentation": {}
    },
    {
        "label": "two",
        "kind": 5,
        "importPath": "mid-range.gc_debug_saveall",
        "description": "mid-range.gc_debug_saveall",
        "peekOfCode": "two = Graph(\"two\")\none.set_next(two)\ntwo.set_next(one)\n# Construct another node that stands on its own\nthree = CleanupGraph(\"three\")\n# Construct a graph cycle with a finalizer\nfour = CleanupGraph(\"four\")\nfive = CleanupGraph(\"five\")\nfour.set_next(five)\nfive.set_next(four)",
        "detail": "mid-range.gc_debug_saveall",
        "documentation": {}
    },
    {
        "label": "three",
        "kind": 5,
        "importPath": "mid-range.gc_debug_saveall",
        "description": "mid-range.gc_debug_saveall",
        "peekOfCode": "three = CleanupGraph(\"three\")\n# Construct a graph cycle with a finalizer\nfour = CleanupGraph(\"four\")\nfive = CleanupGraph(\"five\")\nfour.set_next(five)\nfive.set_next(four)\n# Remove references to the graph nodes in this module's namespace\none = two = three = four = five = None\n# Force a sweep\nprint(\"Collecting\")",
        "detail": "mid-range.gc_debug_saveall",
        "documentation": {}
    },
    {
        "label": "four",
        "kind": 5,
        "importPath": "mid-range.gc_debug_saveall",
        "description": "mid-range.gc_debug_saveall",
        "peekOfCode": "four = CleanupGraph(\"four\")\nfive = CleanupGraph(\"five\")\nfour.set_next(five)\nfive.set_next(four)\n# Remove references to the graph nodes in this module's namespace\none = two = three = four = five = None\n# Force a sweep\nprint(\"Collecting\")\ngc.collect()\nprint(\"Done\")",
        "detail": "mid-range.gc_debug_saveall",
        "documentation": {}
    },
    {
        "label": "five",
        "kind": 5,
        "importPath": "mid-range.gc_debug_saveall",
        "description": "mid-range.gc_debug_saveall",
        "peekOfCode": "five = CleanupGraph(\"five\")\nfour.set_next(five)\nfive.set_next(four)\n# Remove references to the graph nodes in this module's namespace\none = two = three = four = five = None\n# Force a sweep\nprint(\"Collecting\")\ngc.collect()\nprint(\"Done\")\n# Report on what was left",
        "detail": "mid-range.gc_debug_saveall",
        "documentation": {}
    },
    {
        "label": "one",
        "kind": 5,
        "importPath": "mid-range.gc_debug_saveall",
        "description": "mid-range.gc_debug_saveall",
        "peekOfCode": "one = two = three = four = five = None\n# Force a sweep\nprint(\"Collecting\")\ngc.collect()\nprint(\"Done\")\n# Report on what was left\nfor o in gc.garbage:\n    if isinstance(o, Graph):\n        print(\"Retained: {} 0x{:x}\".format(o, id(o)))\n# Reset the debug flags before exiting to avoid dumping a lot",
        "detail": "mid-range.gc_debug_saveall",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "mid-range.gc_get_referents",
        "description": "mid-range.gc_get_referents",
        "peekOfCode": "class Graph:\n    def __init__(self, name):\n        self.name = name\n        self.next = None\n    def set_next(self, next):\n        print(\"Linking nodes {}.next = {}\".format(self, next))\n        self.next = next\n    def __repr__(self):\n        return \"{}({})\".format(self.__class__.__name__, self.name)\n# Construct a graph cycle",
        "detail": "mid-range.gc_get_referents",
        "documentation": {}
    },
    {
        "label": "one",
        "kind": 5,
        "importPath": "mid-range.gc_get_referents",
        "description": "mid-range.gc_get_referents",
        "peekOfCode": "one = Graph(\"one\")\ntwo = Graph(\"two\")\nthree = Graph(\"three\")\none.set_next(two)\ntwo.set_next(three)\nthree.set_next(one)\nprint()\nprint(\"three refers to:\")\nfor r in gc.get_referents(three):\n    pprint.pprint(r)",
        "detail": "mid-range.gc_get_referents",
        "documentation": {}
    },
    {
        "label": "two",
        "kind": 5,
        "importPath": "mid-range.gc_get_referents",
        "description": "mid-range.gc_get_referents",
        "peekOfCode": "two = Graph(\"two\")\nthree = Graph(\"three\")\none.set_next(two)\ntwo.set_next(three)\nthree.set_next(one)\nprint()\nprint(\"three refers to:\")\nfor r in gc.get_referents(three):\n    pprint.pprint(r)",
        "detail": "mid-range.gc_get_referents",
        "documentation": {}
    },
    {
        "label": "three",
        "kind": 5,
        "importPath": "mid-range.gc_get_referents",
        "description": "mid-range.gc_get_referents",
        "peekOfCode": "three = Graph(\"three\")\none.set_next(two)\ntwo.set_next(three)\nthree.set_next(one)\nprint()\nprint(\"three refers to:\")\nfor r in gc.get_referents(three):\n    pprint.pprint(r)",
        "detail": "mid-range.gc_get_referents",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "mid-range.gc_get_referents_cycles",
        "description": "mid-range.gc_get_referents_cycles",
        "peekOfCode": "class Graph:\n    def __init__(self, name):\n        self.name = name\n        self.next = None\n    def set_next(self, next):\n        print(\"Linking nodes {}.next = {}\".format(self, next))\n        self.next = next\n    def __repr__(self):\n        return \"{}({})\".format(self.__class__.__name__, self.name)\n# Construct a graph cycle",
        "detail": "mid-range.gc_get_referents_cycles",
        "documentation": {}
    },
    {
        "label": "one",
        "kind": 5,
        "importPath": "mid-range.gc_get_referents_cycles",
        "description": "mid-range.gc_get_referents_cycles",
        "peekOfCode": "one = Graph(\"one\")\ntwo = Graph(\"two\")\nthree = Graph(\"three\")\none.set_next(two)\ntwo.set_next(three)\nthree.set_next(one)\nprint()\nseen = set()\nto_process = queue.Queue()\n# Start with an empty object chain and Graph three.",
        "detail": "mid-range.gc_get_referents_cycles",
        "documentation": {}
    },
    {
        "label": "two",
        "kind": 5,
        "importPath": "mid-range.gc_get_referents_cycles",
        "description": "mid-range.gc_get_referents_cycles",
        "peekOfCode": "two = Graph(\"two\")\nthree = Graph(\"three\")\none.set_next(two)\ntwo.set_next(three)\nthree.set_next(one)\nprint()\nseen = set()\nto_process = queue.Queue()\n# Start with an empty object chain and Graph three.\nto_process.put(([], three))",
        "detail": "mid-range.gc_get_referents_cycles",
        "documentation": {}
    },
    {
        "label": "three",
        "kind": 5,
        "importPath": "mid-range.gc_get_referents_cycles",
        "description": "mid-range.gc_get_referents_cycles",
        "peekOfCode": "three = Graph(\"three\")\none.set_next(two)\ntwo.set_next(three)\nthree.set_next(one)\nprint()\nseen = set()\nto_process = queue.Queue()\n# Start with an empty object chain and Graph three.\nto_process.put(([], three))\n# Look for cycles, building the object chain for each object",
        "detail": "mid-range.gc_get_referents_cycles",
        "documentation": {}
    },
    {
        "label": "seen",
        "kind": 5,
        "importPath": "mid-range.gc_get_referents_cycles",
        "description": "mid-range.gc_get_referents_cycles",
        "peekOfCode": "seen = set()\nto_process = queue.Queue()\n# Start with an empty object chain and Graph three.\nto_process.put(([], three))\n# Look for cycles, building the object chain for each object\n# found in the queue so the full cycle can be printed at the\n# end.\nwhile not to_process.empty():\n    chain, next = to_process.get()\n    chain = chain[:]",
        "detail": "mid-range.gc_get_referents_cycles",
        "documentation": {}
    },
    {
        "label": "to_process",
        "kind": 5,
        "importPath": "mid-range.gc_get_referents_cycles",
        "description": "mid-range.gc_get_referents_cycles",
        "peekOfCode": "to_process = queue.Queue()\n# Start with an empty object chain and Graph three.\nto_process.put(([], three))\n# Look for cycles, building the object chain for each object\n# found in the queue so the full cycle can be printed at the\n# end.\nwhile not to_process.empty():\n    chain, next = to_process.get()\n    chain = chain[:]\n    chain.append(next)",
        "detail": "mid-range.gc_get_referents_cycles",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "mid-range.gc_get_referrers",
        "description": "mid-range.gc_get_referrers",
        "peekOfCode": "class Graph:\n    def __init__(self, name):\n        self.name = name\n        self.next = None\n    def set_next(self, next):\n        print(\"Linking nodes {}.next = {}\".format(self, next))\n        self.next = next\n    def __repr__(self):\n        return \"{}({})\".format(self.__class__.__name__, self.name)\n    def __del__(self):",
        "detail": "mid-range.gc_get_referrers",
        "documentation": {}
    },
    {
        "label": "find_referring_graphs",
        "kind": 2,
        "importPath": "mid-range.gc_get_referrers",
        "description": "mid-range.gc_get_referrers",
        "peekOfCode": "def find_referring_graphs(obj):\n    print(\"Looking for references to {!r}\".format(obj))\n    referrers = (r for r in gc.get_referrers(obj) if r not in REFERRERS_TO_IGNORE)\n    for ref in referrers:\n        if isinstance(ref, Graph):\n            # A graph node\n            yield ref\n        elif isinstance(ref, dict):\n            # An instance or other namespace dictionary\n            for parent in find_referring_graphs(ref):",
        "detail": "mid-range.gc_get_referrers",
        "documentation": {}
    },
    {
        "label": "one",
        "kind": 5,
        "importPath": "mid-range.gc_get_referrers",
        "description": "mid-range.gc_get_referrers",
        "peekOfCode": "one = Graph(\"one\")\ntwo = Graph(\"two\")\nthree = Graph(\"three\")\none.set_next(two)\ntwo.set_next(three)\nthree.set_next(one)\n# Collecting now keeps the objects as uncollectable,\n# but not garbage.\nprint()\nprint(\"Collecting...\")",
        "detail": "mid-range.gc_get_referrers",
        "documentation": {}
    },
    {
        "label": "two",
        "kind": 5,
        "importPath": "mid-range.gc_get_referrers",
        "description": "mid-range.gc_get_referrers",
        "peekOfCode": "two = Graph(\"two\")\nthree = Graph(\"three\")\none.set_next(two)\ntwo.set_next(three)\nthree.set_next(one)\n# Collecting now keeps the objects as uncollectable,\n# but not garbage.\nprint()\nprint(\"Collecting...\")\nn = gc.collect()",
        "detail": "mid-range.gc_get_referrers",
        "documentation": {}
    },
    {
        "label": "three",
        "kind": 5,
        "importPath": "mid-range.gc_get_referrers",
        "description": "mid-range.gc_get_referrers",
        "peekOfCode": "three = Graph(\"three\")\none.set_next(two)\ntwo.set_next(three)\nthree.set_next(one)\n# Collecting now keeps the objects as uncollectable,\n# but not garbage.\nprint()\nprint(\"Collecting...\")\nn = gc.collect()\nprint(\"Unreachable objects:\", n)",
        "detail": "mid-range.gc_get_referrers",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.gc_get_referrers",
        "description": "mid-range.gc_get_referrers",
        "peekOfCode": "n = gc.collect()\nprint(\"Unreachable objects:\", n)\nprint(\"Remaining Garbage:\", end=\" \")\npprint.pprint(gc.garbage)\n# Ignore references from local variables in this module, global\n# variables, and from the garbage collector's bookkeeping.\nREFERRERS_TO_IGNORE = [locals(), globals(), gc.garbage]\ndef find_referring_graphs(obj):\n    print(\"Looking for references to {!r}\".format(obj))\n    referrers = (r for r in gc.get_referrers(obj) if r not in REFERRERS_TO_IGNORE)",
        "detail": "mid-range.gc_get_referrers",
        "documentation": {}
    },
    {
        "label": "REFERRERS_TO_IGNORE",
        "kind": 5,
        "importPath": "mid-range.gc_get_referrers",
        "description": "mid-range.gc_get_referrers",
        "peekOfCode": "REFERRERS_TO_IGNORE = [locals(), globals(), gc.garbage]\ndef find_referring_graphs(obj):\n    print(\"Looking for references to {!r}\".format(obj))\n    referrers = (r for r in gc.get_referrers(obj) if r not in REFERRERS_TO_IGNORE)\n    for ref in referrers:\n        if isinstance(ref, Graph):\n            # A graph node\n            yield ref\n        elif isinstance(ref, dict):\n            # An instance or other namespace dictionary",
        "detail": "mid-range.gc_get_referrers",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.gc_get_referrers",
        "description": "mid-range.gc_get_referrers",
        "peekOfCode": "n = gc.collect()\nprint(\"Unreachable objects:\", n)\nprint(\"Remaining Garbage:\", end=\" \")\npprint.pprint(gc.garbage)",
        "detail": "mid-range.gc_get_referrers",
        "documentation": {}
    },
    {
        "label": "MyObj",
        "kind": 6,
        "importPath": "mid-range.gc_threshold",
        "description": "mid-range.gc_threshold",
        "peekOfCode": "class MyObj:\n    def __init__(self, name):\n        self.name = name\n        print(\"Created\", self.name)\ngc.set_debug(gc.DEBUG_STATS)\ngc.set_threshold(threshold, 1, 1)\nprint(\"Thresholds:\", gc.get_threshold())\nprint(\"Clear the collector by forcing a run\")\ngc.collect()\nprint()",
        "detail": "mid-range.gc_threshold",
        "documentation": {}
    },
    {
        "label": "objs",
        "kind": 5,
        "importPath": "mid-range.gc_threshold",
        "description": "mid-range.gc_threshold",
        "peekOfCode": "objs = []\nfor i in range(10):\n    objs.append(MyObj(i))\nprint(\"Exiting\")\n# Turn off debugging\ngc.set_debug(0)",
        "detail": "mid-range.gc_threshold",
        "documentation": {}
    },
    {
        "label": "generate_parentheses",
        "kind": 2,
        "importPath": "mid-range.generate_parentheses",
        "description": "mid-range.generate_parentheses",
        "peekOfCode": "def generate_parentheses(n):\n    result = []\n    if n == 0:\n        return result\n    combinations(result, n, n, \"\")\n    return result\ndef combinations(result, open_left, close_left, combination):\n    if close_left == 0:\n        # a new combination is created (no more open or close parentheses)\n        result.append(combination)",
        "detail": "mid-range.generate_parentheses",
        "documentation": {}
    },
    {
        "label": "combinations",
        "kind": 2,
        "importPath": "mid-range.generate_parentheses",
        "description": "mid-range.generate_parentheses",
        "peekOfCode": "def combinations(result, open_left, close_left, combination):\n    if close_left == 0:\n        # a new combination is created (no more open or close parentheses)\n        result.append(combination)\n    elif open_left == 0:\n        # no more open parentheses, so all left parentheses must be closed (just add the missing close parentheses)\n        result.append(combination + (\")\" * close_left))\n    else:\n        combinations(result, open_left - 1, close_left, combination + \"(\")\n        # check if there is a pair for this close parenthesis",
        "detail": "mid-range.generate_parentheses",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Generate_Parenthesis",
        "description": "mid-range.Generate_Parenthesis",
        "peekOfCode": "class Solution:\n    def generateParenthesis(self, n):\n        res = []\n        def backtrack(S, left, right):\n            if len(S) == 2 * n:\n                res.append(S)\n                return\n            if left < n:\n                backtrack(S + \"(\", left + 1, right)\n            if right < left:",
        "detail": "mid-range.Generate_Parenthesis",
        "documentation": {}
    },
    {
        "label": "get_sequence",
        "kind": 2,
        "importPath": "mid-range.generator",
        "description": "mid-range.generator",
        "peekOfCode": "def get_sequence(n):\n    \"\"\"\n    Return Fibonacci sequence from zero to specified number as list.\n    \"\"\"\n    def fib():\n        \"\"\"\n        Return Fibonacci value by specified number as integer.\n        Golden ratio — https://en.wikipedia.org/wiki/Golden_ratio\n        Fibonacci's relation to the golden ratio — https://en.wikipedia.org/wiki/Fibonacci_number#Closed-form_expression\n        \"\"\"",
        "detail": "mid-range.generator",
        "documentation": {}
    },
    {
        "label": "get_code",
        "kind": 2,
        "importPath": "mid-range.generator",
        "description": "mid-range.generator",
        "peekOfCode": "def get_code():\n    \"\"\"\n    Return source code of Fibonacci sequence logic's implementation.\n    \"\"\"\n    return inspect.getsource(get_sequence)",
        "detail": "mid-range.generator",
        "documentation": {}
    },
    {
        "label": "Heap",
        "kind": 6,
        "importPath": "mid-range.generic_heap",
        "description": "mid-range.generic_heap",
        "peekOfCode": "class Heap:\n    def __init__(self, comparator):\n        self.storage = []\n        self.comparator = comparator\n    def insert(self, value):\n        pass\n    def delete(self):\n        pass\n    def get_priority(self):\n        pass",
        "detail": "mid-range.generic_heap",
        "documentation": {}
    },
    {
        "label": "to_genshi",
        "kind": 2,
        "importPath": "mid-range.genshi",
        "description": "mid-range.genshi",
        "peekOfCode": "def to_genshi(walker):\n    \"\"\"Convert a tree to a genshi tree\n    :arg walker: the treewalker to use to walk the tree to convert it\n    :returns: generator of genshi nodes\n    \"\"\"\n    text = []\n    for token in walker:\n        type = token[\"type\"]\n        if type in (\"Characters\", \"SpaceCharacters\"):\n            text.append(token[\"data\"])",
        "detail": "mid-range.genshi",
        "documentation": {}
    },
    {
        "label": "geoMean",
        "kind": 5,
        "importPath": "mid-range.geoMean",
        "description": "mid-range.geoMean",
        "peekOfCode": "geoMean = lambda x, y: math.sqrt(x * y)\nwhile True:\n    if input(\"Start [Y/n]?  \").strip().lower() == \"y\":\n        print(\n            \" [Res] = \"\n            + str(geoMean(float(input(\"\\nX? \")), float(input(\"Y? \"))))\n            + \"\\n\\n\"\n        )\n    else:\n        print(\"\\n\\nGoodBye!\")",
        "detail": "mid-range.geoMean",
        "documentation": {}
    },
    {
        "label": "is_geometric_series",
        "kind": 2,
        "importPath": "mid-range.geometric_mean",
        "description": "mid-range.geometric_mean",
        "peekOfCode": "def is_geometric_series(series: list) -> bool:\n    \"\"\"\n    checking whether the input series is geometric series or not\n    >>> is_geometric_series([2, 4, 8])\n    True\n    >>> is_geometric_series([3, 6, 12, 24])\n    True\n    >>> is_geometric_series([1, 2, 3])\n    False\n    >>> is_geometric_series([0, 0, 3])",
        "detail": "mid-range.geometric_mean",
        "documentation": {}
    },
    {
        "label": "geometric_mean",
        "kind": 2,
        "importPath": "mid-range.geometric_mean",
        "description": "mid-range.geometric_mean",
        "peekOfCode": "def geometric_mean(series: list) -> float:\n    \"\"\"\n    return the geometric mean of series\n    >>> geometric_mean([2, 4, 8])\n    3.9999999999999996\n    >>> geometric_mean([3, 6, 12, 24])\n    8.48528137423857\n    >>> geometric_mean([4, 8, 16])\n    7.999999999999999\n    >>> geometric_mean(4)",
        "detail": "mid-range.geometric_mean",
        "documentation": {}
    },
    {
        "label": "build_geo_sequence",
        "kind": 2,
        "importPath": "mid-range.geometric_progression_builder",
        "description": "mid-range.geometric_progression_builder",
        "peekOfCode": "def build_geo_sequence(start, end, constant):\n    temp = [start]\n    try:\n        for i in range(start, end):\n            temp.append(temp[-1] * constant)\n    except TypeError as te:\n        print(te)\n    except Exception as e:\n        print(e)\n    else:",
        "detail": "mid-range.geometric_progression_builder",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "mid-range.geometric_progression_builder",
        "description": "mid-range.geometric_progression_builder",
        "peekOfCode": "res = build_geo_sequence(1, 10, 3)\nprint(\"Geo Sequence:\")\nfor i in res:\n    print(\"  \" + str(i))\n# Expected -> 1, 3, 9, 27, 81, ....\n# Here a = 1, d = 3",
        "detail": "mid-range.geometric_progression_builder",
        "documentation": {}
    },
    {
        "label": "geometric_series",
        "kind": 2,
        "importPath": "mid-range.geometric_series",
        "description": "mid-range.geometric_series",
        "peekOfCode": "def geometric_series(nth_term: int, start_term_a: int, common_ratio_r: int) -> list:\n    \"\"\"Pure Python implementation of Geometric Series algorithm\n    :param nth_term: The last term (nth term of Geometric Series)\n    :param start_term_a : The first term of Geometric Series\n    :param common_ratio_r : The common ratio between all the terms\n    :return: The Geometric Series starting from first term a and multiple of common\n        ration with first term with increase in power till last term (nth term)\n    Examples:\n    >>> geometric_series(4, 2, 2)\n    [2, '4.0', '8.0', '16.0']",
        "detail": "mid-range.geometric_series",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "mid-range.get-gists",
        "description": "mid-range.get-gists",
        "peekOfCode": "user = sys.argv[1]\nr = requests.get(\"https://api.github.com/users/{0}/gists\".format(user))\nfor i in r.json():\n    call([\"git\", \"clone\", i[\"git_pull_url\"]])\n    description_file = \"./{0}/description.txt\".format(i[\"id\"])\n    with open(description_file, \"w\") as f:\n        f.write(\"{0}\\n\".format(i[\"description\"]))",
        "detail": "mid-range.get-gists",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "mid-range.get-gists",
        "description": "mid-range.get-gists",
        "peekOfCode": "r = requests.get(\"https://api.github.com/users/{0}/gists\".format(user))\nfor i in r.json():\n    call([\"git\", \"clone\", i[\"git_pull_url\"]])\n    description_file = \"./{0}/description.txt\".format(i[\"id\"])\n    with open(description_file, \"w\") as f:\n        f.write(\"{0}\\n\".format(i[\"description\"]))",
        "detail": "mid-range.get-gists",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "mid-range.get-json-data-from-google-scholar",
        "description": "mid-range.get-json-data-from-google-scholar",
        "peekOfCode": "response = urllib.request.urlopen(\n    \"https://scholar.google.fr/citations?user={}\".format(sys.argv[1])\n)\nhtml = response.read()\nm = re.search(\"<tbody(.*)</tbody>\", str(html))\nmm = re.findall(r\"<tr class=\\\"gsc_a_tr\\\">(.*?)</tr>\", m.group(0))\npapers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)",
        "detail": "mid-range.get-json-data-from-google-scholar",
        "documentation": {}
    },
    {
        "label": "html",
        "kind": 5,
        "importPath": "mid-range.get-json-data-from-google-scholar",
        "description": "mid-range.get-json-data-from-google-scholar",
        "peekOfCode": "html = response.read()\nm = re.search(\"<tbody(.*)</tbody>\", str(html))\nmm = re.findall(r\"<tr class=\\\"gsc_a_tr\\\">(.*?)</tr>\", m.group(0))\npapers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)\n    yy = re.findall(r\"£?(.*?)£\", xx)\n    paper = {\"title\": yy[0], \"author\": yy[1], \"booktitle\": yy[2]}\n    papers.append(paper)",
        "detail": "mid-range.get-json-data-from-google-scholar",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "mid-range.get-json-data-from-google-scholar",
        "description": "mid-range.get-json-data-from-google-scholar",
        "peekOfCode": "m = re.search(\"<tbody(.*)</tbody>\", str(html))\nmm = re.findall(r\"<tr class=\\\"gsc_a_tr\\\">(.*?)</tr>\", m.group(0))\npapers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)\n    yy = re.findall(r\"£?(.*?)£\", xx)\n    paper = {\"title\": yy[0], \"author\": yy[1], \"booktitle\": yy[2]}\n    papers.append(paper)\nres = {\"papers\": papers}",
        "detail": "mid-range.get-json-data-from-google-scholar",
        "documentation": {}
    },
    {
        "label": "mm",
        "kind": 5,
        "importPath": "mid-range.get-json-data-from-google-scholar",
        "description": "mid-range.get-json-data-from-google-scholar",
        "peekOfCode": "mm = re.findall(r\"<tr class=\\\"gsc_a_tr\\\">(.*?)</tr>\", m.group(0))\npapers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)\n    yy = re.findall(r\"£?(.*?)£\", xx)\n    paper = {\"title\": yy[0], \"author\": yy[1], \"booktitle\": yy[2]}\n    papers.append(paper)\nres = {\"papers\": papers}\nprint(json.JSONEncoder().encode(res))",
        "detail": "mid-range.get-json-data-from-google-scholar",
        "documentation": {}
    },
    {
        "label": "papers",
        "kind": 5,
        "importPath": "mid-range.get-json-data-from-google-scholar",
        "description": "mid-range.get-json-data-from-google-scholar",
        "peekOfCode": "papers = []\nfor m in mm:\n    xx = re.sub(r\"<(.*?)>\", r\"£\", m)\n    xx = re.sub(r\"£+\", r\"£\", xx)\n    yy = re.findall(r\"£?(.*?)£\", xx)\n    paper = {\"title\": yy[0], \"author\": yy[1], \"booktitle\": yy[2]}\n    papers.append(paper)\nres = {\"papers\": papers}\nprint(json.JSONEncoder().encode(res))",
        "detail": "mid-range.get-json-data-from-google-scholar",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "mid-range.get-json-data-from-google-scholar",
        "description": "mid-range.get-json-data-from-google-scholar",
        "peekOfCode": "res = {\"papers\": papers}\nprint(json.JSONEncoder().encode(res))",
        "detail": "mid-range.get-json-data-from-google-scholar",
        "documentation": {}
    },
    {
        "label": "getNode",
        "kind": 2,
        "importPath": "mid-range.Get-Node-Value",
        "description": "mid-range.Get-Node-Value",
        "peekOfCode": "def getNode(head, positionFromTail):\n    length = 0\n    ptr = head\n    while ptr:\n        length += 1\n        ptr = ptr.next\n    if length == 1:\n        return head.data\n    ptr = head\n    for _ in range(0, length - positionFromTail - 1):",
        "detail": "mid-range.Get-Node-Value",
        "documentation": {}
    },
    {
        "label": "getargspec",
        "kind": 2,
        "importPath": "mid-range.getargspec",
        "description": "mid-range.getargspec",
        "peekOfCode": "def getargspec(func):\n    \"\"\"Like inspect.getargspec but supports functools.partial as well.\"\"\"\n    if inspect.ismethod(func):\n        func = func.__func__\n    if type(func) is partial:\n        orig_func = func.func\n        argspec = getargspec(orig_func)\n        args = list(argspec[0])\n        defaults = list(argspec[3] or ())\n        kwoargs = list(argspec[4])",
        "detail": "mid-range.getargspec",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "mid-range.getopt_example",
        "description": "mid-range.getopt_example",
        "peekOfCode": "version = \"1.0\"\nverbose = False\noutput_filename = \"default.out\"\nprint(\"ARGV      :\", sys.argv[1:])\ntry:\n    options, remainder = getopt.getopt(\n        sys.argv[1:], \"o:v\", [\"output=\", \"verbose\", \"version=\"]\n    )\nexcept getopt.GetoptError as err:\n    print(\"ERROR:\", err)",
        "detail": "mid-range.getopt_example",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "mid-range.getopt_example",
        "description": "mid-range.getopt_example",
        "peekOfCode": "verbose = False\noutput_filename = \"default.out\"\nprint(\"ARGV      :\", sys.argv[1:])\ntry:\n    options, remainder = getopt.getopt(\n        sys.argv[1:], \"o:v\", [\"output=\", \"verbose\", \"version=\"]\n    )\nexcept getopt.GetoptError as err:\n    print(\"ERROR:\", err)\n    sys.exit(1)",
        "detail": "mid-range.getopt_example",
        "documentation": {}
    },
    {
        "label": "output_filename",
        "kind": 5,
        "importPath": "mid-range.getopt_example",
        "description": "mid-range.getopt_example",
        "peekOfCode": "output_filename = \"default.out\"\nprint(\"ARGV      :\", sys.argv[1:])\ntry:\n    options, remainder = getopt.getopt(\n        sys.argv[1:], \"o:v\", [\"output=\", \"verbose\", \"version=\"]\n    )\nexcept getopt.GetoptError as err:\n    print(\"ERROR:\", err)\n    sys.exit(1)\nprint(\"OPTIONS   :\", options)",
        "detail": "mid-range.getopt_example",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "mid-range.getopt_gnu",
        "description": "mid-range.getopt_gnu",
        "peekOfCode": "version = \"1.0\"\nverbose = False\noutput_filename = \"default.out\"\nprint(\"ARGV      :\", sys.argv[1:])\ntry:\n    options, remainder = getopt.gnu_getopt(\n        sys.argv[1:], \"o:v\", [\"output=\", \"verbose\", \"version=\"]\n    )\nexcept getopt.GetoptError as err:\n    print(\"ERROR:\", err)",
        "detail": "mid-range.getopt_gnu",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "mid-range.getopt_gnu",
        "description": "mid-range.getopt_gnu",
        "peekOfCode": "verbose = False\noutput_filename = \"default.out\"\nprint(\"ARGV      :\", sys.argv[1:])\ntry:\n    options, remainder = getopt.gnu_getopt(\n        sys.argv[1:], \"o:v\", [\"output=\", \"verbose\", \"version=\"]\n    )\nexcept getopt.GetoptError as err:\n    print(\"ERROR:\", err)\n    sys.exit(1)",
        "detail": "mid-range.getopt_gnu",
        "documentation": {}
    },
    {
        "label": "output_filename",
        "kind": 5,
        "importPath": "mid-range.getopt_gnu",
        "description": "mid-range.getopt_gnu",
        "peekOfCode": "output_filename = \"default.out\"\nprint(\"ARGV      :\", sys.argv[1:])\ntry:\n    options, remainder = getopt.gnu_getopt(\n        sys.argv[1:], \"o:v\", [\"output=\", \"verbose\", \"version=\"]\n    )\nexcept getopt.GetoptError as err:\n    print(\"ERROR:\", err)\n    sys.exit(1)\nprint(\"OPTIONS   :\", options)",
        "detail": "mid-range.getopt_gnu",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "mid-range.getpass_prompt",
        "description": "mid-range.getpass_prompt",
        "peekOfCode": "p = getpass.getpass(prompt=\"What is your favorite color? \")\nif p.lower() == \"blue\":\n    print(\"Right.  Off you go.\")\nelse:\n    print(\"Auuuuugh!\")",
        "detail": "mid-range.getpass_prompt",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "mid-range.getpass_stream",
        "description": "mid-range.getpass_stream",
        "peekOfCode": "p = getpass.getpass(stream=sys.stderr)\nprint(\"You entered:\", p)",
        "detail": "mid-range.getpass_stream",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "mid-range.gettext_example",
        "description": "mid-range.gettext_example",
        "peekOfCode": "t = gettext.translation(\"example_domain\", \"locale\", fallback=True)\n_ = t.gettext\nprint(_(\"This message is in the script.\"))",
        "detail": "mid-range.gettext_example",
        "documentation": {}
    },
    {
        "label": "_",
        "kind": 5,
        "importPath": "mid-range.gettext_example",
        "description": "mid-range.gettext_example",
        "peekOfCode": "_ = t.gettext\nprint(_(\"This message is in the script.\"))",
        "detail": "mid-range.gettext_example",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "mid-range.gettext_example_corrected",
        "description": "mid-range.gettext_example_corrected",
        "peekOfCode": "t = gettext.translation(\"example\", \"locale\", fallback=True)\n_ = t.gettext\nprint(_(\"This message is in the script.\"))",
        "detail": "mid-range.gettext_example_corrected",
        "documentation": {}
    },
    {
        "label": "_",
        "kind": 5,
        "importPath": "mid-range.gettext_example_corrected",
        "description": "mid-range.gettext_example_corrected",
        "peekOfCode": "_ = t.gettext\nprint(_(\"This message is in the script.\"))",
        "detail": "mid-range.gettext_example_corrected",
        "documentation": {}
    },
    {
        "label": "catalogs",
        "kind": 5,
        "importPath": "mid-range.gettext_find",
        "description": "mid-range.gettext_find",
        "peekOfCode": "catalogs = gettext.find(\"example\", \"locale\", all=True)\nprint(\"Catalogs:\", catalogs)",
        "detail": "mid-range.gettext_find",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "mid-range.gettext_module_global",
        "description": "mid-range.gettext_module_global",
        "peekOfCode": "t = gettext.translation(\"example\", \"locale\", fallback=False)\n_ = t.gettext\nngettext = t.ngettext\nprint(_(\"This message is in the script.\"))",
        "detail": "mid-range.gettext_module_global",
        "documentation": {}
    },
    {
        "label": "_",
        "kind": 5,
        "importPath": "mid-range.gettext_module_global",
        "description": "mid-range.gettext_module_global",
        "peekOfCode": "_ = t.gettext\nngettext = t.ngettext\nprint(_(\"This message is in the script.\"))",
        "detail": "mid-range.gettext_module_global",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "kind": 5,
        "importPath": "mid-range.gettext_module_global",
        "description": "mid-range.gettext_module_global",
        "peekOfCode": "ngettext = t.ngettext\nprint(_(\"This message is in the script.\"))",
        "detail": "mid-range.gettext_module_global",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "mid-range.gettext_plural",
        "description": "mid-range.gettext_plural",
        "peekOfCode": "t = translation(\"plural\", \"locale\", fallback=False)\nnum = int(sys.argv[1])\nmsg = t.ngettext(\"{num} means singular.\", \"{num} means plural.\", num)\n# Still need to add the values to the message ourself.\nprint(msg.format(num=num))",
        "detail": "mid-range.gettext_plural",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "mid-range.gettext_plural",
        "description": "mid-range.gettext_plural",
        "peekOfCode": "num = int(sys.argv[1])\nmsg = t.ngettext(\"{num} means singular.\", \"{num} means plural.\", num)\n# Still need to add the values to the message ourself.\nprint(msg.format(num=num))",
        "detail": "mid-range.gettext_plural",
        "documentation": {}
    },
    {
        "label": "msg",
        "kind": 5,
        "importPath": "mid-range.gettext_plural",
        "description": "mid-range.gettext_plural",
        "peekOfCode": "msg = t.ngettext(\"{num} means singular.\", \"{num} means plural.\", num)\n# Still need to add the values to the message ourself.\nprint(msg.format(num=num))",
        "detail": "mid-range.gettext_plural",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "mid-range.get_attr",
        "description": "mid-range.get_attr",
        "peekOfCode": "class A:\n    a = 1\nclass B(A):\n    b = 2\n    def __init__(self):\n        self.c = 3\nb = B()\nget_attr(b, \"a\")\nget_attr(b, \"b\")\nget_attr(b, \"c\")",
        "detail": "mid-range.get_attr",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "mid-range.get_attr",
        "description": "mid-range.get_attr",
        "peekOfCode": "class B(A):\n    b = 2\n    def __init__(self):\n        self.c = 3\nb = B()\nget_attr(b, \"a\")\nget_attr(b, \"b\")\nget_attr(b, \"c\")",
        "detail": "mid-range.get_attr",
        "documentation": {}
    },
    {
        "label": "get_attr",
        "kind": 2,
        "importPath": "mid-range.get_attr",
        "description": "mid-range.get_attr",
        "peekOfCode": "def get_attr(obj, name):\n    \"\"\"Emulate built in getattr\"\"\"\n    if name in obj.__dict__:\n        print(f\"found {name} in obj\")\n        return obj.__dict__[name]\n    if name in obj.__class__.__dict__:\n        print(f\"found {name} in class\")\n        return obj.__class__.__dict__[name]\n    for cls in obj.__class__.__mro__:\n        if name in cls.__dict__:",
        "detail": "mid-range.get_attr",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.get_attr",
        "description": "mid-range.get_attr",
        "peekOfCode": "b = B()\nget_attr(b, \"a\")\nget_attr(b, \"b\")\nget_attr(b, \"c\")",
        "detail": "mid-range.get_attr",
        "documentation": {}
    },
    {
        "label": "ideas_to_migrate",
        "kind": 5,
        "importPath": "mid-range.get_ideas",
        "description": "mid-range.get_ideas",
        "peekOfCode": "ideas_to_migrate = []\nprint(\"Collecting suggestions...\")\n# Loop through suggestions and figure out which ones need to be migrated.\nfor suggestion in suggestions:\n    if suggestion[\"status\"]:\n        status_type = suggestion[\"status\"][\"name\"]\n        if status_type.lower() != \"completed\" and status_type.lower() != \"declined\":\n            ideas_to_migrate.append(suggestion)\n    else:\n        ideas_to_migrate.append(suggestion)",
        "detail": "mid-range.get_ideas",
        "documentation": {}
    },
    {
        "label": "imdb_top",
        "kind": 2,
        "importPath": "mid-range.get_imdbtop",
        "description": "mid-range.get_imdbtop",
        "peekOfCode": "def imdb_top(imdb_top_n):\n    base_url = (\n        f\"https://www.imdb.com/search/title?title_type=\"\n        f\"feature&sort=num_votes,desc&count={imdb_top_n}\"\n    )\n    source = BeautifulSoup(requests.get(base_url).content, \"html.parser\")\n    for m in source.findAll(\"div\", class_=\"lister-item mode-advanced\"):\n        print(\"\\n\" + m.h3.a.text)  # movie's name\n        print(m.find(\"span\", attrs={\"class\": \"genre\"}).text)  # genre\n        print(m.strong.text)  # movie's rating",
        "detail": "mid-range.get_imdbtop",
        "documentation": {}
    },
    {
        "label": "get_imdb_top_250_movies",
        "kind": 2,
        "importPath": "mid-range.get_imdb_top_250_movies_csv",
        "description": "mid-range.get_imdb_top_250_movies_csv",
        "peekOfCode": "def get_imdb_top_250_movies(url: str = \"\") -> dict[str, float]:\n    url = url or \"https://www.imdb.com/chart/top/?ref_=nv_mv_250\"\n    soup = BeautifulSoup(requests.get(url).text, \"html.parser\")\n    titles = soup.find_all(\"td\", attrs=\"titleColumn\")\n    ratings = soup.find_all(\"td\", class_=\"ratingColumn imdbRating\")\n    return {\n        title.a.text: float(rating.strong.text)\n        for title, rating in zip(titles, ratings)\n    }\ndef write_movies(filename: str = \"IMDb_Top_250_Movies.csv\") -> None:",
        "detail": "mid-range.get_imdb_top_250_movies_csv",
        "documentation": {}
    },
    {
        "label": "write_movies",
        "kind": 2,
        "importPath": "mid-range.get_imdb_top_250_movies_csv",
        "description": "mid-range.get_imdb_top_250_movies_csv",
        "peekOfCode": "def write_movies(filename: str = \"IMDb_Top_250_Movies.csv\") -> None:\n    movies = get_imdb_top_250_movies()\n    with open(filename, \"w\", newline=\"\") as out_file:\n        writer = csv.writer(out_file)\n        writer.writerow([\"Movie title\", \"IMDb rating\"])\n        for title, rating in movies.items():\n            writer.writerow([title, rating])\nif __name__ == \"__main__\":\n    write_movies()",
        "detail": "mid-range.get_imdb_top_250_movies_csv",
        "documentation": {}
    },
    {
        "label": "Animal",
        "kind": 6,
        "importPath": "mid-range.get_instance",
        "description": "mid-range.get_instance",
        "peekOfCode": "class Animal(object):\n    pass\nclass Dog(Animal):\n    pass\nclass Husky(Dog):\n    pass\na = Animal()\nd = Dog()\nh = Husky()\nprint(\"check a = Animal()...\")",
        "detail": "mid-range.get_instance",
        "documentation": {}
    },
    {
        "label": "Dog",
        "kind": 6,
        "importPath": "mid-range.get_instance",
        "description": "mid-range.get_instance",
        "peekOfCode": "class Dog(Animal):\n    pass\nclass Husky(Dog):\n    pass\na = Animal()\nd = Dog()\nh = Husky()\nprint(\"check a = Animal()...\")\nprint(\"isinstance(a, Animal) =\", isinstance(a, Animal))\nprint(\"isinstance(a, Dog) =\", isinstance(a, Dog))",
        "detail": "mid-range.get_instance",
        "documentation": {}
    },
    {
        "label": "Husky",
        "kind": 6,
        "importPath": "mid-range.get_instance",
        "description": "mid-range.get_instance",
        "peekOfCode": "class Husky(Dog):\n    pass\na = Animal()\nd = Dog()\nh = Husky()\nprint(\"check a = Animal()...\")\nprint(\"isinstance(a, Animal) =\", isinstance(a, Animal))\nprint(\"isinstance(a, Dog) =\", isinstance(a, Dog))\nprint(\"isinstance(a, Husky) =\", isinstance(a, Husky))\nprint(\"check d = Dog()...\")",
        "detail": "mid-range.get_instance",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.get_instance",
        "description": "mid-range.get_instance",
        "peekOfCode": "a = Animal()\nd = Dog()\nh = Husky()\nprint(\"check a = Animal()...\")\nprint(\"isinstance(a, Animal) =\", isinstance(a, Animal))\nprint(\"isinstance(a, Dog) =\", isinstance(a, Dog))\nprint(\"isinstance(a, Husky) =\", isinstance(a, Husky))\nprint(\"check d = Dog()...\")\nprint(\"isinstance(d, Animal) =\", isinstance(d, Animal))\nprint(\"isinstance(d, Dog) =\", isinstance(d, Dog))",
        "detail": "mid-range.get_instance",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.get_instance",
        "description": "mid-range.get_instance",
        "peekOfCode": "d = Dog()\nh = Husky()\nprint(\"check a = Animal()...\")\nprint(\"isinstance(a, Animal) =\", isinstance(a, Animal))\nprint(\"isinstance(a, Dog) =\", isinstance(a, Dog))\nprint(\"isinstance(a, Husky) =\", isinstance(a, Husky))\nprint(\"check d = Dog()...\")\nprint(\"isinstance(d, Animal) =\", isinstance(d, Animal))\nprint(\"isinstance(d, Dog) =\", isinstance(d, Dog))\nprint(\"isinstance(d, Husky) =\", isinstance(d, Husky))",
        "detail": "mid-range.get_instance",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "mid-range.get_instance",
        "description": "mid-range.get_instance",
        "peekOfCode": "h = Husky()\nprint(\"check a = Animal()...\")\nprint(\"isinstance(a, Animal) =\", isinstance(a, Animal))\nprint(\"isinstance(a, Dog) =\", isinstance(a, Dog))\nprint(\"isinstance(a, Husky) =\", isinstance(a, Husky))\nprint(\"check d = Dog()...\")\nprint(\"isinstance(d, Animal) =\", isinstance(d, Animal))\nprint(\"isinstance(d, Dog) =\", isinstance(d, Dog))\nprint(\"isinstance(d, Husky) =\", isinstance(d, Husky))\nprint(\"check h = Husky()...\")",
        "detail": "mid-range.get_instance",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.gg1",
        "description": "mid-range.gg1",
        "peekOfCode": "class Solution:\n    def substrings_missing_at_least_one_char(self, s: str, C: set):\n        window = {}\n        window_size = 0\n        start = 0\n        count = 0\n        for end, c in enumerate(s):\n            if c in C:\n                if c not in window:\n                    window_size += 1",
        "detail": "mid-range.gg1",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.gg1",
        "description": "mid-range.gg1",
        "peekOfCode": "s = Solution()\ncount = s.substrings_missing_at_least_one_char(\"caab\", {\"a\", \"c\"})\nprint(count)",
        "detail": "mid-range.gg1",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "mid-range.gg1",
        "description": "mid-range.gg1",
        "peekOfCode": "count = s.substrings_missing_at_least_one_char(\"caab\", {\"a\", \"c\"})\nprint(count)",
        "detail": "mid-range.gg1",
        "documentation": {}
    },
    {
        "label": "printtext",
        "kind": 2,
        "importPath": "mid-range.gifimi",
        "description": "mid-range.gifimi",
        "peekOfCode": "def printtext():\n    global e, e1\n    global string, string1\n    string = e.get()\n    print(string)\n    string1 = e1.get()\ndef Freezing_a_region():\n    Freezing_a_region = (\n        VideoFileClip(filepath).subclip((string), (string1)).speedx(0.5).resize(0.4)\n    )",
        "detail": "mid-range.gifimi",
        "documentation": {}
    },
    {
        "label": "Freezing_a_region",
        "kind": 2,
        "importPath": "mid-range.gifimi",
        "description": "mid-range.gifimi",
        "peekOfCode": "def Freezing_a_region():\n    Freezing_a_region = (\n        VideoFileClip(filepath).subclip((string), (string1)).speedx(0.5).resize(0.4)\n    )\n    snapshot = (\n        Freezing_a_region.crop(x2=Freezing_a_region.w / 2)\n        .to_ImageClip(0.2)\n        .set_duration(Freezing_a_region.duration)\n    )\n    composition = CompositeVideoClip([Freezing_a_region, snapshot])",
        "detail": "mid-range.gifimi",
        "documentation": {}
    },
    {
        "label": "Cropping_the_image",
        "kind": 2,
        "importPath": "mid-range.gifimi",
        "description": "mid-range.gifimi",
        "peekOfCode": "def Cropping_the_image():\n    Cropping_the_image = (\n        VideoFileClip(filepath)\n        .subclip(string, string1)\n        .resize(0.5)\n        .crop(x1=145, x2=400)\n    )\n    Cropping_the_image.write_gif(\"Cropping the image.gif\")\ndef gif_loop():\n    castle = (",
        "detail": "mid-range.gifimi",
        "documentation": {}
    },
    {
        "label": "gif_loop",
        "kind": 2,
        "importPath": "mid-range.gifimi",
        "description": "mid-range.gifimi",
        "peekOfCode": "def gif_loop():\n    castle = (\n        VideoFileClip(filepath, audio=False)\n        .subclip(string, string1)\n        .speedx(0.2)\n        .resize(0.4)\n    )\n    d = castle.duration\n    castle = castle.crossfadein(d / 2)\n    composition = CompositeVideoClip(",
        "detail": "mid-range.gifimi",
        "documentation": {}
    },
    {
        "label": "filepath",
        "kind": 5,
        "importPath": "mid-range.gifimi",
        "description": "mid-range.gifimi",
        "peekOfCode": "filepath = \"FROZEN Full UK Trailer Official Disney UK.mp4\"\ndef printtext():\n    global e, e1\n    global string, string1\n    string = e.get()\n    print(string)\n    string1 = e1.get()\ndef Freezing_a_region():\n    Freezing_a_region = (\n        VideoFileClip(filepath).subclip((string), (string1)).speedx(0.5).resize(0.4)",
        "detail": "mid-range.gifimi",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "mid-range.gifimi",
        "description": "mid-range.gifimi",
        "peekOfCode": "root = Tk()\nroot.title(\"Name\")\ne = Entry(root)\ne.pack()\ne.focus_set()\ne1 = Entry(root)\ne1.pack()\ne1.focus_set()\nb = Button(root, text=\"okay\", command=printtext)\nb.pack(side=\"bottom\")",
        "detail": "mid-range.gifimi",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "mid-range.gifimi",
        "description": "mid-range.gifimi",
        "peekOfCode": "e = Entry(root)\ne.pack()\ne.focus_set()\ne1 = Entry(root)\ne1.pack()\ne1.focus_set()\nb = Button(root, text=\"okay\", command=printtext)\nb.pack(side=\"bottom\")\nb1 = Button(root, text=\"Freezing_a_region\", command=Freezing_a_region)\nb1.pack(side=\"bottom\")",
        "detail": "mid-range.gifimi",
        "documentation": {}
    },
    {
        "label": "e1",
        "kind": 5,
        "importPath": "mid-range.gifimi",
        "description": "mid-range.gifimi",
        "peekOfCode": "e1 = Entry(root)\ne1.pack()\ne1.focus_set()\nb = Button(root, text=\"okay\", command=printtext)\nb.pack(side=\"bottom\")\nb1 = Button(root, text=\"Freezing_a_region\", command=Freezing_a_region)\nb1.pack(side=\"bottom\")\nb2 = Button(root, text=\"Cropping_the_image\", command=Cropping_the_image)\nb2.pack(side=\"bottom\")\nb3 = Button(root, text=\"gif_loop\", command=gif_loop)",
        "detail": "mid-range.gifimi",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.gifimi",
        "description": "mid-range.gifimi",
        "peekOfCode": "b = Button(root, text=\"okay\", command=printtext)\nb.pack(side=\"bottom\")\nb1 = Button(root, text=\"Freezing_a_region\", command=Freezing_a_region)\nb1.pack(side=\"bottom\")\nb2 = Button(root, text=\"Cropping_the_image\", command=Cropping_the_image)\nb2.pack(side=\"bottom\")\nb3 = Button(root, text=\"gif_loop\", command=gif_loop)\nb3.pack(side=\"bottom\")\nroot.mainloop()\nprint(string1)",
        "detail": "mid-range.gifimi",
        "documentation": {}
    },
    {
        "label": "b1",
        "kind": 5,
        "importPath": "mid-range.gifimi",
        "description": "mid-range.gifimi",
        "peekOfCode": "b1 = Button(root, text=\"Freezing_a_region\", command=Freezing_a_region)\nb1.pack(side=\"bottom\")\nb2 = Button(root, text=\"Cropping_the_image\", command=Cropping_the_image)\nb2.pack(side=\"bottom\")\nb3 = Button(root, text=\"gif_loop\", command=gif_loop)\nb3.pack(side=\"bottom\")\nroot.mainloop()\nprint(string1)",
        "detail": "mid-range.gifimi",
        "documentation": {}
    },
    {
        "label": "b2",
        "kind": 5,
        "importPath": "mid-range.gifimi",
        "description": "mid-range.gifimi",
        "peekOfCode": "b2 = Button(root, text=\"Cropping_the_image\", command=Cropping_the_image)\nb2.pack(side=\"bottom\")\nb3 = Button(root, text=\"gif_loop\", command=gif_loop)\nb3.pack(side=\"bottom\")\nroot.mainloop()\nprint(string1)",
        "detail": "mid-range.gifimi",
        "documentation": {}
    },
    {
        "label": "b3",
        "kind": 5,
        "importPath": "mid-range.gifimi",
        "description": "mid-range.gifimi",
        "peekOfCode": "b3 = Button(root, text=\"gif_loop\", command=gif_loop)\nb3.pack(side=\"bottom\")\nroot.mainloop()\nprint(string1)",
        "detail": "mid-range.gifimi",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "mid-range.ginortS",
        "description": "mid-range.ginortS",
        "peekOfCode": "s = input()\nprint(\n    *sorted(s, key=lambda x: (x in \"02468\", x.isdigit(), x.isupper(), x.islower(), x)),\n    sep=\"\"\n)",
        "detail": "mid-range.ginortS",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "mid-range.Gist",
        "description": "mid-range.Gist",
        "peekOfCode": "user = sys.argv[1]\nr = requests.get(\"https://api.github.com/users/{0}/gists\".format(user))\nfor i in r.json():\n    call([\"git\", \"clone\", i[\"git_pull_url\"]])\n    description_file = \"./{0}/description.txt\".format(i[\"id\"])\n    with open(description_file, \"w\") as f:\n        f.write(\"{0}\\n\".format(i[\"description\"]))",
        "detail": "mid-range.Gist",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "mid-range.Gist",
        "description": "mid-range.Gist",
        "peekOfCode": "r = requests.get(\"https://api.github.com/users/{0}/gists\".format(user))\nfor i in r.json():\n    call([\"git\", \"clone\", i[\"git_pull_url\"]])\n    description_file = \"./{0}/description.txt\".format(i[\"id\"])\n    with open(description_file, \"w\") as f:\n        f.write(\"{0}\\n\".format(i[\"description\"]))",
        "detail": "mid-range.Gist",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "mid-range.gist.py",
        "description": "mid-range.gist.py",
        "peekOfCode": "user = sys.argv[1]\nr = requests.get(\"https://api.github.com/users/{0}/gists\".format(user))\nfor i in r.json():\n    call([\"git\", \"clone\", i[\"git_pull_url\"]])\n    description_file = \"./{0}/description.txt\".format(i[\"id\"])\n    with open(description_file, \"w\") as f:\n        f.write(\"{0}\\n\".format(i[\"description\"]))",
        "detail": "mid-range.gist.py",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "mid-range.gist.py",
        "description": "mid-range.gist.py",
        "peekOfCode": "r = requests.get(\"https://api.github.com/users/{0}/gists\".format(user))\nfor i in r.json():\n    call([\"git\", \"clone\", i[\"git_pull_url\"]])\n    description_file = \"./{0}/description.txt\".format(i[\"id\"])\n    with open(description_file, \"w\") as f:\n        f.write(\"{0}\\n\".format(i[\"description\"]))",
        "detail": "mid-range.gist.py",
        "documentation": {}
    },
    {
        "label": "email_pls",
        "kind": 2,
        "importPath": "mid-range.github-email-scraper",
        "description": "mid-range.github-email-scraper",
        "peekOfCode": "def email_pls(g, commit):\n    users = g.search_users(commit)\n    for u in users:\n        if (\n            u.email is not None\n            and u.company is not None\n            and u.company.lower() == commit.lower()\n        ):\n            # 2 ez\n            print(u.email, u.name)",
        "detail": "mid-range.github-email-scraper",
        "documentation": {}
    },
    {
        "label": "create_nojekyll_and_cname",
        "kind": 2,
        "importPath": "mid-range.githubpages",
        "description": "mid-range.githubpages",
        "peekOfCode": "def create_nojekyll_and_cname(app: Sphinx, env: BuildEnvironment) -> None:\n    if app.builder.format == \"html\":\n        open(os.path.join(app.builder.outdir, \".nojekyll\"), \"wt\").close()\n        html_baseurl = app.config.html_baseurl\n        if html_baseurl:\n            domain = urllib.parse.urlparse(html_baseurl).hostname\n            if domain and not domain.endswith(\".github.io\"):\n                with open(os.path.join(app.builder.outdir, \"CNAME\"), \"wt\") as f:\n                    # NOTE: don't write a trailing newline. The `CNAME` file that's\n                    # auto-generated by the Github UI doesn't have one.",
        "detail": "mid-range.githubpages",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "mid-range.githubpages",
        "description": "mid-range.githubpages",
        "peekOfCode": "def setup(app: Sphinx) -> Dict[str, Any]:\n    app.connect(\"env-updated\", create_nojekyll_and_cname)\n    return {\"version\": sphinx.__display_version__, \"parallel_read_safe\": True}",
        "detail": "mid-range.githubpages",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "mid-range.github_bot",
        "description": "mid-range.github_bot",
        "peekOfCode": "g = Github(\"username\", \"password\")\n# showing all the repositories of python\nrepos = g.search_repositories(query=\"language:python\")\nfor i in repos:\n    print(i)\n# for getting all the repos of user\nfor repo in g.get_user().get_repos():\n    print(repo.name)\n# shows the no. of star of the repo\nrepo = g.get_repo(\"repository name\")",
        "detail": "mid-range.github_bot",
        "documentation": {}
    },
    {
        "label": "repos",
        "kind": 5,
        "importPath": "mid-range.github_bot",
        "description": "mid-range.github_bot",
        "peekOfCode": "repos = g.search_repositories(query=\"language:python\")\nfor i in repos:\n    print(i)\n# for getting all the repos of user\nfor repo in g.get_user().get_repos():\n    print(repo.name)\n# shows the no. of star of the repo\nrepo = g.get_repo(\"repository name\")\nrepo.stargazers_count\n# getting all the contents of particular repo",
        "detail": "mid-range.github_bot",
        "documentation": {}
    },
    {
        "label": "repo",
        "kind": 5,
        "importPath": "mid-range.github_bot",
        "description": "mid-range.github_bot",
        "peekOfCode": "repo = g.get_repo(\"repository name\")\nrepo.stargazers_count\n# getting all the contents of particular repo\ncontent = repo.get_contents(\"\")\nfor content_fil in content:\n    print(content_fil)\n# making a repo test and creating test file\nuser = g.get_user()\nrepo = user.create_repo(\"test\")\nrepo.create_file(\"test.txt\", \"commit\", \"hello coders\")",
        "detail": "mid-range.github_bot",
        "documentation": {}
    },
    {
        "label": "content",
        "kind": 5,
        "importPath": "mid-range.github_bot",
        "description": "mid-range.github_bot",
        "peekOfCode": "content = repo.get_contents(\"\")\nfor content_fil in content:\n    print(content_fil)\n# making a repo test and creating test file\nuser = g.get_user()\nrepo = user.create_repo(\"test\")\nrepo.create_file(\"test.txt\", \"commit\", \"hello coders\")\n# deleting file from the repo\nrepo = g.get_repo(\"\")  # enter repository name inside the bracket\ncont = repo.get_contents(\"test.txt\")",
        "detail": "mid-range.github_bot",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "mid-range.github_bot",
        "description": "mid-range.github_bot",
        "peekOfCode": "user = g.get_user()\nrepo = user.create_repo(\"test\")\nrepo.create_file(\"test.txt\", \"commit\", \"hello coders\")\n# deleting file from the repo\nrepo = g.get_repo(\"\")  # enter repository name inside the bracket\ncont = repo.get_contents(\"test.txt\")\nrepo.delete_file(cont.path, \"remove test\", cont.sha, branch=\"master\")",
        "detail": "mid-range.github_bot",
        "documentation": {}
    },
    {
        "label": "repo",
        "kind": 5,
        "importPath": "mid-range.github_bot",
        "description": "mid-range.github_bot",
        "peekOfCode": "repo = user.create_repo(\"test\")\nrepo.create_file(\"test.txt\", \"commit\", \"hello coders\")\n# deleting file from the repo\nrepo = g.get_repo(\"\")  # enter repository name inside the bracket\ncont = repo.get_contents(\"test.txt\")\nrepo.delete_file(cont.path, \"remove test\", cont.sha, branch=\"master\")",
        "detail": "mid-range.github_bot",
        "documentation": {}
    },
    {
        "label": "repo",
        "kind": 5,
        "importPath": "mid-range.github_bot",
        "description": "mid-range.github_bot",
        "peekOfCode": "repo = g.get_repo(\"\")  # enter repository name inside the bracket\ncont = repo.get_contents(\"test.txt\")\nrepo.delete_file(cont.path, \"remove test\", cont.sha, branch=\"master\")",
        "detail": "mid-range.github_bot",
        "documentation": {}
    },
    {
        "label": "cont",
        "kind": 5,
        "importPath": "mid-range.github_bot",
        "description": "mid-range.github_bot",
        "peekOfCode": "cont = repo.get_contents(\"test.txt\")\nrepo.delete_file(cont.path, \"remove test\", cont.sha, branch=\"master\")",
        "detail": "mid-range.github_bot",
        "documentation": {}
    },
    {
        "label": "__docformat__",
        "kind": 5,
        "importPath": "mid-range.gl",
        "description": "mid-range.gl",
        "peekOfCode": "__docformat__ = \"reStructuredText\"\nlabels = {\n    # fixed: language-dependent\n    \"author\": u\"Autor\",\n    \"authors\": u\"Autores\",\n    \"organization\": u\"Organizaci\\u00f3n\",\n    \"address\": u\"Enderezo\",\n    \"contact\": u\"Contacto\",\n    \"version\": u\"Versi\\u00f3n\",\n    \"revision\": u\"Revisi\\u00f3n\",",
        "detail": "mid-range.gl",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "mid-range.gl",
        "description": "mid-range.gl",
        "peekOfCode": "labels = {\n    # fixed: language-dependent\n    \"author\": u\"Autor\",\n    \"authors\": u\"Autores\",\n    \"organization\": u\"Organizaci\\u00f3n\",\n    \"address\": u\"Enderezo\",\n    \"contact\": u\"Contacto\",\n    \"version\": u\"Versi\\u00f3n\",\n    \"revision\": u\"Revisi\\u00f3n\",\n    \"status\": u\"Estado\",",
        "detail": "mid-range.gl",
        "documentation": {}
    },
    {
        "label": "bibliographic_fields",
        "kind": 5,
        "importPath": "mid-range.gl",
        "description": "mid-range.gl",
        "peekOfCode": "bibliographic_fields = {\n    # language-dependent: fixed\n    u\"autor\": \"author\",\n    u\"autores\": \"authors\",\n    u\"organizaci\\u00f3n\": \"organization\",\n    u\"enderezo\": \"address\",\n    u\"contacto\": \"contact\",\n    u\"versi\\u00f3n\": \"version\",\n    u\"revisi\\u00f3n\": \"revision\",\n    u\"estado\": \"status\",",
        "detail": "mid-range.gl",
        "documentation": {}
    },
    {
        "label": "author_separators",
        "kind": 5,
        "importPath": "mid-range.gl",
        "description": "mid-range.gl",
        "peekOfCode": "author_separators = [\";\", \",\"]\n\"\"\"List of separator strings for the 'Authors' bibliographic field. Tried in\norder.\"\"\"",
        "detail": "mid-range.gl",
        "documentation": {}
    },
    {
        "label": "get_current_context",
        "kind": 2,
        "importPath": "mid-range.globals",
        "description": "mid-range.globals",
        "peekOfCode": "def get_current_context(silent=False):\n    \"\"\"Returns the current click context.  This can be used as a way to\n    access the current context object from anywhere.  This is a more implicit\n    alternative to the :func:`pass_context` decorator.  This function is\n    primarily useful for helpers such as :func:`echo` which might be\n    interested in changing its behavior based on the current context.\n    To push the current context, :meth:`Context.scope` can be used.\n    .. versionadded:: 5.0\n    :param silent: if set to `True` the return value is `None` if no context\n                   is available.  The default behavior is to raise a",
        "detail": "mid-range.globals",
        "documentation": {}
    },
    {
        "label": "push_context",
        "kind": 2,
        "importPath": "mid-range.globals",
        "description": "mid-range.globals",
        "peekOfCode": "def push_context(ctx):\n    \"\"\"Pushes a new context to the current stack.\"\"\"\n    _local.__dict__.setdefault(\"stack\", []).append(ctx)\ndef pop_context():\n    \"\"\"Removes the top level from the stack.\"\"\"\n    _local.stack.pop()\ndef resolve_color_default(color=None):\n    \"\"\"\"Internal helper to get the default value of the color flag.  If a\n    value is passed it's returned unchanged, otherwise it's looked up from\n    the current context.",
        "detail": "mid-range.globals",
        "documentation": {}
    },
    {
        "label": "pop_context",
        "kind": 2,
        "importPath": "mid-range.globals",
        "description": "mid-range.globals",
        "peekOfCode": "def pop_context():\n    \"\"\"Removes the top level from the stack.\"\"\"\n    _local.stack.pop()\ndef resolve_color_default(color=None):\n    \"\"\"\"Internal helper to get the default value of the color flag.  If a\n    value is passed it's returned unchanged, otherwise it's looked up from\n    the current context.\n    \"\"\"\n    if color is not None:\n        return color",
        "detail": "mid-range.globals",
        "documentation": {}
    },
    {
        "label": "resolve_color_default",
        "kind": 2,
        "importPath": "mid-range.globals",
        "description": "mid-range.globals",
        "peekOfCode": "def resolve_color_default(color=None):\n    \"\"\"\"Internal helper to get the default value of the color flag.  If a\n    value is passed it's returned unchanged, otherwise it's looked up from\n    the current context.\n    \"\"\"\n    if color is not None:\n        return color\n    ctx = get_current_context(silent=True)\n    if ctx is not None:\n        return ctx.color",
        "detail": "mid-range.globals",
        "documentation": {}
    },
    {
        "label": "_local",
        "kind": 5,
        "importPath": "mid-range.globals",
        "description": "mid-range.globals",
        "peekOfCode": "_local = local()\ndef get_current_context(silent=False):\n    \"\"\"Returns the current click context.  This can be used as a way to\n    access the current context object from anywhere.  This is a more implicit\n    alternative to the :func:`pass_context` decorator.  This function is\n    primarily useful for helpers such as :func:`echo` which might be\n    interested in changing its behavior based on the current context.\n    To push the current context, :meth:`Context.scope` can be used.\n    .. versionadded:: 5.0\n    :param silent: if set to `True` the return value is `None` if no context",
        "detail": "mid-range.globals",
        "documentation": {}
    },
    {
        "label": "create_test_linter",
        "kind": 2,
        "importPath": "mid-range.global_test_linter",
        "description": "mid-range.global_test_linter",
        "peekOfCode": "def create_test_linter():\n    test_reporter = GenericTestReporter()\n    linter_ = PyLinter()\n    linter_.set_reporter(test_reporter)\n    linter_.config.persistent = 0\n    checkers.initialize(linter_)\n    return linter_\n# Can't be renamed to a constant (easily), it breaks countless tests\nlinter = create_test_linter()",
        "detail": "mid-range.global_test_linter",
        "documentation": {}
    },
    {
        "label": "linter",
        "kind": 5,
        "importPath": "mid-range.global_test_linter",
        "description": "mid-range.global_test_linter",
        "peekOfCode": "linter = create_test_linter()",
        "detail": "mid-range.global_test_linter",
        "documentation": {}
    },
    {
        "label": "specials",
        "kind": 5,
        "importPath": "mid-range.glob_escape",
        "description": "mid-range.glob_escape",
        "peekOfCode": "specials = \"?*[\"\nfor char in specials:\n    pattern = \"dir/*\" + glob.escape(char) + \".txt\"\n    print(\"Searching for: {!r}\".format(pattern))\n    for name in sorted(glob.glob(pattern)):\n        print(name)\n    print()",
        "detail": "mid-range.glob_escape",
        "documentation": {}
    },
    {
        "label": "mkfile",
        "kind": 2,
        "importPath": "mid-range.glob_maketestdata",
        "description": "mid-range.glob_maketestdata",
        "peekOfCode": "def mkfile(filename):\n    print(filename)\n    with open(filename, \"w\", encoding=\"utf-8\") as f:\n        f.write(\"\\n\")\nprint(\"dir\")\nos.mkdir(\"dir\")\nmkfile(\"dir/file.txt\")\nmkfile(\"dir/file1.txt\")\nmkfile(\"dir/file2.txt\")\nmkfile(\"dir/filea.txt\")",
        "detail": "mid-range.glob_maketestdata",
        "documentation": {}
    },
    {
        "label": "email",
        "kind": 6,
        "importPath": "mid-range.gmail",
        "description": "mid-range.gmail",
        "peekOfCode": "class email:\n    def __init__(self):\n        self.server = smtplib.SMTP_SSL(host=\"smtp.gmail.com\", port=465)\n        self.mssg = MIMEMultipart()\n    def mail(self, to, sub, msg):\n        try:\n            self.server.login(\"email@gmail.com\", \"password\")\n            self.mssg[\"Subject\"] = sub\n            self.mssg.attach(MIMEText(msg, \"plain\"))\n            text = self.mssg.as_string()",
        "detail": "mid-range.gmail",
        "documentation": {}
    },
    {
        "label": "gnome_sort",
        "kind": 2,
        "importPath": "mid-range.gnome_sort",
        "description": "mid-range.gnome_sort",
        "peekOfCode": "def gnome_sort(arr):\n    n = len(arr)\n    index = 0\n    while index < n:\n        if index == 0 or arr[index] >= arr[index - 1]:\n            index = index + 1\n        else:\n            arr[index], arr[index - 1] = arr[index - 1], arr[index]\n            index = index - 1\n    return arr",
        "detail": "mid-range.gnome_sort",
        "documentation": {}
    },
    {
        "label": "get_sequence",
        "kind": 2,
        "importPath": "mid-range.goldenratio",
        "description": "mid-range.goldenratio",
        "peekOfCode": "def get_sequence(n):\n    \"\"\"\n    Return Fibonacci sequence from zero\n    to specified number as list.\n    \"\"\"\n    return sequence(n)\ndef fib(n):\n    \"\"\"\n    Return Fibonacci value by specified number as integer.\n    Golden ratio —",
        "detail": "mid-range.goldenratio",
        "documentation": {}
    },
    {
        "label": "fib",
        "kind": 2,
        "importPath": "mid-range.goldenratio",
        "description": "mid-range.goldenratio",
        "peekOfCode": "def fib(n):\n    \"\"\"\n    Return Fibonacci value by specified number as integer.\n    Golden ratio —\n    https://en.wikipedia.org/wiki/Golden_ratio\n    Fibonacci's relation to the golden ratio —\n    https://en.wikipedia.org/wiki/Fibonacci_number#Closed-form_expression\n    \"\"\"\n    golden_ratio = (1 + math.sqrt(5)) / 2\n    val = (golden_ratio ** n - (1 - golden_ratio) ** n) / math.sqrt(5)",
        "detail": "mid-range.goldenratio",
        "documentation": {}
    },
    {
        "label": "sequence",
        "kind": 2,
        "importPath": "mid-range.goldenratio",
        "description": "mid-range.goldenratio",
        "peekOfCode": "def sequence(n):\n    \"\"\"\n    Return sequence of Fibonacci values as list.\n    \"\"\"\n    return [fib(value) for value in range(n + 1)]\ndef get_code():\n    \"\"\"\n    Return source code of Fibonacci sequence logic's implementation.\n    \"\"\"\n    return inspect.getsource(get_sequence)",
        "detail": "mid-range.goldenratio",
        "documentation": {}
    },
    {
        "label": "get_code",
        "kind": 2,
        "importPath": "mid-range.goldenratio",
        "description": "mid-range.goldenratio",
        "peekOfCode": "def get_code():\n    \"\"\"\n    Return source code of Fibonacci sequence logic's implementation.\n    \"\"\"\n    return inspect.getsource(get_sequence)",
        "detail": "mid-range.goldenratio",
        "documentation": {}
    },
    {
        "label": "formation_num",
        "kind": 5,
        "importPath": "mid-range.grades",
        "description": "mid-range.grades",
        "peekOfCode": "formation_num = 40  # defining no of signs, we are using it on on multiple places\nprint(\"*\" * formation_num)  # for formation\ntitle = \"Python Marksheet\"\nprint(f\"\\t{title}\")\nprint(\"-\" * formation_num)  # for formation\n# student info\nname = input(\"\\t Name: \")\nroll_no = int(input(\"\\t Roll No: \"))\n# total marks per subject, assigned multiple variables in one line\nmathematics_marks, physics_marks, chemistry_marks, islamiat_marks, urdu_marks = (",
        "detail": "mid-range.grades",
        "documentation": {}
    },
    {
        "label": "title",
        "kind": 5,
        "importPath": "mid-range.grades",
        "description": "mid-range.grades",
        "peekOfCode": "title = \"Python Marksheet\"\nprint(f\"\\t{title}\")\nprint(\"-\" * formation_num)  # for formation\n# student info\nname = input(\"\\t Name: \")\nroll_no = int(input(\"\\t Roll No: \"))\n# total marks per subject, assigned multiple variables in one line\nmathematics_marks, physics_marks, chemistry_marks, islamiat_marks, urdu_marks = (\n    100,\n    100,",
        "detail": "mid-range.grades",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "mid-range.grades",
        "description": "mid-range.grades",
        "peekOfCode": "name = input(\"\\t Name: \")\nroll_no = int(input(\"\\t Roll No: \"))\n# total marks per subject, assigned multiple variables in one line\nmathematics_marks, physics_marks, chemistry_marks, islamiat_marks, urdu_marks = (\n    100,\n    100,\n    100,\n    100,\n    75,\n)",
        "detail": "mid-range.grades",
        "documentation": {}
    },
    {
        "label": "roll_no",
        "kind": 5,
        "importPath": "mid-range.grades",
        "description": "mid-range.grades",
        "peekOfCode": "roll_no = int(input(\"\\t Roll No: \"))\n# total marks per subject, assigned multiple variables in one line\nmathematics_marks, physics_marks, chemistry_marks, islamiat_marks, urdu_marks = (\n    100,\n    100,\n    100,\n    100,\n    75,\n)\n# input",
        "detail": "mid-range.grades",
        "documentation": {}
    },
    {
        "label": "mathematics",
        "kind": 5,
        "importPath": "mid-range.grades",
        "description": "mid-range.grades",
        "peekOfCode": "mathematics = int(input(f\"\\t Mathematics marks out of {mathematics_marks}: \"))\nchemistry = int(input(f\"\\t Chemistry marks out of {chemistry_marks}: \"))\nphysics = int(input(f\"\\t Physics marks out of {physics_marks}: \"))\nurdu = int(input(f\"\\t Urdu marks out of {urdu_marks}: \"))\nislamiat = int(input(f\"\\t Islamiat marks out of {islamiat_marks}: \"))\n# calculating total marks, obtained marks and percentage\ntotal_marks = (\n    mathematics_marks + physics_marks + chemistry_marks + islamiat_marks + urdu_marks\n)\nobtained_marks = mathematics + chemistry + physics + urdu + islamiat",
        "detail": "mid-range.grades",
        "documentation": {}
    },
    {
        "label": "chemistry",
        "kind": 5,
        "importPath": "mid-range.grades",
        "description": "mid-range.grades",
        "peekOfCode": "chemistry = int(input(f\"\\t Chemistry marks out of {chemistry_marks}: \"))\nphysics = int(input(f\"\\t Physics marks out of {physics_marks}: \"))\nurdu = int(input(f\"\\t Urdu marks out of {urdu_marks}: \"))\nislamiat = int(input(f\"\\t Islamiat marks out of {islamiat_marks}: \"))\n# calculating total marks, obtained marks and percentage\ntotal_marks = (\n    mathematics_marks + physics_marks + chemistry_marks + islamiat_marks + urdu_marks\n)\nobtained_marks = mathematics + chemistry + physics + urdu + islamiat\npercentage = round(obtained_marks / total_marks * 100, 2)  # round to two decimal point",
        "detail": "mid-range.grades",
        "documentation": {}
    },
    {
        "label": "physics",
        "kind": 5,
        "importPath": "mid-range.grades",
        "description": "mid-range.grades",
        "peekOfCode": "physics = int(input(f\"\\t Physics marks out of {physics_marks}: \"))\nurdu = int(input(f\"\\t Urdu marks out of {urdu_marks}: \"))\nislamiat = int(input(f\"\\t Islamiat marks out of {islamiat_marks}: \"))\n# calculating total marks, obtained marks and percentage\ntotal_marks = (\n    mathematics_marks + physics_marks + chemistry_marks + islamiat_marks + urdu_marks\n)\nobtained_marks = mathematics + chemistry + physics + urdu + islamiat\npercentage = round(obtained_marks / total_marks * 100, 2)  # round to two decimal point\n# defining variables for grades",
        "detail": "mid-range.grades",
        "documentation": {}
    },
    {
        "label": "urdu",
        "kind": 5,
        "importPath": "mid-range.grades",
        "description": "mid-range.grades",
        "peekOfCode": "urdu = int(input(f\"\\t Urdu marks out of {urdu_marks}: \"))\nislamiat = int(input(f\"\\t Islamiat marks out of {islamiat_marks}: \"))\n# calculating total marks, obtained marks and percentage\ntotal_marks = (\n    mathematics_marks + physics_marks + chemistry_marks + islamiat_marks + urdu_marks\n)\nobtained_marks = mathematics + chemistry + physics + urdu + islamiat\npercentage = round(obtained_marks / total_marks * 100, 2)  # round to two decimal point\n# defining variables for grades\ngrade_A = \"Grade: Grade A\"",
        "detail": "mid-range.grades",
        "documentation": {}
    },
    {
        "label": "islamiat",
        "kind": 5,
        "importPath": "mid-range.grades",
        "description": "mid-range.grades",
        "peekOfCode": "islamiat = int(input(f\"\\t Islamiat marks out of {islamiat_marks}: \"))\n# calculating total marks, obtained marks and percentage\ntotal_marks = (\n    mathematics_marks + physics_marks + chemistry_marks + islamiat_marks + urdu_marks\n)\nobtained_marks = mathematics + chemistry + physics + urdu + islamiat\npercentage = round(obtained_marks / total_marks * 100, 2)  # round to two decimal point\n# defining variables for grades\ngrade_A = \"Grade: Grade A\"\ngrade_B = \"Grade: Grade B\"",
        "detail": "mid-range.grades",
        "documentation": {}
    },
    {
        "label": "total_marks",
        "kind": 5,
        "importPath": "mid-range.grades",
        "description": "mid-range.grades",
        "peekOfCode": "total_marks = (\n    mathematics_marks + physics_marks + chemistry_marks + islamiat_marks + urdu_marks\n)\nobtained_marks = mathematics + chemistry + physics + urdu + islamiat\npercentage = round(obtained_marks / total_marks * 100, 2)  # round to two decimal point\n# defining variables for grades\ngrade_A = \"Grade: Grade A\"\ngrade_B = \"Grade: Grade B\"\ngrade_C = \"Grade: Grade C\"\ngrade_D = \"Grade: Grade D\"",
        "detail": "mid-range.grades",
        "documentation": {}
    },
    {
        "label": "obtained_marks",
        "kind": 5,
        "importPath": "mid-range.grades",
        "description": "mid-range.grades",
        "peekOfCode": "obtained_marks = mathematics + chemistry + physics + urdu + islamiat\npercentage = round(obtained_marks / total_marks * 100, 2)  # round to two decimal point\n# defining variables for grades\ngrade_A = \"Grade: Grade A\"\ngrade_B = \"Grade: Grade B\"\ngrade_C = \"Grade: Grade C\"\ngrade_D = \"Grade: Grade D\"\ngrade_F = \"Grade: Grade F (failed)\"\n# output\nprint(\"≈\" * formation_num)  # for formation",
        "detail": "mid-range.grades",
        "documentation": {}
    },
    {
        "label": "percentage",
        "kind": 5,
        "importPath": "mid-range.grades",
        "description": "mid-range.grades",
        "peekOfCode": "percentage = round(obtained_marks / total_marks * 100, 2)  # round to two decimal point\n# defining variables for grades\ngrade_A = \"Grade: Grade A\"\ngrade_B = \"Grade: Grade B\"\ngrade_C = \"Grade: Grade C\"\ngrade_D = \"Grade: Grade D\"\ngrade_F = \"Grade: Grade F (failed)\"\n# output\nprint(\"≈\" * formation_num)  # for formation\nprint(f\"   Name: {name}   Roll No: {roll_no }\")",
        "detail": "mid-range.grades",
        "documentation": {}
    },
    {
        "label": "grade_A",
        "kind": 5,
        "importPath": "mid-range.grades",
        "description": "mid-range.grades",
        "peekOfCode": "grade_A = \"Grade: Grade A\"\ngrade_B = \"Grade: Grade B\"\ngrade_C = \"Grade: Grade C\"\ngrade_D = \"Grade: Grade D\"\ngrade_F = \"Grade: Grade F (failed)\"\n# output\nprint(\"≈\" * formation_num)  # for formation\nprint(f\"   Name: {name}   Roll No: {roll_no }\")\nprint(f\"   Total Marks: {total_marks}   Obtained Marks: {obtained_marks}\")\nprint(f\"   Percentage: {percentage}%\")",
        "detail": "mid-range.grades",
        "documentation": {}
    },
    {
        "label": "grade_B",
        "kind": 5,
        "importPath": "mid-range.grades",
        "description": "mid-range.grades",
        "peekOfCode": "grade_B = \"Grade: Grade B\"\ngrade_C = \"Grade: Grade C\"\ngrade_D = \"Grade: Grade D\"\ngrade_F = \"Grade: Grade F (failed)\"\n# output\nprint(\"≈\" * formation_num)  # for formation\nprint(f\"   Name: {name}   Roll No: {roll_no }\")\nprint(f\"   Total Marks: {total_marks}   Obtained Marks: {obtained_marks}\")\nprint(f\"   Percentage: {percentage}%\")\n# grading",
        "detail": "mid-range.grades",
        "documentation": {}
    },
    {
        "label": "grade_C",
        "kind": 5,
        "importPath": "mid-range.grades",
        "description": "mid-range.grades",
        "peekOfCode": "grade_C = \"Grade: Grade C\"\ngrade_D = \"Grade: Grade D\"\ngrade_F = \"Grade: Grade F (failed)\"\n# output\nprint(\"≈\" * formation_num)  # for formation\nprint(f\"   Name: {name}   Roll No: {roll_no }\")\nprint(f\"   Total Marks: {total_marks}   Obtained Marks: {obtained_marks}\")\nprint(f\"   Percentage: {percentage}%\")\n# grading\nif percentage >= 90:",
        "detail": "mid-range.grades",
        "documentation": {}
    },
    {
        "label": "grade_D",
        "kind": 5,
        "importPath": "mid-range.grades",
        "description": "mid-range.grades",
        "peekOfCode": "grade_D = \"Grade: Grade D\"\ngrade_F = \"Grade: Grade F (failed)\"\n# output\nprint(\"≈\" * formation_num)  # for formation\nprint(f\"   Name: {name}   Roll No: {roll_no }\")\nprint(f\"   Total Marks: {total_marks}   Obtained Marks: {obtained_marks}\")\nprint(f\"   Percentage: {percentage}%\")\n# grading\nif percentage >= 90:\n    print(f\"   {grade_A}\")",
        "detail": "mid-range.grades",
        "documentation": {}
    },
    {
        "label": "grade_F",
        "kind": 5,
        "importPath": "mid-range.grades",
        "description": "mid-range.grades",
        "peekOfCode": "grade_F = \"Grade: Grade F (failed)\"\n# output\nprint(\"≈\" * formation_num)  # for formation\nprint(f\"   Name: {name}   Roll No: {roll_no }\")\nprint(f\"   Total Marks: {total_marks}   Obtained Marks: {obtained_marks}\")\nprint(f\"   Percentage: {percentage}%\")\n# grading\nif percentage >= 90:\n    print(f\"   {grade_A}\")\nelif percentage >= 80:",
        "detail": "mid-range.grades",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 2,
        "importPath": "mid-range.gradient",
        "description": "mid-range.gradient",
        "peekOfCode": "def df(x):\n    return 2 * (x + 5)  # Gradient of our function\nwhile previous_step_size > precision and iters < max_iters:\n    prev_x = cur_x  # Store current x value in prev_x\n    cur_x = cur_x - rate * df(prev_x)  # Grad descent\n    previous_step_size = abs(cur_x - prev_x)  # Change in x\n    iters = iters + 1  # iteration count\n    print(\"Iteration\", iters, \"\\nX value is\", cur_x)  # Print iterations\nprint(\"The local minimum occurs at\", cur_x)",
        "detail": "mid-range.gradient",
        "documentation": {}
    },
    {
        "label": "cur_x",
        "kind": 5,
        "importPath": "mid-range.gradient",
        "description": "mid-range.gradient",
        "peekOfCode": "cur_x = 3  # The algorithm starts at x=3\nrate = 0.01  # Learning rate\nprecision = 0.000001  # This tells us when to stop the algorithm\nprevious_step_size = 1\nmax_iters = 10000  # maximum number of iterations\niters = 0  # iteration counter\ndef df(x):\n    return 2 * (x + 5)  # Gradient of our function\nwhile previous_step_size > precision and iters < max_iters:\n    prev_x = cur_x  # Store current x value in prev_x",
        "detail": "mid-range.gradient",
        "documentation": {}
    },
    {
        "label": "rate",
        "kind": 5,
        "importPath": "mid-range.gradient",
        "description": "mid-range.gradient",
        "peekOfCode": "rate = 0.01  # Learning rate\nprecision = 0.000001  # This tells us when to stop the algorithm\nprevious_step_size = 1\nmax_iters = 10000  # maximum number of iterations\niters = 0  # iteration counter\ndef df(x):\n    return 2 * (x + 5)  # Gradient of our function\nwhile previous_step_size > precision and iters < max_iters:\n    prev_x = cur_x  # Store current x value in prev_x\n    cur_x = cur_x - rate * df(prev_x)  # Grad descent",
        "detail": "mid-range.gradient",
        "documentation": {}
    },
    {
        "label": "precision",
        "kind": 5,
        "importPath": "mid-range.gradient",
        "description": "mid-range.gradient",
        "peekOfCode": "precision = 0.000001  # This tells us when to stop the algorithm\nprevious_step_size = 1\nmax_iters = 10000  # maximum number of iterations\niters = 0  # iteration counter\ndef df(x):\n    return 2 * (x + 5)  # Gradient of our function\nwhile previous_step_size > precision and iters < max_iters:\n    prev_x = cur_x  # Store current x value in prev_x\n    cur_x = cur_x - rate * df(prev_x)  # Grad descent\n    previous_step_size = abs(cur_x - prev_x)  # Change in x",
        "detail": "mid-range.gradient",
        "documentation": {}
    },
    {
        "label": "previous_step_size",
        "kind": 5,
        "importPath": "mid-range.gradient",
        "description": "mid-range.gradient",
        "peekOfCode": "previous_step_size = 1\nmax_iters = 10000  # maximum number of iterations\niters = 0  # iteration counter\ndef df(x):\n    return 2 * (x + 5)  # Gradient of our function\nwhile previous_step_size > precision and iters < max_iters:\n    prev_x = cur_x  # Store current x value in prev_x\n    cur_x = cur_x - rate * df(prev_x)  # Grad descent\n    previous_step_size = abs(cur_x - prev_x)  # Change in x\n    iters = iters + 1  # iteration count",
        "detail": "mid-range.gradient",
        "documentation": {}
    },
    {
        "label": "max_iters",
        "kind": 5,
        "importPath": "mid-range.gradient",
        "description": "mid-range.gradient",
        "peekOfCode": "max_iters = 10000  # maximum number of iterations\niters = 0  # iteration counter\ndef df(x):\n    return 2 * (x + 5)  # Gradient of our function\nwhile previous_step_size > precision and iters < max_iters:\n    prev_x = cur_x  # Store current x value in prev_x\n    cur_x = cur_x - rate * df(prev_x)  # Grad descent\n    previous_step_size = abs(cur_x - prev_x)  # Change in x\n    iters = iters + 1  # iteration count\n    print(\"Iteration\", iters, \"\\nX value is\", cur_x)  # Print iterations",
        "detail": "mid-range.gradient",
        "documentation": {}
    },
    {
        "label": "iters",
        "kind": 5,
        "importPath": "mid-range.gradient",
        "description": "mid-range.gradient",
        "peekOfCode": "iters = 0  # iteration counter\ndef df(x):\n    return 2 * (x + 5)  # Gradient of our function\nwhile previous_step_size > precision and iters < max_iters:\n    prev_x = cur_x  # Store current x value in prev_x\n    cur_x = cur_x - rate * df(prev_x)  # Grad descent\n    previous_step_size = abs(cur_x - prev_x)  # Change in x\n    iters = iters + 1  # iteration count\n    print(\"Iteration\", iters, \"\\nX value is\", cur_x)  # Print iterations\nprint(\"The local minimum occurs at\", cur_x)",
        "detail": "mid-range.gradient",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.gradient_boosting_regressor",
        "description": "mid-range.gradient_boosting_regressor",
        "peekOfCode": "def main():\n    # loading the dataset from the sklearn\n    df = load_boston()\n    print(df.keys())\n    # now let construct a data frame\n    df_boston = pd.DataFrame(df.data, columns=df.feature_names)\n    # let add the target to the dataframe\n    df_boston[\"Price\"] = df.target\n    # print the first five rows using the head function\n    print(df_boston.head())",
        "detail": "mid-range.gradient_boosting_regressor",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "mid-range.graph-bfs",
        "description": "mid-range.graph-bfs",
        "peekOfCode": "class Node(object):\n    def __init__(self, name):\n        self.name = name\n        self.adjacencyList = []\n        self.visited = False\n        self.predecessor = None\nclass BreadthFirstSearch(object):\n    def bfs(self, startNode):\n        queue = []\n        queue.append(startNode)",
        "detail": "mid-range.graph-bfs",
        "documentation": {}
    },
    {
        "label": "BreadthFirstSearch",
        "kind": 6,
        "importPath": "mid-range.graph-bfs",
        "description": "mid-range.graph-bfs",
        "peekOfCode": "class BreadthFirstSearch(object):\n    def bfs(self, startNode):\n        queue = []\n        queue.append(startNode)\n        startNode.visited = True\n        # BFS -> queue      DFS --> stack BUT usually we implement it with recursion !!!\n        while queue:\n            actualNode = queue.pop(0)\n            print(\"%s \" % actualNode.name)\n            for n in actualNode.adjacencyList:",
        "detail": "mid-range.graph-bfs",
        "documentation": {}
    },
    {
        "label": "node1",
        "kind": 5,
        "importPath": "mid-range.graph-bfs",
        "description": "mid-range.graph-bfs",
        "peekOfCode": "node1 = Node(\"A\")\nnode2 = Node(\"B\")\nnode3 = Node(\"C\")\nnode4 = Node(\"D\")\nnode5 = Node(\"E\")\nnode1.adjacencyList.append(node2)\nnode1.adjacencyList.append(node3)\nnode2.adjacencyList.append(node4)\nnode4.adjacencyList.append(node5)\nbfs = BreadthFirstSearch()",
        "detail": "mid-range.graph-bfs",
        "documentation": {}
    },
    {
        "label": "node2",
        "kind": 5,
        "importPath": "mid-range.graph-bfs",
        "description": "mid-range.graph-bfs",
        "peekOfCode": "node2 = Node(\"B\")\nnode3 = Node(\"C\")\nnode4 = Node(\"D\")\nnode5 = Node(\"E\")\nnode1.adjacencyList.append(node2)\nnode1.adjacencyList.append(node3)\nnode2.adjacencyList.append(node4)\nnode4.adjacencyList.append(node5)\nbfs = BreadthFirstSearch()\nbfs.bfs(node1)",
        "detail": "mid-range.graph-bfs",
        "documentation": {}
    },
    {
        "label": "node3",
        "kind": 5,
        "importPath": "mid-range.graph-bfs",
        "description": "mid-range.graph-bfs",
        "peekOfCode": "node3 = Node(\"C\")\nnode4 = Node(\"D\")\nnode5 = Node(\"E\")\nnode1.adjacencyList.append(node2)\nnode1.adjacencyList.append(node3)\nnode2.adjacencyList.append(node4)\nnode4.adjacencyList.append(node5)\nbfs = BreadthFirstSearch()\nbfs.bfs(node1)",
        "detail": "mid-range.graph-bfs",
        "documentation": {}
    },
    {
        "label": "node4",
        "kind": 5,
        "importPath": "mid-range.graph-bfs",
        "description": "mid-range.graph-bfs",
        "peekOfCode": "node4 = Node(\"D\")\nnode5 = Node(\"E\")\nnode1.adjacencyList.append(node2)\nnode1.adjacencyList.append(node3)\nnode2.adjacencyList.append(node4)\nnode4.adjacencyList.append(node5)\nbfs = BreadthFirstSearch()\nbfs.bfs(node1)",
        "detail": "mid-range.graph-bfs",
        "documentation": {}
    },
    {
        "label": "node5",
        "kind": 5,
        "importPath": "mid-range.graph-bfs",
        "description": "mid-range.graph-bfs",
        "peekOfCode": "node5 = Node(\"E\")\nnode1.adjacencyList.append(node2)\nnode1.adjacencyList.append(node3)\nnode2.adjacencyList.append(node4)\nnode4.adjacencyList.append(node5)\nbfs = BreadthFirstSearch()\nbfs.bfs(node1)",
        "detail": "mid-range.graph-bfs",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 5,
        "importPath": "mid-range.graph-bfs",
        "description": "mid-range.graph-bfs",
        "peekOfCode": "bfs = BreadthFirstSearch()\nbfs.bfs(node1)",
        "detail": "mid-range.graph-bfs",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "mid-range.graph-dfs",
        "description": "mid-range.graph-dfs",
        "peekOfCode": "class Node(object):\n    def __init__(self, name):\n        self.name = name\n        self.adjacencyList = []\n        self.visited = False\n        self.predecessor = None\nclass DepthFirstSearch(\n    object\n):  # BFS -> queue + layer by layer algorithm   DFS -> stack + goes\n    # as deep as possible into the tree !!!",
        "detail": "mid-range.graph-dfs",
        "documentation": {}
    },
    {
        "label": "DepthFirstSearch",
        "kind": 6,
        "importPath": "mid-range.graph-dfs",
        "description": "mid-range.graph-dfs",
        "peekOfCode": "class DepthFirstSearch(\n    object\n):  # BFS -> queue + layer by layer algorithm   DFS -> stack + goes\n    # as deep as possible into the tree !!!\n    def dfs(self, node):\n        node.visited = True\n        print(\"%s \" % node.name)\n        for n in node.adjacencyList:\n            if not n.visited:\n                self.dfs(n)",
        "detail": "mid-range.graph-dfs",
        "documentation": {}
    },
    {
        "label": "node1",
        "kind": 5,
        "importPath": "mid-range.graph-dfs",
        "description": "mid-range.graph-dfs",
        "peekOfCode": "node1 = Node(\"A\")\nnode2 = Node(\"B\")\nnode3 = Node(\"C\")\nnode4 = Node(\"D\")\nnode5 = Node(\"E\")\nnode1.adjacencyList.append(node2)\nnode1.adjacencyList.append(node3)\nnode2.adjacencyList.append(node4)\nnode4.adjacencyList.append(node5)\ndfs = DepthFirstSearch()",
        "detail": "mid-range.graph-dfs",
        "documentation": {}
    },
    {
        "label": "node2",
        "kind": 5,
        "importPath": "mid-range.graph-dfs",
        "description": "mid-range.graph-dfs",
        "peekOfCode": "node2 = Node(\"B\")\nnode3 = Node(\"C\")\nnode4 = Node(\"D\")\nnode5 = Node(\"E\")\nnode1.adjacencyList.append(node2)\nnode1.adjacencyList.append(node3)\nnode2.adjacencyList.append(node4)\nnode4.adjacencyList.append(node5)\ndfs = DepthFirstSearch()\ndfs.dfs(node1)",
        "detail": "mid-range.graph-dfs",
        "documentation": {}
    },
    {
        "label": "node3",
        "kind": 5,
        "importPath": "mid-range.graph-dfs",
        "description": "mid-range.graph-dfs",
        "peekOfCode": "node3 = Node(\"C\")\nnode4 = Node(\"D\")\nnode5 = Node(\"E\")\nnode1.adjacencyList.append(node2)\nnode1.adjacencyList.append(node3)\nnode2.adjacencyList.append(node4)\nnode4.adjacencyList.append(node5)\ndfs = DepthFirstSearch()\ndfs.dfs(node1)",
        "detail": "mid-range.graph-dfs",
        "documentation": {}
    },
    {
        "label": "node4",
        "kind": 5,
        "importPath": "mid-range.graph-dfs",
        "description": "mid-range.graph-dfs",
        "peekOfCode": "node4 = Node(\"D\")\nnode5 = Node(\"E\")\nnode1.adjacencyList.append(node2)\nnode1.adjacencyList.append(node3)\nnode2.adjacencyList.append(node4)\nnode4.adjacencyList.append(node5)\ndfs = DepthFirstSearch()\ndfs.dfs(node1)",
        "detail": "mid-range.graph-dfs",
        "documentation": {}
    },
    {
        "label": "node5",
        "kind": 5,
        "importPath": "mid-range.graph-dfs",
        "description": "mid-range.graph-dfs",
        "peekOfCode": "node5 = Node(\"E\")\nnode1.adjacencyList.append(node2)\nnode1.adjacencyList.append(node3)\nnode2.adjacencyList.append(node4)\nnode4.adjacencyList.append(node5)\ndfs = DepthFirstSearch()\ndfs.dfs(node1)",
        "detail": "mid-range.graph-dfs",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 5,
        "importPath": "mid-range.graph-dfs",
        "description": "mid-range.graph-dfs",
        "peekOfCode": "dfs = DepthFirstSearch()\ndfs.dfs(node1)",
        "detail": "mid-range.graph-dfs",
        "documentation": {}
    },
    {
        "label": "AdjacencyList",
        "kind": 6,
        "importPath": "mid-range.graph",
        "description": "mid-range.graph",
        "peekOfCode": "class AdjacencyList(object):\n    def __init__(self):\n        self.List = {}\n    def addEdge(self, fromVertex, toVertex):\n        # check if vertex is already present\n        if fromVertex in self.List.keys():\n            self.List[fromVertex].append(toVertex)\n        else:\n            self.List[fromVertex] = [toVertex]\n    def printList(self):",
        "detail": "mid-range.graph",
        "documentation": {}
    },
    {
        "label": "build_graph_from_triangle",
        "kind": 2,
        "importPath": "mid-range.graphs",
        "description": "mid-range.graphs",
        "peekOfCode": "def build_graph_from_triangle(triangle):\n    T = deepcopy(triangle)\n    edges = {}\n    for i in range(len(T)):\n        for j, c in enumerate(T[i]):\n            n = Node(c, i, j)\n            edges[n] = []\n            T[i][j] = n\n    for i in range(len(T) - 1):\n        for j in range(len(T[i])):",
        "detail": "mid-range.graphs",
        "documentation": {}
    },
    {
        "label": "find_max_path",
        "kind": 2,
        "importPath": "mid-range.graphs",
        "description": "mid-range.graphs",
        "peekOfCode": "def find_max_path(graph, start, stop):\n    f = max(n.cost for n in graph.nodes)\n    heap = [(f - start.cost, start, [])]\n    while heap:\n        c, n, p = heappop(heap)\n        if n == stop:\n            return (f + f * len(p) - c, list(reversed([(x.i, x.j) for x in p])))\n        for m in graph.edges[n]:\n            heappush(heap, (f - m.cost + c, m, [n] + p))",
        "detail": "mid-range.graphs",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 5,
        "importPath": "mid-range.graphs",
        "description": "mid-range.graphs",
        "peekOfCode": "Node = namedtuple(\"Node\", \"cost i j\")\nGraph = namedtuple(\"Graph\", \"nodes edges\")\ndef build_graph_from_triangle(triangle):\n    T = deepcopy(triangle)\n    edges = {}\n    for i in range(len(T)):\n        for j, c in enumerate(T[i]):\n            n = Node(c, i, j)\n            edges[n] = []\n            T[i][j] = n",
        "detail": "mid-range.graphs",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 5,
        "importPath": "mid-range.graphs",
        "description": "mid-range.graphs",
        "peekOfCode": "Graph = namedtuple(\"Graph\", \"nodes edges\")\ndef build_graph_from_triangle(triangle):\n    T = deepcopy(triangle)\n    edges = {}\n    for i in range(len(T)):\n        for j, c in enumerate(T[i]):\n            n = Node(c, i, j)\n            edges[n] = []\n            T[i][j] = n\n    for i in range(len(T) - 1):",
        "detail": "mid-range.graphs",
        "documentation": {}
    },
    {
        "label": "GraphvizLexer",
        "kind": 6,
        "importPath": "mid-range.graphviz",
        "description": "mid-range.graphviz",
        "peekOfCode": "class GraphvizLexer(RegexLexer):\n    \"\"\"\n    For graphviz DOT graph description language.\n    .. versionadded:: 2.8\n    \"\"\"\n    name = \"Graphviz\"\n    aliases = [\"graphviz\", \"dot\"]\n    filenames = [\"*.gv\", \"*.dot\"]\n    mimetypes = [\"text/x-graphviz\", \"text/vnd.graphviz\"]\n    tokens = {",
        "detail": "mid-range.graphviz",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.graphviz",
        "description": "mid-range.graphviz",
        "peekOfCode": "__all__ = [\"GraphvizLexer\"]\nclass GraphvizLexer(RegexLexer):\n    \"\"\"\n    For graphviz DOT graph description language.\n    .. versionadded:: 2.8\n    \"\"\"\n    name = \"Graphviz\"\n    aliases = [\"graphviz\", \"dot\"]\n    filenames = [\"*.gv\", \"*.dot\"]\n    mimetypes = [\"text/x-graphviz\", \"text/vnd.graphviz\"]",
        "detail": "mid-range.graphviz",
        "documentation": {}
    },
    {
        "label": "isSafe",
        "kind": 2,
        "importPath": "mid-range.graph_coloring_problem",
        "description": "mid-range.graph_coloring_problem",
        "peekOfCode": "def isSafe(graph, v, n, temp, color):\n    # This checks whether if it safe to color the given node with temp color i.e checking if the adjacent nodes are different from temp\n    for i in range(v):\n        if graph[n][i] == 1 and color[i] == temp:\n            return False\n    return True\ndef check(graph, m, v, n, color):\n    # This function iteratively checks different combinations.\n    if n == v:  # base case : if all the nodes are traversed return\n        return True",
        "detail": "mid-range.graph_coloring_problem",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "mid-range.graph_coloring_problem",
        "description": "mid-range.graph_coloring_problem",
        "peekOfCode": "def check(graph, m, v, n, color):\n    # This function iteratively checks different combinations.\n    if n == v:  # base case : if all the nodes are traversed return\n        return True\n    for i in range(1, m + 1):\n        if isSafe(graph, v, n, i, color):  # checking if it is safe to color\n            color[n] = i\n            if check(graph, m, v, n + 1, color):\n                return True\n            color[n] = 0",
        "detail": "mid-range.graph_coloring_problem",
        "documentation": {}
    },
    {
        "label": "graphcoloring",
        "kind": 2,
        "importPath": "mid-range.graph_coloring_problem",
        "description": "mid-range.graph_coloring_problem",
        "peekOfCode": "def graphcoloring(graph, M, V):\n    color = [0] * (V + 1)  # assigning colors to different nodes\n    return check(graph, M, V, 0, color)\n# ------------------------DRIVER CODE ------------------------\ndef main():\n    for _ in range(int(input())):\n        V = int(input())\n        M = int(input())\n        E = int(input())\n        list = [int(x) for x in input().strip().split()]",
        "detail": "mid-range.graph_coloring_problem",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.graph_coloring_problem",
        "description": "mid-range.graph_coloring_problem",
        "peekOfCode": "def main():\n    for _ in range(int(input())):\n        V = int(input())\n        M = int(input())\n        E = int(input())\n        list = [int(x) for x in input().strip().split()]\n        graph = [[0 for i in range(V)] for j in range(V)]\n        cnt = 0\n        for i in range(E):\n            graph[list[cnt] - 1][list[cnt + 1] - 1] = 1",
        "detail": "mid-range.graph_coloring_problem",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.graph_demo",
        "description": "mid-range.graph_demo",
        "peekOfCode": "def main():\n    pass  # TODO\nif __name__ == \"__main__\":\n    # TODO - parse argv\n    main()",
        "detail": "mid-range.graph_demo",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "mid-range.graph_list",
        "description": "mid-range.graph_list",
        "peekOfCode": "class Graph:\n    def __init__(self, vertex):\n        self.vertex = vertex\n        self.graph = [[0] for i in range(vertex)]\n    def add_edge(self, u, v):\n        self.graph[u - 1].append(v - 1)\n    def show(self):\n        for i in range(self.vertex):\n            print(\"%d: \" % (i + 1), end=\" \")\n            for j in self.graph[i]:",
        "detail": "mid-range.graph_list",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "mid-range.graph_list",
        "description": "mid-range.graph_list",
        "peekOfCode": "g = Graph(100)\ng.add_edge(1, 3)\ng.add_edge(2, 3)\ng.add_edge(3, 4)\ng.add_edge(3, 5)\ng.add_edge(4, 5)\ng.show()",
        "detail": "mid-range.graph_list",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "mid-range.graph_matrix",
        "description": "mid-range.graph_matrix",
        "peekOfCode": "class Graph:\n    def __init__(self, vertex):\n        self.vertex = vertex\n        self.graph = [[0] * vertex for i in range(vertex)]\n    def add_edge(self, u, v):\n        self.graph[u - 1][v - 1] = 1\n        self.graph[v - 1][u - 1] = 1\n    def show(self):\n        for i in self.graph:\n            for j in i:",
        "detail": "mid-range.graph_matrix",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "mid-range.graph_matrix",
        "description": "mid-range.graph_matrix",
        "peekOfCode": "g = Graph(100)\ng.add_edge(1, 4)\ng.add_edge(4, 2)\ng.add_edge(4, 5)\ng.add_edge(2, 5)\ng.add_edge(5, 3)\ng.show()",
        "detail": "mid-range.graph_matrix",
        "documentation": {}
    },
    {
        "label": "gravatar",
        "kind": 2,
        "importPath": "mid-range.gravatar",
        "description": "mid-range.gravatar",
        "peekOfCode": "def gravatar(email, default=default, size=size, secure=secure):\n    \"\"\"\n    gravatar(email, default=default, size=size, secure=secure) -> string\"\n    Return the URL of the gravatar picture associated with @email.\n    @default: default picture to use if not available. Default is %s.\n    @size: format to use (pixel x pixel). Default is %i.\n    @secure: if true, the returned URL use https://secure.gravatar.com instead of http://www.gravatar.com. Default is %s.\"\n    \"\"\" % (\n        default,\n        size,",
        "detail": "mid-range.gravatar",
        "documentation": {}
    },
    {
        "label": "default",
        "kind": 5,
        "importPath": "mid-range.gravatar",
        "description": "mid-range.gravatar",
        "peekOfCode": "default = \"retro\"\nsize = 256\nsecure = True\ndef gravatar(email, default=default, size=size, secure=secure):\n    \"\"\"\n    gravatar(email, default=default, size=size, secure=secure) -> string\"\n    Return the URL of the gravatar picture associated with @email.\n    @default: default picture to use if not available. Default is %s.\n    @size: format to use (pixel x pixel). Default is %i.\n    @secure: if true, the returned URL use https://secure.gravatar.com instead of http://www.gravatar.com. Default is %s.\"",
        "detail": "mid-range.gravatar",
        "documentation": {}
    },
    {
        "label": "size",
        "kind": 5,
        "importPath": "mid-range.gravatar",
        "description": "mid-range.gravatar",
        "peekOfCode": "size = 256\nsecure = True\ndef gravatar(email, default=default, size=size, secure=secure):\n    \"\"\"\n    gravatar(email, default=default, size=size, secure=secure) -> string\"\n    Return the URL of the gravatar picture associated with @email.\n    @default: default picture to use if not available. Default is %s.\n    @size: format to use (pixel x pixel). Default is %i.\n    @secure: if true, the returned URL use https://secure.gravatar.com instead of http://www.gravatar.com. Default is %s.\"\n    \"\"\" % (",
        "detail": "mid-range.gravatar",
        "documentation": {}
    },
    {
        "label": "secure",
        "kind": 5,
        "importPath": "mid-range.gravatar",
        "description": "mid-range.gravatar",
        "peekOfCode": "secure = True\ndef gravatar(email, default=default, size=size, secure=secure):\n    \"\"\"\n    gravatar(email, default=default, size=size, secure=secure) -> string\"\n    Return the URL of the gravatar picture associated with @email.\n    @default: default picture to use if not available. Default is %s.\n    @size: format to use (pixel x pixel). Default is %i.\n    @secure: if true, the returned URL use https://secure.gravatar.com instead of http://www.gravatar.com. Default is %s.\"\n    \"\"\" % (\n        default,",
        "detail": "mid-range.gravatar",
        "documentation": {}
    },
    {
        "label": "greatest_common_divisor",
        "kind": 2,
        "importPath": "mid-range.greatest_common_divisor",
        "description": "mid-range.greatest_common_divisor",
        "peekOfCode": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate Greatest Common Divisor (GCD).\n    >>> greatest_common_divisor(24, 40)\n    8\n    >>> greatest_common_divisor(1, 1)\n    1\n    >>> greatest_common_divisor(1, 800)\n    1\n    >>> greatest_common_divisor(11, 37)",
        "detail": "mid-range.greatest_common_divisor",
        "documentation": {}
    },
    {
        "label": "gcd_by_iterative",
        "kind": 2,
        "importPath": "mid-range.greatest_common_divisor",
        "description": "mid-range.greatest_common_divisor",
        "peekOfCode": "def gcd_by_iterative(x: int, y: int) -> int:\n    \"\"\"\n    Below method is more memory efficient because it does not create additional\n    stack frames for recursive functions calls (as done in the above method).\n    >>> gcd_by_iterative(24, 40)\n    8\n    >>> greatest_common_divisor(24, 40) == gcd_by_iterative(24, 40)\n    True\n    >>> gcd_by_iterative(-3, -9)\n    3",
        "detail": "mid-range.greatest_common_divisor",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.greatest_common_divisor",
        "description": "mid-range.greatest_common_divisor",
        "peekOfCode": "def main():\n    \"\"\"\n    Call Greatest Common Divisor function.\n    \"\"\"\n    try:\n        nums = input(\"Enter two integers separated by comma (,): \").split(\",\")\n        num_1 = int(nums[0])\n        num_2 = int(nums[1])\n        print(\n            f\"greatest_common_divisor({num_1}, {num_2}) = \"",
        "detail": "mid-range.greatest_common_divisor",
        "documentation": {}
    },
    {
        "label": "getMinimumCost",
        "kind": 2,
        "importPath": "mid-range.Greedy-Florist",
        "description": "mid-range.Greedy-Florist",
        "peekOfCode": "def getMinimumCost(k, c):\n    c = sorted(c)[::-1]\n    m = 1\n    cost = 0\n    for i in range(len(c)):\n        if (i + 1) > (k * m):\n            m += 1\n        cost = cost + (m * c[i])\n    return cost\nif __name__ == \"__main__\":",
        "detail": "mid-range.Greedy-Florist",
        "documentation": {}
    },
    {
        "label": "things",
        "kind": 6,
        "importPath": "mid-range.greedy",
        "description": "mid-range.greedy",
        "peekOfCode": "class things:\n    def __init__(self, name, value, weight):\n        self.name = name\n        self.value = value\n        self.weight = weight\n    def __repr__(self):\n        return f\"{self.__class__.__name__}({self.name}, {self.value}, {self.weight})\"\n    def get_value(self):\n        return self.value\n    def get_name(self):",
        "detail": "mid-range.greedy",
        "documentation": {}
    },
    {
        "label": "build_menu",
        "kind": 2,
        "importPath": "mid-range.greedy",
        "description": "mid-range.greedy",
        "peekOfCode": "def build_menu(name, value, weight):\n    menu = []\n    for i in range(len(value)):\n        menu.append(things(name[i], value[i], weight[i]))\n    return menu\ndef greedy(item, maxCost, keyFunc):\n    itemsCopy = sorted(item, key=keyFunc, reverse=True)\n    result = []\n    totalValue, total_cost = 0.0, 0.0\n    for i in range(len(itemsCopy)):",
        "detail": "mid-range.greedy",
        "documentation": {}
    },
    {
        "label": "greedy",
        "kind": 2,
        "importPath": "mid-range.greedy",
        "description": "mid-range.greedy",
        "peekOfCode": "def greedy(item, maxCost, keyFunc):\n    itemsCopy = sorted(item, key=keyFunc, reverse=True)\n    result = []\n    totalValue, total_cost = 0.0, 0.0\n    for i in range(len(itemsCopy)):\n        if (total_cost + itemsCopy[i].get_weight()) <= maxCost:\n            result.append(itemsCopy[i])\n            total_cost += itemsCopy[i].get_weight()\n            totalValue += itemsCopy[i].get_value()\n    return (result, totalValue)",
        "detail": "mid-range.greedy",
        "documentation": {}
    },
    {
        "label": "test_greedy",
        "kind": 2,
        "importPath": "mid-range.greedy",
        "description": "mid-range.greedy",
        "peekOfCode": "def test_greedy():\n    \"\"\"\n    >>> food = [\"Burger\", \"Pizza\", \"Coca Cola\", \"Rice\",\n    ...         \"Sambhar\", \"Chicken\", \"Fries\", \"Milk\"]\n    >>> value = [80, 100, 60, 70, 50, 110, 90, 60]\n    >>> weight = [40, 60, 40, 70, 100, 85, 55, 70]\n    >>> foods = build_menu(food, value, weight)\n    >>> foods  # doctest: +NORMALIZE_WHITESPACE\n    [things(Burger, 80, 40), things(Pizza, 100, 60), things(Coca Cola, 60, 40),\n     things(Rice, 70, 70), things(Sambhar, 50, 100), things(Chicken, 110, 85),",
        "detail": "mid-range.greedy",
        "documentation": {}
    },
    {
        "label": "gridChallenge",
        "kind": 2,
        "importPath": "mid-range.Grid-Challenge",
        "description": "mid-range.Grid-Challenge",
        "peekOfCode": "def gridChallenge(grid):\n    for i in range(len(grid)):\n        grid[i] = sorted(grid[i])\n    for i in range(len(grid[0])):\n        for j in range(1, len(grid)):\n            if grid[j - 1][i] <= grid[j][i]:\n                continue\n            return \"NO\"\n    return \"YES\"\nif __name__ == \"__main__\":",
        "detail": "mid-range.Grid-Challenge",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.groupAnagrams",
        "description": "mid-range.groupAnagrams",
        "peekOfCode": "class Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        word = collections.defaultdict(list)\n        for s in strs:\n            word[tuple(sorted(s))].append(s)\n        return word.values()",
        "detail": "mid-range.groupAnagrams",
        "documentation": {}
    },
    {
        "label": "groupAnagrams",
        "kind": 2,
        "importPath": "mid-range.group_anagrams",
        "description": "mid-range.group_anagrams",
        "peekOfCode": "def groupAnagrams(strs):\n    # \"\"\"\n    # TimeComplexity: O(n*K*log(K)) where n is the length of strs and K is the length of the longest string\n    #  in strs\n    # \"\"\"\n    # seen = {}\n    # for s in strs:\n    #     ele = tuple((sorted(s)))\n    #     if ele in seen:\n    #         seen[ele].append(s)",
        "detail": "mid-range.group_anagrams",
        "documentation": {}
    },
    {
        "label": "growingPlant",
        "kind": 2,
        "importPath": "mid-range.growing_plant",
        "description": "mid-range.growing_plant",
        "peekOfCode": "def growingPlant(upSpeed, downSpeed, desiredHeight):\n    height = 0\n    days = 1\n    height += upSpeed\n    while height < desiredHeight:\n        days += 1\n        height -= downSpeed\n        height += upSpeed\n    return days",
        "detail": "mid-range.growing_plant",
        "documentation": {}
    },
    {
        "label": "all_groups",
        "kind": 5,
        "importPath": "mid-range.grp_getgrall",
        "description": "mid-range.grp_getgrall",
        "peekOfCode": "all_groups = grp.getgrall()\ninteresting_groups = {g.gr_name: g for g in all_groups if not g.gr_name.startswith(\"_\")}\nprint(len(interesting_groups.keys()))\n# Find the longest length for a few fields\nname_length = max(len(k) for k in interesting_groups) + 1\ngid_length = max(len(str(u.gr_gid)) for u in interesting_groups.values()) + 1\n# Set the members field width to avoid table columns\n# wrapping\nmembers_width = 19\n# Print report headers",
        "detail": "mid-range.grp_getgrall",
        "documentation": {}
    },
    {
        "label": "interesting_groups",
        "kind": 5,
        "importPath": "mid-range.grp_getgrall",
        "description": "mid-range.grp_getgrall",
        "peekOfCode": "interesting_groups = {g.gr_name: g for g in all_groups if not g.gr_name.startswith(\"_\")}\nprint(len(interesting_groups.keys()))\n# Find the longest length for a few fields\nname_length = max(len(k) for k in interesting_groups) + 1\ngid_length = max(len(str(u.gr_gid)) for u in interesting_groups.values()) + 1\n# Set the members field width to avoid table columns\n# wrapping\nmembers_width = 19\n# Print report headers\nfmt = \" \".join([\"{:<{name_length}}\", \"{:{gid_length}}\", \"{:<{members_width}}\"])",
        "detail": "mid-range.grp_getgrall",
        "documentation": {}
    },
    {
        "label": "name_length",
        "kind": 5,
        "importPath": "mid-range.grp_getgrall",
        "description": "mid-range.grp_getgrall",
        "peekOfCode": "name_length = max(len(k) for k in interesting_groups) + 1\ngid_length = max(len(str(u.gr_gid)) for u in interesting_groups.values()) + 1\n# Set the members field width to avoid table columns\n# wrapping\nmembers_width = 19\n# Print report headers\nfmt = \" \".join([\"{:<{name_length}}\", \"{:{gid_length}}\", \"{:<{members_width}}\"])\nprint(\n    fmt.format(\n        \"Name\",",
        "detail": "mid-range.grp_getgrall",
        "documentation": {}
    },
    {
        "label": "gid_length",
        "kind": 5,
        "importPath": "mid-range.grp_getgrall",
        "description": "mid-range.grp_getgrall",
        "peekOfCode": "gid_length = max(len(str(u.gr_gid)) for u in interesting_groups.values()) + 1\n# Set the members field width to avoid table columns\n# wrapping\nmembers_width = 19\n# Print report headers\nfmt = \" \".join([\"{:<{name_length}}\", \"{:{gid_length}}\", \"{:<{members_width}}\"])\nprint(\n    fmt.format(\n        \"Name\",\n        \"GID\",",
        "detail": "mid-range.grp_getgrall",
        "documentation": {}
    },
    {
        "label": "members_width",
        "kind": 5,
        "importPath": "mid-range.grp_getgrall",
        "description": "mid-range.grp_getgrall",
        "peekOfCode": "members_width = 19\n# Print report headers\nfmt = \" \".join([\"{:<{name_length}}\", \"{:{gid_length}}\", \"{:<{members_width}}\"])\nprint(\n    fmt.format(\n        \"Name\",\n        \"GID\",\n        \"Members\",\n        name_length=name_length,\n        gid_length=gid_length,",
        "detail": "mid-range.grp_getgrall",
        "documentation": {}
    },
    {
        "label": "fmt",
        "kind": 5,
        "importPath": "mid-range.grp_getgrall",
        "description": "mid-range.grp_getgrall",
        "peekOfCode": "fmt = \" \".join([\"{:<{name_length}}\", \"{:{gid_length}}\", \"{:<{members_width}}\"])\nprint(\n    fmt.format(\n        \"Name\",\n        \"GID\",\n        \"Members\",\n        name_length=name_length,\n        gid_length=gid_length,\n        members_width=members_width,\n    )",
        "detail": "mid-range.grp_getgrall",
        "documentation": {}
    },
    {
        "label": "prefix",
        "kind": 5,
        "importPath": "mid-range.grp_getgrall",
        "description": "mid-range.grp_getgrall",
        "peekOfCode": "prefix = \" \" * (name_length + gid_length + 2)\nfor name, g in sorted(interesting_groups.items()):\n    # Format members to start in the column on the same line but\n    # wrap as needed with an indent sufficient to put the\n    # subsequent lines in the members column. The two indent\n    # prefixes need to be the same to compute the wrap properly,\n    # but the first should not be printed so strip it.\n    members = textwrap.fill(\n        \", \".join(g.gr_mem),\n        initial_indent=prefix,",
        "detail": "mid-range.grp_getgrall",
        "documentation": {}
    },
    {
        "label": "filename",
        "kind": 5,
        "importPath": "mid-range.grp_getgrgid_fileowner",
        "description": "mid-range.grp_getgrgid_fileowner",
        "peekOfCode": "filename = \"grp_getgrgid_fileowner.py\"\nstat_info = os.stat(filename)\nowner = grp.getgrgid(stat_info.st_gid).gr_name\nprint(\"{} is owned by {} ({})\".format(filename, owner, stat_info.st_gid))",
        "detail": "mid-range.grp_getgrgid_fileowner",
        "documentation": {}
    },
    {
        "label": "stat_info",
        "kind": 5,
        "importPath": "mid-range.grp_getgrgid_fileowner",
        "description": "mid-range.grp_getgrgid_fileowner",
        "peekOfCode": "stat_info = os.stat(filename)\nowner = grp.getgrgid(stat_info.st_gid).gr_name\nprint(\"{} is owned by {} ({})\".format(filename, owner, stat_info.st_gid))",
        "detail": "mid-range.grp_getgrgid_fileowner",
        "documentation": {}
    },
    {
        "label": "owner",
        "kind": 5,
        "importPath": "mid-range.grp_getgrgid_fileowner",
        "description": "mid-range.grp_getgrgid_fileowner",
        "peekOfCode": "owner = grp.getgrgid(stat_info.st_gid).gr_name\nprint(\"{} is owned by {} ({})\".format(filename, owner, stat_info.st_gid))",
        "detail": "mid-range.grp_getgrgid_fileowner",
        "documentation": {}
    },
    {
        "label": "gid",
        "kind": 5,
        "importPath": "mid-range.grp_getgrgid_process",
        "description": "mid-range.grp_getgrgid_process",
        "peekOfCode": "gid = os.getgid()\ngroup_info = grp.getgrgid(gid)\nprint(\"Currently running with GID={} name={}\".format(gid, group_info.gr_name))",
        "detail": "mid-range.grp_getgrgid_process",
        "documentation": {}
    },
    {
        "label": "group_info",
        "kind": 5,
        "importPath": "mid-range.grp_getgrgid_process",
        "description": "mid-range.grp_getgrgid_process",
        "peekOfCode": "group_info = grp.getgrgid(gid)\nprint(\"Currently running with GID={} name={}\".format(gid, group_info.gr_name))",
        "detail": "mid-range.grp_getgrgid_process",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "mid-range.grp_getgrnam",
        "description": "mid-range.grp_getgrnam",
        "peekOfCode": "name = \"admin\"\ninfo = grp.getgrnam(name)\nprint(\"Name    :\", info.gr_name)\nprint(\"GID     :\", info.gr_gid)\nprint(\"Password:\", info.gr_passwd)\nprint(\"Members :\", \", \".join(info.gr_mem))",
        "detail": "mid-range.grp_getgrnam",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 5,
        "importPath": "mid-range.grp_getgrnam",
        "description": "mid-range.grp_getgrnam",
        "peekOfCode": "info = grp.getgrnam(name)\nprint(\"Name    :\", info.gr_name)\nprint(\"GID     :\", info.gr_gid)\nprint(\"Password:\", info.gr_passwd)\nprint(\"Members :\", \", \".join(info.gr_mem))",
        "detail": "mid-range.grp_getgrnam",
        "documentation": {}
    },
    {
        "label": "username",
        "kind": 5,
        "importPath": "mid-range.grp_groups_for_user",
        "description": "mid-range.grp_groups_for_user",
        "peekOfCode": "username = \"dhellmann\"\ngroup_names = set(g.gr_name for g in grp.getgrall() if username in g.gr_mem)\nprint(username, \"belongs to:\", \", \".join(sorted(group_names)))",
        "detail": "mid-range.grp_groups_for_user",
        "documentation": {}
    },
    {
        "label": "group_names",
        "kind": 5,
        "importPath": "mid-range.grp_groups_for_user",
        "description": "mid-range.grp_groups_for_user",
        "peekOfCode": "group_names = set(g.gr_name for g in grp.getgrall() if username in g.gr_mem)\nprint(username, \"belongs to:\", \", \".join(sorted(group_names)))",
        "detail": "mid-range.grp_groups_for_user",
        "documentation": {}
    },
    {
        "label": "ua",
        "kind": 5,
        "importPath": "mid-range.gsoc-tech-classifier",
        "description": "mid-range.gsoc-tech-classifier",
        "peekOfCode": "ua = UserAgent()\nheader = {\"User-Agent\": ua.random}\nap = argparse.ArgumentParser()\nap.add_argument(\n    \"-t\",\n    \"--tech\",\n    required=True,\n    help=\"Technology for which Organizations to be searched\",\n)\nargs = vars(ap.parse_args())",
        "detail": "mid-range.gsoc-tech-classifier",
        "documentation": {}
    },
    {
        "label": "header",
        "kind": 5,
        "importPath": "mid-range.gsoc-tech-classifier",
        "description": "mid-range.gsoc-tech-classifier",
        "peekOfCode": "header = {\"User-Agent\": ua.random}\nap = argparse.ArgumentParser()\nap.add_argument(\n    \"-t\",\n    \"--tech\",\n    required=True,\n    help=\"Technology for which Organizations to be searched\",\n)\nargs = vars(ap.parse_args())\ntechnology = args[\"tech\"]",
        "detail": "mid-range.gsoc-tech-classifier",
        "documentation": {}
    },
    {
        "label": "ap",
        "kind": 5,
        "importPath": "mid-range.gsoc-tech-classifier",
        "description": "mid-range.gsoc-tech-classifier",
        "peekOfCode": "ap = argparse.ArgumentParser()\nap.add_argument(\n    \"-t\",\n    \"--tech\",\n    required=True,\n    help=\"Technology for which Organizations to be searched\",\n)\nargs = vars(ap.parse_args())\ntechnology = args[\"tech\"]\nstr(technology)",
        "detail": "mid-range.gsoc-tech-classifier",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "mid-range.gsoc-tech-classifier",
        "description": "mid-range.gsoc-tech-classifier",
        "peekOfCode": "args = vars(ap.parse_args())\ntechnology = args[\"tech\"]\nstr(technology)\nurl = \"https://summerofcode.withgoogle.com/archive/2020/organizations/\"\nres = requests.get(url)\nres.raise_for_status()\nsoup = bs4.BeautifulSoup(res.text, \"html.parser\")\norganizations = soup.select('h4[class=\"organization-card__name font-black-54\"]')\nall_org_Link = soup.find_all(\"a\", class_=\"organization-card__link\")\ntech_Status = [\"No\"] * len(organizations)",
        "detail": "mid-range.gsoc-tech-classifier",
        "documentation": {}
    },
    {
        "label": "technology",
        "kind": 5,
        "importPath": "mid-range.gsoc-tech-classifier",
        "description": "mid-range.gsoc-tech-classifier",
        "peekOfCode": "technology = args[\"tech\"]\nstr(technology)\nurl = \"https://summerofcode.withgoogle.com/archive/2020/organizations/\"\nres = requests.get(url)\nres.raise_for_status()\nsoup = bs4.BeautifulSoup(res.text, \"html.parser\")\norganizations = soup.select('h4[class=\"organization-card__name font-black-54\"]')\nall_org_Link = soup.find_all(\"a\", class_=\"organization-card__link\")\ntech_Status = [\"No\"] * len(organizations)\norg_Tech_URL = [\"none\"] * len(all_org_Link)",
        "detail": "mid-range.gsoc-tech-classifier",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "mid-range.gsoc-tech-classifier",
        "description": "mid-range.gsoc-tech-classifier",
        "peekOfCode": "url = \"https://summerofcode.withgoogle.com/archive/2020/organizations/\"\nres = requests.get(url)\nres.raise_for_status()\nsoup = bs4.BeautifulSoup(res.text, \"html.parser\")\norganizations = soup.select('h4[class=\"organization-card__name font-black-54\"]')\nall_org_Link = soup.find_all(\"a\", class_=\"organization-card__link\")\ntech_Status = [\"No\"] * len(organizations)\norg_Tech_URL = [\"none\"] * len(all_org_Link)\ntech_index = 0\nfor link in all_org_Link:",
        "detail": "mid-range.gsoc-tech-classifier",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "mid-range.gsoc-tech-classifier",
        "description": "mid-range.gsoc-tech-classifier",
        "peekOfCode": "res = requests.get(url)\nres.raise_for_status()\nsoup = bs4.BeautifulSoup(res.text, \"html.parser\")\norganizations = soup.select('h4[class=\"organization-card__name font-black-54\"]')\nall_org_Link = soup.find_all(\"a\", class_=\"organization-card__link\")\ntech_Status = [\"No\"] * len(organizations)\norg_Tech_URL = [\"none\"] * len(all_org_Link)\ntech_index = 0\nfor link in all_org_Link:\n    comp_Link = link.get(\"href\")",
        "detail": "mid-range.gsoc-tech-classifier",
        "documentation": {}
    },
    {
        "label": "soup",
        "kind": 5,
        "importPath": "mid-range.gsoc-tech-classifier",
        "description": "mid-range.gsoc-tech-classifier",
        "peekOfCode": "soup = bs4.BeautifulSoup(res.text, \"html.parser\")\norganizations = soup.select('h4[class=\"organization-card__name font-black-54\"]')\nall_org_Link = soup.find_all(\"a\", class_=\"organization-card__link\")\ntech_Status = [\"No\"] * len(organizations)\norg_Tech_URL = [\"none\"] * len(all_org_Link)\ntech_index = 0\nfor link in all_org_Link:\n    comp_Link = link.get(\"href\")\n    comp_url = \"https://summerofcode.withgoogle.com\" + comp_Link\n    print(tech_index)",
        "detail": "mid-range.gsoc-tech-classifier",
        "documentation": {}
    },
    {
        "label": "organizations",
        "kind": 5,
        "importPath": "mid-range.gsoc-tech-classifier",
        "description": "mid-range.gsoc-tech-classifier",
        "peekOfCode": "organizations = soup.select('h4[class=\"organization-card__name font-black-54\"]')\nall_org_Link = soup.find_all(\"a\", class_=\"organization-card__link\")\ntech_Status = [\"No\"] * len(organizations)\norg_Tech_URL = [\"none\"] * len(all_org_Link)\ntech_index = 0\nfor link in all_org_Link:\n    comp_Link = link.get(\"href\")\n    comp_url = \"https://summerofcode.withgoogle.com\" + comp_Link\n    print(tech_index)\n    print(comp_url)",
        "detail": "mid-range.gsoc-tech-classifier",
        "documentation": {}
    },
    {
        "label": "all_org_Link",
        "kind": 5,
        "importPath": "mid-range.gsoc-tech-classifier",
        "description": "mid-range.gsoc-tech-classifier",
        "peekOfCode": "all_org_Link = soup.find_all(\"a\", class_=\"organization-card__link\")\ntech_Status = [\"No\"] * len(organizations)\norg_Tech_URL = [\"none\"] * len(all_org_Link)\ntech_index = 0\nfor link in all_org_Link:\n    comp_Link = link.get(\"href\")\n    comp_url = \"https://summerofcode.withgoogle.com\" + comp_Link\n    print(tech_index)\n    print(comp_url)\n    org_Tech_URL[tech_index] = comp_url",
        "detail": "mid-range.gsoc-tech-classifier",
        "documentation": {}
    },
    {
        "label": "tech_Status",
        "kind": 5,
        "importPath": "mid-range.gsoc-tech-classifier",
        "description": "mid-range.gsoc-tech-classifier",
        "peekOfCode": "tech_Status = [\"No\"] * len(organizations)\norg_Tech_URL = [\"none\"] * len(all_org_Link)\ntech_index = 0\nfor link in all_org_Link:\n    comp_Link = link.get(\"href\")\n    comp_url = \"https://summerofcode.withgoogle.com\" + comp_Link\n    print(tech_index)\n    print(comp_url)\n    org_Tech_URL[tech_index] = comp_url\n    res2 = requests.get(comp_url)",
        "detail": "mid-range.gsoc-tech-classifier",
        "documentation": {}
    },
    {
        "label": "org_Tech_URL",
        "kind": 5,
        "importPath": "mid-range.gsoc-tech-classifier",
        "description": "mid-range.gsoc-tech-classifier",
        "peekOfCode": "org_Tech_URL = [\"none\"] * len(all_org_Link)\ntech_index = 0\nfor link in all_org_Link:\n    comp_Link = link.get(\"href\")\n    comp_url = \"https://summerofcode.withgoogle.com\" + comp_Link\n    print(tech_index)\n    print(comp_url)\n    org_Tech_URL[tech_index] = comp_url\n    res2 = requests.get(comp_url)\n    res2.raise_for_status()",
        "detail": "mid-range.gsoc-tech-classifier",
        "documentation": {}
    },
    {
        "label": "tech_index",
        "kind": 5,
        "importPath": "mid-range.gsoc-tech-classifier",
        "description": "mid-range.gsoc-tech-classifier",
        "peekOfCode": "tech_index = 0\nfor link in all_org_Link:\n    comp_Link = link.get(\"href\")\n    comp_url = \"https://summerofcode.withgoogle.com\" + comp_Link\n    print(tech_index)\n    print(comp_url)\n    org_Tech_URL[tech_index] = comp_url\n    res2 = requests.get(comp_url)\n    res2.raise_for_status()\n    soup2 = bs4.BeautifulSoup(res2.text, \"html.parser\")",
        "detail": "mid-range.gsoc-tech-classifier",
        "documentation": {}
    },
    {
        "label": "wb",
        "kind": 5,
        "importPath": "mid-range.gsoc-tech-classifier",
        "description": "mid-range.gsoc-tech-classifier",
        "peekOfCode": "wb = openpyxl.Workbook()\nsheet = wb[\"Sheet\"]\nsheet.cell(row=1, column=1).value = \"Organization\"\nsheet.cell(row=1, column=2).value = \"Does {0} Technology Offered?\".format(technology)\nsheet.cell(row=1, column=3).value = \"Link for the Organization\"\nfor i in range(0, len(organizations)):\n    sheet.cell(row=i + 2, column=1).value = organizations[i].getText()\n    sheet.cell(row=i + 2, column=2).value = tech_Status[i]\n    sheet.cell(row=i + 2, column=3).value = org_Tech_URL[i]\nfile_name = \"GSoC_Org_List\"",
        "detail": "mid-range.gsoc-tech-classifier",
        "documentation": {}
    },
    {
        "label": "sheet",
        "kind": 5,
        "importPath": "mid-range.gsoc-tech-classifier",
        "description": "mid-range.gsoc-tech-classifier",
        "peekOfCode": "sheet = wb[\"Sheet\"]\nsheet.cell(row=1, column=1).value = \"Organization\"\nsheet.cell(row=1, column=2).value = \"Does {0} Technology Offered?\".format(technology)\nsheet.cell(row=1, column=3).value = \"Link for the Organization\"\nfor i in range(0, len(organizations)):\n    sheet.cell(row=i + 2, column=1).value = organizations[i].getText()\n    sheet.cell(row=i + 2, column=2).value = tech_Status[i]\n    sheet.cell(row=i + 2, column=3).value = org_Tech_URL[i]\nfile_name = \"GSoC_Org_List\"\nwhile os.path.isfile(file_name + \".xlsx\"):",
        "detail": "mid-range.gsoc-tech-classifier",
        "documentation": {}
    },
    {
        "label": "file_name",
        "kind": 5,
        "importPath": "mid-range.gsoc-tech-classifier",
        "description": "mid-range.gsoc-tech-classifier",
        "peekOfCode": "file_name = \"GSoC_Org_List\"\nwhile os.path.isfile(file_name + \".xlsx\"):\n    file_name = file_name + \"_\"\nwb.save(file_name + \".xlsx\")",
        "detail": "mid-range.gsoc-tech-classifier",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "mid-range.guess",
        "description": "mid-range.guess",
        "peekOfCode": "num = random.randint(0, 20)\nnum1 = random.randint(\n    3, 6\n)  # for number of chances. i am taking the number which should be greater than or equal to 3 to make user friendly game\nprint(\"--Welcome to Guess The Number Game--\")\nprint(\"\\n you have \" + str(num1) + \" chances to guess the number\")\ncount = 0\n# Iterate using while loop\nwhile count < num1:\n    count += 1",
        "detail": "mid-range.guess",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "mid-range.guess",
        "description": "mid-range.guess",
        "peekOfCode": "num1 = random.randint(\n    3, 6\n)  # for number of chances. i am taking the number which should be greater than or equal to 3 to make user friendly game\nprint(\"--Welcome to Guess The Number Game--\")\nprint(\"\\n you have \" + str(num1) + \" chances to guess the number\")\ncount = 0\n# Iterate using while loop\nwhile count < num1:\n    count += 1\n    res = int(input(\"Please input a number between 0 and 20:\"))",
        "detail": "mid-range.guess",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "mid-range.guess",
        "description": "mid-range.guess",
        "peekOfCode": "count = 0\n# Iterate using while loop\nwhile count < num1:\n    count += 1\n    res = int(input(\"Please input a number between 0 and 20:\"))\n    try:\n        val = int(res)\n    except ValueError:\n        print(\"This is not a valid integer. Please try again!\")\n        continue",
        "detail": "mid-range.guess",
        "documentation": {}
    },
    {
        "label": "mm_count",
        "kind": 5,
        "importPath": "mid-range.guessinggame",
        "description": "mid-range.guessinggame",
        "peekOfCode": "mm_count = random.randint(1, 100)\nattempt_limit = 5\nattempts = 0\nwhile attempts < attempt_limit:\n    guess_text = input(\"How many M&Ms are in the jar? \")\n    guess = int(guess_text)\n    attempts += 1\n    if mm_count == guess:\n        print(f\"You got a free lunch! It was {guess}.\")\n        break",
        "detail": "mid-range.guessinggame",
        "documentation": {}
    },
    {
        "label": "attempt_limit",
        "kind": 5,
        "importPath": "mid-range.guessinggame",
        "description": "mid-range.guessinggame",
        "peekOfCode": "attempt_limit = 5\nattempts = 0\nwhile attempts < attempt_limit:\n    guess_text = input(\"How many M&Ms are in the jar? \")\n    guess = int(guess_text)\n    attempts += 1\n    if mm_count == guess:\n        print(f\"You got a free lunch! It was {guess}.\")\n        break\n    elif guess < mm_count:",
        "detail": "mid-range.guessinggame",
        "documentation": {}
    },
    {
        "label": "attempts",
        "kind": 5,
        "importPath": "mid-range.guessinggame",
        "description": "mid-range.guessinggame",
        "peekOfCode": "attempts = 0\nwhile attempts < attempt_limit:\n    guess_text = input(\"How many M&Ms are in the jar? \")\n    guess = int(guess_text)\n    attempts += 1\n    if mm_count == guess:\n        print(f\"You got a free lunch! It was {guess}.\")\n        break\n    elif guess < mm_count:\n        print(\"Sorry, that's too LOW!\")",
        "detail": "mid-range.guessinggame",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Guess_Number_Higher_Lower",
        "description": "mid-range.Guess_Number_Higher_Lower",
        "peekOfCode": "class Solution:\n    def guessNumber(self, n: int) -> int:\n        if guess(n) == 0:\n            return n\n        def helper(low, high):\n            k = (low + high) // 2\n            if guess(k) == 0:\n                return k\n            elif guess(k) == 1:\n                return helper(k, high)",
        "detail": "mid-range.Guess_Number_Higher_Lower",
        "documentation": {}
    },
    {
        "label": "print_graph",
        "kind": 2,
        "importPath": "mid-range.guided-graphs",
        "description": "mid-range.guided-graphs",
        "peekOfCode": "def print_graph(current_vertex, path):\n    print(current_vertex)\n    new_path = path + [current_vertex]\n    # i have reached the end of my path bc the neighbore set is empty:\n    if len(graph_list[current_vertex]) == 0:\n        all_paths.append(new_path)\n    # recurse on the children\n    for neighbor in graph_list[current_vertex]:\n        print_graph(neighbor, new_path.copy())\nprint_graph(\"a\", [])",
        "detail": "mid-range.guided-graphs",
        "documentation": {}
    },
    {
        "label": "print_tree_preorder",
        "kind": 2,
        "importPath": "mid-range.guided-graphs",
        "description": "mid-range.guided-graphs",
        "peekOfCode": "def print_tree_preorder(root):  # preorder traversal\n    print(root.value)\n    # if you can go left, recurse left\n    if root.left:\n        print_tree(root.left)\n    if root.right:\n        print_tree(root.right)",
        "detail": "mid-range.guided-graphs",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "mid-range.guided-graphs",
        "description": "mid-range.guided-graphs",
        "peekOfCode": "graph = [\n    [0, 1, 1, 1, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 1],\n    [0, 0, 0, 0, 1],\n    [0, 0, 0, 0, 0],\n    # a new vertex and all vertexes connect to F\n    # [1, 1, 1, 1, 1]\n]\n# get second vertex and its edges",
        "detail": "mid-range.guided-graphs",
        "documentation": {}
    },
    {
        "label": "graph[1][4]",
        "kind": 5,
        "importPath": "mid-range.guided-graphs",
        "description": "mid-range.guided-graphs",
        "peekOfCode": "graph[1][4] = 1\n# add a new veterx, append to our graph\n# expensive\ngraph_list = {\n    \"a\": set([\"b\", \"c\", \"d\"]),  # order doesnt matter we get a lot of dictionaries\n    \"b\": set(),\n    \"c\": set([\"e\"]),\n    \"d\": set([\"e\"]),\n    \"e\": set(),\n}",
        "detail": "mid-range.guided-graphs",
        "documentation": {}
    },
    {
        "label": "graph_list",
        "kind": 5,
        "importPath": "mid-range.guided-graphs",
        "description": "mid-range.guided-graphs",
        "peekOfCode": "graph_list = {\n    \"a\": set([\"b\", \"c\", \"d\"]),  # order doesnt matter we get a lot of dictionaries\n    \"b\": set(),\n    \"c\": set([\"e\"]),\n    \"d\": set([\"e\"]),\n    \"e\": set(),\n}\n# graph_list.key()\n# find out if c connects to e:\nprint(\"e\" in graph_list[\"c\"])",
        "detail": "mid-range.guided-graphs",
        "documentation": {}
    },
    {
        "label": "all_paths",
        "kind": 5,
        "importPath": "mid-range.guided-graphs",
        "description": "mid-range.guided-graphs",
        "peekOfCode": "all_paths = []\ndef print_graph(current_vertex, path):\n    print(current_vertex)\n    new_path = path + [current_vertex]\n    # i have reached the end of my path bc the neighbore set is empty:\n    if len(graph_list[current_vertex]) == 0:\n        all_paths.append(new_path)\n    # recurse on the children\n    for neighbor in graph_list[current_vertex]:\n        print_graph(neighbor, new_path.copy())",
        "detail": "mid-range.guided-graphs",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "mid-range.guided",
        "description": "mid-range.guided",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = (\n            None\n        )  # a variable to call to the next node/pointer/another instance of this class\ndef add_to_head(head, value):\n    # create the new node\n    new_node = LinkedListNode(value)\n    # link up the nodes",
        "detail": "mid-range.guided",
        "documentation": {}
    },
    {
        "label": "add_to_head",
        "kind": 2,
        "importPath": "mid-range.guided",
        "description": "mid-range.guided",
        "peekOfCode": "def add_to_head(head, value):\n    # create the new node\n    new_node = LinkedListNode(value)\n    # link up the nodes\n    new_node.next = head\n    return new_node  # the start of the linked list/the first node now\ndef add_to_next(current_node, value):\n    # create new node\n    new_node = LinkedListNode(value)\n    next_node = current_node.next",
        "detail": "mid-range.guided",
        "documentation": {}
    },
    {
        "label": "add_to_next",
        "kind": 2,
        "importPath": "mid-range.guided",
        "description": "mid-range.guided",
        "peekOfCode": "def add_to_next(current_node, value):\n    # create new node\n    new_node = LinkedListNode(value)\n    next_node = current_node.next\n    # current node points to new node\n    current_node.next = new_node\n    new_node.next = next_node\ndef add_to_tail(tail, value):\n    # create new node\n    new_node = LinkedListNode(value)",
        "detail": "mid-range.guided",
        "documentation": {}
    },
    {
        "label": "add_to_tail",
        "kind": 2,
        "importPath": "mid-range.guided",
        "description": "mid-range.guided",
        "peekOfCode": "def add_to_tail(tail, value):\n    # create new node\n    new_node = LinkedListNode(value)\n    # linked the new node to the tail\n    tail.next = new_node\n    return new_node  # the end of the linked list\n# def print_list(start_node):\n#     if start_node is None:\n#         return\n#     print(start_node.value)",
        "detail": "mid-range.guided",
        "documentation": {}
    },
    {
        "label": "print_list",
        "kind": 2,
        "importPath": "mid-range.guided",
        "description": "mid-range.guided",
        "peekOfCode": "def print_list(start_node):\n    curr_node = start_node\n    while curr_node is not None:\n        print(curr_node.value)\n        # update curent node to next\n        curr_node = curr_node.next\nlinked_list = LinkedListNode(\n    3\n)  # or head also this is a new instance of the class LinkedListNode\ntail = linked_list",
        "detail": "mid-range.guided",
        "documentation": {}
    },
    {
        "label": "linked_list",
        "kind": 5,
        "importPath": "mid-range.guided",
        "description": "mid-range.guided",
        "peekOfCode": "linked_list = LinkedListNode(\n    3\n)  # or head also this is a new instance of the class LinkedListNode\ntail = linked_list\nlinked_list = add_to_head(linked_list, 2)\nlinked_list = add_to_head(linked_list, 5)\nmiddle = linked_list\nlinked_list = add_to_head(linked_list, 6)\nlinked_list = add_to_head(linked_list, 0)\nlinked_list = add_to_head(linked_list, 2)",
        "detail": "mid-range.guided",
        "documentation": {}
    },
    {
        "label": "tail",
        "kind": 5,
        "importPath": "mid-range.guided",
        "description": "mid-range.guided",
        "peekOfCode": "tail = linked_list\nlinked_list = add_to_head(linked_list, 2)\nlinked_list = add_to_head(linked_list, 5)\nmiddle = linked_list\nlinked_list = add_to_head(linked_list, 6)\nlinked_list = add_to_head(linked_list, 0)\nlinked_list = add_to_head(linked_list, 2)\nadd_to_tail(tail, 12)\n# print(linked_list.value)\n# print(linked_list.next.value)",
        "detail": "mid-range.guided",
        "documentation": {}
    },
    {
        "label": "linked_list",
        "kind": 5,
        "importPath": "mid-range.guided",
        "description": "mid-range.guided",
        "peekOfCode": "linked_list = add_to_head(linked_list, 2)\nlinked_list = add_to_head(linked_list, 5)\nmiddle = linked_list\nlinked_list = add_to_head(linked_list, 6)\nlinked_list = add_to_head(linked_list, 0)\nlinked_list = add_to_head(linked_list, 2)\nadd_to_tail(tail, 12)\n# print(linked_list.value)\n# print(linked_list.next.value)\nprint(type(linked_list))",
        "detail": "mid-range.guided",
        "documentation": {}
    },
    {
        "label": "linked_list",
        "kind": 5,
        "importPath": "mid-range.guided",
        "description": "mid-range.guided",
        "peekOfCode": "linked_list = add_to_head(linked_list, 5)\nmiddle = linked_list\nlinked_list = add_to_head(linked_list, 6)\nlinked_list = add_to_head(linked_list, 0)\nlinked_list = add_to_head(linked_list, 2)\nadd_to_tail(tail, 12)\n# print(linked_list.value)\n# print(linked_list.next.value)\nprint(type(linked_list))\nadd_to_next(middle, 7)",
        "detail": "mid-range.guided",
        "documentation": {}
    },
    {
        "label": "middle",
        "kind": 5,
        "importPath": "mid-range.guided",
        "description": "mid-range.guided",
        "peekOfCode": "middle = linked_list\nlinked_list = add_to_head(linked_list, 6)\nlinked_list = add_to_head(linked_list, 0)\nlinked_list = add_to_head(linked_list, 2)\nadd_to_tail(tail, 12)\n# print(linked_list.value)\n# print(linked_list.next.value)\nprint(type(linked_list))\nadd_to_next(middle, 7)\n# print(middle.value)",
        "detail": "mid-range.guided",
        "documentation": {}
    },
    {
        "label": "linked_list",
        "kind": 5,
        "importPath": "mid-range.guided",
        "description": "mid-range.guided",
        "peekOfCode": "linked_list = add_to_head(linked_list, 6)\nlinked_list = add_to_head(linked_list, 0)\nlinked_list = add_to_head(linked_list, 2)\nadd_to_tail(tail, 12)\n# print(linked_list.value)\n# print(linked_list.next.value)\nprint(type(linked_list))\nadd_to_next(middle, 7)\n# print(middle.value)\n# print(tail.value)",
        "detail": "mid-range.guided",
        "documentation": {}
    },
    {
        "label": "linked_list",
        "kind": 5,
        "importPath": "mid-range.guided",
        "description": "mid-range.guided",
        "peekOfCode": "linked_list = add_to_head(linked_list, 0)\nlinked_list = add_to_head(linked_list, 2)\nadd_to_tail(tail, 12)\n# print(linked_list.value)\n# print(linked_list.next.value)\nprint(type(linked_list))\nadd_to_next(middle, 7)\n# print(middle.value)\n# print(tail.value)\nprint_list(linked_list)",
        "detail": "mid-range.guided",
        "documentation": {}
    },
    {
        "label": "linked_list",
        "kind": 5,
        "importPath": "mid-range.guided",
        "description": "mid-range.guided",
        "peekOfCode": "linked_list = add_to_head(linked_list, 2)\nadd_to_tail(tail, 12)\n# print(linked_list.value)\n# print(linked_list.next.value)\nprint(type(linked_list))\nadd_to_next(middle, 7)\n# print(middle.value)\n# print(tail.value)\nprint_list(linked_list)",
        "detail": "mid-range.guided",
        "documentation": {}
    },
    {
        "label": "uncompressed_data",
        "kind": 5,
        "importPath": "mid-range.gzip_BytesIO",
        "description": "mid-range.gzip_BytesIO",
        "peekOfCode": "uncompressed_data = b\"The same line, over and over.\\n\" * 10\nprint(\"UNCOMPRESSED:\", len(uncompressed_data))\nprint(uncompressed_data)\nbuf = BytesIO()\nwith gzip.GzipFile(mode=\"wb\", fileobj=buf) as f:\n    f.write(uncompressed_data)\ncompressed_data = buf.getvalue()\nprint(\"COMPRESSED:\", len(compressed_data))\nprint(binascii.hexlify(compressed_data))\ninbuffer = BytesIO(compressed_data)",
        "detail": "mid-range.gzip_BytesIO",
        "documentation": {}
    },
    {
        "label": "buf",
        "kind": 5,
        "importPath": "mid-range.gzip_BytesIO",
        "description": "mid-range.gzip_BytesIO",
        "peekOfCode": "buf = BytesIO()\nwith gzip.GzipFile(mode=\"wb\", fileobj=buf) as f:\n    f.write(uncompressed_data)\ncompressed_data = buf.getvalue()\nprint(\"COMPRESSED:\", len(compressed_data))\nprint(binascii.hexlify(compressed_data))\ninbuffer = BytesIO(compressed_data)\nwith gzip.GzipFile(mode=\"rb\", fileobj=inbuffer) as f:\n    reread_data = f.read(len(uncompressed_data))\nprint(\"\\nREREAD:\", len(reread_data))",
        "detail": "mid-range.gzip_BytesIO",
        "documentation": {}
    },
    {
        "label": "compressed_data",
        "kind": 5,
        "importPath": "mid-range.gzip_BytesIO",
        "description": "mid-range.gzip_BytesIO",
        "peekOfCode": "compressed_data = buf.getvalue()\nprint(\"COMPRESSED:\", len(compressed_data))\nprint(binascii.hexlify(compressed_data))\ninbuffer = BytesIO(compressed_data)\nwith gzip.GzipFile(mode=\"rb\", fileobj=inbuffer) as f:\n    reread_data = f.read(len(uncompressed_data))\nprint(\"\\nREREAD:\", len(reread_data))\nprint(reread_data)",
        "detail": "mid-range.gzip_BytesIO",
        "documentation": {}
    },
    {
        "label": "inbuffer",
        "kind": 5,
        "importPath": "mid-range.gzip_BytesIO",
        "description": "mid-range.gzip_BytesIO",
        "peekOfCode": "inbuffer = BytesIO(compressed_data)\nwith gzip.GzipFile(mode=\"rb\", fileobj=inbuffer) as f:\n    reread_data = f.read(len(uncompressed_data))\nprint(\"\\nREREAD:\", len(reread_data))\nprint(reread_data)",
        "detail": "mid-range.gzip_BytesIO",
        "documentation": {}
    },
    {
        "label": "get_hash",
        "kind": 2,
        "importPath": "mid-range.gzip_compresslevel",
        "description": "mid-range.gzip_compresslevel",
        "peekOfCode": "def get_hash(data):\n    return hashlib.md5(data).hexdigest()\ndata = open(\"lorem.txt\", \"r\").read() * 1024\ncksum = get_hash(data.encode(\"utf-8\"))\nprint(\"Level  Size        Checksum\")\nprint(\"-----  ----------  ---------------------------------\")\nprint(\"data   {:>10}  {}\".format(len(data), cksum))\nfor i in range(0, 10):\n    filename = \"compress-level-{}.gz\".format(i)\n    with gzip.open(filename, \"wb\", compresslevel=i) as output:",
        "detail": "mid-range.gzip_compresslevel",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.gzip_compresslevel",
        "description": "mid-range.gzip_compresslevel",
        "peekOfCode": "data = open(\"lorem.txt\", \"r\").read() * 1024\ncksum = get_hash(data.encode(\"utf-8\"))\nprint(\"Level  Size        Checksum\")\nprint(\"-----  ----------  ---------------------------------\")\nprint(\"data   {:>10}  {}\".format(len(data), cksum))\nfor i in range(0, 10):\n    filename = \"compress-level-{}.gz\".format(i)\n    with gzip.open(filename, \"wb\", compresslevel=i) as output:\n        with io.TextIOWrapper(output, encoding=\"utf-8\") as enc:\n            enc.write(data)",
        "detail": "mid-range.gzip_compresslevel",
        "documentation": {}
    },
    {
        "label": "cksum",
        "kind": 5,
        "importPath": "mid-range.gzip_compresslevel",
        "description": "mid-range.gzip_compresslevel",
        "peekOfCode": "cksum = get_hash(data.encode(\"utf-8\"))\nprint(\"Level  Size        Checksum\")\nprint(\"-----  ----------  ---------------------------------\")\nprint(\"data   {:>10}  {}\".format(len(data), cksum))\nfor i in range(0, 10):\n    filename = \"compress-level-{}.gz\".format(i)\n    with gzip.open(filename, \"wb\", compresslevel=i) as output:\n        with io.TextIOWrapper(output, encoding=\"utf-8\") as enc:\n            enc.write(data)\n    size = os.stat(filename).st_size",
        "detail": "mid-range.gzip_compresslevel",
        "documentation": {}
    },
    {
        "label": "outfilename",
        "kind": 5,
        "importPath": "mid-range.gzip_write",
        "description": "mid-range.gzip_write",
        "peekOfCode": "outfilename = \"example.txt.gz\"\nwith gzip.open(outfilename, \"wb\") as output:\n    with io.TextIOWrapper(output, encoding=\"utf-8\") as enc:\n        enc.write(\"Contents of the example file go here.\\n\")\nprint(outfilename, \"contains\", os.stat(outfilename).st_size, \"bytes\")\nos.system(\"file -b --mime {}\".format(outfilename))",
        "detail": "mid-range.gzip_write",
        "documentation": {}
    },
    {
        "label": "print_stack",
        "kind": 2,
        "importPath": "mid-range.g_topological_sort",
        "description": "mid-range.g_topological_sort",
        "peekOfCode": "def print_stack(stack, clothes):\n    order = 1\n    while stack:\n        current_clothing = stack.pop()\n        print(order, clothes[current_clothing])\n        order += 1\ndef depth_first_search(u, visited, graph):\n    visited[u] = 1\n    for v in graph[u]:\n        if not visited[v]:",
        "detail": "mid-range.g_topological_sort",
        "documentation": {}
    },
    {
        "label": "depth_first_search",
        "kind": 2,
        "importPath": "mid-range.g_topological_sort",
        "description": "mid-range.g_topological_sort",
        "peekOfCode": "def depth_first_search(u, visited, graph):\n    visited[u] = 1\n    for v in graph[u]:\n        if not visited[v]:\n            depth_first_search(v, visited, graph)\n    stack.append(u)\ndef topological_sort(graph, visited):\n    for v in range(len(graph)):\n        if not visited[v]:\n            depth_first_search(v, visited, graph)",
        "detail": "mid-range.g_topological_sort",
        "documentation": {}
    },
    {
        "label": "topological_sort",
        "kind": 2,
        "importPath": "mid-range.g_topological_sort",
        "description": "mid-range.g_topological_sort",
        "peekOfCode": "def topological_sort(graph, visited):\n    for v in range(len(graph)):\n        if not visited[v]:\n            depth_first_search(v, visited, graph)\nif __name__ == \"__main__\":\n    topological_sort(graph, visited)\n    print(stack)\n    print_stack(stack, clothes)",
        "detail": "mid-range.g_topological_sort",
        "documentation": {}
    },
    {
        "label": "clothes",
        "kind": 5,
        "importPath": "mid-range.g_topological_sort",
        "description": "mid-range.g_topological_sort",
        "peekOfCode": "clothes = {\n    0: \"underwear\",\n    1: \"pants\",\n    2: \"belt\",\n    3: \"suit\",\n    4: \"shoe\",\n    5: \"socks\",\n    6: \"shirt\",\n    7: \"tie\",\n    8: \"watch\",",
        "detail": "mid-range.g_topological_sort",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "mid-range.g_topological_sort",
        "description": "mid-range.g_topological_sort",
        "peekOfCode": "graph = [[1, 4], [2, 4], [3], [], [], [4], [2, 7], [3], []]\nvisited = [0 for x in range(len(graph))]\nstack = []\ndef print_stack(stack, clothes):\n    order = 1\n    while stack:\n        current_clothing = stack.pop()\n        print(order, clothes[current_clothing])\n        order += 1\ndef depth_first_search(u, visited, graph):",
        "detail": "mid-range.g_topological_sort",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "mid-range.g_topological_sort",
        "description": "mid-range.g_topological_sort",
        "peekOfCode": "visited = [0 for x in range(len(graph))]\nstack = []\ndef print_stack(stack, clothes):\n    order = 1\n    while stack:\n        current_clothing = stack.pop()\n        print(order, clothes[current_clothing])\n        order += 1\ndef depth_first_search(u, visited, graph):\n    visited[u] = 1",
        "detail": "mid-range.g_topological_sort",
        "documentation": {}
    },
    {
        "label": "stack",
        "kind": 5,
        "importPath": "mid-range.g_topological_sort",
        "description": "mid-range.g_topological_sort",
        "peekOfCode": "stack = []\ndef print_stack(stack, clothes):\n    order = 1\n    while stack:\n        current_clothing = stack.pop()\n        print(order, clothes[current_clothing])\n        order += 1\ndef depth_first_search(u, visited, graph):\n    visited[u] = 1\n    for v in graph[u]:",
        "detail": "mid-range.g_topological_sort",
        "documentation": {}
    },
    {
        "label": "half_adder",
        "kind": 2,
        "importPath": "mid-range.half_adder",
        "description": "mid-range.half_adder",
        "peekOfCode": "def half_adder(bit0: int, bit1: int) -> q.result.counts.Counts:\n    \"\"\"\n    >>> half_adder(0, 0)\n    {'00': 1000}\n    >>> half_adder(0, 1)\n    {'01': 1000}\n    >>> half_adder(1, 0)\n    {'01': 1000}\n    >>> half_adder(1, 1)\n    {'10': 1000}",
        "detail": "mid-range.half_adder",
        "documentation": {}
    },
    {
        "label": "halvingSum",
        "kind": 2,
        "importPath": "mid-range.halvingSum",
        "description": "mid-range.halvingSum",
        "peekOfCode": "def halvingSum(n):\n    s = 0\n    while n:\n        s += n\n        n //= 2\n    return s\n# s (int) : Sum\n# n (int) : Input number",
        "detail": "mid-range.halvingSum",
        "documentation": {}
    },
    {
        "label": "hamming_weight",
        "kind": 2,
        "importPath": "mid-range.hamming_weight",
        "description": "mid-range.hamming_weight",
        "peekOfCode": "def hamming_weight(n):\n    # Your code here\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\nprint(hamming_weight(n=0o00000000000000000000001000000011))\nprint(hamming_weight(n=0o00000000000000000000000000001000))\nprint(hamming_weight(n=0o11111111111111111111111111111011))",
        "detail": "mid-range.hamming_weight",
        "documentation": {}
    },
    {
        "label": "EditorHandler",
        "kind": 6,
        "importPath": "mid-range.handlers",
        "description": "mid-range.handlers",
        "peekOfCode": "class EditorHandler(IPythonHandler):\n    \"\"\"Render the text editor interface.\"\"\"\n    @web.authenticated\n    def get(self, path):\n        path = path.strip(\"/\")\n        if not self.contents_manager.file_exists(path):\n            raise web.HTTPError(404, u\"File does not exist: %s\" % path)\n        basename = path.rsplit(\"/\", 1)[-1]\n        self.write(\n            self.render_template(",
        "detail": "mid-range.handlers",
        "documentation": {}
    },
    {
        "label": "default_handlers",
        "kind": 5,
        "importPath": "mid-range.handlers",
        "description": "mid-range.handlers",
        "peekOfCode": "default_handlers = [(r\"/edit%s\" % path_regex, EditorHandler)]",
        "detail": "mid-range.handlers",
        "documentation": {}
    },
    {
        "label": "isHappy",
        "kind": 2,
        "importPath": "mid-range.happyNumber",
        "description": "mid-range.happyNumber",
        "peekOfCode": "def isHappy(n):\n    \"\"\"\n    Is happy takes in a number and returns True if it is a happy number, False otherwise. A happy number\n    is a number defined by the following process: Starting with any positive integer, replace the number by the\n    sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay),\n    or it loops endlessly in a cycle which does not include 1.\n    \"\"\"\n    seen = {n: 1}\n    while True:\n        new_sq = sum([int(d) ** 2 for d in str(n)])",
        "detail": "mid-range.happyNumber",
        "documentation": {}
    },
    {
        "label": "memo",
        "kind": 5,
        "importPath": "mid-range.happyNumber",
        "description": "mid-range.happyNumber",
        "peekOfCode": "memo = {}\ndef isHappy(n):\n    \"\"\"\n    Is happy takes in a number and returns True if it is a happy number, False otherwise. A happy number\n    is a number defined by the following process: Starting with any positive integer, replace the number by the\n    sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay),\n    or it loops endlessly in a cycle which does not include 1.\n    \"\"\"\n    seen = {n: 1}\n    while True:",
        "detail": "mid-range.happyNumber",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Happy_Number",
        "description": "mid-range.Happy_Number",
        "peekOfCode": "class Solution:\n    def isHappy(self, n):\n        slow = n\n        fast = self.getNum(n)\n        while fast != 1 and slow != fast:\n            slow = self.getNum(slow)\n            fast = self.getNum(self.getNum(fast))\n        return fast == 1\n    def getNum(self, num):\n        res = 0",
        "detail": "mid-range.Happy_Number",
        "documentation": {}
    },
    {
        "label": "exactPrimeFactorCount",
        "kind": 2,
        "importPath": "mid-range.hardy_ramanujanalgo",
        "description": "mid-range.hardy_ramanujanalgo",
        "peekOfCode": "def exactPrimeFactorCount(n):\n    \"\"\"\n    >>> exactPrimeFactorCount(51242183)\n    3\n    \"\"\"\n    count = 0\n    if n % 2 == 0:\n        count += 1\n        while n % 2 == 0:\n            n = int(n / 2)",
        "detail": "mid-range.hardy_ramanujanalgo",
        "documentation": {}
    },
    {
        "label": "harmonic_series",
        "kind": 2,
        "importPath": "mid-range.harmonic_series",
        "description": "mid-range.harmonic_series",
        "peekOfCode": "def harmonic_series(n_term: str) -> list:\n    \"\"\"Pure Python implementation of Harmonic Series algorithm\n    :param n_term: The last (nth) term of Harmonic Series\n    :return: The Harmonic Series starting from 1 to last (nth) term\n    Examples:\n    >>> harmonic_series(5)\n    ['1', '1/2', '1/3', '1/4', '1/5']\n    >>> harmonic_series(5.0)\n    ['1', '1/2', '1/3', '1/4', '1/5']\n    >>> harmonic_series(5.1)",
        "detail": "mid-range.harmonic_series",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "kind": 6,
        "importPath": "mid-range.harness",
        "description": "mid-range.harness",
        "peekOfCode": "class TestCase(unittest.TestCase):\n    withDoctest = False\n    def flakes(self, input, *expectedOutputs, **kw):\n        tree = ast.parse(textwrap.dedent(input))\n        file_tokens = checker.make_tokens(textwrap.dedent(input))\n        if kw.get(\"is_segment\"):\n            tree = tree.body[0]\n            kw.pop(\"is_segment\")\n        w = checker.Checker(\n            tree, file_tokens=file_tokens, withDoctest=self.withDoctest, **kw",
        "detail": "mid-range.harness",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.harness",
        "description": "mid-range.harness",
        "peekOfCode": "__all__ = [\"TestCase\", \"skip\", \"skipIf\"]\nskip = unittest.skip\nskipIf = unittest.skipIf\nclass TestCase(unittest.TestCase):\n    withDoctest = False\n    def flakes(self, input, *expectedOutputs, **kw):\n        tree = ast.parse(textwrap.dedent(input))\n        file_tokens = checker.make_tokens(textwrap.dedent(input))\n        if kw.get(\"is_segment\"):\n            tree = tree.body[0]",
        "detail": "mid-range.harness",
        "documentation": {}
    },
    {
        "label": "skip",
        "kind": 5,
        "importPath": "mid-range.harness",
        "description": "mid-range.harness",
        "peekOfCode": "skip = unittest.skip\nskipIf = unittest.skipIf\nclass TestCase(unittest.TestCase):\n    withDoctest = False\n    def flakes(self, input, *expectedOutputs, **kw):\n        tree = ast.parse(textwrap.dedent(input))\n        file_tokens = checker.make_tokens(textwrap.dedent(input))\n        if kw.get(\"is_segment\"):\n            tree = tree.body[0]\n            kw.pop(\"is_segment\")",
        "detail": "mid-range.harness",
        "documentation": {}
    },
    {
        "label": "skipIf",
        "kind": 5,
        "importPath": "mid-range.harness",
        "description": "mid-range.harness",
        "peekOfCode": "skipIf = unittest.skipIf\nclass TestCase(unittest.TestCase):\n    withDoctest = False\n    def flakes(self, input, *expectedOutputs, **kw):\n        tree = ast.parse(textwrap.dedent(input))\n        file_tokens = checker.make_tokens(textwrap.dedent(input))\n        if kw.get(\"is_segment\"):\n            tree = tree.body[0]\n            kw.pop(\"is_segment\")\n        w = checker.Checker(",
        "detail": "mid-range.harness",
        "documentation": {}
    },
    {
        "label": "Harris_Corner",
        "kind": 6,
        "importPath": "mid-range.harriscorner",
        "description": "mid-range.harriscorner",
        "peekOfCode": "class Harris_Corner:\n    def __init__(self, k: float, window_size: int):\n        \"\"\"\n        k : is an empirically determined constant in [0.04,0.06]\n        window_size : neighbourhoods considered\n        \"\"\"\n        if k in (0.04, 0.06):\n            self.k = k\n            self.window_size = window_size\n        else:",
        "detail": "mid-range.harriscorner",
        "documentation": {}
    },
    {
        "label": "HashCommand",
        "kind": 6,
        "importPath": "mid-range.hash",
        "description": "mid-range.hash",
        "peekOfCode": "class HashCommand(Command):\n    \"\"\"\n    Compute a hash of a local package archive.\n    These can be used with --hash in a requirements file to do repeatable\n    installs.\n    \"\"\"\n    usage = \"%prog [options] <file> ...\"\n    ignore_require_venv = True\n    def add_options(self) -> None:\n        self.cmd_opts.add_option(",
        "detail": "mid-range.hash",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "mid-range.hash",
        "description": "mid-range.hash",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass HashCommand(Command):\n    \"\"\"\n    Compute a hash of a local package archive.\n    These can be used with --hash in a requirements file to do repeatable\n    installs.\n    \"\"\"\n    usage = \"%prog [options] <file> ...\"\n    ignore_require_venv = True\n    def add_options(self) -> None:",
        "detail": "mid-range.hash",
        "documentation": {}
    },
    {
        "label": "djb2",
        "kind": 2,
        "importPath": "mid-range.hashing",
        "description": "mid-range.hashing",
        "peekOfCode": "def djb2(key):\n    # start from an arbitrary large prime such as (5381)\n    # set the ahs value to 5381\n    hash_value = 5381\n    # iterate over each char in the key\n    for char in key:\n        # set the hash value to the bit shift left by 5 of the hash value and sum of the hash value  then add the value for the char\n        hash_value = ((hash_value << 5) + hash_value) + char\n    # return the hash value\n    return hash_value",
        "detail": "mid-range.hashing",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.hashing",
        "description": "mid-range.hashing",
        "peekOfCode": "n = 1000000\nkey = b\"STR\"\n# hash\nprint(\"Hash\")\nstart = time.time()\nfor i in range(n):\n    hash(key)\nend = time.time()\nprint(end - start, \"Seconds\")\n# hashlib",
        "detail": "mid-range.hashing",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "mid-range.hashing",
        "description": "mid-range.hashing",
        "peekOfCode": "key = b\"STR\"\n# hash\nprint(\"Hash\")\nstart = time.time()\nfor i in range(n):\n    hash(key)\nend = time.time()\nprint(end - start, \"Seconds\")\n# hashlib\nprint(\"Hash Lib SHA256\")",
        "detail": "mid-range.hashing",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "mid-range.hashing",
        "description": "mid-range.hashing",
        "peekOfCode": "start = time.time()\nfor i in range(n):\n    hash(key)\nend = time.time()\nprint(end - start, \"Seconds\")\n# hashlib\nprint(\"Hash Lib SHA256\")\nstart = time.time()\nfor i in range(n):\n    hashlib.sha256(key)",
        "detail": "mid-range.hashing",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "mid-range.hashing",
        "description": "mid-range.hashing",
        "peekOfCode": "end = time.time()\nprint(end - start, \"Seconds\")\n# hashlib\nprint(\"Hash Lib SHA256\")\nstart = time.time()\nfor i in range(n):\n    hashlib.sha256(key)\nend = time.time()\nprint(end - start, \"Seconds\")\n# TODO: implement djb2",
        "detail": "mid-range.hashing",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "mid-range.hashing",
        "description": "mid-range.hashing",
        "peekOfCode": "start = time.time()\nfor i in range(n):\n    hashlib.sha256(key)\nend = time.time()\nprint(end - start, \"Seconds\")\n# TODO: implement djb2\ndef djb2(key):\n    # start from an arbitrary large prime such as (5381)\n    # set the ahs value to 5381\n    hash_value = 5381",
        "detail": "mid-range.hashing",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "mid-range.hashing",
        "description": "mid-range.hashing",
        "peekOfCode": "end = time.time()\nprint(end - start, \"Seconds\")\n# TODO: implement djb2\ndef djb2(key):\n    # start from an arbitrary large prime such as (5381)\n    # set the ahs value to 5381\n    hash_value = 5381\n    # iterate over each char in the key\n    for char in key:\n        # set the hash value to the bit shift left by 5 of the hash value and sum of the hash value  then add the value for the char",
        "detail": "mid-range.hashing",
        "documentation": {}
    },
    {
        "label": "lorem",
        "kind": 5,
        "importPath": "mid-range.hashlib_data",
        "description": "mid-range.hashlib_data",
        "peekOfCode": "lorem = \"\"\"Lorem ipsum dolor sit amet, consectetur adipisicing\nelit, sed do eiusmod tempor incididunt ut labore et dolore magna\naliqua. Ut enim ad minim veniam, quis nostrud exercitation\nullamco laboris nisi ut aliquip ex ea commodo consequat. Duis\naute irure dolor in reprehenderit in voluptate velit esse cillum\ndolore eu fugiat nulla pariatur. Excepteur sint occaecat\ncupidatat non proident, sunt in culpa qui officia deserunt\nmollit anim id est laborum.\"\"\"",
        "detail": "mid-range.hashlib_data",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "mid-range.hashlib_md5",
        "description": "mid-range.hashlib_md5",
        "peekOfCode": "h = hashlib.md5()\nh.update(lorem.encode(\"utf-8\"))\nprint(h.hexdigest())",
        "detail": "mid-range.hashlib_md5",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "mid-range.hashlib_new",
        "description": "mid-range.hashlib_new",
        "peekOfCode": "parser = argparse.ArgumentParser(\"hashlib demo\")\nparser.add_argument(\n    \"hash_name\",\n    choices=hashlib.algorithms_available,\n    help=\"the name of the hash algorithm to use\",\n)\nparser.add_argument(\n    \"data\",\n    nargs=\"?\",\n    default=lorem,",
        "detail": "mid-range.hashlib_new",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "mid-range.hashlib_new",
        "description": "mid-range.hashlib_new",
        "peekOfCode": "args = parser.parse_args()\nh = hashlib.new(args.hash_name)\nh.update(args.data.encode(\"utf-8\"))\nprint(h.hexdigest())",
        "detail": "mid-range.hashlib_new",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "mid-range.hashlib_new",
        "description": "mid-range.hashlib_new",
        "peekOfCode": "h = hashlib.new(args.hash_name)\nh.update(args.data.encode(\"utf-8\"))\nprint(h.hexdigest())",
        "detail": "mid-range.hashlib_new",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "mid-range.hashlib_sha1",
        "description": "mid-range.hashlib_sha1",
        "peekOfCode": "h = hashlib.sha1()\nh.update(lorem.encode(\"utf-8\"))\nprint(h.hexdigest())",
        "detail": "mid-range.hashlib_sha1",
        "documentation": {}
    },
    {
        "label": "chunkize",
        "kind": 2,
        "importPath": "mid-range.hashlib_update",
        "description": "mid-range.hashlib_update",
        "peekOfCode": "def chunkize(size, text):\n    \"Return parts of the text in size-based increments.\"\n    start = 0\n    while start < len(text):\n        chunk = text[start : start + size]\n        yield chunk\n        start += size\n    return\nh = hashlib.md5()\nfor chunk in chunkize(64, lorem.encode(\"utf-8\")):",
        "detail": "mid-range.hashlib_update",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "mid-range.hashlib_update",
        "description": "mid-range.hashlib_update",
        "peekOfCode": "h = hashlib.md5()\nh.update(lorem.encode(\"utf-8\"))\nall_at_once = h.hexdigest()\ndef chunkize(size, text):\n    \"Return parts of the text in size-based increments.\"\n    start = 0\n    while start < len(text):\n        chunk = text[start : start + size]\n        yield chunk\n        start += size",
        "detail": "mid-range.hashlib_update",
        "documentation": {}
    },
    {
        "label": "all_at_once",
        "kind": 5,
        "importPath": "mid-range.hashlib_update",
        "description": "mid-range.hashlib_update",
        "peekOfCode": "all_at_once = h.hexdigest()\ndef chunkize(size, text):\n    \"Return parts of the text in size-based increments.\"\n    start = 0\n    while start < len(text):\n        chunk = text[start : start + size]\n        yield chunk\n        start += size\n    return\nh = hashlib.md5()",
        "detail": "mid-range.hashlib_update",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "mid-range.hashlib_update",
        "description": "mid-range.hashlib_update",
        "peekOfCode": "h = hashlib.md5()\nfor chunk in chunkize(64, lorem.encode(\"utf-8\")):\n    h.update(chunk)\nline_by_line = h.hexdigest()\nprint(\"All at once :\", all_at_once)\nprint(\"Line by line:\", line_by_line)\nprint(\"Same        :\", (all_at_once == line_by_line))",
        "detail": "mid-range.hashlib_update",
        "documentation": {}
    },
    {
        "label": "line_by_line",
        "kind": 5,
        "importPath": "mid-range.hashlib_update",
        "description": "mid-range.hashlib_update",
        "peekOfCode": "line_by_line = h.hexdigest()\nprint(\"All at once :\", all_at_once)\nprint(\"Line by line:\", line_by_line)\nprint(\"Same        :\", (all_at_once == line_by_line))",
        "detail": "mid-range.hashlib_update",
        "documentation": {}
    },
    {
        "label": "HashTable",
        "kind": 6,
        "importPath": "mid-range.HashTable",
        "description": "mid-range.HashTable",
        "peekOfCode": "class HashTable(object):\n    def __init__(self):\n        self.size = 10\n        self.keys = [None] * self.size\n        self.values = [None] * self.size\n    def put(self, key, data):\n        index = self.hashfunction(key)\n        # not None -> it is a collision !!!\n        while self.keys[index] is not None:\n            if self.keys[index] == key:",
        "detail": "mid-range.HashTable",
        "documentation": {}
    },
    {
        "label": "table",
        "kind": 5,
        "importPath": "mid-range.HashTable",
        "description": "mid-range.HashTable",
        "peekOfCode": "table = HashTable()\ntable.put(\"apple\", 10)\ntable.put(\"orange\", 20)\ntable.put(\"car\", 30)\ntable.put(\"table\", 40)\nprint(table.get(\"car\"))",
        "detail": "mid-range.HashTable",
        "documentation": {}
    },
    {
        "label": "HashTableWithLinkedList",
        "kind": 6,
        "importPath": "mid-range.hash_table_with_linked_list",
        "description": "mid-range.hash_table_with_linked_list",
        "peekOfCode": "class HashTableWithLinkedList(HashTable):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n    def _set_value(self, key, data):\n        self.values[key] = deque([]) if self.values[key] is None else self.values[key]\n        self.values[key].appendleft(data)\n        self._keys[key] = self.values[key]\n    def balanced_factor(self):\n        return (\n            sum([self.charge_factor - len(slot) for slot in self.values])",
        "detail": "mid-range.hash_table_with_linked_list",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.hash_test",
        "description": "mid-range.hash_test",
        "peekOfCode": "n = 1000000\nkey = b\"STR\"\nprint(f\"Hashing {n}x\")\nstart_time = time.time()\nfor i in range(n):\n    hash(key)\nend_time = time.time()\nprint(f\"  Python hash runtime: {end_time - start_time} seconds\")\nstart_time = time.time()\nfor i in range(n):",
        "detail": "mid-range.hash_test",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "mid-range.hash_test",
        "description": "mid-range.hash_test",
        "peekOfCode": "key = b\"STR\"\nprint(f\"Hashing {n}x\")\nstart_time = time.time()\nfor i in range(n):\n    hash(key)\nend_time = time.time()\nprint(f\"  Python hash runtime: {end_time - start_time} seconds\")\nstart_time = time.time()\nfor i in range(n):\n    hashlib.sha256(key)",
        "detail": "mid-range.hash_test",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "mid-range.hash_test",
        "description": "mid-range.hash_test",
        "peekOfCode": "start_time = time.time()\nfor i in range(n):\n    hash(key)\nend_time = time.time()\nprint(f\"  Python hash runtime: {end_time - start_time} seconds\")\nstart_time = time.time()\nfor i in range(n):\n    hashlib.sha256(key)\nend_time = time.time()\nprint(f\"  SHA256 hash runtime: {end_time - start_time} seconds\")",
        "detail": "mid-range.hash_test",
        "documentation": {}
    },
    {
        "label": "end_time",
        "kind": 5,
        "importPath": "mid-range.hash_test",
        "description": "mid-range.hash_test",
        "peekOfCode": "end_time = time.time()\nprint(f\"  Python hash runtime: {end_time - start_time} seconds\")\nstart_time = time.time()\nfor i in range(n):\n    hashlib.sha256(key)\nend_time = time.time()\nprint(f\"  SHA256 hash runtime: {end_time - start_time} seconds\")\nn = 10\nprint(f\"\\nHashing {n}x\")\nsalt = bcrypt.gensalt()",
        "detail": "mid-range.hash_test",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "mid-range.hash_test",
        "description": "mid-range.hash_test",
        "peekOfCode": "start_time = time.time()\nfor i in range(n):\n    hashlib.sha256(key)\nend_time = time.time()\nprint(f\"  SHA256 hash runtime: {end_time - start_time} seconds\")\nn = 10\nprint(f\"\\nHashing {n}x\")\nsalt = bcrypt.gensalt()\nstart_time = time.time()\nfor i in range(n):",
        "detail": "mid-range.hash_test",
        "documentation": {}
    },
    {
        "label": "end_time",
        "kind": 5,
        "importPath": "mid-range.hash_test",
        "description": "mid-range.hash_test",
        "peekOfCode": "end_time = time.time()\nprint(f\"  SHA256 hash runtime: {end_time - start_time} seconds\")\nn = 10\nprint(f\"\\nHashing {n}x\")\nsalt = bcrypt.gensalt()\nstart_time = time.time()\nfor i in range(n):\n    bcrypt.hashpw(b\"KEY\", salt)\nend_time = time.time()\nprint(f\"  bcrypt hash runtime: {end_time - start_time} seconds\")",
        "detail": "mid-range.hash_test",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.hash_test",
        "description": "mid-range.hash_test",
        "peekOfCode": "n = 10\nprint(f\"\\nHashing {n}x\")\nsalt = bcrypt.gensalt()\nstart_time = time.time()\nfor i in range(n):\n    bcrypt.hashpw(b\"KEY\", salt)\nend_time = time.time()\nprint(f\"  bcrypt hash runtime: {end_time - start_time} seconds\")",
        "detail": "mid-range.hash_test",
        "documentation": {}
    },
    {
        "label": "salt",
        "kind": 5,
        "importPath": "mid-range.hash_test",
        "description": "mid-range.hash_test",
        "peekOfCode": "salt = bcrypt.gensalt()\nstart_time = time.time()\nfor i in range(n):\n    bcrypt.hashpw(b\"KEY\", salt)\nend_time = time.time()\nprint(f\"  bcrypt hash runtime: {end_time - start_time} seconds\")",
        "detail": "mid-range.hash_test",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "mid-range.hash_test",
        "description": "mid-range.hash_test",
        "peekOfCode": "start_time = time.time()\nfor i in range(n):\n    bcrypt.hashpw(b\"KEY\", salt)\nend_time = time.time()\nprint(f\"  bcrypt hash runtime: {end_time - start_time} seconds\")",
        "detail": "mid-range.hash_test",
        "documentation": {}
    },
    {
        "label": "end_time",
        "kind": 5,
        "importPath": "mid-range.hash_test",
        "description": "mid-range.hash_test",
        "peekOfCode": "end_time = time.time()\nprint(f\"  bcrypt hash runtime: {end_time - start_time} seconds\")",
        "detail": "mid-range.hash_test",
        "documentation": {}
    },
    {
        "label": "hasPathWithGivenSum",
        "kind": 2,
        "importPath": "mid-range.hasPathWithGivenSum",
        "description": "mid-range.hasPathWithGivenSum",
        "peekOfCode": "def hasPathWithGivenSum(t, s):\n    if t is None:\n        if s == 0:\n            return True\n        else:\n            return False\n    else:\n        if t.left is not None and t.right is not None:\n            return any(\n                [",
        "detail": "mid-range.hasPathWithGivenSum",
        "documentation": {}
    },
    {
        "label": "ContainsLoopError",
        "kind": 6,
        "importPath": "mid-range.has_loop",
        "description": "mid-range.has_loop",
        "peekOfCode": "class ContainsLoopError(Exception):\n    pass\nclass Node:\n    def __init__(self, data: Any) -> None:\n        self.data = data\n        self.next_node = None\n    def __iter__(self):\n        node = self\n        visited = []\n        while node:",
        "detail": "mid-range.has_loop",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "mid-range.has_loop",
        "description": "mid-range.has_loop",
        "peekOfCode": "class Node:\n    def __init__(self, data: Any) -> None:\n        self.data = data\n        self.next_node = None\n    def __iter__(self):\n        node = self\n        visited = []\n        while node:\n            if node in visited:\n                raise ContainsLoopError",
        "detail": "mid-range.has_loop",
        "documentation": {}
    },
    {
        "label": "healthScore",
        "kind": 2,
        "importPath": "mid-range.healthScore",
        "description": "mid-range.healthScore",
        "peekOfCode": "def healthScore():\n    print(\" \")\n    numberOfFruits = int(input(\"Number Of Fruits You Eat in Week : \"))\n    numberOftimesFastFood = int(input(\"Number of Times You Eat FastFood in a Week : \"))\n    cigars = int(input(\"Cigars You Smoke In A Week : \"))\n    workoutTime = int(input(\"How Much minutes You Workout EveryDay : \"))\n    bodyMassIndex = int(input(\"Whats Your BodyMassIndex(BMI) : \"))\n    if 18 < bodyMassIndex < 26:\n        print(\" \")\n        healthScore = (numberOfFruits + workoutTime + bodyMassIndex) - (",
        "detail": "mid-range.healthScore",
        "documentation": {}
    },
    {
        "label": "Heap",
        "kind": 6,
        "importPath": "mid-range.heap",
        "description": "mid-range.heap",
        "peekOfCode": "class Heap:\n    def __init__(self):\n        self.storage = []\n    def __len__(self):\n        return len(self.storage)\n    def _swap(self, x, y):\n        a = self.storage[x]\n        b = self.storage[y]\n        self.storage[y] = a\n        self.storage[x] = b",
        "detail": "mid-range.heap",
        "documentation": {}
    },
    {
        "label": "heap",
        "kind": 5,
        "importPath": "mid-range.heapq_heappush",
        "description": "mid-range.heapq_heappush",
        "peekOfCode": "heap = []\nprint(\"random :\", data)\nprint()\nfor n in data:\n    print(\"add {:>3}:\".format(n))\n    heapq.heappush(heap, n)\n    show_tree(heap)",
        "detail": "mid-range.heapq_heappush",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.heapq_merge",
        "description": "mid-range.heapq_merge",
        "peekOfCode": "data = []\nfor i in range(4):\n    new_data = list(random.sample(range(1, 101), 5))\n    new_data.sort()\n    data.append(new_data)\nfor i, d in enumerate(data):\n    print(\"{}: {}\".format(i, d))\nprint(\"\\nMerged:\")\nfor i in heapq.merge(*data):\n    print(i, end=\" \")",
        "detail": "mid-range.heapq_merge",
        "documentation": {}
    },
    {
        "label": "show_tree",
        "kind": 2,
        "importPath": "mid-range.heapq_showtree",
        "description": "mid-range.heapq_showtree",
        "peekOfCode": "def show_tree(tree, total_width=36, fill=\" \"):\n    \"\"\"Pretty-print a tree.\"\"\"\n    output = StringIO()\n    last_row = -1\n    for i, n in enumerate(tree):\n        if i:\n            row = int(math.floor(math.log(i + 1, 2)))\n        else:\n            row = 0\n        if row != last_row:",
        "detail": "mid-range.heapq_showtree",
        "documentation": {}
    },
    {
        "label": "heaps",
        "kind": 2,
        "importPath": "mid-range.heaps_algorithm",
        "description": "mid-range.heaps_algorithm",
        "peekOfCode": "def heaps(arr: list) -> list:\n    \"\"\"\n    Pure python implementation of the Heap's algorithm (recursive version),\n    returning all permutations of a list.\n    >>> heaps([])\n    [()]\n    >>> heaps([0])\n    [(0,)]\n    >>> heaps([-1, 1])\n    [(-1, 1), (1, -1)]",
        "detail": "mid-range.heaps_algorithm",
        "documentation": {}
    },
    {
        "label": "heaps",
        "kind": 2,
        "importPath": "mid-range.heaps_algorithm_iterative",
        "description": "mid-range.heaps_algorithm_iterative",
        "peekOfCode": "def heaps(arr: list) -> list:\n    \"\"\"\n    Pure python implementation of the iterative Heap's algorithm,\n    returning all permutations of a list.\n    >>> heaps([])\n    [()]\n    >>> heaps([0])\n    [(0,)]\n    >>> heaps([-1, 1])\n    [(-1, 1), (1, -1)]",
        "detail": "mid-range.heaps_algorithm_iterative",
        "documentation": {}
    },
    {
        "label": "heapify",
        "kind": 2,
        "importPath": "mid-range.heap_sort",
        "description": "mid-range.heap_sort",
        "peekOfCode": "def heapify(arr, n, i):\n    largest = i  # Initialize largest as root\n    l = 2 * i + 1  # left = 2*i + 1\n    r = 2 * i + 2  # right = 2*i + 2\n    # See if left child of root exists and is\n    # greater than root\n    if l < n and arr[i] < arr[l]:\n        largest = l\n    # See if right child of root exists and is\n    # greater than root",
        "detail": "mid-range.heap_sort",
        "documentation": {}
    },
    {
        "label": "heapSort",
        "kind": 2,
        "importPath": "mid-range.heap_sort",
        "description": "mid-range.heap_sort",
        "peekOfCode": "def heapSort(arr):\n    n = len(arr)\n    # Build a maxheap.\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n    # One by one extract elements\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\nif __name__ == \"__main__\":",
        "detail": "mid-range.heap_sort",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Heaters",
        "description": "mid-range.Heaters",
        "peekOfCode": "class Solution:\n    def findRadius(self, houses, heaters):\n        houses.sort()\n        heaters.sort()\n        heaters = [float(\"-inf\")] + heaters + [float(\"inf\")]\n        i = j = radius = 0\n        while i < len(houses):\n            if heaters[j] >= houses[i]:\n                dist = min(heaters[j] - houses[i], houses[i] - heaters[j - 1])\n                i += 1",
        "detail": "mid-range.Heaters",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "mid-range.height_of_BST",
        "description": "mid-range.height_of_BST",
        "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.right = self.left = None\n        self.data = data\nclass Solution:\n    # function for inserting values according to BST rules\n    def insert(self, root, data):\n        if root == None:\n            return Node(data)\n        else:",
        "detail": "mid-range.height_of_BST",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.height_of_BST",
        "description": "mid-range.height_of_BST",
        "peekOfCode": "class Solution:\n    # function for inserting values according to BST rules\n    def insert(self, root, data):\n        if root == None:\n            return Node(data)\n        else:\n            if data <= root.data:\n                cur = self.insert(root.left, data)\n                root.left = cur\n            else:",
        "detail": "mid-range.height_of_BST",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "mid-range.height_of_BST",
        "description": "mid-range.height_of_BST",
        "peekOfCode": "T = int(input())\n# making an object of the class\nmyTree = Solution()\nroot = None\n# inserting values\nfor i in range(T):\n    data = int(input())\n    root = myTree.insert(root, data)\n# geeting the height calculated\nheight = myTree.getHeight(root)",
        "detail": "mid-range.height_of_BST",
        "documentation": {}
    },
    {
        "label": "myTree",
        "kind": 5,
        "importPath": "mid-range.height_of_BST",
        "description": "mid-range.height_of_BST",
        "peekOfCode": "myTree = Solution()\nroot = None\n# inserting values\nfor i in range(T):\n    data = int(input())\n    root = myTree.insert(root, data)\n# geeting the height calculated\nheight = myTree.getHeight(root)\n# printing the result\nprint(\"Height of BST:\", height)",
        "detail": "mid-range.height_of_BST",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "mid-range.height_of_BST",
        "description": "mid-range.height_of_BST",
        "peekOfCode": "root = None\n# inserting values\nfor i in range(T):\n    data = int(input())\n    root = myTree.insert(root, data)\n# geeting the height calculated\nheight = myTree.getHeight(root)\n# printing the result\nprint(\"Height of BST:\", height)\n\"\"\"",
        "detail": "mid-range.height_of_BST",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "mid-range.height_of_BST",
        "description": "mid-range.height_of_BST",
        "peekOfCode": "height = myTree.getHeight(root)\n# printing the result\nprint(\"Height of BST:\", height)\n\"\"\"\nCOMPLEXITY:\n\t Time Complexity -> O(N)\n\t Space Complexity -> O(N)\nSample Input:\n7\n3",
        "detail": "mid-range.height_of_BST",
        "documentation": {}
    },
    {
        "label": "my_hello_function",
        "kind": 2,
        "importPath": "mid-range.hello_flask",
        "description": "mid-range.hello_flask",
        "peekOfCode": "def my_hello_function():\n    my_list = [\n        {\"id\": 0, \"data\": \"Hello Everyone\"},\n        {\"id\": 1, \"data\": \"Hello Everyone\"},\n        {\"id\": 2, \"data\": \"Hello Everyone\"},\n        {\"id\": 3, \"data\": \"Hello Everyone\"},\n    ]\n    response = {\"data\": my_list}\n    return jsonify(response)\n@app.route(\"/bob\")",
        "detail": "mid-range.hello_flask",
        "documentation": {}
    },
    {
        "label": "my_bob_function",
        "kind": 2,
        "importPath": "mid-range.hello_flask",
        "description": "mid-range.hello_flask",
        "peekOfCode": "def my_bob_function():\n    return \"Hello Bob\"\n# main entry point\nif __name__ == \"__main__\":\n    app.run()",
        "detail": "mid-range.hello_flask",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "mid-range.hello_flask",
        "description": "mid-range.hello_flask",
        "peekOfCode": "app = Flask(__name__)\n# create a route\n@app.route(\"/\")\ndef my_hello_function():\n    my_list = [\n        {\"id\": 0, \"data\": \"Hello Everyone\"},\n        {\"id\": 1, \"data\": \"Hello Everyone\"},\n        {\"id\": 2, \"data\": \"Hello Everyone\"},\n        {\"id\": 3, \"data\": \"Hello Everyone\"},\n    ]",
        "detail": "mid-range.hello_flask",
        "documentation": {}
    },
    {
        "label": "Application",
        "kind": 6,
        "importPath": "mid-range.hello_gui",
        "description": "mid-range.hello_gui",
        "peekOfCode": "class Application(Frame):\n    def __init__(self, master=None):\n        Frame.__init__(self, master)\n        self.pack()\n        self.createWidgets()\n    def createWidgets(self):\n        self.nameInput = Entry(self)\n        self.nameInput.pack()\n        self.alertButton = Button(self, text=\"Hello\", command=self.hello)\n        self.alertButton.pack()",
        "detail": "mid-range.hello_gui",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "mid-range.hello_gui",
        "description": "mid-range.hello_gui",
        "peekOfCode": "app = Application()\n# :\napp.master.title(\"Hello World\")\n# :\napp.mainloop()",
        "detail": "mid-range.hello_gui",
        "documentation": {}
    },
    {
        "label": "hello_three",
        "kind": 2,
        "importPath": "mid-range.hello_three",
        "description": "mid-range.hello_three",
        "peekOfCode": "def hello_three():\n    # Set H to string literal \"Hello\"\n    H = \"Hello\"\n    # set a counter to zero\n    counter = 0\n    # set a limit to three\n    limit = 3\n    # itterate until counter is equal to limit\n    while counter != limit:\n        # display / print my H variable to the screen",
        "detail": "mid-range.hello_three",
        "documentation": {}
    },
    {
        "label": "HelpCommand",
        "kind": 6,
        "importPath": "mid-range.help",
        "description": "mid-range.help",
        "peekOfCode": "class HelpCommand(Command):\n    \"\"\"Show help for commands\"\"\"\n    usage = \"\"\"\n      %prog <command>\"\"\"\n    ignore_require_venv = True\n    def run(self, options: Values, args: List[str]) -> int:\n        from pip._internal.commands import (\n            commands_dict,\n            create_command,\n            get_similar_commands,",
        "detail": "mid-range.help",
        "documentation": {}
    },
    {
        "label": "to_unicode",
        "kind": 2,
        "importPath": "mid-range.helpers",
        "description": "mid-range.helpers",
        "peekOfCode": "def to_unicode(text_type, encoding=ENCODING):\n    if isinstance(text_type, bytes):\n        return text_type.decode(encoding)\n    return text_type",
        "detail": "mid-range.helpers",
        "documentation": {}
    },
    {
        "label": "hex_to_decimal",
        "kind": 2,
        "importPath": "mid-range.hexadecimal_to_decimal",
        "description": "mid-range.hexadecimal_to_decimal",
        "peekOfCode": "def hex_to_decimal(hex_string: str) -> int:\n    \"\"\"\n    Convert a hexadecimal value to its decimal equivalent\n    #https://www.programiz.com/python-programming/methods/built-in/hex\n    >>> hex_to_decimal(\"a\")\n    10\n    >>> hex_to_decimal(\"12f\")\n    303\n    >>> hex_to_decimal(\"   12f   \")\n    303",
        "detail": "mid-range.hexadecimal_to_decimal",
        "documentation": {}
    },
    {
        "label": "hex_table",
        "kind": 5,
        "importPath": "mid-range.hexadecimal_to_decimal",
        "description": "mid-range.hexadecimal_to_decimal",
        "peekOfCode": "hex_table = {hex(i)[2:]: i for i in range(16)}  # Use [:2] to strip off the leading '0x'\ndef hex_to_decimal(hex_string: str) -> int:\n    \"\"\"\n    Convert a hexadecimal value to its decimal equivalent\n    #https://www.programiz.com/python-programming/methods/built-in/hex\n    >>> hex_to_decimal(\"a\")\n    10\n    >>> hex_to_decimal(\"12f\")\n    303\n    >>> hex_to_decimal(\"   12f   \")",
        "detail": "mid-range.hexadecimal_to_decimal",
        "documentation": {}
    },
    {
        "label": "hex_to_bin",
        "kind": 2,
        "importPath": "mid-range.hex_to_bin",
        "description": "mid-range.hex_to_bin",
        "peekOfCode": "def hex_to_bin(hex_num: str) -> int:\n    \"\"\"\n    Convert a hexadecimal value to its binary equivalent\n    #https://stackoverflow.com/questions/1425493/convert-hex-to-binary\n    Here, we have used the bitwise right shift operator: >>\n    Shifts the bits of the number to the right and fills 0 on voids left as a result.\n    Similar effect as of dividing the number with some power of two.\n    Example:\n    a = 10\n    a >> 1 = 5",
        "detail": "mid-range.hex_to_bin",
        "documentation": {}
    },
    {
        "label": "highestValuePalindrome",
        "kind": 2,
        "importPath": "mid-range.Highest-Value-Palindrome",
        "description": "mid-range.Highest-Value-Palindrome",
        "peekOfCode": "def highestValuePalindrome(s, n, k):\n    changes = 0\n    l = 0\n    h = len(s) - 1\n    s = list(s)\n    for i in range(0, n // 2):\n        if s[i] != s[-i - 1]:\n            changes += 1\n    if changes > k:\n        return \"-1\"",
        "detail": "mid-range.Highest-Value-Palindrome",
        "documentation": {}
    },
    {
        "label": "jcnbe_dir",
        "kind": 5,
        "importPath": "mid-range.highlight_html_cfg",
        "description": "mid-range.highlight_html_cfg",
        "peekOfCode": "jcnbe_dir = os.path.dirname(jupyter_contrib_nbextensions.__file__)\npp_mod_name = \"jupyter_contrib_nbextensions.nbconvert_support.pp_highlighter\"\nc = get_config()  # noqa\nc.NbConvertApp.export_format = \"html\"\nc.Exporter.template_path = [\n    \".\",\n    jupyter_contrib_nbextensions.nbconvert_support.templates_directory(),\n    os.path.join(jcnbe_dir, \"nbextensions\", \"highlighter\"),\n]\nc.Exporter.preprocessors = [pp_mod_name + \".HighlighterPreprocessor\"]",
        "detail": "mid-range.highlight_html_cfg",
        "documentation": {}
    },
    {
        "label": "pp_mod_name",
        "kind": 5,
        "importPath": "mid-range.highlight_html_cfg",
        "description": "mid-range.highlight_html_cfg",
        "peekOfCode": "pp_mod_name = \"jupyter_contrib_nbextensions.nbconvert_support.pp_highlighter\"\nc = get_config()  # noqa\nc.NbConvertApp.export_format = \"html\"\nc.Exporter.template_path = [\n    \".\",\n    jupyter_contrib_nbextensions.nbconvert_support.templates_directory(),\n    os.path.join(jcnbe_dir, \"nbextensions\", \"highlighter\"),\n]\nc.Exporter.preprocessors = [pp_mod_name + \".HighlighterPreprocessor\"]\nc.NbConvertApp.postprocessor_class = pp_mod_name + \".HighlighterPostProcessor\"",
        "detail": "mid-range.highlight_html_cfg",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.highlight_html_cfg",
        "description": "mid-range.highlight_html_cfg",
        "peekOfCode": "c = get_config()  # noqa\nc.NbConvertApp.export_format = \"html\"\nc.Exporter.template_path = [\n    \".\",\n    jupyter_contrib_nbextensions.nbconvert_support.templates_directory(),\n    os.path.join(jcnbe_dir, \"nbextensions\", \"highlighter\"),\n]\nc.Exporter.preprocessors = [pp_mod_name + \".HighlighterPreprocessor\"]\nc.NbConvertApp.postprocessor_class = pp_mod_name + \".HighlighterPostProcessor\"\n# html",
        "detail": "mid-range.highlight_html_cfg",
        "documentation": {}
    },
    {
        "label": "c.NbConvertApp.export_format",
        "kind": 5,
        "importPath": "mid-range.highlight_html_cfg",
        "description": "mid-range.highlight_html_cfg",
        "peekOfCode": "c.NbConvertApp.export_format = \"html\"\nc.Exporter.template_path = [\n    \".\",\n    jupyter_contrib_nbextensions.nbconvert_support.templates_directory(),\n    os.path.join(jcnbe_dir, \"nbextensions\", \"highlighter\"),\n]\nc.Exporter.preprocessors = [pp_mod_name + \".HighlighterPreprocessor\"]\nc.NbConvertApp.postprocessor_class = pp_mod_name + \".HighlighterPostProcessor\"\n# html\nc.Exporter.template_file = \"highlighter.tpl\"",
        "detail": "mid-range.highlight_html_cfg",
        "documentation": {}
    },
    {
        "label": "c.Exporter.template_path",
        "kind": 5,
        "importPath": "mid-range.highlight_html_cfg",
        "description": "mid-range.highlight_html_cfg",
        "peekOfCode": "c.Exporter.template_path = [\n    \".\",\n    jupyter_contrib_nbextensions.nbconvert_support.templates_directory(),\n    os.path.join(jcnbe_dir, \"nbextensions\", \"highlighter\"),\n]\nc.Exporter.preprocessors = [pp_mod_name + \".HighlighterPreprocessor\"]\nc.NbConvertApp.postprocessor_class = pp_mod_name + \".HighlighterPostProcessor\"\n# html\nc.Exporter.template_file = \"highlighter.tpl\"",
        "detail": "mid-range.highlight_html_cfg",
        "documentation": {}
    },
    {
        "label": "c.Exporter.preprocessors",
        "kind": 5,
        "importPath": "mid-range.highlight_html_cfg",
        "description": "mid-range.highlight_html_cfg",
        "peekOfCode": "c.Exporter.preprocessors = [pp_mod_name + \".HighlighterPreprocessor\"]\nc.NbConvertApp.postprocessor_class = pp_mod_name + \".HighlighterPostProcessor\"\n# html\nc.Exporter.template_file = \"highlighter.tpl\"",
        "detail": "mid-range.highlight_html_cfg",
        "documentation": {}
    },
    {
        "label": "c.NbConvertApp.postprocessor_class",
        "kind": 5,
        "importPath": "mid-range.highlight_html_cfg",
        "description": "mid-range.highlight_html_cfg",
        "peekOfCode": "c.NbConvertApp.postprocessor_class = pp_mod_name + \".HighlighterPostProcessor\"\n# html\nc.Exporter.template_file = \"highlighter.tpl\"",
        "detail": "mid-range.highlight_html_cfg",
        "documentation": {}
    },
    {
        "label": "c.Exporter.template_file",
        "kind": 5,
        "importPath": "mid-range.highlight_html_cfg",
        "description": "mid-range.highlight_html_cfg",
        "peekOfCode": "c.Exporter.template_file = \"highlighter.tpl\"",
        "detail": "mid-range.highlight_html_cfg",
        "documentation": {}
    },
    {
        "label": "jcnbe_dir",
        "kind": 5,
        "importPath": "mid-range.highlight_latex_cfg",
        "description": "mid-range.highlight_latex_cfg",
        "peekOfCode": "jcnbe_dir = os.path.dirname(jupyter_contrib_nbextensions.__file__)\npp_mod_name = \"jupyter_contrib_nbextensions.nbconvert_support.pp_highlighter\"\nc = get_config()  # noqa\nc.NbConvertApp.export_format = \"latex\"\nc.Exporter.template_path = [\n    \".\",\n    jupyter_contrib_nbextensions.nbconvert_support.templates_directory(),\n    os.path.join(jcnbe_dir, \"nbextensions\", \"highlighter\"),\n]\nc.Exporter.preprocessors = [pp_mod_name + \".HighlighterPreprocessor\"]",
        "detail": "mid-range.highlight_latex_cfg",
        "documentation": {}
    },
    {
        "label": "pp_mod_name",
        "kind": 5,
        "importPath": "mid-range.highlight_latex_cfg",
        "description": "mid-range.highlight_latex_cfg",
        "peekOfCode": "pp_mod_name = \"jupyter_contrib_nbextensions.nbconvert_support.pp_highlighter\"\nc = get_config()  # noqa\nc.NbConvertApp.export_format = \"latex\"\nc.Exporter.template_path = [\n    \".\",\n    jupyter_contrib_nbextensions.nbconvert_support.templates_directory(),\n    os.path.join(jcnbe_dir, \"nbextensions\", \"highlighter\"),\n]\nc.Exporter.preprocessors = [pp_mod_name + \".HighlighterPreprocessor\"]\nc.NbConvertApp.postprocessor_class = pp_mod_name + \".HighlighterPostProcessor\"",
        "detail": "mid-range.highlight_latex_cfg",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.highlight_latex_cfg",
        "description": "mid-range.highlight_latex_cfg",
        "peekOfCode": "c = get_config()  # noqa\nc.NbConvertApp.export_format = \"latex\"\nc.Exporter.template_path = [\n    \".\",\n    jupyter_contrib_nbextensions.nbconvert_support.templates_directory(),\n    os.path.join(jcnbe_dir, \"nbextensions\", \"highlighter\"),\n]\nc.Exporter.preprocessors = [pp_mod_name + \".HighlighterPreprocessor\"]\nc.NbConvertApp.postprocessor_class = pp_mod_name + \".HighlighterPostProcessor\"\n# latex",
        "detail": "mid-range.highlight_latex_cfg",
        "documentation": {}
    },
    {
        "label": "c.NbConvertApp.export_format",
        "kind": 5,
        "importPath": "mid-range.highlight_latex_cfg",
        "description": "mid-range.highlight_latex_cfg",
        "peekOfCode": "c.NbConvertApp.export_format = \"latex\"\nc.Exporter.template_path = [\n    \".\",\n    jupyter_contrib_nbextensions.nbconvert_support.templates_directory(),\n    os.path.join(jcnbe_dir, \"nbextensions\", \"highlighter\"),\n]\nc.Exporter.preprocessors = [pp_mod_name + \".HighlighterPreprocessor\"]\nc.NbConvertApp.postprocessor_class = pp_mod_name + \".HighlighterPostProcessor\"\n# latex\nc.Exporter.template_file = \"highlighter.tplx\"",
        "detail": "mid-range.highlight_latex_cfg",
        "documentation": {}
    },
    {
        "label": "c.Exporter.template_path",
        "kind": 5,
        "importPath": "mid-range.highlight_latex_cfg",
        "description": "mid-range.highlight_latex_cfg",
        "peekOfCode": "c.Exporter.template_path = [\n    \".\",\n    jupyter_contrib_nbextensions.nbconvert_support.templates_directory(),\n    os.path.join(jcnbe_dir, \"nbextensions\", \"highlighter\"),\n]\nc.Exporter.preprocessors = [pp_mod_name + \".HighlighterPreprocessor\"]\nc.NbConvertApp.postprocessor_class = pp_mod_name + \".HighlighterPostProcessor\"\n# latex\nc.Exporter.template_file = \"highlighter.tplx\"\n# html",
        "detail": "mid-range.highlight_latex_cfg",
        "documentation": {}
    },
    {
        "label": "c.Exporter.preprocessors",
        "kind": 5,
        "importPath": "mid-range.highlight_latex_cfg",
        "description": "mid-range.highlight_latex_cfg",
        "peekOfCode": "c.Exporter.preprocessors = [pp_mod_name + \".HighlighterPreprocessor\"]\nc.NbConvertApp.postprocessor_class = pp_mod_name + \".HighlighterPostProcessor\"\n# latex\nc.Exporter.template_file = \"highlighter.tplx\"\n# html\n# c.Exporter.template_file = 'highlighter.tpl'",
        "detail": "mid-range.highlight_latex_cfg",
        "documentation": {}
    },
    {
        "label": "c.NbConvertApp.postprocessor_class",
        "kind": 5,
        "importPath": "mid-range.highlight_latex_cfg",
        "description": "mid-range.highlight_latex_cfg",
        "peekOfCode": "c.NbConvertApp.postprocessor_class = pp_mod_name + \".HighlighterPostProcessor\"\n# latex\nc.Exporter.template_file = \"highlighter.tplx\"\n# html\n# c.Exporter.template_file = 'highlighter.tpl'",
        "detail": "mid-range.highlight_latex_cfg",
        "documentation": {}
    },
    {
        "label": "c.Exporter.template_file",
        "kind": 5,
        "importPath": "mid-range.highlight_latex_cfg",
        "description": "mid-range.highlight_latex_cfg",
        "peekOfCode": "c.Exporter.template_file = \"highlighter.tplx\"\n# html\n# c.Exporter.template_file = 'highlighter.tpl'",
        "detail": "mid-range.highlight_latex_cfg",
        "documentation": {}
    },
    {
        "label": "highlight_fun",
        "kind": 6,
        "importPath": "mid-range.highlight_selected_part_of_text",
        "description": "mid-range.highlight_selected_part_of_text",
        "peekOfCode": "class highlight_fun(tk.Frame):\n    def __init__(self, parent, *args, **kwargs):\n        hightlightb = Button(\n            window,\n            text=\"HIGHLIGHT\",\n            command=self.highlight_text,\n            font=(\"Arial\", 20),\n            bg=\"light green\",\n            fg=\"blue\",\n            borderwidth=3,",
        "detail": "mid-range.highlight_selected_part_of_text",
        "documentation": {}
    },
    {
        "label": "exit_win",
        "kind": 2,
        "importPath": "mid-range.highlight_selected_part_of_text",
        "description": "mid-range.highlight_selected_part_of_text",
        "peekOfCode": "def exit_win():\n    if mbox.askokcancel(\"Exit\", \"Do you want to exit?\"):\n        window.destroy()\nexitb = Button(\n    window,\n    text=\"EXIT\",\n    command=exit_win,\n    font=(\"Arial\", 20),\n    bg=\"red\",\n    fg=\"blue\",",
        "detail": "mid-range.highlight_selected_part_of_text",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": "mid-range.highlight_selected_part_of_text",
        "description": "mid-range.highlight_selected_part_of_text",
        "peekOfCode": "window = Tk()\nwindow.geometry(\"1000x700\")\nwindow.title(\"Highlight Selected Part of Text\")\nclass highlight_fun(tk.Frame):\n    def __init__(self, parent, *args, **kwargs):\n        hightlightb = Button(\n            window,\n            text=\"HIGHLIGHT\",\n            command=self.highlight_text,\n            font=(\"Arial\", 20),",
        "detail": "mid-range.highlight_selected_part_of_text",
        "documentation": {}
    },
    {
        "label": "start1",
        "kind": 5,
        "importPath": "mid-range.highlight_selected_part_of_text",
        "description": "mid-range.highlight_selected_part_of_text",
        "peekOfCode": "start1 = tk.Label(\n    text=\"HIGHLIGHT SELECTED TEXT\", font=(\"Arial\", 50), fg=\"magenta\", underline=0\n)  # same way bg\nstart1.place(x=50, y=10)\nnote1 = tk.Label(\n    text=\"Enter Any Paragraph in Text Area, select any text and click on HIGHLIGHT Button.\\nAnd to un-highlight the highlighted text, click on UN HIGHLIGHT button.\\nTo clear the entered text, click on CLEAR button.\",\n    font=(\"Arial\", 18),\n    fg=\"brown\",\n)  # same way bg\nnote1.place(x=50, y=510)",
        "detail": "mid-range.highlight_selected_part_of_text",
        "documentation": {}
    },
    {
        "label": "note1",
        "kind": 5,
        "importPath": "mid-range.highlight_selected_part_of_text",
        "description": "mid-range.highlight_selected_part_of_text",
        "peekOfCode": "note1 = tk.Label(\n    text=\"Enter Any Paragraph in Text Area, select any text and click on HIGHLIGHT Button.\\nAnd to un-highlight the highlighted text, click on UN HIGHLIGHT button.\\nTo clear the entered text, click on CLEAR button.\",\n    font=(\"Arial\", 18),\n    fg=\"brown\",\n)  # same way bg\nnote1.place(x=50, y=510)\n# highlight_text(window).pack(expand=1, fill=\"both\")\nhighlight_fun(window).place(x=100, y=100)\ndef exit_win():\n    if mbox.askokcancel(\"Exit\", \"Do you want to exit?\"):",
        "detail": "mid-range.highlight_selected_part_of_text",
        "documentation": {}
    },
    {
        "label": "exitb",
        "kind": 5,
        "importPath": "mid-range.highlight_selected_part_of_text",
        "description": "mid-range.highlight_selected_part_of_text",
        "peekOfCode": "exitb = Button(\n    window,\n    text=\"EXIT\",\n    command=exit_win,\n    font=(\"Arial\", 20),\n    bg=\"red\",\n    fg=\"blue\",\n    borderwidth=3,\n    relief=\"raised\",\n)",
        "detail": "mid-range.highlight_selected_part_of_text",
        "documentation": {}
    },
    {
        "label": "contrastStretch",
        "kind": 6,
        "importPath": "mid-range.histogram_stretch",
        "description": "mid-range.histogram_stretch",
        "peekOfCode": "class contrastStretch:\n    def __init__(self):\n        self.img = \"\"\n        self.original_image = \"\"\n        self.last_list = []\n        self.rem = 0\n        self.L = 256\n        self.sk = 0\n        self.k = 0\n        self.number_of_rows = 0",
        "detail": "mid-range.histogram_stretch",
        "documentation": {}
    },
    {
        "label": "hash",
        "kind": 5,
        "importPath": "mid-range.hmac_base64",
        "description": "mid-range.hmac_base64",
        "peekOfCode": "hash = hmac.new(b\"secret-shared-key-goes-here\", body, hashlib.sha1)\ndigest = hash.digest()\nprint(base64.encodebytes(digest))",
        "detail": "mid-range.hmac_base64",
        "documentation": {}
    },
    {
        "label": "digest",
        "kind": 5,
        "importPath": "mid-range.hmac_base64",
        "description": "mid-range.hmac_base64",
        "peekOfCode": "digest = hash.digest()\nprint(base64.encodebytes(digest))",
        "detail": "mid-range.hmac_base64",
        "documentation": {}
    },
    {
        "label": "SimpleObject",
        "kind": 6,
        "importPath": "mid-range.hmac_pickle",
        "description": "mid-range.hmac_pickle",
        "peekOfCode": "class SimpleObject:\n    \"\"\"Demonstrate checking digests before unpickling.\n    \"\"\"\n    def __init__(self, name):\n        self.name = name\n    def __str__(self):\n        return self.name\n# Simulate a writable socket or pipe with a buffer\nout_s = io.BytesIO()\n# Write a valid object to the stream:",
        "detail": "mid-range.hmac_pickle",
        "documentation": {}
    },
    {
        "label": "make_digest",
        "kind": 2,
        "importPath": "mid-range.hmac_pickle",
        "description": "mid-range.hmac_pickle",
        "peekOfCode": "def make_digest(message):\n    \"Return a digest for the message.\"\n    hash = hmac.new(b\"secret-shared-key-goes-here\", message, hashlib.sha1)\n    return hash.hexdigest().encode(\"utf-8\")\nclass SimpleObject:\n    \"\"\"Demonstrate checking digests before unpickling.\n    \"\"\"\n    def __init__(self, name):\n        self.name = name\n    def __str__(self):",
        "detail": "mid-range.hmac_pickle",
        "documentation": {}
    },
    {
        "label": "out_s",
        "kind": 5,
        "importPath": "mid-range.hmac_pickle",
        "description": "mid-range.hmac_pickle",
        "peekOfCode": "out_s = io.BytesIO()\n# Write a valid object to the stream:\n#  digest\\nlength\\npickle\no = SimpleObject(\"digest matches\")\npickled_data = pickle.dumps(o)\ndigest = make_digest(pickled_data)\nheader = b\"%s %d\\n\" % (digest, len(pickled_data))\nprint(\"WRITING: {}\".format(header))\nout_s.write(header)\nout_s.write(pickled_data)",
        "detail": "mid-range.hmac_pickle",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "mid-range.hmac_pickle",
        "description": "mid-range.hmac_pickle",
        "peekOfCode": "o = SimpleObject(\"digest matches\")\npickled_data = pickle.dumps(o)\ndigest = make_digest(pickled_data)\nheader = b\"%s %d\\n\" % (digest, len(pickled_data))\nprint(\"WRITING: {}\".format(header))\nout_s.write(header)\nout_s.write(pickled_data)\n# Write an invalid object to the stream\no = SimpleObject(\"digest does not match\")\npickled_data = pickle.dumps(o)",
        "detail": "mid-range.hmac_pickle",
        "documentation": {}
    },
    {
        "label": "pickled_data",
        "kind": 5,
        "importPath": "mid-range.hmac_pickle",
        "description": "mid-range.hmac_pickle",
        "peekOfCode": "pickled_data = pickle.dumps(o)\ndigest = make_digest(pickled_data)\nheader = b\"%s %d\\n\" % (digest, len(pickled_data))\nprint(\"WRITING: {}\".format(header))\nout_s.write(header)\nout_s.write(pickled_data)\n# Write an invalid object to the stream\no = SimpleObject(\"digest does not match\")\npickled_data = pickle.dumps(o)\ndigest = make_digest(b\"not the pickled data at all\")",
        "detail": "mid-range.hmac_pickle",
        "documentation": {}
    },
    {
        "label": "digest",
        "kind": 5,
        "importPath": "mid-range.hmac_pickle",
        "description": "mid-range.hmac_pickle",
        "peekOfCode": "digest = make_digest(pickled_data)\nheader = b\"%s %d\\n\" % (digest, len(pickled_data))\nprint(\"WRITING: {}\".format(header))\nout_s.write(header)\nout_s.write(pickled_data)\n# Write an invalid object to the stream\no = SimpleObject(\"digest does not match\")\npickled_data = pickle.dumps(o)\ndigest = make_digest(b\"not the pickled data at all\")\nheader = b\"%s %d\\n\" % (digest, len(pickled_data))",
        "detail": "mid-range.hmac_pickle",
        "documentation": {}
    },
    {
        "label": "header",
        "kind": 5,
        "importPath": "mid-range.hmac_pickle",
        "description": "mid-range.hmac_pickle",
        "peekOfCode": "header = b\"%s %d\\n\" % (digest, len(pickled_data))\nprint(\"WRITING: {}\".format(header))\nout_s.write(header)\nout_s.write(pickled_data)\n# Write an invalid object to the stream\no = SimpleObject(\"digest does not match\")\npickled_data = pickle.dumps(o)\ndigest = make_digest(b\"not the pickled data at all\")\nheader = b\"%s %d\\n\" % (digest, len(pickled_data))\nprint(\"\\nWRITING: {}\".format(header))",
        "detail": "mid-range.hmac_pickle",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "mid-range.hmac_pickle",
        "description": "mid-range.hmac_pickle",
        "peekOfCode": "o = SimpleObject(\"digest does not match\")\npickled_data = pickle.dumps(o)\ndigest = make_digest(b\"not the pickled data at all\")\nheader = b\"%s %d\\n\" % (digest, len(pickled_data))\nprint(\"\\nWRITING: {}\".format(header))\nout_s.write(header)\nout_s.write(pickled_data)\nout_s.flush()\n# Simulate a readable socket or pipe with a buffer\nin_s = io.BytesIO(out_s.getvalue())",
        "detail": "mid-range.hmac_pickle",
        "documentation": {}
    },
    {
        "label": "pickled_data",
        "kind": 5,
        "importPath": "mid-range.hmac_pickle",
        "description": "mid-range.hmac_pickle",
        "peekOfCode": "pickled_data = pickle.dumps(o)\ndigest = make_digest(b\"not the pickled data at all\")\nheader = b\"%s %d\\n\" % (digest, len(pickled_data))\nprint(\"\\nWRITING: {}\".format(header))\nout_s.write(header)\nout_s.write(pickled_data)\nout_s.flush()\n# Simulate a readable socket or pipe with a buffer\nin_s = io.BytesIO(out_s.getvalue())\n# Read the data",
        "detail": "mid-range.hmac_pickle",
        "documentation": {}
    },
    {
        "label": "digest",
        "kind": 5,
        "importPath": "mid-range.hmac_pickle",
        "description": "mid-range.hmac_pickle",
        "peekOfCode": "digest = make_digest(b\"not the pickled data at all\")\nheader = b\"%s %d\\n\" % (digest, len(pickled_data))\nprint(\"\\nWRITING: {}\".format(header))\nout_s.write(header)\nout_s.write(pickled_data)\nout_s.flush()\n# Simulate a readable socket or pipe with a buffer\nin_s = io.BytesIO(out_s.getvalue())\n# Read the data\nwhile True:",
        "detail": "mid-range.hmac_pickle",
        "documentation": {}
    },
    {
        "label": "header",
        "kind": 5,
        "importPath": "mid-range.hmac_pickle",
        "description": "mid-range.hmac_pickle",
        "peekOfCode": "header = b\"%s %d\\n\" % (digest, len(pickled_data))\nprint(\"\\nWRITING: {}\".format(header))\nout_s.write(header)\nout_s.write(pickled_data)\nout_s.flush()\n# Simulate a readable socket or pipe with a buffer\nin_s = io.BytesIO(out_s.getvalue())\n# Read the data\nwhile True:\n    first_line = in_s.readline()",
        "detail": "mid-range.hmac_pickle",
        "documentation": {}
    },
    {
        "label": "in_s",
        "kind": 5,
        "importPath": "mid-range.hmac_pickle",
        "description": "mid-range.hmac_pickle",
        "peekOfCode": "in_s = io.BytesIO(out_s.getvalue())\n# Read the data\nwhile True:\n    first_line = in_s.readline()\n    if not first_line:\n        break\n    incoming_digest, incoming_length = first_line.split(b\" \")\n    incoming_length = int(incoming_length.decode(\"utf-8\"))\n    print(\"\\nREAD:\", incoming_digest, incoming_length)\n    incoming_pickled_data = in_s.read(incoming_length)",
        "detail": "mid-range.hmac_pickle",
        "documentation": {}
    },
    {
        "label": "digest_maker",
        "kind": 5,
        "importPath": "mid-range.hmac_sha",
        "description": "mid-range.hmac_sha",
        "peekOfCode": "digest_maker = hmac.new(b\"secret-shared-key-goes-here\", b\"\", hashlib.sha1)\nwith open(\"hmac_sha.py\", \"rb\") as f:\n    while True:\n        block = f.read(1024)\n        if not block:\n            break\n        digest_maker.update(block)\ndigest = digest_maker.hexdigest()\nprint(digest)",
        "detail": "mid-range.hmac_sha",
        "documentation": {}
    },
    {
        "label": "digest",
        "kind": 5,
        "importPath": "mid-range.hmac_sha",
        "description": "mid-range.hmac_sha",
        "peekOfCode": "digest = digest_maker.hexdigest()\nprint(digest)",
        "detail": "mid-range.hmac_sha",
        "documentation": {}
    },
    {
        "label": "digest_maker",
        "kind": 5,
        "importPath": "mid-range.hmac_simple",
        "description": "mid-range.hmac_simple",
        "peekOfCode": "digest_maker = hmac.new(b\"secret-shared-key-goes-here\")\nwith open(\"lorem.txt\", \"rb\") as f:\n    while True:\n        block = f.read(1024)\n        if not block:\n            break\n        digest_maker.update(block)\ndigest = digest_maker.hexdigest()\nprint(digest)",
        "detail": "mid-range.hmac_simple",
        "documentation": {}
    },
    {
        "label": "digest",
        "kind": 5,
        "importPath": "mid-range.hmac_simple",
        "description": "mid-range.hmac_simple",
        "peekOfCode": "digest = digest_maker.hexdigest()\nprint(digest)",
        "detail": "mid-range.hmac_simple",
        "documentation": {}
    },
    {
        "label": "default_hooks",
        "kind": 2,
        "importPath": "mid-range.hooks",
        "description": "mid-range.hooks",
        "peekOfCode": "def default_hooks():\n    return {event: [] for event in HOOKS}\n# TODO: response is the only one\ndef dispatch_hook(key, hooks, hook_data, **kwargs):\n    \"\"\"Dispatches a hook dictionary on a given piece of data.\"\"\"\n    hooks = hooks or {}\n    hooks = hooks.get(key)\n    if hooks:\n        if hasattr(hooks, \"__call__\"):\n            hooks = [hooks]",
        "detail": "mid-range.hooks",
        "documentation": {}
    },
    {
        "label": "dispatch_hook",
        "kind": 2,
        "importPath": "mid-range.hooks",
        "description": "mid-range.hooks",
        "peekOfCode": "def dispatch_hook(key, hooks, hook_data, **kwargs):\n    \"\"\"Dispatches a hook dictionary on a given piece of data.\"\"\"\n    hooks = hooks or {}\n    hooks = hooks.get(key)\n    if hooks:\n        if hasattr(hooks, \"__call__\"):\n            hooks = [hooks]\n        for hook in hooks:\n            _hook_data = hook(hook_data, **kwargs)\n            if _hook_data is not None:",
        "detail": "mid-range.hooks",
        "documentation": {}
    },
    {
        "label": "HOOKS",
        "kind": 5,
        "importPath": "mid-range.hooks",
        "description": "mid-range.hooks",
        "peekOfCode": "HOOKS = [\"response\"]\ndef default_hooks():\n    return {event: [] for event in HOOKS}\n# TODO: response is the only one\ndef dispatch_hook(key, hooks, hook_data, **kwargs):\n    \"\"\"Dispatches a hook dictionary on a given piece of data.\"\"\"\n    hooks = hooks or {}\n    hooks = hooks.get(key)\n    if hooks:\n        if hasattr(hooks, \"__call__\"):",
        "detail": "mid-range.hooks",
        "documentation": {}
    },
    {
        "label": "get_systems",
        "kind": 2,
        "importPath": "mid-range.hosts",
        "description": "mid-range.hosts",
        "peekOfCode": "def get_systems(host_group):\n    return commanderconfig.hostgroups[host_group]\ndef list_groups(color=True):\n    groups = sorted(commanderconfig.hostgroups.keys())\n    for g in groups:\n        group = g\n        if color:\n            g = colorize(g, 'green')\n        print \"%s: %s\" % (g, \",\".join(get_systems(group)))",
        "detail": "mid-range.hosts",
        "documentation": {}
    },
    {
        "label": "list_groups",
        "kind": 2,
        "importPath": "mid-range.hosts",
        "description": "mid-range.hosts",
        "peekOfCode": "def list_groups(color=True):\n    groups = sorted(commanderconfig.hostgroups.keys())\n    for g in groups:\n        group = g\n        if color:\n            g = colorize(g, 'green')\n        print \"%s: %s\" % (g, \",\".join(get_systems(group)))",
        "detail": "mid-range.hosts",
        "documentation": {}
    },
    {
        "label": "added_to_path",
        "kind": 5,
        "importPath": "mid-range.hosts",
        "description": "mid-range.hosts",
        "peekOfCode": "added_to_path = False\nif '/etc' not in sys.path:\n    sys.path.insert(0, '/etc')\n    added_to_path = True\ntry:\n    import commanderconfig\nexcept ImportError:\n    print \"Couldn't import config. Please create /etc/commanderconfig.py\"\n    sys.exit(1)\nif added_to_path:",
        "detail": "mid-range.hosts",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.House_Robber",
        "description": "mid-range.House_Robber",
        "peekOfCode": "class Solution:\n    def rob(self, nums):\n        prevMax = 0\n        currMax = 0\n        for num in nums:\n            prevMax, currMax = currMax, max(prevMax + num, currMax)\n        return currMax",
        "detail": "mid-range.House_Robber",
        "documentation": {}
    },
    {
        "label": "howMany",
        "kind": 2,
        "importPath": "mid-range.how-many-words",
        "description": "mid-range.how-many-words",
        "peekOfCode": "def howMany(sentence):\n    # Write your code here\n    # invalid = ['?', '.', '[', ']', '{', '}', '(', ')', ',', '!']\n    l = sentence.split()\n    n = 0\n    for i in range(len(l)):\n        t = 0\n        if l[i].isnumeric():\n            continue\n        for j in range(0, len(l[i]) - 1):",
        "detail": "mid-range.how-many-words",
        "documentation": {}
    },
    {
        "label": "fun_talk",
        "kind": 2,
        "importPath": "mid-range.how_to",
        "description": "mid-range.how_to",
        "peekOfCode": "def fun_talk(audio):\n    engine.say(audio)\n    engine.runAndWait()\n# function for taking the voice commands and recognizing it\ndef get_command():\n    rec = sr.Recognizer()\n    with sr.Microphone() as source:\n        print(\"Say something...\")\n        rec.pause_threshold = 1\n        audio = rec.listen(source)",
        "detail": "mid-range.how_to",
        "documentation": {}
    },
    {
        "label": "get_command",
        "kind": 2,
        "importPath": "mid-range.how_to",
        "description": "mid-range.how_to",
        "peekOfCode": "def get_command():\n    rec = sr.Recognizer()\n    with sr.Microphone() as source:\n        print(\"Say something...\")\n        rec.pause_threshold = 1\n        audio = rec.listen(source)\n        try:\n            print(\"Recognizing...\")\n            query = rec.recognize_google(audio, language=\"en-in\")\n            print(f\"You said: {query}\\n\")",
        "detail": "mid-range.how_to",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "mid-range.how_to",
        "description": "mid-range.how_to",
        "peekOfCode": "engine = pyttsx3.init()\n# function for speaking up the results through speakers\ndef fun_talk(audio):\n    engine.say(audio)\n    engine.runAndWait()\n# function for taking the voice commands and recognizing it\ndef get_command():\n    rec = sr.Recognizer()\n    with sr.Microphone() as source:\n        print(\"Say something...\")",
        "detail": "mid-range.how_to",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "mid-range.how_to_use_table_scrapper_example_file",
        "description": "mid-range.how_to_use_table_scrapper_example_file",
        "peekOfCode": "driver = webdriver.Chrome(\"C:\\webdrivers\\chromedriver.exe\")\ndriver.get(\"https://www.nirfindia.org/2020/UniversityRanking.html\")\ndriver.maximize_window()\ninstitute_id = driver.find_elements_by_xpath(\n    '//table[@id=\"tbl_overall\"]/tbody/tr/td[1]'\n)\nname = driver.find_elements_by_xpath('//table[@id=\"tbl_overall\"]/tbody/tr/td[2]')\ncity = driver.find_elements_by_xpath('//table[@id=\"tbl_overall\"]/tbody/tr/td[3]')\nstate = driver.find_elements_by_xpath('//table[@id=\"tbl_overall\"]/tbody/tr/td[4]')\nscore = driver.find_elements_by_xpath('//table[@id=\"tbl_overall\"]/tbody/tr/td[5]')",
        "detail": "mid-range.how_to_use_table_scrapper_example_file",
        "documentation": {}
    },
    {
        "label": "institute_id",
        "kind": 5,
        "importPath": "mid-range.how_to_use_table_scrapper_example_file",
        "description": "mid-range.how_to_use_table_scrapper_example_file",
        "peekOfCode": "institute_id = driver.find_elements_by_xpath(\n    '//table[@id=\"tbl_overall\"]/tbody/tr/td[1]'\n)\nname = driver.find_elements_by_xpath('//table[@id=\"tbl_overall\"]/tbody/tr/td[2]')\ncity = driver.find_elements_by_xpath('//table[@id=\"tbl_overall\"]/tbody/tr/td[3]')\nstate = driver.find_elements_by_xpath('//table[@id=\"tbl_overall\"]/tbody/tr/td[4]')\nscore = driver.find_elements_by_xpath('//table[@id=\"tbl_overall\"]/tbody/tr/td[5]')\nrank = driver.find_elements_by_xpath('//table[@id=\"tbl_overall\"]/tbody/tr/td[6]')\nnirf_result = []\nfor i in range(len(city)):",
        "detail": "mid-range.how_to_use_table_scrapper_example_file",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "mid-range.how_to_use_table_scrapper_example_file",
        "description": "mid-range.how_to_use_table_scrapper_example_file",
        "peekOfCode": "name = driver.find_elements_by_xpath('//table[@id=\"tbl_overall\"]/tbody/tr/td[2]')\ncity = driver.find_elements_by_xpath('//table[@id=\"tbl_overall\"]/tbody/tr/td[3]')\nstate = driver.find_elements_by_xpath('//table[@id=\"tbl_overall\"]/tbody/tr/td[4]')\nscore = driver.find_elements_by_xpath('//table[@id=\"tbl_overall\"]/tbody/tr/td[5]')\nrank = driver.find_elements_by_xpath('//table[@id=\"tbl_overall\"]/tbody/tr/td[6]')\nnirf_result = []\nfor i in range(len(city)):\n    temporary_data = {\n        \"Institute Id\": institute_id[i].text,\n        \"Name\": name[i].text,",
        "detail": "mid-range.how_to_use_table_scrapper_example_file",
        "documentation": {}
    },
    {
        "label": "city",
        "kind": 5,
        "importPath": "mid-range.how_to_use_table_scrapper_example_file",
        "description": "mid-range.how_to_use_table_scrapper_example_file",
        "peekOfCode": "city = driver.find_elements_by_xpath('//table[@id=\"tbl_overall\"]/tbody/tr/td[3]')\nstate = driver.find_elements_by_xpath('//table[@id=\"tbl_overall\"]/tbody/tr/td[4]')\nscore = driver.find_elements_by_xpath('//table[@id=\"tbl_overall\"]/tbody/tr/td[5]')\nrank = driver.find_elements_by_xpath('//table[@id=\"tbl_overall\"]/tbody/tr/td[6]')\nnirf_result = []\nfor i in range(len(city)):\n    temporary_data = {\n        \"Institute Id\": institute_id[i].text,\n        \"Name\": name[i].text,\n        \"City\": city[i].text,",
        "detail": "mid-range.how_to_use_table_scrapper_example_file",
        "documentation": {}
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "mid-range.how_to_use_table_scrapper_example_file",
        "description": "mid-range.how_to_use_table_scrapper_example_file",
        "peekOfCode": "state = driver.find_elements_by_xpath('//table[@id=\"tbl_overall\"]/tbody/tr/td[4]')\nscore = driver.find_elements_by_xpath('//table[@id=\"tbl_overall\"]/tbody/tr/td[5]')\nrank = driver.find_elements_by_xpath('//table[@id=\"tbl_overall\"]/tbody/tr/td[6]')\nnirf_result = []\nfor i in range(len(city)):\n    temporary_data = {\n        \"Institute Id\": institute_id[i].text,\n        \"Name\": name[i].text,\n        \"City\": city[i].text,\n        \"State\": state[i].text,",
        "detail": "mid-range.how_to_use_table_scrapper_example_file",
        "documentation": {}
    },
    {
        "label": "score",
        "kind": 5,
        "importPath": "mid-range.how_to_use_table_scrapper_example_file",
        "description": "mid-range.how_to_use_table_scrapper_example_file",
        "peekOfCode": "score = driver.find_elements_by_xpath('//table[@id=\"tbl_overall\"]/tbody/tr/td[5]')\nrank = driver.find_elements_by_xpath('//table[@id=\"tbl_overall\"]/tbody/tr/td[6]')\nnirf_result = []\nfor i in range(len(city)):\n    temporary_data = {\n        \"Institute Id\": institute_id[i].text,\n        \"Name\": name[i].text,\n        \"City\": city[i].text,\n        \"State\": state[i].text,\n        \"Score\": score[i].text,",
        "detail": "mid-range.how_to_use_table_scrapper_example_file",
        "documentation": {}
    },
    {
        "label": "rank",
        "kind": 5,
        "importPath": "mid-range.how_to_use_table_scrapper_example_file",
        "description": "mid-range.how_to_use_table_scrapper_example_file",
        "peekOfCode": "rank = driver.find_elements_by_xpath('//table[@id=\"tbl_overall\"]/tbody/tr/td[6]')\nnirf_result = []\nfor i in range(len(city)):\n    temporary_data = {\n        \"Institute Id\": institute_id[i].text,\n        \"Name\": name[i].text,\n        \"City\": city[i].text,\n        \"State\": state[i].text,\n        \"Score\": score[i].text,\n        \"Rank\": rank[i].text,",
        "detail": "mid-range.how_to_use_table_scrapper_example_file",
        "documentation": {}
    },
    {
        "label": "nirf_result",
        "kind": 5,
        "importPath": "mid-range.how_to_use_table_scrapper_example_file",
        "description": "mid-range.how_to_use_table_scrapper_example_file",
        "peekOfCode": "nirf_result = []\nfor i in range(len(city)):\n    temporary_data = {\n        \"Institute Id\": institute_id[i].text,\n        \"Name\": name[i].text,\n        \"City\": city[i].text,\n        \"State\": state[i].text,\n        \"Score\": score[i].text,\n        \"Rank\": rank[i].text,\n    }",
        "detail": "mid-range.how_to_use_table_scrapper_example_file",
        "documentation": {}
    },
    {
        "label": "df_data",
        "kind": 5,
        "importPath": "mid-range.how_to_use_table_scrapper_example_file",
        "description": "mid-range.how_to_use_table_scrapper_example_file",
        "peekOfCode": "df_data = pd.DataFrame(nirf_result)\nprint(df_data)\ndf_data.to_excel(\"nirf_ranking_result.xlsx\", index=False)\ndf_data.to_csv(\"nirf_ranking_result.csv\", index=False)",
        "detail": "mid-range.how_to_use_table_scrapper_example_file",
        "documentation": {}
    },
    {
        "label": "HPUXFCompiler",
        "kind": 6,
        "importPath": "mid-range.hpux",
        "description": "mid-range.hpux",
        "peekOfCode": "class HPUXFCompiler(FCompiler):\n    compiler_type = \"hpux\"\n    description = \"HP Fortran 90 Compiler\"\n    version_pattern = r\"HP F90 (?P<version>[^\\s*,]*)\"\n    executables = {\n        \"version_cmd\": [\"f90\", \"+version\"],\n        \"compiler_f77\": [\"f90\"],\n        \"compiler_fix\": [\"f90\"],\n        \"compiler_f90\": [\"f90\"],\n        \"linker_so\": [\"ld\", \"-b\"],",
        "detail": "mid-range.hpux",
        "documentation": {}
    },
    {
        "label": "compilers",
        "kind": 5,
        "importPath": "mid-range.hpux",
        "description": "mid-range.hpux",
        "peekOfCode": "compilers = [\"HPUXFCompiler\"]\nclass HPUXFCompiler(FCompiler):\n    compiler_type = \"hpux\"\n    description = \"HP Fortran 90 Compiler\"\n    version_pattern = r\"HP F90 (?P<version>[^\\s*,]*)\"\n    executables = {\n        \"version_cmd\": [\"f90\", \"+version\"],\n        \"compiler_f77\": [\"f90\"],\n        \"compiler_fix\": [\"f90\"],\n        \"compiler_f90\": [\"f90\"],",
        "detail": "mid-range.hpux",
        "documentation": {}
    },
    {
        "label": "get_html",
        "kind": 2,
        "importPath": "mid-range.html_source",
        "description": "mid-range.html_source",
        "peekOfCode": "def get_html(url, fname):\n    try:\n        responsive = urllib.urlopen(url)\n        save_file = open(fname + \".html\", \"w\")\n        save_file.write(responsive.read())\n        save_file.close()\n    except IOError:\n        return \"Make sure url entered is correct and valid!\"\n    except Exception as e:\n        return \"An Error occured, make sure information enerted is correct!\"",
        "detail": "mid-range.html_source",
        "documentation": {}
    },
    {
        "label": "HTTP1ConnectionTest",
        "kind": 6,
        "importPath": "mid-range.http1connection_test",
        "description": "mid-range.http1connection_test",
        "peekOfCode": "class HTTP1ConnectionTest(AsyncTestCase):\n    code = None  # type: typing.Optional[int]\n    def setUp(self):\n        super().setUp()\n        self.asyncSetUp()\n    @gen_test\n    def asyncSetUp(self):\n        listener, port = bind_unused_port()\n        event = Event()\n        def accept_callback(conn, addr):",
        "detail": "mid-range.http1connection_test",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.http_cookies_coded_value",
        "description": "mid-range.http_cookies_coded_value",
        "peekOfCode": "c = cookies.SimpleCookie()\nc[\"integer\"] = 5\nc[\"with_quotes\"] = 'He said, \"Hello, World!\"'\nfor name in [\"integer\", \"with_quotes\"]:\n    print(c[name].key)\n    print(\"  {}\".format(c[name]))\n    print(\"  value={!r}\".format(c[name].value))\n    print(\"  coded_value={!r}\".format(c[name].coded_value))\n    print()",
        "detail": "mid-range.http_cookies_coded_value",
        "documentation": {}
    },
    {
        "label": "c[\"integer\"]",
        "kind": 5,
        "importPath": "mid-range.http_cookies_coded_value",
        "description": "mid-range.http_cookies_coded_value",
        "peekOfCode": "c[\"integer\"] = 5\nc[\"with_quotes\"] = 'He said, \"Hello, World!\"'\nfor name in [\"integer\", \"with_quotes\"]:\n    print(c[name].key)\n    print(\"  {}\".format(c[name]))\n    print(\"  value={!r}\".format(c[name].value))\n    print(\"  coded_value={!r}\".format(c[name].coded_value))\n    print()",
        "detail": "mid-range.http_cookies_coded_value",
        "documentation": {}
    },
    {
        "label": "c[\"with_quotes\"]",
        "kind": 5,
        "importPath": "mid-range.http_cookies_coded_value",
        "description": "mid-range.http_cookies_coded_value",
        "peekOfCode": "c[\"with_quotes\"] = 'He said, \"Hello, World!\"'\nfor name in [\"integer\", \"with_quotes\"]:\n    print(c[name].key)\n    print(\"  {}\".format(c[name]))\n    print(\"  value={!r}\".format(c[name].value))\n    print(\"  coded_value={!r}\".format(c[name].coded_value))\n    print()",
        "detail": "mid-range.http_cookies_coded_value",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.http_cookies_js_output",
        "description": "mid-range.http_cookies_js_output",
        "peekOfCode": "c = cookies.SimpleCookie()\nc[\"mycookie\"] = \"cookie_value\"\nc[\"another_cookie\"] = \"second value\"\njs_text = c.js_output()\nprint(textwrap.dedent(js_text).lstrip())",
        "detail": "mid-range.http_cookies_js_output",
        "documentation": {}
    },
    {
        "label": "c[\"mycookie\"]",
        "kind": 5,
        "importPath": "mid-range.http_cookies_js_output",
        "description": "mid-range.http_cookies_js_output",
        "peekOfCode": "c[\"mycookie\"] = \"cookie_value\"\nc[\"another_cookie\"] = \"second value\"\njs_text = c.js_output()\nprint(textwrap.dedent(js_text).lstrip())",
        "detail": "mid-range.http_cookies_js_output",
        "documentation": {}
    },
    {
        "label": "c[\"another_cookie\"]",
        "kind": 5,
        "importPath": "mid-range.http_cookies_js_output",
        "description": "mid-range.http_cookies_js_output",
        "peekOfCode": "c[\"another_cookie\"] = \"second value\"\njs_text = c.js_output()\nprint(textwrap.dedent(js_text).lstrip())",
        "detail": "mid-range.http_cookies_js_output",
        "documentation": {}
    },
    {
        "label": "js_text",
        "kind": 5,
        "importPath": "mid-range.http_cookies_js_output",
        "description": "mid-range.http_cookies_js_output",
        "peekOfCode": "js_text = c.js_output()\nprint(textwrap.dedent(js_text).lstrip())",
        "detail": "mid-range.http_cookies_js_output",
        "documentation": {}
    },
    {
        "label": "show_cookie",
        "kind": 2,
        "importPath": "mid-range.http_cookies_Morsel",
        "description": "mid-range.http_cookies_Morsel",
        "peekOfCode": "def show_cookie(c):\n    print(c)\n    for key, morsel in c.items():\n        print()\n        print(\"key =\", morsel.key)\n        print(\"  value =\", morsel.value)\n        print(\"  coded_value =\", morsel.coded_value)\n        for name in morsel.keys():\n            if morsel[name]:\n                print(\"  {} = {}\".format(name, morsel[name]))",
        "detail": "mid-range.http_cookies_Morsel",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.http_cookies_Morsel",
        "description": "mid-range.http_cookies_Morsel",
        "peekOfCode": "c = cookies.SimpleCookie()\n# A cookie with a value that has to be encoded\n# to fit into the header\nc[\"encoded_value_cookie\"] = '\"cookie,value;\"'\nc[\"encoded_value_cookie\"][\"comment\"] = \"Has escaped punctuation\"\n# A cookie that only applies to part of a site\nc[\"restricted_cookie\"] = \"cookie_value\"\nc[\"restricted_cookie\"][\"path\"] = \"/sub/path\"\nc[\"restricted_cookie\"][\"domain\"] = \"PyMOTW\"\nc[\"restricted_cookie\"][\"secure\"] = True",
        "detail": "mid-range.http_cookies_Morsel",
        "documentation": {}
    },
    {
        "label": "c[\"encoded_value_cookie\"]",
        "kind": 5,
        "importPath": "mid-range.http_cookies_Morsel",
        "description": "mid-range.http_cookies_Morsel",
        "peekOfCode": "c[\"encoded_value_cookie\"] = '\"cookie,value;\"'\nc[\"encoded_value_cookie\"][\"comment\"] = \"Has escaped punctuation\"\n# A cookie that only applies to part of a site\nc[\"restricted_cookie\"] = \"cookie_value\"\nc[\"restricted_cookie\"][\"path\"] = \"/sub/path\"\nc[\"restricted_cookie\"][\"domain\"] = \"PyMOTW\"\nc[\"restricted_cookie\"][\"secure\"] = True\n# A cookie that expires in 5 minutes\nc[\"with_max_age\"] = \"expires in 5 minutes\"\nc[\"with_max_age\"][\"max-age\"] = 300  # seconds",
        "detail": "mid-range.http_cookies_Morsel",
        "documentation": {}
    },
    {
        "label": "c[\"encoded_value_cookie\"][\"comment\"]",
        "kind": 5,
        "importPath": "mid-range.http_cookies_Morsel",
        "description": "mid-range.http_cookies_Morsel",
        "peekOfCode": "c[\"encoded_value_cookie\"][\"comment\"] = \"Has escaped punctuation\"\n# A cookie that only applies to part of a site\nc[\"restricted_cookie\"] = \"cookie_value\"\nc[\"restricted_cookie\"][\"path\"] = \"/sub/path\"\nc[\"restricted_cookie\"][\"domain\"] = \"PyMOTW\"\nc[\"restricted_cookie\"][\"secure\"] = True\n# A cookie that expires in 5 minutes\nc[\"with_max_age\"] = \"expires in 5 minutes\"\nc[\"with_max_age\"][\"max-age\"] = 300  # seconds\n# A cookie that expires at a specific time",
        "detail": "mid-range.http_cookies_Morsel",
        "documentation": {}
    },
    {
        "label": "c[\"restricted_cookie\"]",
        "kind": 5,
        "importPath": "mid-range.http_cookies_Morsel",
        "description": "mid-range.http_cookies_Morsel",
        "peekOfCode": "c[\"restricted_cookie\"] = \"cookie_value\"\nc[\"restricted_cookie\"][\"path\"] = \"/sub/path\"\nc[\"restricted_cookie\"][\"domain\"] = \"PyMOTW\"\nc[\"restricted_cookie\"][\"secure\"] = True\n# A cookie that expires in 5 minutes\nc[\"with_max_age\"] = \"expires in 5 minutes\"\nc[\"with_max_age\"][\"max-age\"] = 300  # seconds\n# A cookie that expires at a specific time\nc[\"expires_at_time\"] = \"cookie_value\"\ntime_to_live = datetime.timedelta(hours=1)",
        "detail": "mid-range.http_cookies_Morsel",
        "documentation": {}
    },
    {
        "label": "c[\"restricted_cookie\"][\"path\"]",
        "kind": 5,
        "importPath": "mid-range.http_cookies_Morsel",
        "description": "mid-range.http_cookies_Morsel",
        "peekOfCode": "c[\"restricted_cookie\"][\"path\"] = \"/sub/path\"\nc[\"restricted_cookie\"][\"domain\"] = \"PyMOTW\"\nc[\"restricted_cookie\"][\"secure\"] = True\n# A cookie that expires in 5 minutes\nc[\"with_max_age\"] = \"expires in 5 minutes\"\nc[\"with_max_age\"][\"max-age\"] = 300  # seconds\n# A cookie that expires at a specific time\nc[\"expires_at_time\"] = \"cookie_value\"\ntime_to_live = datetime.timedelta(hours=1)\nexpires = datetime.datetime(2009, 2, 14, 18, 30, 14) + time_to_live",
        "detail": "mid-range.http_cookies_Morsel",
        "documentation": {}
    },
    {
        "label": "c[\"restricted_cookie\"][\"domain\"]",
        "kind": 5,
        "importPath": "mid-range.http_cookies_Morsel",
        "description": "mid-range.http_cookies_Morsel",
        "peekOfCode": "c[\"restricted_cookie\"][\"domain\"] = \"PyMOTW\"\nc[\"restricted_cookie\"][\"secure\"] = True\n# A cookie that expires in 5 minutes\nc[\"with_max_age\"] = \"expires in 5 minutes\"\nc[\"with_max_age\"][\"max-age\"] = 300  # seconds\n# A cookie that expires at a specific time\nc[\"expires_at_time\"] = \"cookie_value\"\ntime_to_live = datetime.timedelta(hours=1)\nexpires = datetime.datetime(2009, 2, 14, 18, 30, 14) + time_to_live\n# Date format: Wdy, DD-Mon-YY HH:MM:SS GMT",
        "detail": "mid-range.http_cookies_Morsel",
        "documentation": {}
    },
    {
        "label": "c[\"restricted_cookie\"][\"secure\"]",
        "kind": 5,
        "importPath": "mid-range.http_cookies_Morsel",
        "description": "mid-range.http_cookies_Morsel",
        "peekOfCode": "c[\"restricted_cookie\"][\"secure\"] = True\n# A cookie that expires in 5 minutes\nc[\"with_max_age\"] = \"expires in 5 minutes\"\nc[\"with_max_age\"][\"max-age\"] = 300  # seconds\n# A cookie that expires at a specific time\nc[\"expires_at_time\"] = \"cookie_value\"\ntime_to_live = datetime.timedelta(hours=1)\nexpires = datetime.datetime(2009, 2, 14, 18, 30, 14) + time_to_live\n# Date format: Wdy, DD-Mon-YY HH:MM:SS GMT\nexpires_at_time = expires.strftime(\"%a, %d %b %Y %H:%M:%S\")",
        "detail": "mid-range.http_cookies_Morsel",
        "documentation": {}
    },
    {
        "label": "c[\"with_max_age\"]",
        "kind": 5,
        "importPath": "mid-range.http_cookies_Morsel",
        "description": "mid-range.http_cookies_Morsel",
        "peekOfCode": "c[\"with_max_age\"] = \"expires in 5 minutes\"\nc[\"with_max_age\"][\"max-age\"] = 300  # seconds\n# A cookie that expires at a specific time\nc[\"expires_at_time\"] = \"cookie_value\"\ntime_to_live = datetime.timedelta(hours=1)\nexpires = datetime.datetime(2009, 2, 14, 18, 30, 14) + time_to_live\n# Date format: Wdy, DD-Mon-YY HH:MM:SS GMT\nexpires_at_time = expires.strftime(\"%a, %d %b %Y %H:%M:%S\")\nc[\"expires_at_time\"][\"expires\"] = expires_at_time\nshow_cookie(c)",
        "detail": "mid-range.http_cookies_Morsel",
        "documentation": {}
    },
    {
        "label": "c[\"with_max_age\"][\"max-age\"]",
        "kind": 5,
        "importPath": "mid-range.http_cookies_Morsel",
        "description": "mid-range.http_cookies_Morsel",
        "peekOfCode": "c[\"with_max_age\"][\"max-age\"] = 300  # seconds\n# A cookie that expires at a specific time\nc[\"expires_at_time\"] = \"cookie_value\"\ntime_to_live = datetime.timedelta(hours=1)\nexpires = datetime.datetime(2009, 2, 14, 18, 30, 14) + time_to_live\n# Date format: Wdy, DD-Mon-YY HH:MM:SS GMT\nexpires_at_time = expires.strftime(\"%a, %d %b %Y %H:%M:%S\")\nc[\"expires_at_time\"][\"expires\"] = expires_at_time\nshow_cookie(c)",
        "detail": "mid-range.http_cookies_Morsel",
        "documentation": {}
    },
    {
        "label": "c[\"expires_at_time\"]",
        "kind": 5,
        "importPath": "mid-range.http_cookies_Morsel",
        "description": "mid-range.http_cookies_Morsel",
        "peekOfCode": "c[\"expires_at_time\"] = \"cookie_value\"\ntime_to_live = datetime.timedelta(hours=1)\nexpires = datetime.datetime(2009, 2, 14, 18, 30, 14) + time_to_live\n# Date format: Wdy, DD-Mon-YY HH:MM:SS GMT\nexpires_at_time = expires.strftime(\"%a, %d %b %Y %H:%M:%S\")\nc[\"expires_at_time\"][\"expires\"] = expires_at_time\nshow_cookie(c)",
        "detail": "mid-range.http_cookies_Morsel",
        "documentation": {}
    },
    {
        "label": "time_to_live",
        "kind": 5,
        "importPath": "mid-range.http_cookies_Morsel",
        "description": "mid-range.http_cookies_Morsel",
        "peekOfCode": "time_to_live = datetime.timedelta(hours=1)\nexpires = datetime.datetime(2009, 2, 14, 18, 30, 14) + time_to_live\n# Date format: Wdy, DD-Mon-YY HH:MM:SS GMT\nexpires_at_time = expires.strftime(\"%a, %d %b %Y %H:%M:%S\")\nc[\"expires_at_time\"][\"expires\"] = expires_at_time\nshow_cookie(c)",
        "detail": "mid-range.http_cookies_Morsel",
        "documentation": {}
    },
    {
        "label": "expires",
        "kind": 5,
        "importPath": "mid-range.http_cookies_Morsel",
        "description": "mid-range.http_cookies_Morsel",
        "peekOfCode": "expires = datetime.datetime(2009, 2, 14, 18, 30, 14) + time_to_live\n# Date format: Wdy, DD-Mon-YY HH:MM:SS GMT\nexpires_at_time = expires.strftime(\"%a, %d %b %Y %H:%M:%S\")\nc[\"expires_at_time\"][\"expires\"] = expires_at_time\nshow_cookie(c)",
        "detail": "mid-range.http_cookies_Morsel",
        "documentation": {}
    },
    {
        "label": "expires_at_time",
        "kind": 5,
        "importPath": "mid-range.http_cookies_Morsel",
        "description": "mid-range.http_cookies_Morsel",
        "peekOfCode": "expires_at_time = expires.strftime(\"%a, %d %b %Y %H:%M:%S\")\nc[\"expires_at_time\"][\"expires\"] = expires_at_time\nshow_cookie(c)",
        "detail": "mid-range.http_cookies_Morsel",
        "documentation": {}
    },
    {
        "label": "c[\"expires_at_time\"][\"expires\"]",
        "kind": 5,
        "importPath": "mid-range.http_cookies_Morsel",
        "description": "mid-range.http_cookies_Morsel",
        "peekOfCode": "c[\"expires_at_time\"][\"expires\"] = expires_at_time\nshow_cookie(c)",
        "detail": "mid-range.http_cookies_Morsel",
        "documentation": {}
    },
    {
        "label": "HTTP_COOKIE",
        "kind": 5,
        "importPath": "mid-range.http_cookies_parse",
        "description": "mid-range.http_cookies_parse",
        "peekOfCode": "HTTP_COOKIE = \"; \".join([r\"integer=5\", r'with_quotes=\"He said, \\\"Hello, World!\\\"\"'])\nprint(\"From constructor:\")\nc = cookies.SimpleCookie(HTTP_COOKIE)\nprint(c)\nprint()\nprint(\"From load():\")\nc = cookies.SimpleCookie()\nc.load(HTTP_COOKIE)\nprint(c)",
        "detail": "mid-range.http_cookies_parse",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.http_cookies_parse",
        "description": "mid-range.http_cookies_parse",
        "peekOfCode": "c = cookies.SimpleCookie(HTTP_COOKIE)\nprint(c)\nprint()\nprint(\"From load():\")\nc = cookies.SimpleCookie()\nc.load(HTTP_COOKIE)\nprint(c)",
        "detail": "mid-range.http_cookies_parse",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.http_cookies_parse",
        "description": "mid-range.http_cookies_parse",
        "peekOfCode": "c = cookies.SimpleCookie()\nc.load(HTTP_COOKIE)\nprint(c)",
        "detail": "mid-range.http_cookies_parse",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.http_cookies_setheaders",
        "description": "mid-range.http_cookies_setheaders",
        "peekOfCode": "c = cookies.SimpleCookie()\nc[\"mycookie\"] = \"cookie_value\"\nprint(c)",
        "detail": "mid-range.http_cookies_setheaders",
        "documentation": {}
    },
    {
        "label": "c[\"mycookie\"]",
        "kind": 5,
        "importPath": "mid-range.http_cookies_setheaders",
        "description": "mid-range.http_cookies_setheaders",
        "peekOfCode": "c[\"mycookie\"] = \"cookie_value\"\nprint(c)",
        "detail": "mid-range.http_cookies_setheaders",
        "documentation": {}
    },
    {
        "label": "ErrorHandler",
        "kind": 6,
        "importPath": "mid-range.http_server_errors",
        "description": "mid-range.http_server_errors",
        "peekOfCode": "class ErrorHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_error(404)\nif __name__ == \"__main__\":\n    from http.server import HTTPServer\n    server = HTTPServer((\"localhost\", 8080), ErrorHandler)\n    print(\"Starting server, use <Ctrl-C> to stop\")\n    server.serve_forever()",
        "detail": "mid-range.http_server_errors",
        "documentation": {}
    },
    {
        "label": "GetHandler",
        "kind": 6,
        "importPath": "mid-range.http_server_GET",
        "description": "mid-range.http_server_GET",
        "peekOfCode": "class GetHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        parsed_path = parse.urlparse(self.path)\n        message_parts = [\n            \"CLIENT VALUES:\",\n            \"client_address={} ({})\".format(self.client_address, self.address_string()),\n            \"command={}\".format(self.command),\n            \"path={}\".format(self.path),\n            \"real path={}\".format(parsed_path.path),\n            \"query={}\".format(parsed_path.query),",
        "detail": "mid-range.http_server_GET",
        "documentation": {}
    },
    {
        "label": "PostHandler",
        "kind": 6,
        "importPath": "mid-range.http_server_POST",
        "description": "mid-range.http_server_POST",
        "peekOfCode": "class PostHandler(BaseHTTPRequestHandler):\n    def do_POST(self):\n        # Parse the form data posted\n        form = cgi.FieldStorage(\n            fp=self.rfile,\n            headers=self.headers,\n            environ={\n                \"REQUEST_METHOD\": \"POST\",\n                \"CONTENT_TYPE\": self.headers[\"Content-Type\"],\n            },",
        "detail": "mid-range.http_server_POST",
        "documentation": {}
    },
    {
        "label": "GetHandler",
        "kind": 6,
        "importPath": "mid-range.http_server_send_header",
        "description": "mid-range.http_server_send_header",
        "peekOfCode": "class GetHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header(\"Content-Type\", \"text/plain; charset=utf-8\")\n        self.send_header(\"Last-Modified\", self.date_time_string(time.time()))\n        self.end_headers()\n        self.wfile.write(\"Response body\\n\".encode(\"utf-8\"))\nif __name__ == \"__main__\":\n    from http.server import HTTPServer\n    server = HTTPServer((\"localhost\", 8080), GetHandler)",
        "detail": "mid-range.http_server_send_header",
        "documentation": {}
    },
    {
        "label": "Handler",
        "kind": 6,
        "importPath": "mid-range.http_server_threads",
        "description": "mid-range.http_server_threads",
        "peekOfCode": "class Handler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header(\"Content-Type\", \"text/plain; charset=utf-8\")\n        self.end_headers()\n        message = threading.currentThread().getName()\n        self.wfile.write(message.encode(\"utf-8\"))\n        self.wfile.write(b\"\\n\")\nclass ThreadedHTTPServer(ThreadingMixIn, HTTPServer):\n    \"\"\"Handle requests in a separate thread.\"\"\"",
        "detail": "mid-range.http_server_threads",
        "documentation": {}
    },
    {
        "label": "ThreadedHTTPServer",
        "kind": 6,
        "importPath": "mid-range.http_server_threads",
        "description": "mid-range.http_server_threads",
        "peekOfCode": "class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):\n    \"\"\"Handle requests in a separate thread.\"\"\"\nif __name__ == \"__main__\":\n    server = ThreadedHTTPServer((\"localhost\", 8080), Handler)\n    print(\"Starting server, use <Ctrl-C> to stop\")\n    server.serve_forever()",
        "detail": "mid-range.http_server_threads",
        "documentation": {}
    },
    {
        "label": "SearchHungarian",
        "kind": 6,
        "importPath": "mid-range.hu",
        "description": "mid-range.hu",
        "peekOfCode": "class SearchHungarian(SearchLanguage):\n    lang = \"hu\"\n    language_name = \"Hungarian\"\n    js_stemmer_rawcode = \"hungarian-stemmer.js\"\n    stopwords = hungarian_stopwords\n    def init(self, options: Dict) -> None:\n        self.stemmer = snowballstemmer.stemmer(\"hungarian\")\n    def stem(self, word: str) -> str:\n        return self.stemmer.stemWord(word.lower())",
        "detail": "mid-range.hu",
        "documentation": {}
    },
    {
        "label": "hungarian_stopwords",
        "kind": 5,
        "importPath": "mid-range.hu",
        "description": "mid-range.hu",
        "peekOfCode": "hungarian_stopwords = parse_stop_word(\n    \"\"\"\n| source: http://snowball.tartarus.org/algorithms/hungarian/stop.txt\n| prepared by Anna Tordai\na\nahogy\nahol\naki\nakik\nakkor",
        "detail": "mid-range.hu",
        "documentation": {}
    },
    {
        "label": "Letter",
        "kind": 6,
        "importPath": "mid-range.huffman",
        "description": "mid-range.huffman",
        "peekOfCode": "class Letter:\n    def __init__(self, letter, freq):\n        self.letter = letter\n        self.freq = freq\n        self.bitstring = {}\n    def __repr__(self):\n        return f\"{self.letter}:{self.freq}\"\nclass TreeNode:\n    def __init__(self, freq, left, right):\n        self.freq = freq",
        "detail": "mid-range.huffman",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.huffman",
        "description": "mid-range.huffman",
        "peekOfCode": "class TreeNode:\n    def __init__(self, freq, left, right):\n        self.freq = freq\n        self.left = left\n        self.right = right\ndef parse_file(file_path):\n    \"\"\"\n    Read the file and build a dict of all letters and their\n    frequencies, then convert the dict into a list of Letters.\n    \"\"\"",
        "detail": "mid-range.huffman",
        "documentation": {}
    },
    {
        "label": "parse_file",
        "kind": 2,
        "importPath": "mid-range.huffman",
        "description": "mid-range.huffman",
        "peekOfCode": "def parse_file(file_path):\n    \"\"\"\n    Read the file and build a dict of all letters and their\n    frequencies, then convert the dict into a list of Letters.\n    \"\"\"\n    chars = {}\n    with open(file_path) as f:\n        while True:\n            c = f.read(1)\n            if not c:",
        "detail": "mid-range.huffman",
        "documentation": {}
    },
    {
        "label": "build_tree",
        "kind": 2,
        "importPath": "mid-range.huffman",
        "description": "mid-range.huffman",
        "peekOfCode": "def build_tree(letters):\n    \"\"\"\n    Run through the list of Letters and build the min heap\n    for the Huffman Tree.\n    \"\"\"\n    while len(letters) > 1:\n        left = letters.pop(0)\n        right = letters.pop(0)\n        total_freq = left.freq + right.freq\n        node = TreeNode(total_freq, left, right)",
        "detail": "mid-range.huffman",
        "documentation": {}
    },
    {
        "label": "traverse_tree",
        "kind": 2,
        "importPath": "mid-range.huffman",
        "description": "mid-range.huffman",
        "peekOfCode": "def traverse_tree(root, bitstring):\n    \"\"\"\n    Recursively traverse the Huffman Tree to set each\n    Letter's bitstring dictionary, and return the list of Letters\n    \"\"\"\n    if type(root) is Letter:\n        root.bitstring[root.letter] = bitstring\n        return [root]\n    letters = []\n    letters += traverse_tree(root.left, bitstring + \"0\")",
        "detail": "mid-range.huffman",
        "documentation": {}
    },
    {
        "label": "huffman",
        "kind": 2,
        "importPath": "mid-range.huffman",
        "description": "mid-range.huffman",
        "peekOfCode": "def huffman(file_path):\n    \"\"\"\n    Parse the file, build the tree, then run through the file\n    again, using the letters dictionary to find and print out the\n    bitstring for each letter.\n    \"\"\"\n    letters_list = parse_file(file_path)\n    root = build_tree(letters_list)\n    letters = {\n        k: v for letter in traverse_tree(root, \"\") for k, v in letter.bitstring.items()",
        "detail": "mid-range.huffman",
        "documentation": {}
    },
    {
        "label": "is_identity_matrix",
        "kind": 2,
        "importPath": "mid-range.identity_matrix_recognizer",
        "description": "mid-range.identity_matrix_recognizer",
        "peekOfCode": "def is_identity_matrix(matrix):\n    total_elems = 0\n    last_pos = 0\n    for row in matrix:\n        total_elems += len(row)\n        if row[last_pos] == 1 and row.count(0) == len(row) - 1:\n            last_pos += 1\n        else:\n            return False\n    if total_elems == len(matrix[0]) * len(matrix[0]):",
        "detail": "mid-range.identity_matrix_recognizer",
        "documentation": {}
    },
    {
        "label": "matrix1",
        "kind": 5,
        "importPath": "mid-range.identity_matrix_recognizer",
        "description": "mid-range.identity_matrix_recognizer",
        "peekOfCode": "matrix1 = [[1,0,0,0],\n           [0,1,0,0],\n           [0,0,1,0],\n           [0,0,0,1]]\nprint is_identity_matrix(matrix1)\n#>>>True\nmatrix2 = [[1,0,0],\n           [0,1,0],\n           [0,0,0]]\nprint is_identity_matrix(matrix2)",
        "detail": "mid-range.identity_matrix_recognizer",
        "documentation": {}
    },
    {
        "label": "matrix2",
        "kind": 5,
        "importPath": "mid-range.identity_matrix_recognizer",
        "description": "mid-range.identity_matrix_recognizer",
        "peekOfCode": "matrix2 = [[1,0,0],\n           [0,1,0],\n           [0,0,0]]\nprint is_identity_matrix(matrix2)\n#>>>False\nmatrix3 = [[2,0,0],\n           [0,2,0],\n           [0,0,2]]\nprint is_identity_matrix(matrix3)\n#>>>False",
        "detail": "mid-range.identity_matrix_recognizer",
        "documentation": {}
    },
    {
        "label": "matrix3",
        "kind": 5,
        "importPath": "mid-range.identity_matrix_recognizer",
        "description": "mid-range.identity_matrix_recognizer",
        "peekOfCode": "matrix3 = [[2,0,0],\n           [0,2,0],\n           [0,0,2]]\nprint is_identity_matrix(matrix3)\n#>>>False\nmatrix4 = [[1,0,0,0],\n           [0,1,1,0],\n           [0,0,0,1]]\nprint is_identity_matrix(matrix4)\n#>>>False",
        "detail": "mid-range.identity_matrix_recognizer",
        "documentation": {}
    },
    {
        "label": "matrix4",
        "kind": 5,
        "importPath": "mid-range.identity_matrix_recognizer",
        "description": "mid-range.identity_matrix_recognizer",
        "peekOfCode": "matrix4 = [[1,0,0,0],\n           [0,1,1,0],\n           [0,0,0,1]]\nprint is_identity_matrix(matrix4)\n#>>>False\nmatrix5 = [[1,0,0,0,0,0,0,0,0]]\nprint is_identity_matrix(matrix5)\n#>>>False\nmatrix6 = [[1,0,0,0],  \n           [0,1,0,1],  ",
        "detail": "mid-range.identity_matrix_recognizer",
        "documentation": {}
    },
    {
        "label": "matrix5",
        "kind": 5,
        "importPath": "mid-range.identity_matrix_recognizer",
        "description": "mid-range.identity_matrix_recognizer",
        "peekOfCode": "matrix5 = [[1,0,0,0,0,0,0,0,0]]\nprint is_identity_matrix(matrix5)\n#>>>False\nmatrix6 = [[1,0,0,0],  \n           [0,1,0,1],  \n           [0,0,1,0],  \n           [0,0,0,1]]\nprint is_identity_matrix(matrix6)\n#>>>False\nmatrix7 = [[1, -1, 1],",
        "detail": "mid-range.identity_matrix_recognizer",
        "documentation": {}
    },
    {
        "label": "matrix6",
        "kind": 5,
        "importPath": "mid-range.identity_matrix_recognizer",
        "description": "mid-range.identity_matrix_recognizer",
        "peekOfCode": "matrix6 = [[1,0,0,0],  \n           [0,1,0,1],  \n           [0,0,1,0],  \n           [0,0,0,1]]\nprint is_identity_matrix(matrix6)\n#>>>False\nmatrix7 = [[1, -1, 1],\n           [0, 1, 0],\n           [0, 0, 1]]\nprint is_identity_matrix(matrix7)",
        "detail": "mid-range.identity_matrix_recognizer",
        "documentation": {}
    },
    {
        "label": "matrix7",
        "kind": 5,
        "importPath": "mid-range.identity_matrix_recognizer",
        "description": "mid-range.identity_matrix_recognizer",
        "peekOfCode": "matrix7 = [[1, -1, 1],\n           [0, 1, 0],\n           [0, 0, 1]]\nprint is_identity_matrix(matrix7)\n#>>>False",
        "detail": "mid-range.identity_matrix_recognizer",
        "documentation": {}
    },
    {
        "label": "IgorStyle",
        "kind": 6,
        "importPath": "mid-range.igor",
        "description": "mid-range.igor",
        "peekOfCode": "class IgorStyle(Style):\n    \"\"\"\n    Pygments version of the official colors for Igor Pro procedures.\n    \"\"\"\n    default_style = \"\"\n    styles = {\n        Comment: \"italic #FF0000\",\n        Keyword: \"#0000FF\",\n        Name.Function: \"#C34E00\",\n        Name.Decorator: \"#CC00A3\",",
        "detail": "mid-range.igor",
        "documentation": {}
    },
    {
        "label": "Rotate",
        "kind": 2,
        "importPath": "mid-range.Image",
        "description": "mid-range.Image",
        "peekOfCode": "def Rotate(arr):\n    temp = []\n    for i in range(len(arr)):\n        for j in range(0, len(arr)):\n            if i != j and i < j:\n                arr[i][j], arr[j][i] = arr[j][i], arr[i][j]\n    for l in arr:\n        l.reverse()\n        print(l)\narr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "detail": "mid-range.Image",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.Image",
        "description": "mid-range.Image",
        "peekOfCode": "arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nRotate(arr)",
        "detail": "mid-range.Image",
        "documentation": {}
    },
    {
        "label": "getIMG",
        "kind": 2,
        "importPath": "mid-range.imageconverter",
        "description": "mid-range.imageconverter",
        "peekOfCode": "def getIMG():\n    global im1\n    import_file_path = filedialog.askopenfilename()\n    im1 = Image.open(import_file_path)\nbrowseButton_PNG = tk.Button(\n    text=\"      Import PNG File     \",\n    command=getIMG,\n    bg=\"deeppink\",\n    fg=\"white\",\n    font=(\"helvetica\", 12, \"bold\"),",
        "detail": "mid-range.imageconverter",
        "documentation": {}
    },
    {
        "label": "convertToJPG",
        "kind": 2,
        "importPath": "mid-range.imageconverter",
        "description": "mid-range.imageconverter",
        "peekOfCode": "def convertToJPG():\n    global im1\n    export_file_path = filedialog.asksaveasfilename(defaultextension=\".jpg\")\n    im1.save(export_file_path)\nsaveAsButton_JPG = tk.Button(\n    text=\"Convert IMG to JPG\",\n    command=convertToJPG,\n    bg=\"deeppink\",\n    fg=\"white\",\n    font=(\"helvetica\", 12, \"bold\"),",
        "detail": "mid-range.imageconverter",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "mid-range.imageconverter",
        "description": "mid-range.imageconverter",
        "peekOfCode": "root = tk.Tk()\ncanvas1 = tk.Canvas(root, width=300, height=250, bg=\"azure3\", relief=\"raised\")\ncanvas1.pack()\nlabel1 = tk.Label(root, text=\"File Conversion Tool\", bg=\"azure3\")\nlabel1.config(font=(\"helvetica\", 20))\ncanvas1.create_window(150, 60, window=label1)\ndef getIMG():\n    global im1\n    import_file_path = filedialog.askopenfilename()\n    im1 = Image.open(import_file_path)",
        "detail": "mid-range.imageconverter",
        "documentation": {}
    },
    {
        "label": "canvas1",
        "kind": 5,
        "importPath": "mid-range.imageconverter",
        "description": "mid-range.imageconverter",
        "peekOfCode": "canvas1 = tk.Canvas(root, width=300, height=250, bg=\"azure3\", relief=\"raised\")\ncanvas1.pack()\nlabel1 = tk.Label(root, text=\"File Conversion Tool\", bg=\"azure3\")\nlabel1.config(font=(\"helvetica\", 20))\ncanvas1.create_window(150, 60, window=label1)\ndef getIMG():\n    global im1\n    import_file_path = filedialog.askopenfilename()\n    im1 = Image.open(import_file_path)\nbrowseButton_PNG = tk.Button(",
        "detail": "mid-range.imageconverter",
        "documentation": {}
    },
    {
        "label": "label1",
        "kind": 5,
        "importPath": "mid-range.imageconverter",
        "description": "mid-range.imageconverter",
        "peekOfCode": "label1 = tk.Label(root, text=\"File Conversion Tool\", bg=\"azure3\")\nlabel1.config(font=(\"helvetica\", 20))\ncanvas1.create_window(150, 60, window=label1)\ndef getIMG():\n    global im1\n    import_file_path = filedialog.askopenfilename()\n    im1 = Image.open(import_file_path)\nbrowseButton_PNG = tk.Button(\n    text=\"      Import PNG File     \",\n    command=getIMG,",
        "detail": "mid-range.imageconverter",
        "documentation": {}
    },
    {
        "label": "browseButton_PNG",
        "kind": 5,
        "importPath": "mid-range.imageconverter",
        "description": "mid-range.imageconverter",
        "peekOfCode": "browseButton_PNG = tk.Button(\n    text=\"      Import PNG File     \",\n    command=getIMG,\n    bg=\"deeppink\",\n    fg=\"white\",\n    font=(\"helvetica\", 12, \"bold\"),\n)\ncanvas1.create_window(150, 130, window=browseButton_PNG)\ndef convertToJPG():\n    global im1",
        "detail": "mid-range.imageconverter",
        "documentation": {}
    },
    {
        "label": "saveAsButton_JPG",
        "kind": 5,
        "importPath": "mid-range.imageconverter",
        "description": "mid-range.imageconverter",
        "peekOfCode": "saveAsButton_JPG = tk.Button(\n    text=\"Convert IMG to JPG\",\n    command=convertToJPG,\n    bg=\"deeppink\",\n    fg=\"white\",\n    font=(\"helvetica\", 12, \"bold\"),\n)\ncanvas1.create_window(150, 180, window=saveAsButton_JPG)\nroot.mainloop()",
        "detail": "mid-range.imageconverter",
        "documentation": {}
    },
    {
        "label": "img",
        "kind": 5,
        "importPath": "mid-range.image_cartoonifier",
        "description": "mid-range.image_cartoonifier",
        "peekOfCode": "img = cv2.imread(\"image.jpg\")\n# giving the color changes\ngray = cv2.cvtColor(img, cv2.COLOR_BGRA2GRAY)\ngray = cv2.medianBlur(gray, 9)\nedges = cv2.adaptiveThreshold(\n    gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 13, 6\n)\ncolor = cv2.bilateralFilter(img, 9, 250, 250)\ncartoon = cv2.bitwise_and(color, color, mask=edges)\n# showing the output image",
        "detail": "mid-range.image_cartoonifier",
        "documentation": {}
    },
    {
        "label": "gray",
        "kind": 5,
        "importPath": "mid-range.image_cartoonifier",
        "description": "mid-range.image_cartoonifier",
        "peekOfCode": "gray = cv2.cvtColor(img, cv2.COLOR_BGRA2GRAY)\ngray = cv2.medianBlur(gray, 9)\nedges = cv2.adaptiveThreshold(\n    gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 13, 6\n)\ncolor = cv2.bilateralFilter(img, 9, 250, 250)\ncartoon = cv2.bitwise_and(color, color, mask=edges)\n# showing the output image\ncv2.imshow(\"output cartoonified image\", cartoon)\ncv2.waitKey(0)",
        "detail": "mid-range.image_cartoonifier",
        "documentation": {}
    },
    {
        "label": "gray",
        "kind": 5,
        "importPath": "mid-range.image_cartoonifier",
        "description": "mid-range.image_cartoonifier",
        "peekOfCode": "gray = cv2.medianBlur(gray, 9)\nedges = cv2.adaptiveThreshold(\n    gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 13, 6\n)\ncolor = cv2.bilateralFilter(img, 9, 250, 250)\ncartoon = cv2.bitwise_and(color, color, mask=edges)\n# showing the output image\ncv2.imshow(\"output cartoonified image\", cartoon)\ncv2.waitKey(0)\ncv2.destroyAllWindows()",
        "detail": "mid-range.image_cartoonifier",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "mid-range.image_cartoonifier",
        "description": "mid-range.image_cartoonifier",
        "peekOfCode": "edges = cv2.adaptiveThreshold(\n    gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 13, 6\n)\ncolor = cv2.bilateralFilter(img, 9, 250, 250)\ncartoon = cv2.bitwise_and(color, color, mask=edges)\n# showing the output image\ncv2.imshow(\"output cartoonified image\", cartoon)\ncv2.waitKey(0)\ncv2.destroyAllWindows()",
        "detail": "mid-range.image_cartoonifier",
        "documentation": {}
    },
    {
        "label": "color",
        "kind": 5,
        "importPath": "mid-range.image_cartoonifier",
        "description": "mid-range.image_cartoonifier",
        "peekOfCode": "color = cv2.bilateralFilter(img, 9, 250, 250)\ncartoon = cv2.bitwise_and(color, color, mask=edges)\n# showing the output image\ncv2.imshow(\"output cartoonified image\", cartoon)\ncv2.waitKey(0)\ncv2.destroyAllWindows()",
        "detail": "mid-range.image_cartoonifier",
        "documentation": {}
    },
    {
        "label": "cartoon",
        "kind": 5,
        "importPath": "mid-range.image_cartoonifier",
        "description": "mid-range.image_cartoonifier",
        "peekOfCode": "cartoon = cv2.bitwise_and(color, color, mask=edges)\n# showing the output image\ncv2.imshow(\"output cartoonified image\", cartoon)\ncv2.waitKey(0)\ncv2.destroyAllWindows()",
        "detail": "mid-range.image_cartoonifier",
        "documentation": {}
    },
    {
        "label": "download_image",
        "kind": 2,
        "importPath": "mid-range.image_downloader",
        "description": "mid-range.image_downloader",
        "peekOfCode": "def download_image(url):\n    name = random.randrange(1, 1000)\n    full_name = str(name) + \".jpg\"\n    urllib.request.urlretrieve(url, full_name)\nprint(download_image(get))",
        "detail": "mid-range.image_downloader",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 5,
        "importPath": "mid-range.image_downloader",
        "description": "mid-range.image_downloader",
        "peekOfCode": "get = str(input(\"Enter url of image to download :  \"))\ndef download_image(url):\n    name = random.randrange(1, 1000)\n    full_name = str(name) + \".jpg\"\n    urllib.request.urlretrieve(url, full_name)\nprint(download_image(get))",
        "detail": "mid-range.image_downloader",
        "documentation": {}
    },
    {
        "label": "image_file",
        "kind": 5,
        "importPath": "mid-range.Image_meta_extract",
        "description": "mid-range.Image_meta_extract",
        "peekOfCode": "image_file = \"image.jpg\"\n# on execution an object of Image type is returned and stored in image_file variable.\ntry:\n    image = Image.open(image_file)\nexcept IOError:\n    pass\n# raise an IOError if file cannot be found,or the image cannot be opened.\n# dictionary to store metadata keys and value pairs.\nexif = {}\n# iterating over the dictionary",
        "detail": "mid-range.Image_meta_extract",
        "documentation": {}
    },
    {
        "label": "exif",
        "kind": 5,
        "importPath": "mid-range.Image_meta_extract",
        "description": "mid-range.Image_meta_extract",
        "peekOfCode": "exif = {}\n# iterating over the dictionary\nfor tag, value in image._getexif().items():\n    # extarcting all the metadata as key and value pairs and converting them from numerical value to string values\n    if tag in TAGS:\n        exif[TAGS[tag]] = value\n# checking if image is copyrighted\ntry:\n    if \"Copyright\" in exif:\n        print(\"Image is Copyrighted, by \", exif[\"Copyright\"])",
        "detail": "mid-range.Image_meta_extract",
        "documentation": {}
    },
    {
        "label": "mywidth",
        "kind": 5,
        "importPath": "mid-range.image_size_compressor",
        "description": "mid-range.image_size_compressor",
        "peekOfCode": "mywidth = 3278  # width of the image to be obtained\nmyheight = 4917  # height of the image to be obtained\n# opening the image\nimg = Image.open(\"cute_dog.jpg\")\n# resizing the image\nimg = img.resize((mywidth, myheight), PIL.Image.ANTIALIAS)\n# saving the image\nimg.save(\"resize.jpg\")",
        "detail": "mid-range.image_size_compressor",
        "documentation": {}
    },
    {
        "label": "myheight",
        "kind": 5,
        "importPath": "mid-range.image_size_compressor",
        "description": "mid-range.image_size_compressor",
        "peekOfCode": "myheight = 4917  # height of the image to be obtained\n# opening the image\nimg = Image.open(\"cute_dog.jpg\")\n# resizing the image\nimg = img.resize((mywidth, myheight), PIL.Image.ANTIALIAS)\n# saving the image\nimg.save(\"resize.jpg\")",
        "detail": "mid-range.image_size_compressor",
        "documentation": {}
    },
    {
        "label": "img",
        "kind": 5,
        "importPath": "mid-range.image_size_compressor",
        "description": "mid-range.image_size_compressor",
        "peekOfCode": "img = Image.open(\"cute_dog.jpg\")\n# resizing the image\nimg = img.resize((mywidth, myheight), PIL.Image.ANTIALIAS)\n# saving the image\nimg.save(\"resize.jpg\")",
        "detail": "mid-range.image_size_compressor",
        "documentation": {}
    },
    {
        "label": "img",
        "kind": 5,
        "importPath": "mid-range.image_size_compressor",
        "description": "mid-range.image_size_compressor",
        "peekOfCode": "img = img.resize((mywidth, myheight), PIL.Image.ANTIALIAS)\n# saving the image\nimg.save(\"resize.jpg\")",
        "detail": "mid-range.image_size_compressor",
        "documentation": {}
    },
    {
        "label": "new_message",
        "kind": 5,
        "importPath": "mid-range.imaplib_append",
        "description": "mid-range.imaplib_append",
        "peekOfCode": "new_message = email.message.Message()\nnew_message.set_unixfrom(\"pymotw\")\nnew_message[\"Subject\"] = \"subject goes here\"\nnew_message[\"From\"] = \"pymotw@example.com\"\nnew_message[\"To\"] = \"example@example.com\"\nnew_message.set_payload(\"This is the body of the message.\\n\")\nprint(new_message)\nwith imaplib_connect.open_connection() as c:\n    c.append(\n        \"INBOX\",",
        "detail": "mid-range.imaplib_append",
        "documentation": {}
    },
    {
        "label": "new_message[\"Subject\"]",
        "kind": 5,
        "importPath": "mid-range.imaplib_append",
        "description": "mid-range.imaplib_append",
        "peekOfCode": "new_message[\"Subject\"] = \"subject goes here\"\nnew_message[\"From\"] = \"pymotw@example.com\"\nnew_message[\"To\"] = \"example@example.com\"\nnew_message.set_payload(\"This is the body of the message.\\n\")\nprint(new_message)\nwith imaplib_connect.open_connection() as c:\n    c.append(\n        \"INBOX\",\n        \"\",\n        imaplib.Time2Internaldate(time.time()),",
        "detail": "mid-range.imaplib_append",
        "documentation": {}
    },
    {
        "label": "new_message[\"From\"]",
        "kind": 5,
        "importPath": "mid-range.imaplib_append",
        "description": "mid-range.imaplib_append",
        "peekOfCode": "new_message[\"From\"] = \"pymotw@example.com\"\nnew_message[\"To\"] = \"example@example.com\"\nnew_message.set_payload(\"This is the body of the message.\\n\")\nprint(new_message)\nwith imaplib_connect.open_connection() as c:\n    c.append(\n        \"INBOX\",\n        \"\",\n        imaplib.Time2Internaldate(time.time()),\n        str(new_message).encode(\"utf-8\"),",
        "detail": "mid-range.imaplib_append",
        "documentation": {}
    },
    {
        "label": "new_message[\"To\"]",
        "kind": 5,
        "importPath": "mid-range.imaplib_append",
        "description": "mid-range.imaplib_append",
        "peekOfCode": "new_message[\"To\"] = \"example@example.com\"\nnew_message.set_payload(\"This is the body of the message.\\n\")\nprint(new_message)\nwith imaplib_connect.open_connection() as c:\n    c.append(\n        \"INBOX\",\n        \"\",\n        imaplib.Time2Internaldate(time.time()),\n        str(new_message).encode(\"utf-8\"),\n    )",
        "detail": "mid-range.imaplib_append",
        "documentation": {}
    },
    {
        "label": "open_connection",
        "kind": 2,
        "importPath": "mid-range.imaplib_connect",
        "description": "mid-range.imaplib_connect",
        "peekOfCode": "def open_connection(verbose=False):\n    # Read the config file\n    config = configparser.ConfigParser()\n    config.read([os.path.expanduser(\"~/.pymotw\")])\n    # Connect to the server\n    hostname = config.get(\"server\", \"hostname\")\n    if verbose:\n        print(\"Connecting to\", hostname)\n    connection = imaplib.IMAP4_SSL(hostname)\n    # Login to our account",
        "detail": "mid-range.imaplib_connect",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "mid-range.imaplib_connect_fail",
        "description": "mid-range.imaplib_connect_fail",
        "peekOfCode": "config = configparser.ConfigParser()\nconfig.read([os.path.expanduser(\"~/.pymotw\")])\n# Connect to the server\nhostname = config.get(\"server\", \"hostname\")\nprint(\"Connecting to\", hostname)\nconnection = imaplib.IMAP4_SSL(hostname)\n# Login to our account\nusername = config.get(\"account\", \"username\")\npassword = \"this_is_the_wrong_password\"\nprint(\"Logging in as\", username)",
        "detail": "mid-range.imaplib_connect_fail",
        "documentation": {}
    },
    {
        "label": "hostname",
        "kind": 5,
        "importPath": "mid-range.imaplib_connect_fail",
        "description": "mid-range.imaplib_connect_fail",
        "peekOfCode": "hostname = config.get(\"server\", \"hostname\")\nprint(\"Connecting to\", hostname)\nconnection = imaplib.IMAP4_SSL(hostname)\n# Login to our account\nusername = config.get(\"account\", \"username\")\npassword = \"this_is_the_wrong_password\"\nprint(\"Logging in as\", username)\ntry:\n    connection.login(username, password)\nexcept Exception as err:",
        "detail": "mid-range.imaplib_connect_fail",
        "documentation": {}
    },
    {
        "label": "connection",
        "kind": 5,
        "importPath": "mid-range.imaplib_connect_fail",
        "description": "mid-range.imaplib_connect_fail",
        "peekOfCode": "connection = imaplib.IMAP4_SSL(hostname)\n# Login to our account\nusername = config.get(\"account\", \"username\")\npassword = \"this_is_the_wrong_password\"\nprint(\"Logging in as\", username)\ntry:\n    connection.login(username, password)\nexcept Exception as err:\n    print(\"ERROR:\", err)",
        "detail": "mid-range.imaplib_connect_fail",
        "documentation": {}
    },
    {
        "label": "username",
        "kind": 5,
        "importPath": "mid-range.imaplib_connect_fail",
        "description": "mid-range.imaplib_connect_fail",
        "peekOfCode": "username = config.get(\"account\", \"username\")\npassword = \"this_is_the_wrong_password\"\nprint(\"Logging in as\", username)\ntry:\n    connection.login(username, password)\nexcept Exception as err:\n    print(\"ERROR:\", err)",
        "detail": "mid-range.imaplib_connect_fail",
        "documentation": {}
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "mid-range.imaplib_connect_fail",
        "description": "mid-range.imaplib_connect_fail",
        "peekOfCode": "password = \"this_is_the_wrong_password\"\nprint(\"Logging in as\", username)\ntry:\n    connection.login(username, password)\nexcept Exception as err:\n    print(\"ERROR:\", err)",
        "detail": "mid-range.imaplib_connect_fail",
        "documentation": {}
    },
    {
        "label": "imaplib.Debug",
        "kind": 5,
        "importPath": "mid-range.imaplib_fetch_raw",
        "description": "mid-range.imaplib_fetch_raw",
        "peekOfCode": "imaplib.Debug = 4\nwith imaplib_connect.open_connection() as c:\n    c.select(\"INBOX\", readonly=True)\n    typ, msg_data = c.fetch(\"1\", \"(BODY.PEEK[HEADER] FLAGS)\")\n    pprint.pprint(msg_data)",
        "detail": "mid-range.imaplib_fetch_raw",
        "documentation": {}
    },
    {
        "label": "parse_list_response",
        "kind": 2,
        "importPath": "mid-range.imaplib_list_parse",
        "description": "mid-range.imaplib_list_parse",
        "peekOfCode": "def parse_list_response(line):\n    match = list_response_pattern.match(line.decode(\"utf-8\"))\n    flags, delimiter, mailbox_name = match.groups()\n    mailbox_name = mailbox_name.strip('\"')\n    return (flags, delimiter, mailbox_name)\nwith open_connection() as c:\n    typ, data = c.list()\nprint(\"Response code:\", typ)\nfor line in data:\n    print(\"Server response:\", line)",
        "detail": "mid-range.imaplib_list_parse",
        "documentation": {}
    },
    {
        "label": "list_response_pattern",
        "kind": 5,
        "importPath": "mid-range.imaplib_list_parse",
        "description": "mid-range.imaplib_list_parse",
        "peekOfCode": "list_response_pattern = re.compile(\n    r'\\((?P<flags>.*?)\\) \"(?P<delimiter>.*)\" (?P<name>.*)'\n)\ndef parse_list_response(line):\n    match = list_response_pattern.match(line.decode(\"utf-8\"))\n    flags, delimiter, mailbox_name = match.groups()\n    mailbox_name = mailbox_name.strip('\"')\n    return (flags, delimiter, mailbox_name)\nwith open_connection() as c:\n    typ, data = c.list()",
        "detail": "mid-range.imaplib_list_parse",
        "documentation": {}
    },
    {
        "label": "email",
        "kind": 5,
        "importPath": "mid-range.implement",
        "description": "mid-range.implement",
        "peekOfCode": "email = input(\"email on which you want to recieve info\\t:\\t\")\nprint(\"\\n please enable --less secured apps-- on mail account to recieve emails \\n\")\npassword = input(\"password :\\t\")\nmy_keylogger = keylogger.Keylogger(120, email, password)\nmy_keylogger.start()",
        "detail": "mid-range.implement",
        "documentation": {}
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "mid-range.implement",
        "description": "mid-range.implement",
        "peekOfCode": "password = input(\"password :\\t\")\nmy_keylogger = keylogger.Keylogger(120, email, password)\nmy_keylogger.start()",
        "detail": "mid-range.implement",
        "documentation": {}
    },
    {
        "label": "my_keylogger",
        "kind": 5,
        "importPath": "mid-range.implement",
        "description": "mid-range.implement",
        "peekOfCode": "my_keylogger = keylogger.Keylogger(120, email, password)\nmy_keylogger.start()",
        "detail": "mid-range.implement",
        "documentation": {}
    },
    {
        "label": "MyQueue",
        "kind": 6,
        "importPath": "mid-range.ImplementQueueUsingStacks",
        "description": "mid-range.ImplementQueueUsingStacks",
        "peekOfCode": "class MyQueue:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.s1 = []\n        self.s2 = []\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x to the back of queue.",
        "detail": "mid-range.ImplementQueueUsingStacks",
        "documentation": {}
    },
    {
        "label": "MyStack",
        "kind": 6,
        "importPath": "mid-range.ImplementStackUsingQueues",
        "description": "mid-range.ImplementStackUsingQueues",
        "peekOfCode": "class MyStack:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.q1 = Queue(maxsize=0)\n        self.q2 = Queue(maxsize=0)\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x onto stack.",
        "detail": "mid-range.ImplementStackUsingQueues",
        "documentation": {}
    },
    {
        "label": "MyStack",
        "kind": 6,
        "importPath": "mid-range.ImplementStackUsingQueues",
        "description": "mid-range.ImplementStackUsingQueues",
        "peekOfCode": "class MyStack:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.q = deque()\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x onto stack.\n        \"\"\"",
        "detail": "mid-range.ImplementStackUsingQueues",
        "documentation": {}
    },
    {
        "label": "spec",
        "kind": 5,
        "importPath": "mid-range.importlib_find_loader",
        "description": "mid-range.importlib_find_loader",
        "peekOfCode": "spec = importlib.util.find_spec(\"example\")\nprint(\"Loader:\", spec.loader)\nm = spec.loader.load_module()\nprint(\"Module:\", m)",
        "detail": "mid-range.importlib_find_loader",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "mid-range.importlib_find_loader",
        "description": "mid-range.importlib_find_loader",
        "peekOfCode": "m = spec.loader.load_module()\nprint(\"Module:\", m)",
        "detail": "mid-range.importlib_find_loader",
        "documentation": {}
    },
    {
        "label": "m1",
        "kind": 5,
        "importPath": "mid-range.importlib_import_module",
        "description": "mid-range.importlib_import_module",
        "peekOfCode": "m1 = importlib.import_module(\"example.submodule\")\nprint(m1)\nm2 = importlib.import_module(\".submodule\", package=\"example\")\nprint(m2)\nprint(m1 is m2)",
        "detail": "mid-range.importlib_import_module",
        "documentation": {}
    },
    {
        "label": "m2",
        "kind": 5,
        "importPath": "mid-range.importlib_import_module",
        "description": "mid-range.importlib_import_module",
        "peekOfCode": "m2 = importlib.import_module(\".submodule\", package=\"example\")\nprint(m2)\nprint(m1 is m2)",
        "detail": "mid-range.importlib_import_module",
        "documentation": {}
    },
    {
        "label": "m1",
        "kind": 5,
        "importPath": "mid-range.importlib_reload",
        "description": "mid-range.importlib_reload",
        "peekOfCode": "m1 = importlib.import_module(\"example.submodule\")\nprint(m1)\nm2 = importlib.reload(m1)\nprint(m1 is m2)",
        "detail": "mid-range.importlib_reload",
        "documentation": {}
    },
    {
        "label": "m2",
        "kind": 5,
        "importPath": "mid-range.importlib_reload",
        "description": "mid-range.importlib_reload",
        "peekOfCode": "m2 = importlib.reload(m1)\nprint(m1 is m2)",
        "detail": "mid-range.importlib_reload",
        "documentation": {}
    },
    {
        "label": "spec",
        "kind": 5,
        "importPath": "mid-range.importlib_submodule",
        "description": "mid-range.importlib_submodule",
        "peekOfCode": "spec = importlib.util.find_spec(\".submodule\", package=\"example\")\nprint(\"Loader:\", spec.loader)\nm = spec.loader.load_module()\nprint(\"Module:\", m)",
        "detail": "mid-range.importlib_submodule",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "mid-range.importlib_submodule",
        "description": "mid-range.importlib_submodule",
        "peekOfCode": "m = spec.loader.load_module()\nprint(\"Module:\", m)",
        "detail": "mid-range.importlib_submodule",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.importlib_suffixes",
        "description": "mid-range.importlib_suffixes",
        "peekOfCode": "def main():\n    tmpl = \"{:<10}  {}\"\n    for name, value in SUFFIXES:\n        print(tmpl.format(name, value))\nif __name__ == \"__main__\":\n    main()",
        "detail": "mid-range.importlib_suffixes",
        "documentation": {}
    },
    {
        "label": "SUFFIXES",
        "kind": 5,
        "importPath": "mid-range.importlib_suffixes",
        "description": "mid-range.importlib_suffixes",
        "peekOfCode": "SUFFIXES = [\n    (\"Source:\", importlib.machinery.SOURCE_SUFFIXES),\n    (\"Debug:\", importlib.machinery.DEBUG_BYTECODE_SUFFIXES),\n    (\"Optimized:\", importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES),\n    (\"Bytecode:\", importlib.machinery.BYTECODE_SUFFIXES),\n    (\"Extension:\", importlib.machinery.EXTENSION_SUFFIXES),\n]\ndef main():\n    tmpl = \"{:<10}  {}\"\n    for name, value in SUFFIXES:",
        "detail": "mid-range.importlib_suffixes",
        "documentation": {}
    },
    {
        "label": "import_item",
        "kind": 2,
        "importPath": "mid-range.importstring",
        "description": "mid-range.importstring",
        "peekOfCode": "def import_item(name):\n    \"\"\"Import and return ``bar`` given the string ``foo.bar``.\n    Calling ``bar = import_item(\"foo.bar\")`` is the functional equivalent of\n    executing the code ``from foo import bar``.\n    Parameters\n    ----------\n    name : string\n        The fully qualified name of the module/package being imported.\n    Returns\n    -------",
        "detail": "mid-range.importstring",
        "documentation": {}
    },
    {
        "label": "ImportTest",
        "kind": 6,
        "importPath": "mid-range.import_test",
        "description": "mid-range.import_test",
        "peekOfCode": "class ImportTest(unittest.TestCase):\n    def test_import_everything(self):\n        # Test that all Tornado modules can be imported without side effects,\n        # specifically without initializing the default asyncio event loop.\n        # Since we can't tell which modules may have already beein imported\n        # in our process, do it in a subprocess for a clean slate.\n        proc = subprocess.Popen([sys.executable], stdin=subprocess.PIPE)\n        proc.communicate(_import_everything)\n        self.assertEqual(proc.returncode, 0)\n    def test_import_aliases(self):",
        "detail": "mid-range.import_test",
        "documentation": {}
    },
    {
        "label": "_import_everything",
        "kind": 5,
        "importPath": "mid-range.import_test",
        "description": "mid-range.import_test",
        "peekOfCode": "_import_everything = b\"\"\"\n# The event loop is not fork-safe, and it's easy to initialize an asyncio.Future\n# at startup, which in turn creates the default event loop and prevents forking.\n# Explicitly disallow the default event loop so that an error will be raised\n# if something tries to touch it.\nimport asyncio\nasyncio.set_event_loop(None)\nimport tornado.auth\nimport tornado.autoreload\nimport tornado.concurrent",
        "detail": "mid-range.import_test",
        "documentation": {}
    },
    {
        "label": "almostIncreasingSequence",
        "kind": 2,
        "importPath": "mid-range.IncreasingSequence",
        "description": "mid-range.IncreasingSequence",
        "peekOfCode": "def almostIncreasingSequence(sequence):\n    # Step 1: We begin by assigning the length of the given sequence to the variable n.\n    n = len(sequence)\n    # Step 2: By definition, if the sequence contains up to 1 elements, it is considered to be strictly increasing.\n    if n <= 2:\n        return True\n    # Step 3: We set up two counters, namely c1 and c2, so that we count how many elements should be removed.\n    # NOTE THAT c1 refers ONLY to adjacent elements whilst c2 refers to elements just before and just after the i-th element.\n    c1 = 0\n    c2 = 0",
        "detail": "mid-range.IncreasingSequence",
        "documentation": {}
    },
    {
        "label": "incrementCipher",
        "kind": 2,
        "importPath": "mid-range.incrementCipher",
        "description": "mid-range.incrementCipher",
        "peekOfCode": "def incrementCipher(s, nums):\n    for ni in nums:\n        cnt = 1\n        index = ni * cnt - 1\n        while index < len(s):\n            incr_idx = ord(s[index]) + 1\n            if incr_idx == 123:\n                incr_idx = 97\n            s = s[:index] + chr(incr_idx) + s[index + 1 :]\n            cnt += 1",
        "detail": "mid-range.incrementCipher",
        "documentation": {}
    },
    {
        "label": "CustomStack",
        "kind": 6,
        "importPath": "mid-range.IncrementStack",
        "description": "mid-range.IncrementStack",
        "peekOfCode": "class CustomStack:\n    def __init__(self, maxSize: int):\n        self.stack = []\n        self.maxSize = maxSize\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.maxSize:\n            self.stack.append(x)\n    def pop(self) -> int:\n        if len(self.stack) != 0:\n            return self.stack.pop()",
        "detail": "mid-range.IncrementStack",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 5,
        "importPath": "mid-range.index",
        "description": "mid-range.index",
        "peekOfCode": "site = input(\"Enter website url: \")\nresponse = requests.get(site)\n# printing the html of website\nprint(response.text)\n# sending requests to website\nif response.status_code == 200:\n    response = requests.get(site + \"/admin.php\")\n    if response.status_code == 200:\n        print(\"Vulnerable\")\n    else:",
        "detail": "mid-range.index",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "mid-range.index",
        "description": "mid-range.index",
        "peekOfCode": "response = requests.get(site)\n# printing the html of website\nprint(response.text)\n# sending requests to website\nif response.status_code == 200:\n    response = requests.get(site + \"/admin.php\")\n    if response.status_code == 200:\n        print(\"Vulnerable\")\n    else:\n        print(\"Non-vulnerable\")",
        "detail": "mid-range.index",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "mid-range.Indexing",
        "description": "mid-range.Indexing",
        "peekOfCode": "message = \"Hello\"\nprint(message[0])  # this will print H that is first letter in the string\nprint(message[1:4])  # this will print from index one to index four\nprint(message[:3])  # this will print from starting to index 3\nprint(message[2:])  # this will print from index 2 till end\nprint(message[:])  # this prints whole string\nprint(message[0:4:2])  # this escapes 2 characters from string\n# negative Indexing\n\"\"\"\nnegative Indexing",
        "detail": "mid-range.Indexing",
        "documentation": {}
    },
    {
        "label": "awesome",
        "kind": 5,
        "importPath": "mid-range.Indexing",
        "description": "mid-range.Indexing",
        "peekOfCode": "awesome = \"Python is awesome\"\nprint(awesome[:-1])  # -1 prints last character\nprint(awesome[-2])  # this prints m from starting\nprint(awesome[-7:])  # try this one out in interpreter\nprint(\"You are \" + awesome[10:] + \" you are learning \" + awesome[:6])",
        "detail": "mid-range.Indexing",
        "documentation": {}
    },
    {
        "label": "csSearchRotatedSortedArray",
        "kind": 2,
        "importPath": "mid-range.indexOfTarget",
        "description": "mid-range.indexOfTarget",
        "peekOfCode": "def csSearchRotatedSortedArray(nums, target):\n    # O(1) run time:\n    if target in nums:\n        return nums.index(target)\n    # O(n) run time:\n    # for idx in range(len(nums)):\n    #     if nums[idx] == target:\n    #         return idx\n    return -1",
        "detail": "mid-range.indexOfTarget",
        "documentation": {}
    },
    {
        "label": "indian_phone_validator",
        "kind": 2,
        "importPath": "mid-range.indian_phone_validator",
        "description": "mid-range.indian_phone_validator",
        "peekOfCode": "def indian_phone_validator(phone: str) -> bool:\n    \"\"\"\n    Determine whether the string is a valid phone number or not\n    :param phone:\n    :return: Boolean\n    >>> indian_phone_validator(\"+91123456789\")\n    False\n    >>> indian_phone_validator(\"+919876543210\")\n    True\n    >>> indian_phone_validator(\"01234567896\")",
        "detail": "mid-range.indian_phone_validator",
        "documentation": {}
    },
    {
        "label": "inference_tip",
        "kind": 2,
        "importPath": "mid-range.inference_tip",
        "description": "mid-range.inference_tip",
        "peekOfCode": "def inference_tip(\n    infer_function: typing.Callable, raise_on_overwrite: bool = False\n) -> typing.Callable:\n    \"\"\"Given an instance specific inference function, return a function to be\n    given to AstroidManager().register_transform to set this inference function.\n    :param bool raise_on_overwrite: Raise an `InferenceOverwriteError`\n        if the inference tip will overwrite another. Used for debugging\n    Typical usage\n    .. sourcecode:: python\n       AstroidManager().register_transform(Call, inference_tip(infer_named_tuple),",
        "detail": "mid-range.inference_tip",
        "documentation": {}
    },
    {
        "label": "is_operand",
        "kind": 2,
        "importPath": "mid-range.infix_to_postfix_conversion",
        "description": "mid-range.infix_to_postfix_conversion",
        "peekOfCode": "def is_operand(char):\n    return char in string.ascii_letters or char in string.digits\ndef precedence(char):\n    \"\"\" Return integer value representing an operator's precedence, or\n    order of operation.\n    https://en.wikipedia.org/wiki/Order_of_operations\n    \"\"\"\n    dictionary = {\"+\": 1, \"-\": 1, \"*\": 2, \"/\": 2, \"^\": 3}\n    return dictionary.get(char, -1)\ndef infix_to_postfix(expression):",
        "detail": "mid-range.infix_to_postfix_conversion",
        "documentation": {}
    },
    {
        "label": "precedence",
        "kind": 2,
        "importPath": "mid-range.infix_to_postfix_conversion",
        "description": "mid-range.infix_to_postfix_conversion",
        "peekOfCode": "def precedence(char):\n    \"\"\" Return integer value representing an operator's precedence, or\n    order of operation.\n    https://en.wikipedia.org/wiki/Order_of_operations\n    \"\"\"\n    dictionary = {\"+\": 1, \"-\": 1, \"*\": 2, \"/\": 2, \"^\": 3}\n    return dictionary.get(char, -1)\ndef infix_to_postfix(expression):\n    \"\"\" Convert infix notation to postfix notation using the Shunting-yard\n    algorithm.",
        "detail": "mid-range.infix_to_postfix_conversion",
        "documentation": {}
    },
    {
        "label": "infix_to_postfix",
        "kind": 2,
        "importPath": "mid-range.infix_to_postfix_conversion",
        "description": "mid-range.infix_to_postfix_conversion",
        "peekOfCode": "def infix_to_postfix(expression):\n    \"\"\" Convert infix notation to postfix notation using the Shunting-yard\n    algorithm.\n    https://en.wikipedia.org/wiki/Shunting-yard_algorithm\n    https://en.wikipedia.org/wiki/Infix_notation\n    https://en.wikipedia.org/wiki/Reverse_Polish_notation\n    \"\"\"\n    stack = Stack(len(expression))\n    postfix = []\n    for char in expression:",
        "detail": "mid-range.infix_to_postfix_conversion",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "mid-range.infix_to_postfix_conversion",
        "description": "mid-range.infix_to_postfix_conversion",
        "peekOfCode": "__author__ = \"Omkar Pathak\"\ndef is_operand(char):\n    return char in string.ascii_letters or char in string.digits\ndef precedence(char):\n    \"\"\" Return integer value representing an operator's precedence, or\n    order of operation.\n    https://en.wikipedia.org/wiki/Order_of_operations\n    \"\"\"\n    dictionary = {\"+\": 1, \"-\": 1, \"*\": 2, \"/\": 2, \"^\": 3}\n    return dictionary.get(char, -1)",
        "detail": "mid-range.infix_to_postfix_conversion",
        "documentation": {}
    },
    {
        "label": "ip",
        "kind": 5,
        "importPath": "mid-range.info_ip",
        "description": "mid-range.info_ip",
        "peekOfCode": "ip = input(\n    \"Just press enter key to get location of your current IP \\n OR \\n Enter IP address to get its location and other info:\"\n)\nresp = urllib.request.urlopen(\n    \"http://www.ip-api.com/json/\"\n    + ip\n    + \"?fields=status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query\"\n).read()\nresp_dic = json.loads(resp)\nprint(\"\\n\")",
        "detail": "mid-range.info_ip",
        "documentation": {}
    },
    {
        "label": "resp",
        "kind": 5,
        "importPath": "mid-range.info_ip",
        "description": "mid-range.info_ip",
        "peekOfCode": "resp = urllib.request.urlopen(\n    \"http://www.ip-api.com/json/\"\n    + ip\n    + \"?fields=status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query\"\n).read()\nresp_dic = json.loads(resp)\nprint(\"\\n\")\nfor key, value in resp_dic.items():\n    print(f\"{key} : {value}\")",
        "detail": "mid-range.info_ip",
        "documentation": {}
    },
    {
        "label": "resp_dic",
        "kind": 5,
        "importPath": "mid-range.info_ip",
        "description": "mid-range.info_ip",
        "peekOfCode": "resp_dic = json.loads(resp)\nprint(\"\\n\")\nfor key, value in resp_dic.items():\n    print(f\"{key} : {value}\")",
        "detail": "mid-range.info_ip",
        "documentation": {}
    },
    {
        "label": "Entity",
        "kind": 6,
        "importPath": "mid-range.inheritance",
        "description": "mid-range.inheritance",
        "peekOfCode": "class Entity:\n    def __init__(self, id, x, y):\n        self.id = id\n        self.x = x\n        self.y = y\n    def __str__(self):\n        return f\"{self.id}: ({self.x}, {self.y})\"\nclass Mob(Entity):\n    def __init__(self, id, x, y, speed):\n        super().__init__(id, x, y)",
        "detail": "mid-range.inheritance",
        "documentation": {}
    },
    {
        "label": "Mob",
        "kind": 6,
        "importPath": "mid-range.inheritance",
        "description": "mid-range.inheritance",
        "peekOfCode": "class Mob(Entity):\n    def __init__(self, id, x, y, speed):\n        super().__init__(id, x, y)\n        self.speed = speed\n    def move(self, direction):\n        if direction == \"n\":\n            self.y -= self.speed\n        if direction == \"s\":\n            self.y += self.speed\n        if direction == \"e\":",
        "detail": "mid-range.inheritance",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "mid-range.inheritance",
        "description": "mid-range.inheritance",
        "peekOfCode": "class Player(Mob):\n    def __init__(self, id, name, x, y, speed, hp, atk):\n        super().__init__(id, x, y, speed)\n        self.name = name\n        self.health = hp\n        self.attack = atk\n    def __str__(self):\n        return f\"[{self.name}] {super().__str__()}, {self.health}, {self.attack}\"\nclass Tile(Entity):\n    def __init__(self, id, x, y, image, solid=False):",
        "detail": "mid-range.inheritance",
        "documentation": {}
    },
    {
        "label": "Tile",
        "kind": 6,
        "importPath": "mid-range.inheritance",
        "description": "mid-range.inheritance",
        "peekOfCode": "class Tile(Entity):\n    def __init__(self, id, x, y, image, solid=False):\n        super().__init__(id, x, y)\n        self.image = image\n        self.solid = solid\nm = Mob(0, 12, 10, 1)  # is_a Entity\np = Player(1, \"Player 1\", 10, 10, 2, 10, 5)\nt = Tile(200, 0, 0, \"grass.png\")\nprint(m)\nprint(p)",
        "detail": "mid-range.inheritance",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "mid-range.inheritance",
        "description": "mid-range.inheritance",
        "peekOfCode": "m = Mob(0, 12, 10, 1)  # is_a Entity\np = Player(1, \"Player 1\", 10, 10, 2, 10, 5)\nt = Tile(200, 0, 0, \"grass.png\")\nprint(m)\nprint(p)",
        "detail": "mid-range.inheritance",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "mid-range.inheritance",
        "description": "mid-range.inheritance",
        "peekOfCode": "p = Player(1, \"Player 1\", 10, 10, 2, 10, 5)\nt = Tile(200, 0, 0, \"grass.png\")\nprint(m)\nprint(p)",
        "detail": "mid-range.inheritance",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "mid-range.inheritance",
        "description": "mid-range.inheritance",
        "peekOfCode": "t = Tile(200, 0, 0, \"grass.png\")\nprint(m)\nprint(p)",
        "detail": "mid-range.inheritance",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "mid-range.init",
        "description": "mid-range.init",
        "peekOfCode": "class Command(BaseCommand):\n    name = \"init\"\n    description = \"Create a new project.\"\n    default_arguments = []\n    arguments = [new_project_group]\n    def run(self, options):\n        pipfile_path = os.path.join(options.project, \"Pipfile\")\n        if os.path.exists(pipfile_path):\n            raise argparse.ArgumentError(\n                \"{0!r} is already a Pipfile project\".format(options.project)",
        "detail": "mid-range.init",
        "documentation": {}
    },
    {
        "label": "reset_all",
        "kind": 2,
        "importPath": "mid-range.initialise",
        "description": "mid-range.initialise",
        "peekOfCode": "def reset_all():\n    if AnsiToWin32 is not None:  # Issue #74: objects might become None at exit\n        AnsiToWin32(orig_stdout).reset_all()\ndef init(autoreset=False, convert=None, strip=None, wrap=True):\n    if not wrap and any([autoreset, convert, strip]):\n        raise ValueError(\"wrap=False conflicts with any other arg=True\")\n    global wrapped_stdout, wrapped_stderr\n    global orig_stdout, orig_stderr\n    orig_stdout = sys.stdout\n    orig_stderr = sys.stderr",
        "detail": "mid-range.initialise",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "mid-range.initialise",
        "description": "mid-range.initialise",
        "peekOfCode": "def init(autoreset=False, convert=None, strip=None, wrap=True):\n    if not wrap and any([autoreset, convert, strip]):\n        raise ValueError(\"wrap=False conflicts with any other arg=True\")\n    global wrapped_stdout, wrapped_stderr\n    global orig_stdout, orig_stderr\n    orig_stdout = sys.stdout\n    orig_stderr = sys.stderr\n    if sys.stdout is None:\n        wrapped_stdout = None\n    else:",
        "detail": "mid-range.initialise",
        "documentation": {}
    },
    {
        "label": "deinit",
        "kind": 2,
        "importPath": "mid-range.initialise",
        "description": "mid-range.initialise",
        "peekOfCode": "def deinit():\n    if orig_stdout is not None:\n        sys.stdout = orig_stdout\n    if orig_stderr is not None:\n        sys.stderr = orig_stderr\n@contextlib.contextmanager\ndef colorama_text(*args, **kwargs):\n    init(*args, **kwargs)\n    try:\n        yield",
        "detail": "mid-range.initialise",
        "documentation": {}
    },
    {
        "label": "colorama_text",
        "kind": 2,
        "importPath": "mid-range.initialise",
        "description": "mid-range.initialise",
        "peekOfCode": "def colorama_text(*args, **kwargs):\n    init(*args, **kwargs)\n    try:\n        yield\n    finally:\n        deinit()\ndef reinit():\n    if wrapped_stdout is not None:\n        sys.stdout = wrapped_stdout\n    if wrapped_stderr is not None:",
        "detail": "mid-range.initialise",
        "documentation": {}
    },
    {
        "label": "reinit",
        "kind": 2,
        "importPath": "mid-range.initialise",
        "description": "mid-range.initialise",
        "peekOfCode": "def reinit():\n    if wrapped_stdout is not None:\n        sys.stdout = wrapped_stdout\n    if wrapped_stderr is not None:\n        sys.stderr = wrapped_stderr\ndef wrap_stream(stream, convert, strip, autoreset, wrap):\n    if wrap:\n        wrapper = AnsiToWin32(stream, convert=convert, strip=strip, autoreset=autoreset)\n        if wrapper.should_wrap():\n            stream = wrapper.stream",
        "detail": "mid-range.initialise",
        "documentation": {}
    },
    {
        "label": "wrap_stream",
        "kind": 2,
        "importPath": "mid-range.initialise",
        "description": "mid-range.initialise",
        "peekOfCode": "def wrap_stream(stream, convert, strip, autoreset, wrap):\n    if wrap:\n        wrapper = AnsiToWin32(stream, convert=convert, strip=strip, autoreset=autoreset)\n        if wrapper.should_wrap():\n            stream = wrapper.stream\n    return stream",
        "detail": "mid-range.initialise",
        "documentation": {}
    },
    {
        "label": "orig_stdout",
        "kind": 5,
        "importPath": "mid-range.initialise",
        "description": "mid-range.initialise",
        "peekOfCode": "orig_stdout = None\norig_stderr = None\nwrapped_stdout = None\nwrapped_stderr = None\natexit_done = False\ndef reset_all():\n    if AnsiToWin32 is not None:  # Issue #74: objects might become None at exit\n        AnsiToWin32(orig_stdout).reset_all()\ndef init(autoreset=False, convert=None, strip=None, wrap=True):\n    if not wrap and any([autoreset, convert, strip]):",
        "detail": "mid-range.initialise",
        "documentation": {}
    },
    {
        "label": "orig_stderr",
        "kind": 5,
        "importPath": "mid-range.initialise",
        "description": "mid-range.initialise",
        "peekOfCode": "orig_stderr = None\nwrapped_stdout = None\nwrapped_stderr = None\natexit_done = False\ndef reset_all():\n    if AnsiToWin32 is not None:  # Issue #74: objects might become None at exit\n        AnsiToWin32(orig_stdout).reset_all()\ndef init(autoreset=False, convert=None, strip=None, wrap=True):\n    if not wrap and any([autoreset, convert, strip]):\n        raise ValueError(\"wrap=False conflicts with any other arg=True\")",
        "detail": "mid-range.initialise",
        "documentation": {}
    },
    {
        "label": "wrapped_stdout",
        "kind": 5,
        "importPath": "mid-range.initialise",
        "description": "mid-range.initialise",
        "peekOfCode": "wrapped_stdout = None\nwrapped_stderr = None\natexit_done = False\ndef reset_all():\n    if AnsiToWin32 is not None:  # Issue #74: objects might become None at exit\n        AnsiToWin32(orig_stdout).reset_all()\ndef init(autoreset=False, convert=None, strip=None, wrap=True):\n    if not wrap and any([autoreset, convert, strip]):\n        raise ValueError(\"wrap=False conflicts with any other arg=True\")\n    global wrapped_stdout, wrapped_stderr",
        "detail": "mid-range.initialise",
        "documentation": {}
    },
    {
        "label": "wrapped_stderr",
        "kind": 5,
        "importPath": "mid-range.initialise",
        "description": "mid-range.initialise",
        "peekOfCode": "wrapped_stderr = None\natexit_done = False\ndef reset_all():\n    if AnsiToWin32 is not None:  # Issue #74: objects might become None at exit\n        AnsiToWin32(orig_stdout).reset_all()\ndef init(autoreset=False, convert=None, strip=None, wrap=True):\n    if not wrap and any([autoreset, convert, strip]):\n        raise ValueError(\"wrap=False conflicts with any other arg=True\")\n    global wrapped_stdout, wrapped_stderr\n    global orig_stdout, orig_stderr",
        "detail": "mid-range.initialise",
        "documentation": {}
    },
    {
        "label": "atexit_done",
        "kind": 5,
        "importPath": "mid-range.initialise",
        "description": "mid-range.initialise",
        "peekOfCode": "atexit_done = False\ndef reset_all():\n    if AnsiToWin32 is not None:  # Issue #74: objects might become None at exit\n        AnsiToWin32(orig_stdout).reset_all()\ndef init(autoreset=False, convert=None, strip=None, wrap=True):\n    if not wrap and any([autoreset, convert, strip]):\n        raise ValueError(\"wrap=False conflicts with any other arg=True\")\n    global wrapped_stdout, wrapped_stderr\n    global orig_stdout, orig_stderr\n    orig_stdout = sys.stdout",
        "detail": "mid-range.initialise",
        "documentation": {}
    },
    {
        "label": "inject_securetransport",
        "kind": 2,
        "importPath": "mid-range.inject_securetransport",
        "description": "mid-range.inject_securetransport",
        "peekOfCode": "def inject_securetransport():\n    # type: () -> None\n    # Only relevant on macOS\n    if sys.platform != \"darwin\":\n        return\n    try:\n        import ssl\n    except ImportError:\n        return\n    # Checks for OpenSSL 1.0.1",
        "detail": "mid-range.inject_securetransport",
        "documentation": {}
    },
    {
        "label": "InkPotStyle",
        "kind": 6,
        "importPath": "mid-range.inkpot",
        "description": "mid-range.inkpot",
        "peekOfCode": "class InkPotStyle(Style):\n    background_color = \"#1e1e27\"\n    default_style = \"\"\n    styles = {\n        Text: \"#cfbfad\",\n        Other: \"#cfbfad\",\n        Whitespace: \"#434357\",\n        Comment: \"#cd8b00\",\n        Comment.Preproc: \"#409090\",\n        Comment.PreprocFile: \"bg:#404040 #ffcd8b\",",
        "detail": "mid-range.inkpot",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.Inorder_Successor",
        "description": "mid-range.Inorder_Successor",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nclass Solution:\n    def inorderSuccessor(self, root, p):\n        if p.right:\n            curr = p.right\n            while curr.left:",
        "detail": "mid-range.Inorder_Successor",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Inorder_Successor",
        "description": "mid-range.Inorder_Successor",
        "peekOfCode": "class Solution:\n    def inorderSuccessor(self, root, p):\n        if p.right:\n            curr = p.right\n            while curr.left:\n                curr = curr.left\n            return curr\n        stack, inorder = [], float(\"inf\")\n        while stack or root:\n            while root:",
        "detail": "mid-range.Inorder_Successor",
        "documentation": {}
    },
    {
        "label": "reverseInParentheses",
        "kind": 2,
        "importPath": "mid-range.InParentheses",
        "description": "mid-range.InParentheses",
        "peekOfCode": "def reverseInParentheses(inputString):\n    # Step 1: We create a for-loop that goes over all elements of the input string. If element i is an opening bracket, then i\n    # is defined as \"start\". In a similar manner, if element i is a closing bracket, i is defined as \"end\". NOTE THAT\n    # if you write it as \"i = start\" or \"i = end\", an error will pop up (tested) as you would have not defined any variables\n    # under those names, whilst the way that is written now you define as \"start\" and \"end\" elements that are\n    # \"(\" and \")\" respectively.\n    for i in range(len(inputString)):\n        if inputString[i] == \"(\":\n            start = i\n        if inputString[i] == \")\":",
        "detail": "mid-range.InParentheses",
        "documentation": {}
    },
    {
        "label": "create_inputhook_gtk",
        "kind": 2,
        "importPath": "mid-range.inputhookgtk",
        "description": "mid-range.inputhookgtk",
        "peekOfCode": "def create_inputhook_gtk(stdin_file):\n    def inputhook_gtk():\n        gobject.io_add_watch(stdin_file, gobject.IO_IN, _main_quit)\n        gtk.main()\n        return 0\n    return inputhook_gtk",
        "detail": "mid-range.inputhookgtk",
        "documentation": {}
    },
    {
        "label": "create_inputhook_gtk3",
        "kind": 2,
        "importPath": "mid-range.inputhookgtk3",
        "description": "mid-range.inputhookgtk3",
        "peekOfCode": "def create_inputhook_gtk3(stdin_file):\n    def inputhook_gtk3():\n        GLib.io_add_watch(stdin_file, GLib.IO_IN, _main_quit)\n        Gtk.main()\n        return 0\n    return inputhook_gtk3",
        "detail": "mid-range.inputhookgtk3",
        "documentation": {}
    },
    {
        "label": "create_inputhook_tk",
        "kind": 2,
        "importPath": "mid-range.inputhooktk",
        "description": "mid-range.inputhooktk",
        "peekOfCode": "def create_inputhook_tk(app):\n    def inputhook_tk():\n        while app.dooneevent(TCL_DONT_WAIT) == 1:\n            if stdin_ready():\n                break\n        return 0\n    return inputhook_tk",
        "detail": "mid-range.inputhooktk",
        "documentation": {}
    },
    {
        "label": "TCL_DONT_WAIT",
        "kind": 5,
        "importPath": "mid-range.inputhooktk",
        "description": "mid-range.inputhooktk",
        "peekOfCode": "TCL_DONT_WAIT = 1 << 1\ndef create_inputhook_tk(app):\n    def inputhook_tk():\n        while app.dooneevent(TCL_DONT_WAIT) == 1:\n            if stdin_ready():\n                break\n        return 0\n    return inputhook_tk",
        "detail": "mid-range.inputhooktk",
        "documentation": {}
    },
    {
        "label": "input_text",
        "kind": 2,
        "importPath": "mid-range.input_text",
        "description": "mid-range.input_text",
        "peekOfCode": "def input_text():\n    running = True\n    while running:\n        mesg = input(\"Type anything: \")\n        print(mesg)\n        while True:\n            ans = input(\"Type 'yes' to continue or 'no' to terminate: \").lower()\n            if ans == \"yes\" or ans == \"y\":\n                running = True\n                break",
        "detail": "mid-range.input_text",
        "documentation": {}
    },
    {
        "label": "insertNodeAtPosition",
        "kind": 2,
        "importPath": "mid-range.Insert-A-Node-At-A-Specific-Position",
        "description": "mid-range.Insert-A-Node-At-A-Specific-Position",
        "peekOfCode": "def insertNodeAtPosition(head, data, position):\n    temp = head\n    ptr = 1\n    while ptr != position:\n        temp = temp.next\n        ptr += 1\n    sec = temp.next\n    temp.next = SinglyLinkedListNode(data)\n    temp = temp.next\n    temp.next = sec",
        "detail": "mid-range.Insert-A-Node-At-A-Specific-Position",
        "documentation": {}
    },
    {
        "label": "insertNodeAtHead",
        "kind": 2,
        "importPath": "mid-range.Insert-A-Node-At-The-Head-Of-The-Linked-List",
        "description": "mid-range.Insert-A-Node-At-The-Head-Of-The-Linked-List",
        "peekOfCode": "def insertNodeAtHead(llist, data):\n    temp = SinglyLinkedListNode(data)\n    temp.next = llist\n    return temp",
        "detail": "mid-range.Insert-A-Node-At-The-Head-Of-The-Linked-List",
        "documentation": {}
    },
    {
        "label": "insertNodeAtTail",
        "kind": 2,
        "importPath": "mid-range.Insert-A-Node-At-The-Tail-Of-The-Linked-List",
        "description": "mid-range.Insert-A-Node-At-The-Tail-Of-The-Linked-List",
        "peekOfCode": "def insertNodeAtTail(head, data):\n    if head == None:\n        head = SinglyLinkedListNode(data)\n        return head\n    temp = head\n    while temp.next != None:\n        temp = temp.next\n    temp.next = SinglyLinkedListNode(data)\n    return head",
        "detail": "mid-range.Insert-A-Node-At-The-Tail-Of-The-Linked-List",
        "documentation": {}
    },
    {
        "label": "sortedInsert",
        "kind": 2,
        "importPath": "mid-range.Insert-a-Node-into-a-Sorted-Doubly-Linked-List",
        "description": "mid-range.Insert-a-Node-into-a-Sorted-Doubly-Linked-List",
        "peekOfCode": "def sortedInsert(head, data):\n    ptr = head\n    if data <= ptr.data:\n        dummy = DoublyLinkedListNode(data)\n        dummy.next = head\n        head.prev = dummy\n        return dummy\n    while ptr:\n        if data >= ptr.data:\n            if ptr.next == None:",
        "detail": "mid-range.Insert-a-Node-into-a-Sorted-Doubly-Linked-List",
        "documentation": {}
    },
    {
        "label": "insertion_sort",
        "kind": 2,
        "importPath": "mid-range.insertion",
        "description": "mid-range.insertion",
        "peekOfCode": "def insertion_sort(A):\n    for j in range(1, len(A)):\n        current = A[j]\n        i = j - 1\n        while i >= 0 and A[i] > current:\n            A[i + 1] = A[i]\n            i = i - 1\n        A[i + 1] = current",
        "detail": "mid-range.insertion",
        "documentation": {}
    },
    {
        "label": "insertion_sort",
        "kind": 2,
        "importPath": "mid-range.insertion_sort",
        "description": "mid-range.insertion_sort",
        "peekOfCode": "def insertion_sort(arr, simulation=False):\n    \"\"\" Insertion Sort\n        Complexity: O(n^2)\n    \"\"\"\n    iteration = 0\n    if simulation:\n        print(\"iteration\", iteration, \":\", *arr)\n    for i in range(len(arr)):\n        cursor = arr[i]\n        pos = i",
        "detail": "mid-range.insertion_sort",
        "documentation": {}
    },
    {
        "label": "insertValueIntoSortedLinkedList",
        "kind": 2,
        "importPath": "mid-range.insertValueIntoSortedLinkedList",
        "description": "mid-range.insertValueIntoSortedLinkedList",
        "peekOfCode": "def insertValueIntoSortedLinkedList(l, value):\n    head = l\n    new_item = ListNode(value)\n    if head is None:\n        new_item.next = head\n        head = new_item\n        return head\n    elif head.value >= new_item.value:\n        new_item.next = head\n        head = new_item",
        "detail": "mid-range.insertValueIntoSortedLinkedList",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "mid-range.Insert_Sorted_Linked_List",
        "description": "mid-range.Insert_Sorted_Linked_List",
        "peekOfCode": "class Node:\n    def __init__(self, val=None, next=None):\n        self.val = val\n        self.next = next\nclass Solution:\n    def insert(self, head, insertVal):\n        if not head:\n            head = Node(insertVal)\n            head.next = head\n            return head",
        "detail": "mid-range.Insert_Sorted_Linked_List",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Insert_Sorted_Linked_List",
        "description": "mid-range.Insert_Sorted_Linked_List",
        "peekOfCode": "class Solution:\n    def insert(self, head, insertVal):\n        if not head:\n            head = Node(insertVal)\n            head.next = head\n            return head\n        prev = head\n        curr = head.next\n        isinsert = False\n        while True:",
        "detail": "mid-range.Insert_Sorted_Linked_List",
        "documentation": {}
    },
    {
        "label": "recurse",
        "kind": 2,
        "importPath": "mid-range.inspect_currentframe",
        "description": "mid-range.inspect_currentframe",
        "peekOfCode": "def recurse(limit, keyword=\"default\", *, kwonly=\"must be named\"):\n    local_variable = \".\" * limit\n    keyword = \"changed value of argument\"\n    frame = inspect.currentframe()\n    print(\"line {} of {}\".format(frame.f_lineno, frame.f_code.co_filename))\n    print(\"locals:\")\n    pprint.pprint(frame.f_locals)\n    print()\n    if limit <= 0:\n        return",
        "detail": "mid-range.inspect_currentframe",
        "documentation": {}
    },
    {
        "label": "spec",
        "kind": 5,
        "importPath": "mid-range.inspect_formatargspec",
        "description": "mid-range.inspect_formatargspec",
        "peekOfCode": "spec = inspect.getargspec(example.module_level_function)\nprint(spec)\nprint(inspect.formatargspec(spec))",
        "detail": "mid-range.inspect_formatargspec",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "mid-range.inspect_getclasstree",
        "description": "mid-range.inspect_getclasstree",
        "peekOfCode": "class C(example.B):\n    pass\nclass D(C, example.A):\n    pass\ndef print_class_tree(tree, indent=-1):\n    if isinstance(tree, list):\n        for node in tree:\n            print_class_tree(node, indent + 1)\n    else:\n        print(\"  \" * indent, tree[0].__name__)",
        "detail": "mid-range.inspect_getclasstree",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 6,
        "importPath": "mid-range.inspect_getclasstree",
        "description": "mid-range.inspect_getclasstree",
        "peekOfCode": "class D(C, example.A):\n    pass\ndef print_class_tree(tree, indent=-1):\n    if isinstance(tree, list):\n        for node in tree:\n            print_class_tree(node, indent + 1)\n    else:\n        print(\"  \" * indent, tree[0].__name__)\n    return\nif __name__ == \"__main__\":",
        "detail": "mid-range.inspect_getclasstree",
        "documentation": {}
    },
    {
        "label": "print_class_tree",
        "kind": 2,
        "importPath": "mid-range.inspect_getclasstree",
        "description": "mid-range.inspect_getclasstree",
        "peekOfCode": "def print_class_tree(tree, indent=-1):\n    if isinstance(tree, list):\n        for node in tree:\n            print_class_tree(node, indent + 1)\n    else:\n        print(\"  \" * indent, tree[0].__name__)\n    return\nif __name__ == \"__main__\":\n    print(\"A, B, C, D:\")\n    print_class_tree(inspect.getclasstree([example.A, example.B, C, D]))",
        "detail": "mid-range.inspect_getclasstree",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.inspect_getmembers_instance",
        "description": "mid-range.inspect_getmembers_instance",
        "peekOfCode": "a = example.A(name=\"inspect_getmembers\")\npprint(inspect.getmembers(a, inspect.ismethod))",
        "detail": "mid-range.inspect_getmembers_instance",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "mid-range.inspect_getmro",
        "description": "mid-range.inspect_getmro",
        "peekOfCode": "class C(object):\n    pass\nclass C_First(C, example.B):\n    pass\nclass B_First(example.B, C):\n    pass\nprint(\"B_First:\")\nfor c in inspect.getmro(B_First):\n    print(\"  {}\".format(c.__name__))\nprint()",
        "detail": "mid-range.inspect_getmro",
        "documentation": {}
    },
    {
        "label": "C_First",
        "kind": 6,
        "importPath": "mid-range.inspect_getmro",
        "description": "mid-range.inspect_getmro",
        "peekOfCode": "class C_First(C, example.B):\n    pass\nclass B_First(example.B, C):\n    pass\nprint(\"B_First:\")\nfor c in inspect.getmro(B_First):\n    print(\"  {}\".format(c.__name__))\nprint()\nprint(\"C_First:\")\nfor c in inspect.getmro(C_First):",
        "detail": "mid-range.inspect_getmro",
        "documentation": {}
    },
    {
        "label": "B_First",
        "kind": 6,
        "importPath": "mid-range.inspect_getmro",
        "description": "mid-range.inspect_getmro",
        "peekOfCode": "class B_First(example.B, C):\n    pass\nprint(\"B_First:\")\nfor c in inspect.getmro(B_First):\n    print(\"  {}\".format(c.__name__))\nprint()\nprint(\"C_First:\")\nfor c in inspect.getmro(C_First):\n    print(\"  {}\".format(c.__name__))",
        "detail": "mid-range.inspect_getmro",
        "documentation": {}
    },
    {
        "label": "sig",
        "kind": 5,
        "importPath": "mid-range.inspect_signature_bind",
        "description": "mid-range.inspect_signature_bind",
        "peekOfCode": "sig = inspect.signature(example.module_level_function)\nbound = sig.bind(\n    \"this is arg1\",\n    \"this is arg2\",\n    \"this is an extra positional argument\",\n    extra_named_arg=\"value\",\n)\nprint(\"Arguments:\")\nfor name, value in bound.arguments.items():\n    print(\"{} = {!r}\".format(name, value))",
        "detail": "mid-range.inspect_signature_bind",
        "documentation": {}
    },
    {
        "label": "bound",
        "kind": 5,
        "importPath": "mid-range.inspect_signature_bind",
        "description": "mid-range.inspect_signature_bind",
        "peekOfCode": "bound = sig.bind(\n    \"this is arg1\",\n    \"this is arg2\",\n    \"this is an extra positional argument\",\n    extra_named_arg=\"value\",\n)\nprint(\"Arguments:\")\nfor name, value in bound.arguments.items():\n    print(\"{} = {!r}\".format(name, value))\nprint(\"\\nCalling:\")",
        "detail": "mid-range.inspect_signature_bind",
        "documentation": {}
    },
    {
        "label": "sig",
        "kind": 5,
        "importPath": "mid-range.inspect_signature_bind_partial",
        "description": "mid-range.inspect_signature_bind_partial",
        "peekOfCode": "sig = inspect.signature(example.module_level_function)\npartial = sig.bind_partial(\"this is arg1\")\nprint(\"Without defaults:\")\nfor name, value in partial.arguments.items():\n    print(\"{} = {!r}\".format(name, value))\nprint(\"\\nWith defaults:\")\npartial.apply_defaults()\nfor name, value in partial.arguments.items():\n    print(\"{} = {!r}\".format(name, value))",
        "detail": "mid-range.inspect_signature_bind_partial",
        "documentation": {}
    },
    {
        "label": "partial",
        "kind": 5,
        "importPath": "mid-range.inspect_signature_bind_partial",
        "description": "mid-range.inspect_signature_bind_partial",
        "peekOfCode": "partial = sig.bind_partial(\"this is arg1\")\nprint(\"Without defaults:\")\nfor name, value in partial.arguments.items():\n    print(\"{} = {!r}\".format(name, value))\nprint(\"\\nWith defaults:\")\npartial.apply_defaults()\nfor name, value in partial.arguments.items():\n    print(\"{} = {!r}\".format(name, value))",
        "detail": "mid-range.inspect_signature_bind_partial",
        "documentation": {}
    },
    {
        "label": "sig",
        "kind": 5,
        "importPath": "mid-range.inspect_signature_function",
        "description": "mid-range.inspect_signature_function",
        "peekOfCode": "sig = inspect.signature(example.module_level_function)\nprint(\"module_level_function{}\".format(sig))\nprint(\"\\nParameter details:\")\nfor name, param in sig.parameters.items():\n    if param.kind == inspect.Parameter.POSITIONAL_ONLY:\n        print(\"  {} (positional-only)\".format(name))\n    elif param.kind == inspect.Parameter.POSITIONAL_OR_KEYWORD:\n        if param.default != inspect.Parameter.empty:\n            print(\"  {}={!r}\".format(name, param.default))\n        else:",
        "detail": "mid-range.inspect_signature_function",
        "documentation": {}
    },
    {
        "label": "show_stack",
        "kind": 2,
        "importPath": "mid-range.inspect_stack",
        "description": "mid-range.inspect_stack",
        "peekOfCode": "def show_stack():\n    for level in inspect.stack():\n        print(\n            \"{}[{}]\\n  -> {}\".format(\n                level.frame.f_code.co_filename,\n                level.lineno,\n                level.code_context[level.index].strip(),\n            )\n        )\n        pprint.pprint(level.frame.f_locals)",
        "detail": "mid-range.inspect_stack",
        "documentation": {}
    },
    {
        "label": "recurse",
        "kind": 2,
        "importPath": "mid-range.inspect_stack",
        "description": "mid-range.inspect_stack",
        "peekOfCode": "def recurse(limit):\n    local_variable = \".\" * limit\n    if limit <= 0:\n        show_stack()\n        return\n    recurse(limit - 1)\n    return local_variable\nif __name__ == \"__main__\":\n    recurse(2)",
        "detail": "mid-range.inspect_stack",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "mid-range.instagram_bot",
        "description": "mid-range.instagram_bot",
        "peekOfCode": "bot = Bot()\nbot.login(username=\"\", password=\"\")\n######  upload a picture #######\nbot.upload_photo(\"yoda.jpg\", caption=\"biscuit eating baby\")\n######  follow someone #######\nbot.follow(\"elonrmuskk\")\n######  send a message #######\nbot.send_message(\"Hello from Neel\", [\"user1\", \"user2\"])\n######  get follower info #######\nmy_followers = bot.get_user_followers(\"username\")",
        "detail": "mid-range.instagram_bot",
        "documentation": {}
    },
    {
        "label": "my_followers",
        "kind": 5,
        "importPath": "mid-range.instagram_bot",
        "description": "mid-range.instagram_bot",
        "peekOfCode": "my_followers = bot.get_user_followers(\"username\")\nfor follower in my_followers:\n    print(follower)\n#### we can unfollow everyone ###\nbot.unfollow_everyone()",
        "detail": "mid-range.instagram_bot",
        "documentation": {}
    },
    {
        "label": "download_video",
        "kind": 2,
        "importPath": "mid-range.instagram_video",
        "description": "mid-range.instagram_video",
        "peekOfCode": "def download_video(url: str) -> bytes:\n    base_url = \"https://downloadgram.net/wp-json/wppress/video-downloader/video?url=\"\n    video_url = requests.get(base_url + url).json()[0][\"urls\"][0][\"src\"]\n    return requests.get(video_url).content\nif __name__ == \"__main__\":\n    url = input(\"Enter Video/IGTV url: \").strip()\n    file_name = f\"{datetime.now():%Y-%m-%d_%H:%M:%S}.mp4\"\n    with open(file_name, \"wb\") as fp:\n        fp.write(download_video(url))\n    print(f\"Done. Video saved to disk as {file_name}.\")",
        "detail": "mid-range.instagram_video",
        "documentation": {}
    },
    {
        "label": "InstalledDistribution",
        "kind": 6,
        "importPath": "mid-range.installed",
        "description": "mid-range.installed",
        "peekOfCode": "class InstalledDistribution(AbstractDistribution):\n    \"\"\"Represents an installed package.\n    This does not need any preparation as the required information has already\n    been computed.\n    \"\"\"\n    def get_pkg_resources_distribution(self) -> Optional[Distribution]:\n        return self.req.satisfied_by\n    def prepare_distribution_metadata(\n        self, finder: PackageFinder, build_isolation: bool\n    ) -> None:",
        "detail": "mid-range.installed",
        "documentation": {}
    },
    {
        "label": "install_clib",
        "kind": 6,
        "importPath": "mid-range.install_clib",
        "description": "mid-range.install_clib",
        "peekOfCode": "class install_clib(Command):\n    description = \"Command to install installable C libraries\"\n    user_options = []\n    def initialize_options(self):\n        self.install_dir = None\n        self.outfiles = []\n    def finalize_options(self):\n        self.set_undefined_options(\"install\", (\"install_lib\", \"install_dir\"))\n    def run(self):\n        build_clib_cmd = get_cmd(\"build_clib\")",
        "detail": "mid-range.install_clib",
        "documentation": {}
    },
    {
        "label": "install_egg_info",
        "kind": 6,
        "importPath": "mid-range.install_egg_info",
        "description": "mid-range.install_egg_info",
        "peekOfCode": "class install_egg_info(namespaces.Installer, Command):\n    \"\"\"Install an .egg-info directory for the package\"\"\"\n    description = \"Install an .egg-info directory for the package\"\n    user_options = [(\"install-dir=\", \"d\", \"directory to install to\")]\n    def initialize_options(self):\n        self.install_dir = None\n    def finalize_options(self):\n        self.set_undefined_options(\"install_lib\", (\"install_dir\", \"install_dir\"))\n        ei_cmd = self.get_finalized_command(\"egg_info\")\n        basename = (",
        "detail": "mid-range.install_egg_info",
        "documentation": {}
    },
    {
        "label": "install_headers",
        "kind": 6,
        "importPath": "mid-range.install_headers",
        "description": "mid-range.install_headers",
        "peekOfCode": "class install_headers(Command):\n    description = \"install C/C++ header files\"\n    user_options = [\n        (\"install-dir=\", \"d\", \"directory to install header files to\"),\n        (\"force\", \"f\", \"force installation (overwrite existing files)\"),\n    ]\n    boolean_options = [\"force\"]\n    def initialize_options(self):\n        self.install_dir = None\n        self.force = 0",
        "detail": "mid-range.install_headers",
        "documentation": {}
    },
    {
        "label": "install_scripts",
        "kind": 6,
        "importPath": "mid-range.install_scripts",
        "description": "mid-range.install_scripts",
        "peekOfCode": "class install_scripts(Command):\n    description = \"install scripts (Python or otherwise)\"\n    user_options = [\n        (\"install-dir=\", \"d\", \"directory to install scripts to\"),\n        (\"build-dir=\", \"b\", \"build directory (where to install from)\"),\n        (\"force\", \"f\", \"force installation (overwrite existing files)\"),\n        (\"skip-build\", None, \"skip the build steps\"),\n    ]\n    boolean_options = [\"force\", \"skip-build\"]\n    def initialize_options(self):",
        "detail": "mid-range.install_scripts",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.IntegerReplacement",
        "description": "mid-range.IntegerReplacement",
        "peekOfCode": "class Solution:\n    def integerReplacement(self, n: int) -> int:\n        s = 0\n        while n != 1:\n            if n % 2 == 0:\n                n //= 2\n                s += 1\n                continue\n            if n == 3:\n                return s + 2",
        "detail": "mid-range.IntegerReplacement",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.IntegerToRoman",
        "description": "mid-range.IntegerToRoman",
        "peekOfCode": "class Solution:\n    def intToRoman(self, num: int) -> str:\n        dic = {\n            1000: \"M\",\n            900: \"CM\",\n            500: \"D\",\n            400: \"CD\",\n            100: \"C\",\n            90: \"XC\",\n            50: \"L\",",
        "detail": "mid-range.IntegerToRoman",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "mid-range.integer_partition",
        "description": "mid-range.integer_partition",
        "peekOfCode": "def partition(m):\n    memo = [[0 for _ in range(m)] for _ in range(m + 1)]\n    for i in range(m + 1):\n        memo[i][0] = 1\n    for n in range(m + 1):\n        for k in range(1, m):\n            memo[n][k] += memo[n][k - 1]\n            if n - k > 0:\n                memo[n][k] += memo[n - k - 1][k]\n    return memo[m][m - 1]",
        "detail": "mid-range.integer_partition",
        "documentation": {}
    },
    {
        "label": "roman_number",
        "kind": 2,
        "importPath": "mid-range.integer__to_roman_numeral",
        "description": "mid-range.integer__to_roman_numeral",
        "peekOfCode": "def roman_number(num):\n    if num > 3999:\n        print(\"enter number less than 3999\")\n        return\n    # take 2 list symbol and value symbol having roman of each integer in list value\n    value = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbol = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman = \"\"\n    i = 0\n    while num > 0:",
        "detail": "mid-range.integer__to_roman_numeral",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "mid-range.integer__to_roman_numeral",
        "description": "mid-range.integer__to_roman_numeral",
        "peekOfCode": "num = int(input(\"enter an integer number:  \"))\nprint(f\" Roman Numeral of {num} is {roman_number(num)}\")",
        "detail": "mid-range.integer__to_roman_numeral",
        "documentation": {}
    },
    {
        "label": "proc",
        "kind": 5,
        "importPath": "mid-range.interaction",
        "description": "mid-range.interaction",
        "peekOfCode": "proc = subprocess.Popen(\n    \"python3 repeater.py\", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE\n)\nstdin = io.TextIOWrapper(\n    proc.stdin, encoding=\"utf-8\", line_buffering=True  # send data on newline\n)\nstdout = io.TextIOWrapper(proc.stdout, encoding=\"utf-8\")\nfor i in range(5):\n    line = \"{}\\n\".format(i)\n    stdin.write(line)",
        "detail": "mid-range.interaction",
        "documentation": {}
    },
    {
        "label": "stdin",
        "kind": 5,
        "importPath": "mid-range.interaction",
        "description": "mid-range.interaction",
        "peekOfCode": "stdin = io.TextIOWrapper(\n    proc.stdin, encoding=\"utf-8\", line_buffering=True  # send data on newline\n)\nstdout = io.TextIOWrapper(proc.stdout, encoding=\"utf-8\")\nfor i in range(5):\n    line = \"{}\\n\".format(i)\n    stdin.write(line)\n    output = stdout.readline()\n    print(output.rstrip())\nremainder = proc.communicate()[0].decode(\"utf-8\")",
        "detail": "mid-range.interaction",
        "documentation": {}
    },
    {
        "label": "stdout",
        "kind": 5,
        "importPath": "mid-range.interaction",
        "description": "mid-range.interaction",
        "peekOfCode": "stdout = io.TextIOWrapper(proc.stdout, encoding=\"utf-8\")\nfor i in range(5):\n    line = \"{}\\n\".format(i)\n    stdin.write(line)\n    output = stdout.readline()\n    print(output.rstrip())\nremainder = proc.communicate()[0].decode(\"utf-8\")\nprint(remainder)\nprint()\nprint(\"All output at once:\")",
        "detail": "mid-range.interaction",
        "documentation": {}
    },
    {
        "label": "remainder",
        "kind": 5,
        "importPath": "mid-range.interaction",
        "description": "mid-range.interaction",
        "peekOfCode": "remainder = proc.communicate()[0].decode(\"utf-8\")\nprint(remainder)\nprint()\nprint(\"All output at once:\")\nproc = subprocess.Popen(\n    \"python3 repeater.py\", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE\n)\nstdin = io.TextIOWrapper(proc.stdin, encoding=\"utf-8\")\nfor i in range(5):\n    line = \"{}\\n\".format(i)",
        "detail": "mid-range.interaction",
        "documentation": {}
    },
    {
        "label": "proc",
        "kind": 5,
        "importPath": "mid-range.interaction",
        "description": "mid-range.interaction",
        "peekOfCode": "proc = subprocess.Popen(\n    \"python3 repeater.py\", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE\n)\nstdin = io.TextIOWrapper(proc.stdin, encoding=\"utf-8\")\nfor i in range(5):\n    line = \"{}\\n\".format(i)\n    stdin.write(line)\nstdin.flush()\noutput = proc.communicate()[0].decode(\"utf-8\")\nprint(output)",
        "detail": "mid-range.interaction",
        "documentation": {}
    },
    {
        "label": "stdin",
        "kind": 5,
        "importPath": "mid-range.interaction",
        "description": "mid-range.interaction",
        "peekOfCode": "stdin = io.TextIOWrapper(proc.stdin, encoding=\"utf-8\")\nfor i in range(5):\n    line = \"{}\\n\".format(i)\n    stdin.write(line)\nstdin.flush()\noutput = proc.communicate()[0].decode(\"utf-8\")\nprint(output)",
        "detail": "mid-range.interaction",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "mid-range.interaction",
        "description": "mid-range.interaction",
        "peekOfCode": "output = proc.communicate()[0].decode(\"utf-8\")\nprint(output)",
        "detail": "mid-range.interaction",
        "documentation": {}
    },
    {
        "label": "Waker",
        "kind": 6,
        "importPath": "mid-range.interface",
        "description": "mid-range.interface",
        "peekOfCode": "class Waker(object):\n    \"\"\"A socket-like object that can wake another thread from ``select()``.\n    The `~tornado.ioloop.IOLoop` will add the Waker's `fileno()` to\n    its ``select`` (or ``epoll`` or ``kqueue``) calls.  When another\n    thread wants to wake up the loop, it calls `wake`.  Once it has woken\n    up, it will call `consume` to do any necessary per-wake cleanup.  When\n    the ``IOLoop`` is closed, it closes its waker too.\n    \"\"\"\n    def fileno(self):\n        \"\"\"Returns the read file descriptor for this waker.",
        "detail": "mid-range.interface",
        "documentation": {}
    },
    {
        "label": "set_close_exec",
        "kind": 2,
        "importPath": "mid-range.interface",
        "description": "mid-range.interface",
        "peekOfCode": "def set_close_exec(fd):\n    \"\"\"Sets the close-on-exec bit (``FD_CLOEXEC``)for a file descriptor.\"\"\"\n    raise NotImplementedError()\nclass Waker(object):\n    \"\"\"A socket-like object that can wake another thread from ``select()``.\n    The `~tornado.ioloop.IOLoop` will add the Waker's `fileno()` to\n    its ``select`` (or ``epoll`` or ``kqueue``) calls.  When another\n    thread wants to wake up the loop, it calls `wake`.  Once it has woken\n    up, it will call `consume` to do any necessary per-wake cleanup.  When\n    the ``IOLoop`` is closed, it closes its waker too.",
        "detail": "mid-range.interface",
        "documentation": {}
    },
    {
        "label": "cast_int_addr",
        "kind": 2,
        "importPath": "mid-range.interop",
        "description": "mid-range.interop",
        "peekOfCode": "def cast_int_addr(n: Any) -> int:\n    \"\"\"Cast an address to a Python int\n    This could be a Python integer or a CFFI pointer\n    \"\"\"\n    if isinstance(n, int):\n        return n\n    try:\n        import cffi  # type: ignore\n    except ImportError:\n        pass",
        "detail": "mid-range.interop",
        "documentation": {}
    },
    {
        "label": "interpolation_search",
        "kind": 2,
        "importPath": "mid-range.interpolation_search",
        "description": "mid-range.interpolation_search",
        "peekOfCode": "def interpolation_search(collection, target):\n    left, right, counter = 0, len(collection) - 1, 0\n    while (collection[left] <= target) and (collection[right] >= target):\n        middle = left + ((target - collection[left]) * (right - left)) // (\n            collection[right] - collection[left]\n        )\n        if collection[middle] < target:\n            counter += 1\n            left = middle + 1\n            print(\"Step %i -->\" % counter, collection[left:])",
        "detail": "mid-range.interpolation_search",
        "documentation": {}
    },
    {
        "label": "visualization",
        "kind": 2,
        "importPath": "mid-range.interpolation_search",
        "description": "mid-range.interpolation_search",
        "peekOfCode": "def visualization():\n    length = 10\n    collection = [item for item in range(0, length)]\n    target = randint(0, length - 1)\n    print(\"Initial list:\", collection)\n    print(\"The number of which must be found:\", target)\n    print(\"Visualization of algorithm work.\")\n    result, counter = interpolation_search(collection, target)\n    if result != -1:\n        print(\"Result of searching: \", result)",
        "detail": "mid-range.interpolation_search",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.interpolation_search",
        "description": "mid-range.interpolation_search",
        "peekOfCode": "def main():\n    elapsed_time = timeit.timeit(visualization, number=1)\n    print(\"Elapsed time: \", round(elapsed_time, 7), \"sec.\")\nif __name__ == \"__main__\":\n    main()",
        "detail": "mid-range.interpolation_search",
        "documentation": {}
    },
    {
        "label": "NamespaceObject",
        "kind": 6,
        "importPath": "mid-range.interpreter",
        "description": "mid-range.interpreter",
        "peekOfCode": "class NamespaceObject:\n    def __init__(self, dct):\n        self.__dict__ = dct\nclass MixedTreeName(TreeNameDefinition):\n    def infer(self):\n        \"\"\"\n        In IPython notebook it is typical that some parts of the code that is\n        provided was already executed. In that case if something is not properly\n        inferred, it should still infer from the variables it already knows.\n        \"\"\"",
        "detail": "mid-range.interpreter",
        "documentation": {}
    },
    {
        "label": "MixedTreeName",
        "kind": 6,
        "importPath": "mid-range.interpreter",
        "description": "mid-range.interpreter",
        "peekOfCode": "class MixedTreeName(TreeNameDefinition):\n    def infer(self):\n        \"\"\"\n        In IPython notebook it is typical that some parts of the code that is\n        provided was already executed. In that case if something is not properly\n        inferred, it should still infer from the variables it already knows.\n        \"\"\"\n        inferred = super().infer()\n        if not inferred:\n            for compiled_value in self.parent_context.mixed_values:",
        "detail": "mid-range.interpreter",
        "documentation": {}
    },
    {
        "label": "MixedParserTreeFilter",
        "kind": 6,
        "importPath": "mid-range.interpreter",
        "description": "mid-range.interpreter",
        "peekOfCode": "class MixedParserTreeFilter(ParserTreeFilter):\n    name_class = MixedTreeName\nclass MixedModuleContext(ModuleContext):\n    def __init__(self, tree_module_value, namespaces):\n        super().__init__(tree_module_value)\n        self.mixed_values = [\n            self._get_mixed_object(_create(self.inference_state, NamespaceObject(n)))\n            for n in namespaces\n        ]\n    def _get_mixed_object(self, compiled_value):",
        "detail": "mid-range.interpreter",
        "documentation": {}
    },
    {
        "label": "MixedModuleContext",
        "kind": 6,
        "importPath": "mid-range.interpreter",
        "description": "mid-range.interpreter",
        "peekOfCode": "class MixedModuleContext(ModuleContext):\n    def __init__(self, tree_module_value, namespaces):\n        super().__init__(tree_module_value)\n        self.mixed_values = [\n            self._get_mixed_object(_create(self.inference_state, NamespaceObject(n)))\n            for n in namespaces\n        ]\n    def _get_mixed_object(self, compiled_value):\n        return mixed.MixedObject(compiled_value=compiled_value, tree_value=self._value)\n    def get_filters(self, until_position=None, origin_scope=None):",
        "detail": "mid-range.interpreter",
        "documentation": {}
    },
    {
        "label": "find_intersecting_node",
        "kind": 2,
        "importPath": "mid-range.intersecting_ll",
        "description": "mid-range.intersecting_ll",
        "peekOfCode": "def find_intersecting_node(ll1, ll2):\n    # count how many nodes contains the first ll\n    count1 = 0\n    temp1 = ll1\n    while temp1 is not None:\n        count1 += 1\n        temp1 = temp1.next\n    # count how many nodes contains the second ll\n    count2 = 0\n    temp2 = ll2",
        "detail": "mid-range.intersecting_ll",
        "documentation": {}
    },
    {
        "label": "ll1",
        "kind": 5,
        "importPath": "mid-range.intersecting_ll",
        "description": "mid-range.intersecting_ll",
        "peekOfCode": "ll1 = build_ll([3, 7, 8, 10])\nll2 = build_ll([1, 8, 10])\nprint(find_intersecting_node(ll1, ll2).val)",
        "detail": "mid-range.intersecting_ll",
        "documentation": {}
    },
    {
        "label": "ll2",
        "kind": 5,
        "importPath": "mid-range.intersecting_ll",
        "description": "mid-range.intersecting_ll",
        "peekOfCode": "ll2 = build_ll([1, 8, 10])\nprint(find_intersecting_node(ll1, ll2).val)",
        "detail": "mid-range.intersecting_ll",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Intersection-of-Sorted-Arrays",
        "description": "mid-range.Intersection-of-Sorted-Arrays",
        "peekOfCode": "class Solution:\n    # @param A : tuple of integers\n    # @param B : tuple of integers\n    # @return a list of integers\n    def intersect(self, A, B):\n        s1 = 0\n        s2 = 0\n        e1 = len(A)\n        e2 = len(B)\n        intersection = []",
        "detail": "mid-range.Intersection-of-Sorted-Arrays",
        "documentation": {}
    },
    {
        "label": "intersection",
        "kind": 2,
        "importPath": "mid-range.intersection",
        "description": "mid-range.intersection",
        "peekOfCode": "def intersection(\n    function, x0, x1\n):  # function is the f we want to find its root and x0 and x1 are two random starting points\n    x_n = x0\n    x_n1 = x1\n    while True:\n        x_n2 = x_n1 - (\n            function(x_n1) / ((function(x_n1) - function(x_n)) / (x_n1 - x_n))\n        )\n        if abs(x_n2 - x_n1) < 0.00001:",
        "detail": "mid-range.intersection",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "mid-range.intersection",
        "description": "mid-range.intersection",
        "peekOfCode": "def f(x):\n    return math.pow(x, 3) - 2 * x - 5\nprint(intersection(f, 3, 3.5))",
        "detail": "mid-range.intersection",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.IntersectionOfTwoArrays",
        "description": "mid-range.IntersectionOfTwoArrays",
        "peekOfCode": "class Solution:\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        # declaring an empty array for comparing\n        result = []\n        # final array initialization",
        "detail": "mid-range.IntersectionOfTwoArrays",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.IntersectionOfTwoArraysII",
        "description": "mid-range.IntersectionOfTwoArraysII",
        "peekOfCode": "class Solution:\n    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        if len(nums1) > len(nums2):\n            i = 0\n            while i < len(nums2):\n                if nums2[i] in set(nums1):\n                    nums1.remove(nums2[i])\n                    i += 1\n                else:\n                    nums2.remove(nums2[i])",
        "detail": "mid-range.IntersectionOfTwoArraysII",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.IntersectionOfTwoArraysII",
        "description": "mid-range.IntersectionOfTwoArraysII",
        "peekOfCode": "class Solution:\n    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        return list((Counter(nums1) & Counter(nums2)).elements())",
        "detail": "mid-range.IntersectionOfTwoArraysII",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Intersection_of_two_array",
        "description": "mid-range.Intersection_of_two_array",
        "peekOfCode": "class Solution:\n    def intersection(self, nums1, nums2):\n        nums1.sort()\n        nums2.sort()\n        i = j = k = 0\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                nums1[k] = nums1[i]\n                i += 1\n                j += 1",
        "detail": "mid-range.Intersection_of_two_array",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "mid-range.Intersection_of_Two_LinkedList",
        "description": "mid-range.Intersection_of_Two_LinkedList",
        "peekOfCode": "class ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\nclass Solution:\n    def getIntersectionNode(self, headA, headB):\n        nodeA = headA\n        nodeB = headB\n        countA = self.count(nodeA)\n        countB = self.count(nodeB)",
        "detail": "mid-range.Intersection_of_Two_LinkedList",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Intersection_of_Two_LinkedList",
        "description": "mid-range.Intersection_of_Two_LinkedList",
        "peekOfCode": "class Solution:\n    def getIntersectionNode(self, headA, headB):\n        nodeA = headA\n        nodeB = headB\n        countA = self.count(nodeA)\n        countB = self.count(nodeB)\n        skip = abs(countA - countB)\n        if countA - countB > 0:\n            for i in range(skip):\n                nodeA = nodeA.next",
        "detail": "mid-range.Intersection_of_Two_LinkedList",
        "documentation": {}
    },
    {
        "label": "intranges_from_list",
        "kind": 2,
        "importPath": "mid-range.intranges",
        "description": "mid-range.intranges",
        "peekOfCode": "def intranges_from_list(list_):\n    # type: (List[int]) -> Tuple[int, ...]\n    \"\"\"Represent a list of integers as a sequence of ranges:\n    ((start_0, end_0), (start_1, end_1), ...), such that the original\n    integers are exactly those x such that start_i <= x < end_i for some i.\n    Ranges are encoded as single integers (start << 32 | end), not as tuples.\n    \"\"\"\n    sorted_list = sorted(list_)\n    ranges = []\n    last_write = -1",
        "detail": "mid-range.intranges",
        "documentation": {}
    },
    {
        "label": "intranges_contain",
        "kind": 2,
        "importPath": "mid-range.intranges",
        "description": "mid-range.intranges",
        "peekOfCode": "def intranges_contain(int_, ranges):\n    # type: (int, Tuple[int, ...]) -> bool\n    \"\"\"Determine if `int_` falls into one of the ranges in `ranges`.\"\"\"\n    tuple_ = _encode_range(int_, 0)\n    pos = bisect.bisect_left(ranges, tuple_)\n    # we could be immediately ahead of a tuple (start, end)\n    # with start < int_ <= end\n    if pos > 0:\n        left, right = _decode_range(ranges[pos - 1])\n        if left <= int_ < right:",
        "detail": "mid-range.intranges",
        "documentation": {}
    },
    {
        "label": "average",
        "kind": 2,
        "importPath": "mid-range.Introduction-to-Sets",
        "description": "mid-range.Introduction-to-Sets",
        "peekOfCode": "def average(array):\n    # your code goes here\n    return sum(set(array)) / len(set(array))\nif __name__ == \"__main__\":\n    n = int(input())\n    arr = list(map(int, input().split()))\n    result = average(arr)\n    print(result)",
        "detail": "mid-range.Introduction-to-Sets",
        "documentation": {}
    },
    {
        "label": "inverse_of_matrix",
        "kind": 2,
        "importPath": "mid-range.inverse_of_matrix",
        "description": "mid-range.inverse_of_matrix",
        "peekOfCode": "def inverse_of_matrix(matrix: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    A matrix multiplied with its inverse gives the identity matrix.\n    This function finds the inverse of a 2x2 matrix.\n    If the determinant of a matrix is 0, its inverse does not exist.\n    Sources for fixing inaccurate float arithmetic:\n    https://stackoverflow.com/questions/6563058/how-do-i-use-accurate-float-arithmetic-in-python\n    https://docs.python.org/3/library/decimal.html\n    >>> inverse_of_matrix([[2, 5], [2, 0]])\n    [[0.0, 0.5], [0.2, -0.2]]",
        "detail": "mid-range.inverse_of_matrix",
        "documentation": {}
    },
    {
        "label": "csBinaryTreeInvert",
        "kind": 2,
        "importPath": "mid-range.InvertBinaryTree",
        "description": "mid-range.InvertBinaryTree",
        "peekOfCode": "def csBinaryTreeInvert(root):\n    if root is None:\n        return\n    else:\n        temp = root\n        csBinaryTreeInvert(root.left)\n        csBinaryTreeInvert(root.right)\n        temp = root.left\n        root.left = root.right\n        root.right = temp",
        "detail": "mid-range.InvertBinaryTree",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.Invert_Binary_Tree",
        "description": "mid-range.Invert_Binary_Tree",
        "peekOfCode": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\nimport collections\nclass Solution:\n    def invertTree(self, root):\n        def helper(node):\n            if not node:",
        "detail": "mid-range.Invert_Binary_Tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Invert_Binary_Tree",
        "description": "mid-range.Invert_Binary_Tree",
        "peekOfCode": "class Solution:\n    def invertTree(self, root):\n        def helper(node):\n            if not node:\n                return node\n            left = helper(node.left)\n            right = helper(node.right)\n            node.left = right\n            node.right = left\n            return node",
        "detail": "mid-range.Invert_Binary_Tree",
        "documentation": {}
    },
    {
        "label": "InMemoryClipboard",
        "kind": 6,
        "importPath": "mid-range.in_memory",
        "description": "mid-range.in_memory",
        "peekOfCode": "class InMemoryClipboard(Clipboard):\n    \"\"\"\n    Default clipboard implementation.\n    Just keep the data in memory.\n    This implements a kill-ring, for Emacs mode.\n    \"\"\"\n    def __init__(\n        self, data: Optional[ClipboardData] = None, max_size: int = 60\n    ) -> None:\n        assert max_size >= 1",
        "detail": "mid-range.in_memory",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.in_memory",
        "description": "mid-range.in_memory",
        "peekOfCode": "__all__ = [\"InMemoryClipboard\"]\nclass InMemoryClipboard(Clipboard):\n    \"\"\"\n    Default clipboard implementation.\n    Just keep the data in memory.\n    This implements a kill-ring, for Emacs mode.\n    \"\"\"\n    def __init__(\n        self, data: Optional[ClipboardData] = None, max_size: int = 60\n    ) -> None:",
        "detail": "mid-range.in_memory",
        "documentation": {}
    },
    {
        "label": "polar_force",
        "kind": 2,
        "importPath": "mid-range.in_static_equilibrium",
        "description": "mid-range.in_static_equilibrium",
        "peekOfCode": "def polar_force(\n    magnitude: float, angle: float, radian_mode: bool = False\n) -> List[float]:\n    \"\"\"\n    Resolves force along rectangular components.\n    (force, angle) => (force_x, force_y)\n    >>> polar_force(10, 45)\n    [7.0710678118654755, 7.071067811865475]\n    >>> polar_force(10, 3.14, radian_mode=True)\n    [-9.999987317275394, 0.01592652916486828]",
        "detail": "mid-range.in_static_equilibrium",
        "documentation": {}
    },
    {
        "label": "in_static_equilibrium",
        "kind": 2,
        "importPath": "mid-range.in_static_equilibrium",
        "description": "mid-range.in_static_equilibrium",
        "peekOfCode": "def in_static_equilibrium(\n    forces: ndarray, location: ndarray, eps: float = 10 ** -1\n) -> bool:\n    \"\"\"\n    Check if a system is in equilibrium.\n    It takes two numpy.array objects.\n    forces ==>  [\n                        [force1_x, force1_y],\n                        [force2_x, force2_y],\n                        ....]",
        "detail": "mid-range.in_static_equilibrium",
        "documentation": {}
    },
    {
        "label": "noun_lib",
        "kind": 5,
        "importPath": "mid-range.in_the_something",
        "description": "mid-range.in_the_something",
        "peekOfCode": "noun_lib = [\n    \"cat\",\n    \"dog\",\n    \"lizard\",\n    \"bald\",\n    \"insane guy\",\n    \"CEO\",\n    \"monkey\",\n    \"teacher\",\n    \"ballerina\",",
        "detail": "mid-range.in_the_something",
        "documentation": {}
    },
    {
        "label": "place_lib",
        "kind": 5,
        "importPath": "mid-range.in_the_something",
        "description": "mid-range.in_the_something",
        "peekOfCode": "place_lib = [\n    \"in Hungary\",\n    \"in the toilet\",\n    \"in a car\",\n    \"in a zoo\",\n    \"in a lions cave\",\n    \"in a park\",\n    \"in Norway\",\n    \"in Rio\",\n    \"on Mars\",",
        "detail": "mid-range.in_the_something",
        "documentation": {}
    },
    {
        "label": "flag",
        "kind": 5,
        "importPath": "mid-range.in_the_something",
        "description": "mid-range.in_the_something",
        "peekOfCode": "flag = True\nwhile flag:\n    inp = str(input(\"\\nDo you want more? [Y/n] \"))\n    if inp.strip().lower() == \"y\":\n        print(\n            \"-> The\"\n            + \" \"\n            + random.choice(noun_lib)\n            + \" \"\n            + random.choice(place_lib)",
        "detail": "mid-range.in_the_something",
        "documentation": {}
    },
    {
        "label": "FormatSafeDict",
        "kind": 6,
        "importPath": "mid-range.io",
        "description": "mid-range.io",
        "peekOfCode": "class FormatSafeDict(dict):\n    def __missing__(self, key):\n        return \"{\" + key + \"}\"",
        "detail": "mid-range.io",
        "documentation": {}
    },
    {
        "label": "unicode_std_stream",
        "kind": 2,
        "importPath": "mid-range.io",
        "description": "mid-range.io",
        "peekOfCode": "def unicode_std_stream(stream=\"stdout\"):\n    u\"\"\"Get a wrapper to write unicode to stdout/stderr as UTF-8.\n    This ignores environment variables and default encodings, to reliably write\n    unicode to stdout or stderr.\n    ::\n        unicode_std_stream().write(u'ł@e¶ŧ←')\n    \"\"\"\n    assert stream in (\"stdout\", \"stderr\")\n    stream = getattr(sys, stream)\n    try:",
        "detail": "mid-range.io",
        "documentation": {}
    },
    {
        "label": "unicode_stdin_stream",
        "kind": 2,
        "importPath": "mid-range.io",
        "description": "mid-range.io",
        "peekOfCode": "def unicode_stdin_stream():\n    u\"\"\"Get a wrapper to read unicode from stdin as UTF-8.\n    This ignores environment variables and default encodings, to reliably read unicode from stdin.\n    ::\n        totreat = unicode_stdin_stream().read()\n    \"\"\"\n    stream = sys.stdin\n    try:\n        stream_b = stream.buffer\n    except AttributeError:",
        "detail": "mid-range.io",
        "documentation": {}
    },
    {
        "label": "IoLexer",
        "kind": 6,
        "importPath": "mid-range.iolang",
        "description": "mid-range.iolang",
        "peekOfCode": "class IoLexer(RegexLexer):\n    \"\"\"\n    For `Io <http://iolanguage.com/>`_ (a small, prototype-based\n    programming language) source.\n    .. versionadded:: 0.10\n    \"\"\"\n    name = \"Io\"\n    filenames = [\"*.io\"]\n    aliases = [\"io\"]\n    mimetypes = [\"text/x-iosrc\"]",
        "detail": "mid-range.iolang",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.iolang",
        "description": "mid-range.iolang",
        "peekOfCode": "__all__ = [\"IoLexer\"]\nclass IoLexer(RegexLexer):\n    \"\"\"\n    For `Io <http://iolanguage.com/>`_ (a small, prototype-based\n    programming language) source.\n    .. versionadded:: 0.10\n    \"\"\"\n    name = \"Io\"\n    filenames = [\"*.io\"]\n    aliases = [\"io\"]",
        "detail": "mid-range.iolang",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "mid-range.io_bytesio",
        "description": "mid-range.io_bytesio",
        "peekOfCode": "output = io.BytesIO()\noutput.write(\"This goes into the buffer. \".encode(\"utf-8\"))\noutput.write(\"ÁÇÊ\".encode(\"utf-8\"))\n# Retrieve the value written\nprint(output.getvalue())\noutput.close()  # discard buffer memory\n# Initialize a read buffer\ninput = io.BytesIO(b\"Inital value for read buffer\")\n# Read from the buffer\nprint(input.read())",
        "detail": "mid-range.io_bytesio",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 5,
        "importPath": "mid-range.io_bytesio",
        "description": "mid-range.io_bytesio",
        "peekOfCode": "input = io.BytesIO(b\"Inital value for read buffer\")\n# Read from the buffer\nprint(input.read())",
        "detail": "mid-range.io_bytesio",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "mid-range.io_stringio",
        "description": "mid-range.io_stringio",
        "peekOfCode": "output = io.StringIO()\noutput.write(\"This goes into the buffer. \")\nprint(\"And so does this.\", file=output)\n# Retrieve the value written\nprint(output.getvalue())\noutput.close()  # discard buffer memory\n# Initialize a read buffer\ninput = io.StringIO(\"Inital value for read buffer\")\n# Read from the buffer\nprint(input.read())",
        "detail": "mid-range.io_stringio",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 5,
        "importPath": "mid-range.io_stringio",
        "description": "mid-range.io_stringio",
        "peekOfCode": "input = io.StringIO(\"Inital value for read buffer\")\n# Read from the buffer\nprint(input.read())",
        "detail": "mid-range.io_stringio",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "mid-range.io_textiowrapper",
        "description": "mid-range.io_textiowrapper",
        "peekOfCode": "output = io.BytesIO()\nwrapper = io.TextIOWrapper(output, encoding=\"utf-8\", write_through=True)\nwrapper.write(\"This goes into the buffer. \")\nwrapper.write(\"ÁÇÊ\")\n# Retrieve the value written\nprint(output.getvalue())\noutput.close()  # discard buffer memory\n# Initialize a read buffer\ninput = io.BytesIO(\n    b\"Inital value for read buffer with unicode characters \" + \"ÁÇÊ\".encode(\"utf-8\")",
        "detail": "mid-range.io_textiowrapper",
        "documentation": {}
    },
    {
        "label": "wrapper",
        "kind": 5,
        "importPath": "mid-range.io_textiowrapper",
        "description": "mid-range.io_textiowrapper",
        "peekOfCode": "wrapper = io.TextIOWrapper(output, encoding=\"utf-8\", write_through=True)\nwrapper.write(\"This goes into the buffer. \")\nwrapper.write(\"ÁÇÊ\")\n# Retrieve the value written\nprint(output.getvalue())\noutput.close()  # discard buffer memory\n# Initialize a read buffer\ninput = io.BytesIO(\n    b\"Inital value for read buffer with unicode characters \" + \"ÁÇÊ\".encode(\"utf-8\")\n)",
        "detail": "mid-range.io_textiowrapper",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 5,
        "importPath": "mid-range.io_textiowrapper",
        "description": "mid-range.io_textiowrapper",
        "peekOfCode": "input = io.BytesIO(\n    b\"Inital value for read buffer with unicode characters \" + \"ÁÇÊ\".encode(\"utf-8\")\n)\nwrapper = io.TextIOWrapper(input, encoding=\"utf-8\")\n# Read from the buffer\nprint(wrapper.read())",
        "detail": "mid-range.io_textiowrapper",
        "documentation": {}
    },
    {
        "label": "wrapper",
        "kind": 5,
        "importPath": "mid-range.io_textiowrapper",
        "description": "mid-range.io_textiowrapper",
        "peekOfCode": "wrapper = io.TextIOWrapper(input, encoding=\"utf-8\")\n# Read from the buffer\nprint(wrapper.read())",
        "detail": "mid-range.io_textiowrapper",
        "documentation": {}
    },
    {
        "label": "ADDRESSES",
        "kind": 5,
        "importPath": "mid-range.ipaddress_addresses",
        "description": "mid-range.ipaddress_addresses",
        "peekOfCode": "ADDRESSES = [\"10.9.0.6\", \"fdfd:87b5:b475:5e3e:b1bc:e121:a8eb:14aa\"]\nfor ip in ADDRESSES:\n    addr = ipaddress.ip_address(ip)\n    print(\"{!r}\".format(addr))\n    print(\"   IP version:\", addr.version)\n    print(\"   is private:\", addr.is_private)\n    print(\"  packed form:\", binascii.hexlify(addr.packed))\n    print(\"      integer:\", int(addr))\n    print()",
        "detail": "mid-range.ipaddress_addresses",
        "documentation": {}
    },
    {
        "label": "ADDRESSES",
        "kind": 5,
        "importPath": "mid-range.ipaddress_interfaces",
        "description": "mid-range.ipaddress_interfaces",
        "peekOfCode": "ADDRESSES = [\"10.9.0.6/24\", \"fdfd:87b5:b475:5e3e:b1bc:e121:a8eb:14aa/64\"]\nfor ip in ADDRESSES:\n    iface = ipaddress.ip_interface(ip)\n    print(\"{!r}\".format(iface))\n    print(\"network:\\n  \", iface.network)\n    print(\"ip:\\n  \", iface.ip)\n    print(\"IP with prefixlen:\\n  \", iface.with_prefixlen)\n    print(\"netmask:\\n  \", iface.with_netmask)\n    print(\"hostmask:\\n  \", iface.with_hostmask)\n    print()",
        "detail": "mid-range.ipaddress_interfaces",
        "documentation": {}
    },
    {
        "label": "NETWORKS",
        "kind": 5,
        "importPath": "mid-range.ipaddress_networks",
        "description": "mid-range.ipaddress_networks",
        "peekOfCode": "NETWORKS = [\"10.9.0.0/24\", \"fdfd:87b5:b475:5e3e::/64\"]\nfor n in NETWORKS:\n    net = ipaddress.ip_network(n)\n    print(\"{!r}\".format(net))\n    print(\"     is private:\", net.is_private)\n    print(\"      broadcast:\", net.broadcast_address)\n    print(\"     compressed:\", net.compressed)\n    print(\"   with netmask:\", net.with_netmask)\n    print(\"  with hostmask:\", net.with_hostmask)\n    print(\"  num addresses:\", net.num_addresses)",
        "detail": "mid-range.ipaddress_networks",
        "documentation": {}
    },
    {
        "label": "NETWORKS",
        "kind": 5,
        "importPath": "mid-range.ipaddress_network_iterate",
        "description": "mid-range.ipaddress_network_iterate",
        "peekOfCode": "NETWORKS = [\"10.9.0.0/24\", \"fdfd:87b5:b475:5e3e::/64\"]\nfor n in NETWORKS:\n    net = ipaddress.ip_network(n)\n    print(\"{!r}\".format(net))\n    for i, ip in zip(range(3), net):\n        print(ip)\n    print()",
        "detail": "mid-range.ipaddress_network_iterate",
        "documentation": {}
    },
    {
        "label": "NETWORKS",
        "kind": 5,
        "importPath": "mid-range.ipaddress_network_iterate_hosts",
        "description": "mid-range.ipaddress_network_iterate_hosts",
        "peekOfCode": "NETWORKS = [\"10.9.0.0/24\", \"fdfd:87b5:b475:5e3e::/64\"]\nfor n in NETWORKS:\n    net = ipaddress.ip_network(n)\n    print(\"{!r}\".format(net))\n    for i, ip in zip(range(3), net.hosts()):\n        print(ip)\n    print()",
        "detail": "mid-range.ipaddress_network_iterate_hosts",
        "documentation": {}
    },
    {
        "label": "NETWORKS",
        "kind": 5,
        "importPath": "mid-range.ipaddress_network_membership",
        "description": "mid-range.ipaddress_network_membership",
        "peekOfCode": "NETWORKS = [\n    ipaddress.ip_network(\"10.9.0.0/24\"),\n    ipaddress.ip_network(\"fdfd:87b5:b475:5e3e::/64\"),\n]\nADDRESSES = [\n    ipaddress.ip_address(\"10.9.0.6\"),\n    ipaddress.ip_address(\"10.7.0.31\"),\n    ipaddress.ip_address(\"fdfd:87b5:b475:5e3e:b1bc:e121:a8eb:14aa\"),\n    ipaddress.ip_address(\"fe80::3840:c439:b25e:63b0\"),\n]",
        "detail": "mid-range.ipaddress_network_membership",
        "documentation": {}
    },
    {
        "label": "ADDRESSES",
        "kind": 5,
        "importPath": "mid-range.ipaddress_network_membership",
        "description": "mid-range.ipaddress_network_membership",
        "peekOfCode": "ADDRESSES = [\n    ipaddress.ip_address(\"10.9.0.6\"),\n    ipaddress.ip_address(\"10.7.0.31\"),\n    ipaddress.ip_address(\"fdfd:87b5:b475:5e3e:b1bc:e121:a8eb:14aa\"),\n    ipaddress.ip_address(\"fe80::3840:c439:b25e:63b0\"),\n]\nfor ip in ADDRESSES:\n    for net in NETWORKS:\n        if ip in net:\n            print(\"{}\\nis on {}\".format(ip, net))",
        "detail": "mid-range.ipaddress_network_membership",
        "documentation": {}
    },
    {
        "label": "isIPv4Address",
        "kind": 2,
        "importPath": "mid-range.IPv4Address",
        "description": "mid-range.IPv4Address",
        "peekOfCode": "def isIPv4Address(inputString):\n    str_split = inputString.split(\".\")\n    count = 0\n    if len(str_split) != 4:\n        return False\n    for i in range(0, 4):\n        if str_split[i] == \"\" or str_split[i] == \"00\" or str_split[i] == \"01\":\n            return False\n        if re.search(\"[a-zA-Z]\", str_split[i]):\n            count += 1",
        "detail": "mid-range.IPv4Address",
        "documentation": {}
    },
    {
        "label": "IPythonDotEnv",
        "kind": 6,
        "importPath": "mid-range.ipython",
        "description": "mid-range.ipython",
        "peekOfCode": "class IPythonDotEnv(Magics):\n    @magic_arguments()\n    @argument(\n        \"-o\",\n        \"--override\",\n        action=\"store_true\",\n        help=\"Indicate to override existing variables\",\n    )\n    @argument(\n        \"-v\",",
        "detail": "mid-range.ipython",
        "documentation": {}
    },
    {
        "label": "load_ipython_extension",
        "kind": 2,
        "importPath": "mid-range.ipython",
        "description": "mid-range.ipython",
        "peekOfCode": "def load_ipython_extension(ipython):\n    \"\"\"Register the %dotenv magic.\"\"\"\n    ipython.register_magics(IPythonDotEnv)",
        "detail": "mid-range.ipython",
        "documentation": {}
    },
    {
        "label": "decrypt",
        "kind": 2,
        "importPath": "mid-range.isCryptSolution",
        "description": "mid-range.isCryptSolution",
        "peekOfCode": "def decrypt(word, dictionary):\n    lst = []\n    for c in word:\n        lst.append(dictionary[c])\n    return \"\".join(lst)\ndef isCryptSolution(crypt, solution):\n    dict = {}\n    for r in solution:\n        dict[r[0]] = r[1]\n    values = [0] * 3",
        "detail": "mid-range.isCryptSolution",
        "documentation": {}
    },
    {
        "label": "isCryptSolution",
        "kind": 2,
        "importPath": "mid-range.isCryptSolution",
        "description": "mid-range.isCryptSolution",
        "peekOfCode": "def isCryptSolution(crypt, solution):\n    dict = {}\n    for r in solution:\n        dict[r[0]] = r[1]\n    values = [0] * 3\n    for i in range(3):\n        val = decrypt(crypt[i], dict)\n        if val.startswith(\"0\") and len(val) > 1:\n            return False\n        values[i] = int(val)",
        "detail": "mid-range.isCryptSolution",
        "documentation": {}
    },
    {
        "label": "isIdentityMatrix",
        "kind": 2,
        "importPath": "mid-range.isIdentityMatrix",
        "description": "mid-range.isIdentityMatrix",
        "peekOfCode": "def isIdentityMatrix(matrix):\n    flag = True\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if i == j:\n                if matrix[i][j] != 1:\n                    return False\n            elif matrix[i][j] != 0:\n                return False\n    return flag",
        "detail": "mid-range.isIdentityMatrix",
        "documentation": {}
    },
    {
        "label": "isIPv4Address",
        "kind": 2,
        "importPath": "mid-range.isIPv4Address",
        "description": "mid-range.isIPv4Address",
        "peekOfCode": "def isIPv4Address(inputString):\n    try:\n        ip = ipaddress.ip_address(inputString)\n        return True\n    except ValueError:\n        return False",
        "detail": "mid-range.isIPv4Address",
        "documentation": {}
    },
    {
        "label": "csIsomorphicStrings",
        "kind": 2,
        "importPath": "mid-range.isisomorphicStrings",
        "description": "mid-range.isisomorphicStrings",
        "peekOfCode": "def csIsomorphicStrings(a, b):\n    max_chars = 256\n    m = len(a)\n    n = len(b)\n    if m != n:\n        return False\n    marked = [False] * max_chars\n    map = [-1] * max_chars\n    for i in range(n):\n        if map[ord(a[i])] == -1:",
        "detail": "mid-range.isisomorphicStrings",
        "documentation": {}
    },
    {
        "label": "island_counter",
        "kind": 2,
        "importPath": "mid-range.isl",
        "description": "mid-range.isl",
        "peekOfCode": "def island_counter(arr):\n    rows = len(arr)\n    cols = len(arr[0])\n    count = 0\n    for i in range(rows):\n        for j in range(cols):\n            if arr[i][j] == 1:\n                deleteOnes(arr, i, j, rows, cols)\n                count += 1\n    return count",
        "detail": "mid-range.isl",
        "documentation": {}
    },
    {
        "label": "deleteOnes",
        "kind": 2,
        "importPath": "mid-range.isl",
        "description": "mid-range.isl",
        "peekOfCode": "def deleteOnes(grid, i, j, rows, cols):\n    q = Queue()\n    q.enqueue([i, j])\n    grid[i][j] = 0\n    while q.size() > 0:\n        node = q.dequeue()\n        row = node[0]\n        col = node[1]\n        for row2, col2 in (\n            (row + 1, col),",
        "detail": "mid-range.isl",
        "documentation": {}
    },
    {
        "label": "islands",
        "kind": 5,
        "importPath": "mid-range.isl",
        "description": "mid-range.isl",
        "peekOfCode": "islands = [\n    [0, 1, 0, 1, 0],\n    [1, 1, 0, 1, 1],\n    [0, 0, 1, 0, 0],\n    [1, 0, 1, 0, 0],\n    [1, 1, 0, 0, 0],\n]\nisland_counter(islands)  # 4\nislands = [\n    [1, 0, 0, 1, 1, 0, 1, 1, 0, 1],",
        "detail": "mid-range.isl",
        "documentation": {}
    },
    {
        "label": "islands",
        "kind": 5,
        "importPath": "mid-range.isl",
        "description": "mid-range.isl",
        "peekOfCode": "islands = [\n    [1, 0, 0, 1, 1, 0, 1, 1, 0, 1],\n    [0, 0, 1, 1, 0, 1, 0, 0, 0, 0],\n    [0, 1, 1, 1, 0, 0, 0, 1, 0, 1],\n    [0, 0, 1, 0, 0, 1, 0, 0, 1, 1],\n    [0, 0, 1, 1, 0, 1, 0, 1, 1, 0],\n    [0, 1, 0, 1, 1, 1, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0, 1, 1, 0, 0, 0],\n    [1, 0, 1, 1, 0, 0, 0, 1, 1, 0],\n    [0, 1, 1, 0, 0, 0, 1, 1, 0, 0],",
        "detail": "mid-range.isl",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Island_Perimeter",
        "description": "mid-range.Island_Perimeter",
        "peekOfCode": "class Solution:\n    def islandPerimeter(self, grid):\n        if len(grid) == 0:\n            return 0\n        def findPerimeter(row, col):\n            side = 4\n            if row - 1 >= 0 and grid[row - 1][col] == 1:\n                side -= 1\n            if row + 1 < len(grid) and grid[row + 1][col] == 1:\n                side -= 1",
        "detail": "mid-range.Island_Perimeter",
        "documentation": {}
    },
    {
        "label": "isMAC48Address",
        "kind": 2,
        "importPath": "mid-range.isMAC48Address",
        "description": "mid-range.isMAC48Address",
        "peekOfCode": "def isMAC48Address(inputString):\n    \"\"\"Checks if inputString is a valid MAC48 address\n    Args:\n        inputString(string): String to check\n    Return:\n        Boolean indicating if string is valid MAC48 address\n    Raises:\n    \"\"\"\n    if re.match(\n        \"[0-9a-f]{2}([-:])[0-9a-f]{2}(\\\\1[0-9a-f]{2}){4}$\", inputString.lower()",
        "detail": "mid-range.isMAC48Address",
        "documentation": {}
    },
    {
        "label": "is_isogram",
        "kind": 2,
        "importPath": "mid-range.isogram",
        "description": "mid-range.isogram",
        "peekOfCode": "def is_isogram(word):\n    \"\"\"\n    An isogram (also known as a \"nonpattern word\")\n    is a logological term for a word or phrase\n    without a repeating letter\n    :param word: word to check\n    :return: bool\n    \"\"\"\n    # Make an empty list to append unique letters\n    letter_list = []",
        "detail": "mid-range.isogram",
        "documentation": {}
    },
    {
        "label": "get_code",
        "kind": 2,
        "importPath": "mid-range.isogram",
        "description": "mid-range.isogram",
        "peekOfCode": "def get_code():\n    \"\"\"\n    returns the code for the is_isogram function\n    :return: source code\n    \"\"\"\n    return inspect.getsource(is_isogram)",
        "detail": "mid-range.isogram",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Isomorphic_String",
        "description": "mid-range.Isomorphic_String",
        "peekOfCode": "class Solution:\n    def __init__(self, s, t):\n        self.s = s\n        self.t = t\n    def is_isomorphic(self):\n        dict = {}\n        for i in range(len(self.s)):\n            char_s = self.s[i]\n            char_t = self.t[i]\n            if char_s not in dict.keys():",
        "detail": "mid-range.Isomorphic_String",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.IsSubsequence",
        "description": "mid-range.IsSubsequence",
        "peekOfCode": "class Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        sp = 0\n        for tc in t:\n            if s[sp] == tc:\n                sp += 1",
        "detail": "mid-range.IsSubsequence",
        "documentation": {}
    },
    {
        "label": "isSubtree",
        "kind": 2,
        "importPath": "mid-range.isSubtree",
        "description": "mid-range.isSubtree",
        "peekOfCode": "def isSubtree(t1, t2):\n    def isEqual(left, right):\n        if left == None and right == None:\n            return True\n        if right == None and left != None:\n            return False\n        if left == None and right != None:\n            return False\n        return (\n            left.value == right.value",
        "detail": "mid-range.isSubtree",
        "documentation": {}
    },
    {
        "label": "isSum",
        "kind": 2,
        "importPath": "mid-range.isSum",
        "description": "mid-range.isSum",
        "peekOfCode": "def isSum(value):\n    s = 0\n    for i in range(100):\n        s += i\n        if s == value:\n            return True",
        "detail": "mid-range.isSum",
        "documentation": {}
    },
    {
        "label": "isEqual",
        "kind": 2,
        "importPath": "mid-range.isTreeSymmetric",
        "description": "mid-range.isTreeSymmetric",
        "peekOfCode": "def isEqual(left, right):\n    if left == None and right == None:\n        return True\n    if right == None and left != None:\n        return False\n    if left == None and right != None:\n        return False\n    if left.value != right.value:\n        return False\n    return isEqual(left.right, right.left) and isEqual(left.left, right.right)",
        "detail": "mid-range.isTreeSymmetric",
        "documentation": {}
    },
    {
        "label": "isTreeSymmetric",
        "kind": 2,
        "importPath": "mid-range.isTreeSymmetric",
        "description": "mid-range.isTreeSymmetric",
        "peekOfCode": "def isTreeSymmetric(t):\n    if t == None:\n        return True\n    return isEqual(t.left, t.right)",
        "detail": "mid-range.isTreeSymmetric",
        "documentation": {}
    },
    {
        "label": "isZigzag",
        "kind": 2,
        "importPath": "mid-range.isZigZag",
        "description": "mid-range.isZigZag",
        "peekOfCode": "def isZigzag(numbers):",
        "detail": "mid-range.isZigZag",
        "documentation": {}
    },
    {
        "label": "is_ascending_ll",
        "kind": 2,
        "importPath": "mid-range.is_ascending_ll",
        "description": "mid-range.is_ascending_ll",
        "peekOfCode": "def is_ascending_ll(ll):\n    while ll.next != None:\n        if ll.val >= ll.next.val:\n            return False\n        ll = ll.next\n    return True\n###########\n# Testing #\n###########\n# import build_ll method from ll_helpers.py",
        "detail": "mid-range.is_ascending_ll",
        "documentation": {}
    },
    {
        "label": "isBeautifulString",
        "kind": 2,
        "importPath": "mid-range.is_beautiful_string",
        "description": "mid-range.is_beautiful_string",
        "peekOfCode": "def isBeautifulString(inputString):\n    b = dict()\n    for char in inputString:\n        if ord(char) in b:\n            b[ord(char)] += 1\n        else:\n            b[ord(char)] = 1\n    for i in b.keys():\n        if i == 97:\n            continue",
        "detail": "mid-range.is_beautiful_string",
        "documentation": {}
    },
    {
        "label": "is_bst",
        "kind": 2,
        "importPath": "mid-range.is_bst",
        "description": "mid-range.is_bst",
        "peekOfCode": "def is_bst(root):\n    \"\"\"\n    :type root: TreeNode\n    :rtype: bool\n    \"\"\"\n    stack = []\n    pre = None\n    while root or stack:\n        while root:\n            stack.append(root)",
        "detail": "mid-range.is_bst",
        "documentation": {}
    },
    {
        "label": "isCryptSolution",
        "kind": 2,
        "importPath": "mid-range.is_crypt_solution",
        "description": "mid-range.is_crypt_solution",
        "peekOfCode": "def isCryptSolution(crypt, solution):\n    decoded_words, decoded_word = [], \"\"\n    # Decode the words in the cryptarithm\n    for i in range(len(crypt)):\n        for j in range(len(crypt[i])):\n            for k in range(len(solution)):\n                if crypt[i][j] == solution[k][0]:\n                    decoded_word += solution[k][1]\n        decoded_words.append(decoded_word)\n        decoded_word = \"\"",
        "detail": "mid-range.is_crypt_solution",
        "documentation": {}
    },
    {
        "label": "isInfiniteProcess",
        "kind": 2,
        "importPath": "mid-range.is_infinite_process",
        "description": "mid-range.is_infinite_process",
        "peekOfCode": "def isInfiniteProcess(a, b):\n\t\"\"\"\n\tGiven integers a and b, determine whether the following \n\tpseudocode results in an infinite loop\n\twhile a is not equal to b do\n\t\tincrease a by 1\n\t\tdecrease b by 1\n\tAssume that the program is executed on a virtual machine \n\twhich can store arbitrary long numbers and execute forever.\n\t\"\"\"",
        "detail": "mid-range.is_infinite_process",
        "documentation": {}
    },
    {
        "label": "isLucky",
        "kind": 2,
        "importPath": "mid-range.is_lucky",
        "description": "mid-range.is_lucky",
        "peekOfCode": "def isLucky(n):\n    digits = [int(digit) for digit in str(n)]\n    if len(digits) % 2 == 1:\n        return False\n    else:\n        digits = [int(digit) for digit in str(n)]\n        mid = len(digits) // 2\n        if sum(digits[:mid]) == sum(digits[mid:]):\n            return True\n        else:",
        "detail": "mid-range.is_lucky",
        "documentation": {}
    },
    {
        "label": "is_palindrome",
        "kind": 2,
        "importPath": "mid-range.is_palindrome",
        "description": "mid-range.is_palindrome",
        "peekOfCode": "def is_palindrome(s):\n    if s[::-1] == s:\n        return True\n    return False",
        "detail": "mid-range.is_palindrome",
        "documentation": {}
    },
    {
        "label": "is_palindrome",
        "kind": 2,
        "importPath": "mid-range.is_palindrome_two_liner",
        "description": "mid-range.is_palindrome_two_liner",
        "peekOfCode": "def is_palindrome(s):\n\t# String Clenasing\n\ts = \"\".join([char for char in list(s.lower()) if char in list(string.ascii_lowercase)])\n\t# (index+1) * -1 gives negative index of corresponding counterpart\n\t# for e.g. s = \"noon\"  s[0] = s[-1] = \"n\"  and so on \n\t#  all() and list comprehensions make task so easy!!\n\treturn all([s[index]==s[(index+1)*-1] for index in range(0, len(s))])\n# Tests\nprint(is_palindrome(\"racecar\"))\nprint(is_palindrome(\"ra cec, a?r   \"))  // True",
        "detail": "mid-range.is_palindrome_two_liner",
        "documentation": {}
    },
    {
        "label": "\ts",
        "kind": 5,
        "importPath": "mid-range.is_palindrome_two_liner",
        "description": "mid-range.is_palindrome_two_liner",
        "peekOfCode": "\ts = \"\".join([char for char in list(s.lower()) if char in list(string.ascii_lowercase)])\n\t# (index+1) * -1 gives negative index of corresponding counterpart\n\t# for e.g. s = \"noon\"  s[0] = s[-1] = \"n\"  and so on \n\t#  all() and list comprehensions make task so easy!!\n\treturn all([s[index]==s[(index+1)*-1] for index in range(0, len(s))])\n# Tests\nprint(is_palindrome(\"racecar\"))\nprint(is_palindrome(\"ra cec, a?r   \"))  // True\nprint(is_palindrome(\"noooonnn\"))\nprint(is_palindrome(\"cool..eh\")",
        "detail": "mid-range.is_palindrome_two_liner",
        "documentation": {}
    },
    {
        "label": "is_sorted",
        "kind": 2,
        "importPath": "mid-range.is_sorted",
        "description": "mid-range.is_sorted",
        "peekOfCode": "def is_sorted(stack):\n    storage_stack = []\n    for i in range(len(stack)):\n        if len(stack) == 0:\n            break\n        first_val = stack.pop()\n        if len(stack) == 0:\n            break\n        second_val = stack.pop()\n        if first_val < second_val:",
        "detail": "mid-range.is_sorted",
        "documentation": {}
    },
    {
        "label": "is_square_free",
        "kind": 2,
        "importPath": "mid-range.is_square_free",
        "description": "mid-range.is_square_free",
        "peekOfCode": "def is_square_free(factors: list[int]) -> bool:\n    \"\"\"\n    # doctest: +NORMALIZE_WHITESPACE\n    This functions takes a list of prime factors as input.\n    returns True if the factors are square free.\n    >>> is_square_free([1, 1, 2, 3, 4])\n    False\n    These are wrong but should return some value\n    it simply checks for repition in the numbers.\n    >>> is_square_free([1, 3, 4, 'sd', 0.0])",
        "detail": "mid-range.is_square_free",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Is_Subsequence",
        "description": "mid-range.Is_Subsequence",
        "peekOfCode": "class Solution:\n    def isSubsequence(self, s, t):\n        pointer1 = 0\n        pointer2 = 0\n        while pointer1 < len(s) and pointer2 < len(t):\n            if s[pointer1] == t[pointer2]:\n                pointer1 += 1\n            pointer2 += 1\n        if pointer1 == len(s):\n            return True",
        "detail": "mid-range.Is_Subsequence",
        "documentation": {}
    },
    {
        "label": "__docformat__",
        "kind": 5,
        "importPath": "mid-range.it",
        "description": "mid-range.it",
        "peekOfCode": "__docformat__ = \"reStructuredText\"\nlabels = {\n    \"author\": \"Autore\",\n    \"authors\": \"Autori\",\n    \"organization\": \"Organizzazione\",\n    \"address\": \"Indirizzo\",\n    \"contact\": \"Contatti\",\n    \"version\": \"Versione\",\n    \"revision\": \"Revisione\",\n    \"status\": \"Status\",",
        "detail": "mid-range.it",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "mid-range.it",
        "description": "mid-range.it",
        "peekOfCode": "labels = {\n    \"author\": \"Autore\",\n    \"authors\": \"Autori\",\n    \"organization\": \"Organizzazione\",\n    \"address\": \"Indirizzo\",\n    \"contact\": \"Contatti\",\n    \"version\": \"Versione\",\n    \"revision\": \"Revisione\",\n    \"status\": \"Status\",\n    \"date\": \"Data\",",
        "detail": "mid-range.it",
        "documentation": {}
    },
    {
        "label": "bibliographic_fields",
        "kind": 5,
        "importPath": "mid-range.it",
        "description": "mid-range.it",
        "peekOfCode": "bibliographic_fields = {\n    \"autore\": \"author\",\n    \"autori\": \"authors\",\n    \"organizzazione\": \"organization\",\n    \"indirizzo\": \"address\",\n    \"contatto\": \"contact\",\n    \"versione\": \"version\",\n    \"revisione\": \"revision\",\n    \"status\": \"status\",\n    \"data\": \"date\",",
        "detail": "mid-range.it",
        "documentation": {}
    },
    {
        "label": "author_separators",
        "kind": 5,
        "importPath": "mid-range.it",
        "description": "mid-range.it",
        "peekOfCode": "author_separators = [\";\", \",\"]\n\"\"\"List of separator strings for the 'Authors' bibliographic field. Tried in\norder.\"\"\"",
        "detail": "mid-range.it",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "mid-range.item",
        "description": "mid-range.item",
        "peekOfCode": "class Item:\n    def __init__(self, name, description):\n        self.name = name\n        self.description = description\n    def __str__(self):\n        return f\"{self.name}\\n{self.description}\"",
        "detail": "mid-range.item",
        "documentation": {}
    },
    {
        "label": "FundrazrItem",
        "kind": 6,
        "importPath": "mid-range.items",
        "description": "mid-range.items",
        "peekOfCode": "class FundrazrItem(scrapy.Item):\n    campaignTitle = scrapy.Field()\n    amountRaised = scrapy.Field()\n    goal = scrapy.Field()\n    currencyType = scrapy.Field()\n    endDate = scrapy.Field()\n    numberContributors = scrapy.Field()\n    story = scrapy.Field()\n    url = scrapy.Field()",
        "detail": "mid-range.items",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "mid-range.item_index",
        "description": "mid-range.item_index",
        "peekOfCode": "def index(array, item):\n\tindex = 0\n\tfound = False\n\twhile (not found):\n\t\tif (array[index] == item):\n\t\t\tfound = True\n\t\telse:\n\t\t\tindex = index + 1\n\treturn index \nprint index([12, 34], 34)",
        "detail": "mid-range.item_index",
        "documentation": {}
    },
    {
        "label": "\tindex",
        "kind": 5,
        "importPath": "mid-range.item_index",
        "description": "mid-range.item_index",
        "peekOfCode": "\tindex = 0\n\tfound = False\n\twhile (not found):\n\t\tif (array[index] == item):\n\t\t\tfound = True\n\t\telse:\n\t\t\tindex = index + 1\n\treturn index \nprint index([12, 34], 34)",
        "detail": "mid-range.item_index",
        "documentation": {}
    },
    {
        "label": "\tfound",
        "kind": 5,
        "importPath": "mid-range.item_index",
        "description": "mid-range.item_index",
        "peekOfCode": "\tfound = False\n\twhile (not found):\n\t\tif (array[index] == item):\n\t\t\tfound = True\n\t\telse:\n\t\t\tindex = index + 1\n\treturn index \nprint index([12, 34], 34)",
        "detail": "mid-range.item_index",
        "documentation": {}
    },
    {
        "label": "\t\t\tfound",
        "kind": 5,
        "importPath": "mid-range.item_index",
        "description": "mid-range.item_index",
        "peekOfCode": "\t\t\tfound = True\n\t\telse:\n\t\t\tindex = index + 1\n\treturn index \nprint index([12, 34], 34)",
        "detail": "mid-range.item_index",
        "documentation": {}
    },
    {
        "label": "\t\t\tindex",
        "kind": 5,
        "importPath": "mid-range.item_index",
        "description": "mid-range.item_index",
        "peekOfCode": "\t\t\tindex = index + 1\n\treturn index \nprint index([12, 34], 34)",
        "detail": "mid-range.item_index",
        "documentation": {}
    },
    {
        "label": "list_of_submasks",
        "kind": 2,
        "importPath": "mid-range.iterating_through_submasks",
        "description": "mid-range.iterating_through_submasks",
        "peekOfCode": "def list_of_submasks(mask: int) -> list[int]:\n    \"\"\"\n    Args:\n        mask : number which shows mask ( always integer > 0, zero does not have any\n            submasks )\n    Returns:\n        all_submasks : the list of submasks of mask (mask s is called submask of mask\n        m if only bits that were included in original mask are set\n    Raises:\n        AssertionError: mask not positive integer",
        "detail": "mid-range.iterating_through_submasks",
        "documentation": {}
    },
    {
        "label": "merge",
        "kind": 2,
        "importPath": "mid-range.iterative_merge_sort",
        "description": "mid-range.iterative_merge_sort",
        "peekOfCode": "def merge(input_list: list, low: int, mid: int, high: int) -> list:\n    \"\"\"\n    sorting left-half and right-half individually\n    then merging them into result\n    \"\"\"\n    result = []\n    left, right = input_list[low:mid], input_list[mid : high + 1]\n    while left and right:\n        result.append((left if left[0] <= right[0] else right).pop(0))\n    input_list[low : high + 1] = result + left + right",
        "detail": "mid-range.iterative_merge_sort",
        "documentation": {}
    },
    {
        "label": "iter_merge_sort",
        "kind": 2,
        "importPath": "mid-range.iterative_merge_sort",
        "description": "mid-range.iterative_merge_sort",
        "peekOfCode": "def iter_merge_sort(input_list: list) -> list:\n    \"\"\"\n    Return a sorted copy of the input list\n    >>> iter_merge_sort([5, 9, 8, 7, 1, 2, 7])\n    [1, 2, 5, 7, 7, 8, 9]\n    >>> iter_merge_sort([6])\n    [6]\n    >>> iter_merge_sort([])\n    []\n    >>> iter_merge_sort([-2, -9, -1, -4])",
        "detail": "mid-range.iterative_merge_sort",
        "documentation": {}
    },
    {
        "label": "selection_sort",
        "kind": 2,
        "importPath": "mid-range.iterative_sorting",
        "description": "mid-range.iterative_sorting",
        "peekOfCode": "def selection_sort(arr):\n    # loop through n-1 elements\n    for i in range(0, len(arr) - 1):\n        # set sorted item index to i\n        cur_index = i\n        # give smallest a sentinal value\n        smallest_index = cur_index\n        # TO-DO: find next smallest element\n        # loop over elements at right hand side of current index (current index + 1)\n        # our ranege is the current index to the len of array - 1",
        "detail": "mid-range.iterative_sorting",
        "documentation": {}
    },
    {
        "label": "insertion_sort",
        "kind": 2,
        "importPath": "mid-range.iterative_sorting",
        "description": "mid-range.iterative_sorting",
        "peekOfCode": "def insertion_sort(arr):\n    # loop through n-1 elements\n    for i in range(1, len(arr)):\n        temp = arr[i]\n        j = i\n        while j > 0 and temp < arr[j - 1]:\n            # shift left until correct position found\n            arr[j] = arr[j - 1]\n            j -= 1\n        # insert at correct position",
        "detail": "mid-range.iterative_sorting",
        "documentation": {}
    },
    {
        "label": "bubble_sort",
        "kind": 2,
        "importPath": "mid-range.iterative_sorting",
        "description": "mid-range.iterative_sorting",
        "peekOfCode": "def bubble_sort(arr):\n    return arr\n# STRETCH: implement the Count Sort function below\ndef count_sort(arr, maximum=-1):\n    return arr",
        "detail": "mid-range.iterative_sorting",
        "documentation": {}
    },
    {
        "label": "count_sort",
        "kind": 2,
        "importPath": "mid-range.iterative_sorting",
        "description": "mid-range.iterative_sorting",
        "peekOfCode": "def count_sort(arr, maximum=-1):\n    return arr",
        "detail": "mid-range.iterative_sorting",
        "documentation": {}
    },
    {
        "label": "product",
        "kind": 2,
        "importPath": "mid-range.itertools",
        "description": "mid-range.itertools",
        "peekOfCode": "def product(*iterables, **tqdm_kwargs):\n    \"\"\"\n    Equivalent of `itertools.product`.\n    Parameters\n    ----------\n    tqdm_class  : [default: tqdm.auto.tqdm].\n    \"\"\"\n    kwargs = tqdm_kwargs.copy()\n    tqdm_class = kwargs.pop(\"tqdm_class\", tqdm_auto)\n    try:",
        "detail": "mid-range.itertools",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "mid-range.itertools",
        "description": "mid-range.itertools",
        "peekOfCode": "__author__ = {\"github.com/\": [\"casperdcl\"]}\n__all__ = [\"product\"]\ndef product(*iterables, **tqdm_kwargs):\n    \"\"\"\n    Equivalent of `itertools.product`.\n    Parameters\n    ----------\n    tqdm_class  : [default: tqdm.auto.tqdm].\n    \"\"\"\n    kwargs = tqdm_kwargs.copy()",
        "detail": "mid-range.itertools",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.itertools",
        "description": "mid-range.itertools",
        "peekOfCode": "__all__ = [\"product\"]\ndef product(*iterables, **tqdm_kwargs):\n    \"\"\"\n    Equivalent of `itertools.product`.\n    Parameters\n    ----------\n    tqdm_class  : [default: tqdm.auto.tqdm].\n    \"\"\"\n    kwargs = tqdm_kwargs.copy()\n    tqdm_class = kwargs.pop(\"tqdm_class\", tqdm_auto)",
        "detail": "mid-range.itertools",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "mid-range.itertools_accumulate_custom",
        "description": "mid-range.itertools_accumulate_custom",
        "peekOfCode": "def f(a, b):\n    print(a, b)\n    return b + a + b\nprint(list(accumulate(\"abcde\", f)))",
        "detail": "mid-range.itertools_accumulate_custom",
        "documentation": {}
    },
    {
        "label": "make_iterables_to_chain",
        "kind": 2,
        "importPath": "mid-range.itertools_chain_from_iterable",
        "description": "mid-range.itertools_chain_from_iterable",
        "peekOfCode": "def make_iterables_to_chain():\n    yield [1, 2, 3]\n    yield [\"a\", \"b\", \"c\"]\nfor i in chain.from_iterable(make_iterables_to_chain()):\n    print(i, end=\" \")\nprint()",
        "detail": "mid-range.itertools_chain_from_iterable",
        "documentation": {}
    },
    {
        "label": "show",
        "kind": 2,
        "importPath": "mid-range.itertools_combinations",
        "description": "mid-range.itertools_combinations",
        "peekOfCode": "def show(iterable):\n    first = None\n    for i, item in enumerate(iterable, 1):\n        if first != item[0]:\n            if first is not None:\n                print()\n            first = item[0]\n        print(\"\".join(item), end=\" \")\n    print()\nprint(\"Unique pairs:\\n\")",
        "detail": "mid-range.itertools_combinations",
        "documentation": {}
    },
    {
        "label": "show",
        "kind": 2,
        "importPath": "mid-range.itertools_combinations_with_replacement",
        "description": "mid-range.itertools_combinations_with_replacement",
        "peekOfCode": "def show(iterable):\n    first = None\n    for i, item in enumerate(iterable, 1):\n        if first != item[0]:\n            if first is not None:\n                print()\n            first = item[0]\n        print(\"\".join(item), end=\" \")\n    print()\nprint(\"Unique pairs:\\n\")",
        "detail": "mid-range.itertools_combinations_with_replacement",
        "documentation": {}
    },
    {
        "label": "every_third",
        "kind": 5,
        "importPath": "mid-range.itertools_compress",
        "description": "mid-range.itertools_compress",
        "peekOfCode": "every_third = cycle([False, False, True])\ndata = range(1, 10)\nfor i in compress(data, every_third):\n    print(i, end=\" \")\nprint()",
        "detail": "mid-range.itertools_compress",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.itertools_compress",
        "description": "mid-range.itertools_compress",
        "peekOfCode": "data = range(1, 10)\nfor i in compress(data, every_third):\n    print(i, end=\" \")\nprint()",
        "detail": "mid-range.itertools_compress",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "mid-range.itertools_count_step",
        "description": "mid-range.itertools_count_step",
        "peekOfCode": "start = fractions.Fraction(1, 3)\nstep = fractions.Fraction(1, 3)\nfor i in zip(count(start, step), [\"a\", \"b\", \"c\"]):\n    print(\"{}: {}\".format(*i))",
        "detail": "mid-range.itertools_count_step",
        "documentation": {}
    },
    {
        "label": "step",
        "kind": 5,
        "importPath": "mid-range.itertools_count_step",
        "description": "mid-range.itertools_count_step",
        "peekOfCode": "step = fractions.Fraction(1, 3)\nfor i in zip(count(start, step), [\"a\", \"b\", \"c\"]):\n    print(\"{}: {}\".format(*i))",
        "detail": "mid-range.itertools_count_step",
        "documentation": {}
    },
    {
        "label": "should_drop",
        "kind": 2,
        "importPath": "mid-range.itertools_dropwhile",
        "description": "mid-range.itertools_dropwhile",
        "peekOfCode": "def should_drop(x):\n    print(\"Testing:\", x)\n    return x < 1\nfor i in dropwhile(should_drop, [-1, 0, 1, 2, -2]):\n    print(\"Yielding:\", i)",
        "detail": "mid-range.itertools_dropwhile",
        "documentation": {}
    },
    {
        "label": "check_item",
        "kind": 2,
        "importPath": "mid-range.itertools_filter",
        "description": "mid-range.itertools_filter",
        "peekOfCode": "def check_item(x):\n    print(\"Testing:\", x)\n    return x < 1\nfor i in filter(check_item, [-1, 0, 1, 2, -2]):\n    print(\"Yielding:\", i)",
        "detail": "mid-range.itertools_filter",
        "documentation": {}
    },
    {
        "label": "check_item",
        "kind": 2,
        "importPath": "mid-range.itertools_filterfalse",
        "description": "mid-range.itertools_filterfalse",
        "peekOfCode": "def check_item(x):\n    print(\"Testing:\", x)\n    return x < 1\nfor i in filterfalse(check_item, [-1, 0, 1, 2, -2]):\n    print(\"Yielding:\", i)",
        "detail": "mid-range.itertools_filterfalse",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mid-range.itertools_groupby",
        "description": "mid-range.itertools_groupby",
        "peekOfCode": "d = dict(a=1, b=2, c=1, d=2, e=1, f=2, g=3)\ndi = sorted(d.iteritems(), key=itemgetter(1))\nfor k, g in groupby(di, key=itemgetter(1)):\n    print(k, map(itemgetter(0), g))",
        "detail": "mid-range.itertools_groupby",
        "documentation": {}
    },
    {
        "label": "di",
        "kind": 5,
        "importPath": "mid-range.itertools_groupby",
        "description": "mid-range.itertools_groupby",
        "peekOfCode": "di = sorted(d.iteritems(), key=itemgetter(1))\nfor k, g in groupby(di, key=itemgetter(1)):\n    print(k, map(itemgetter(0), g))",
        "detail": "mid-range.itertools_groupby",
        "documentation": {}
    },
    {
        "label": "Point",
        "kind": 6,
        "importPath": "mid-range.itertools_groupby_seq",
        "description": "mid-range.itertools_groupby_seq",
        "peekOfCode": "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return \"({}, {})\".format(self.x, self.y)\n    def __eq__(self, other):\n        return (self.x, self.y) == (other.x, other.y)\n    def __gt__(self, other):\n        return (self.x, self.y) > (other.x, other.y)",
        "detail": "mid-range.itertools_groupby_seq",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.itertools_groupby_seq",
        "description": "mid-range.itertools_groupby_seq",
        "peekOfCode": "data = list(map(Point, cycle(islice(count(), 3)), islice(count(), 7)))\nprint(\"Data:\")\npprint.pprint(data, width=35)\nprint()\n# Try to group the unsorted data based on X values\nprint(\"Grouped, unsorted:\")\nfor k, g in groupby(data, operator.attrgetter(\"x\")):\n    print(k, list(g))\nprint()\n# Sort the data",
        "detail": "mid-range.itertools_groupby_seq",
        "documentation": {}
    },
    {
        "label": "times_two",
        "kind": 2,
        "importPath": "mid-range.itertools_map",
        "description": "mid-range.itertools_map",
        "peekOfCode": "def times_two(x):\n    return 2 * x\ndef multiply(x, y):\n    return (x, y, x * y)\nprint(\"Doubles:\")\nfor i in map(times_two, range(5)):\n    print(i)\nprint(\"\\nMultiples:\")\nr1 = range(5)\nr2 = range(5, 10)",
        "detail": "mid-range.itertools_map",
        "documentation": {}
    },
    {
        "label": "multiply",
        "kind": 2,
        "importPath": "mid-range.itertools_map",
        "description": "mid-range.itertools_map",
        "peekOfCode": "def multiply(x, y):\n    return (x, y, x * y)\nprint(\"Doubles:\")\nfor i in map(times_two, range(5)):\n    print(i)\nprint(\"\\nMultiples:\")\nr1 = range(5)\nr2 = range(5, 10)\nfor i in map(multiply, r1, r2):\n    print(\"{:d} * {:d} = {:d}\".format(*i))",
        "detail": "mid-range.itertools_map",
        "documentation": {}
    },
    {
        "label": "r1",
        "kind": 5,
        "importPath": "mid-range.itertools_map",
        "description": "mid-range.itertools_map",
        "peekOfCode": "r1 = range(5)\nr2 = range(5, 10)\nfor i in map(multiply, r1, r2):\n    print(\"{:d} * {:d} = {:d}\".format(*i))\nprint(\"\\nStopping:\")\nr1 = range(5)\nr2 = range(2)\nfor i in map(multiply, r1, r2):\n    print(i)",
        "detail": "mid-range.itertools_map",
        "documentation": {}
    },
    {
        "label": "r2",
        "kind": 5,
        "importPath": "mid-range.itertools_map",
        "description": "mid-range.itertools_map",
        "peekOfCode": "r2 = range(5, 10)\nfor i in map(multiply, r1, r2):\n    print(\"{:d} * {:d} = {:d}\".format(*i))\nprint(\"\\nStopping:\")\nr1 = range(5)\nr2 = range(2)\nfor i in map(multiply, r1, r2):\n    print(i)",
        "detail": "mid-range.itertools_map",
        "documentation": {}
    },
    {
        "label": "r1",
        "kind": 5,
        "importPath": "mid-range.itertools_map",
        "description": "mid-range.itertools_map",
        "peekOfCode": "r1 = range(5)\nr2 = range(2)\nfor i in map(multiply, r1, r2):\n    print(i)",
        "detail": "mid-range.itertools_map",
        "documentation": {}
    },
    {
        "label": "r2",
        "kind": 5,
        "importPath": "mid-range.itertools_map",
        "description": "mid-range.itertools_map",
        "peekOfCode": "r2 = range(2)\nfor i in map(multiply, r1, r2):\n    print(i)",
        "detail": "mid-range.itertools_map",
        "documentation": {}
    },
    {
        "label": "show",
        "kind": 2,
        "importPath": "mid-range.itertools_permutations",
        "description": "mid-range.itertools_permutations",
        "peekOfCode": "def show(iterable):\n    first = None\n    for i, item in enumerate(iterable, 1):\n        if first != item[0]:\n            if first is not None:\n                print()\n            first = item[0]\n        print(\"\".join(item), end=\" \")\n    print()\nprint(\"All permutations:\\n\")",
        "detail": "mid-range.itertools_permutations",
        "documentation": {}
    },
    {
        "label": "FACE_CARDS",
        "kind": 5,
        "importPath": "mid-range.itertools_product",
        "description": "mid-range.itertools_product",
        "peekOfCode": "FACE_CARDS = (\"J\", \"Q\", \"K\", \"A\")\nSUITS = (\"H\", \"D\", \"C\", \"S\")\nDECK = list(product(chain(range(2, 11), FACE_CARDS), SUITS))\nfor card in DECK:\n    print(\"{:>2}{}\".format(*card), end=\" \")\n    if card[1] == SUITS[-1]:\n        print()",
        "detail": "mid-range.itertools_product",
        "documentation": {}
    },
    {
        "label": "SUITS",
        "kind": 5,
        "importPath": "mid-range.itertools_product",
        "description": "mid-range.itertools_product",
        "peekOfCode": "SUITS = (\"H\", \"D\", \"C\", \"S\")\nDECK = list(product(chain(range(2, 11), FACE_CARDS), SUITS))\nfor card in DECK:\n    print(\"{:>2}{}\".format(*card), end=\" \")\n    if card[1] == SUITS[-1]:\n        print()",
        "detail": "mid-range.itertools_product",
        "documentation": {}
    },
    {
        "label": "DECK",
        "kind": 5,
        "importPath": "mid-range.itertools_product",
        "description": "mid-range.itertools_product",
        "peekOfCode": "DECK = list(product(chain(range(2, 11), FACE_CARDS), SUITS))\nfor card in DECK:\n    print(\"{:>2}{}\".format(*card), end=\" \")\n    if card[1] == SUITS[-1]:\n        print()",
        "detail": "mid-range.itertools_product",
        "documentation": {}
    },
    {
        "label": "FACE_CARDS",
        "kind": 5,
        "importPath": "mid-range.itertools_product_ordering",
        "description": "mid-range.itertools_product_ordering",
        "peekOfCode": "FACE_CARDS = (\"J\", \"Q\", \"K\", \"A\")\nSUITS = (\"H\", \"D\", \"C\", \"S\")\nDECK = list(product(SUITS, chain(range(2, 11), FACE_CARDS)))\nfor card in DECK:\n    print(\"{:>2}{}\".format(card[1], card[0]), end=\" \")\n    if card[1] == FACE_CARDS[-1]:\n        print()",
        "detail": "mid-range.itertools_product_ordering",
        "documentation": {}
    },
    {
        "label": "SUITS",
        "kind": 5,
        "importPath": "mid-range.itertools_product_ordering",
        "description": "mid-range.itertools_product_ordering",
        "peekOfCode": "SUITS = (\"H\", \"D\", \"C\", \"S\")\nDECK = list(product(SUITS, chain(range(2, 11), FACE_CARDS)))\nfor card in DECK:\n    print(\"{:>2}{}\".format(card[1], card[0]), end=\" \")\n    if card[1] == FACE_CARDS[-1]:\n        print()",
        "detail": "mid-range.itertools_product_ordering",
        "documentation": {}
    },
    {
        "label": "DECK",
        "kind": 5,
        "importPath": "mid-range.itertools_product_ordering",
        "description": "mid-range.itertools_product_ordering",
        "peekOfCode": "DECK = list(product(SUITS, chain(range(2, 11), FACE_CARDS)))\nfor card in DECK:\n    print(\"{:>2}{}\".format(card[1], card[0]), end=\" \")\n    if card[1] == FACE_CARDS[-1]:\n        print()",
        "detail": "mid-range.itertools_product_ordering",
        "documentation": {}
    },
    {
        "label": "show",
        "kind": 2,
        "importPath": "mid-range.itertools_product_repeat",
        "description": "mid-range.itertools_product_repeat",
        "peekOfCode": "def show(iterable):\n    for i, item in enumerate(iterable, 1):\n        print(item, end=\" \")\n        if (i % 3) == 0:\n            print()\n    print()\nprint(\"Repeat 2:\\n\")\nshow(list(product(range(3), repeat=2)))\nprint(\"Repeat 3:\\n\")\nshow(list(product(range(3), repeat=3)))",
        "detail": "mid-range.itertools_product_repeat",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "mid-range.itertools_starmap",
        "description": "mid-range.itertools_starmap",
        "peekOfCode": "values = [(0, 5), (1, 6), (2, 7), (3, 8), (4, 9)]\nfor i in starmap(lambda x, y: (x, y, x * y), values):\n    print(\"{} * {} = {}\".format(*i))",
        "detail": "mid-range.itertools_starmap",
        "documentation": {}
    },
    {
        "label": "should_take",
        "kind": 2,
        "importPath": "mid-range.itertools_takewhile",
        "description": "mid-range.itertools_takewhile",
        "peekOfCode": "def should_take(x):\n    print(\"Testing:\", x)\n    return x < 2\nfor i in takewhile(should_take, [-1, 0, 1, 2, -2]):\n    print(\"Yielding:\", i)",
        "detail": "mid-range.itertools_takewhile",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "mid-range.itertools_tee",
        "description": "mid-range.itertools_tee",
        "peekOfCode": "r = islice(count(), 5)\ni1, i2 = tee(r)\nprint(\"i1:\", list(i1))\nprint(\"i2:\", list(i2))",
        "detail": "mid-range.itertools_tee",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "mid-range.itertools_tee_error",
        "description": "mid-range.itertools_tee_error",
        "peekOfCode": "r = islice(count(), 5)\ni1, i2 = tee(r)\nprint(\"r:\", end=\" \")\nfor i in r:\n    print(i, end=\" \")\n    if i > 1:\n        break\nprint()\nprint(\"i1:\", list(i1))\nprint(\"i2:\", list(i2))",
        "detail": "mid-range.itertools_tee_error",
        "documentation": {}
    },
    {
        "label": "r1",
        "kind": 5,
        "importPath": "mid-range.itertools_zip_longest",
        "description": "mid-range.itertools_zip_longest",
        "peekOfCode": "r1 = range(3)\nr2 = range(2)\nprint(\"zip stops early:\")\nprint(list(zip(r1, r2)))\nr1 = range(3)\nr2 = range(2)\nprint(\"\\nzip_longest processes all of the values:\")\nprint(list(zip_longest(r1, r2)))",
        "detail": "mid-range.itertools_zip_longest",
        "documentation": {}
    },
    {
        "label": "r2",
        "kind": 5,
        "importPath": "mid-range.itertools_zip_longest",
        "description": "mid-range.itertools_zip_longest",
        "peekOfCode": "r2 = range(2)\nprint(\"zip stops early:\")\nprint(list(zip(r1, r2)))\nr1 = range(3)\nr2 = range(2)\nprint(\"\\nzip_longest processes all of the values:\")\nprint(list(zip_longest(r1, r2)))",
        "detail": "mid-range.itertools_zip_longest",
        "documentation": {}
    },
    {
        "label": "r1",
        "kind": 5,
        "importPath": "mid-range.itertools_zip_longest",
        "description": "mid-range.itertools_zip_longest",
        "peekOfCode": "r1 = range(3)\nr2 = range(2)\nprint(\"\\nzip_longest processes all of the values:\")\nprint(list(zip_longest(r1, r2)))",
        "detail": "mid-range.itertools_zip_longest",
        "documentation": {}
    },
    {
        "label": "r2",
        "kind": 5,
        "importPath": "mid-range.itertools_zip_longest",
        "description": "mid-range.itertools_zip_longest",
        "peekOfCode": "r2 = range(2)\nprint(\"\\nzip_longest processes all of the values:\")\nprint(list(zip_longest(r1, r2)))",
        "detail": "mid-range.itertools_zip_longest",
        "documentation": {}
    },
    {
        "label": "__docformat__",
        "kind": 5,
        "importPath": "mid-range.ja",
        "description": "mid-range.ja",
        "peekOfCode": "__docformat__ = \"reStructuredText\"\nlabels = {\n    # fixed: language-dependent\n    \"author\": u\"著者\",\n    \"authors\": u\"著者\",\n    \"organization\": u\"組織\",\n    \"address\": u\"住所\",\n    \"contact\": u\"連絡先\",\n    \"version\": u\"バージョン\",\n    \"revision\": u\"リビジョン\",",
        "detail": "mid-range.ja",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "mid-range.ja",
        "description": "mid-range.ja",
        "peekOfCode": "labels = {\n    # fixed: language-dependent\n    \"author\": u\"著者\",\n    \"authors\": u\"著者\",\n    \"organization\": u\"組織\",\n    \"address\": u\"住所\",\n    \"contact\": u\"連絡先\",\n    \"version\": u\"バージョン\",\n    \"revision\": u\"リビジョン\",\n    \"status\": u\"ステータス\",",
        "detail": "mid-range.ja",
        "documentation": {}
    },
    {
        "label": "bibliographic_fields",
        "kind": 5,
        "importPath": "mid-range.ja",
        "description": "mid-range.ja",
        "peekOfCode": "bibliographic_fields = {\n    # language-dependent: fixed\n    u\"著者\": \"author\",\n    u\" n/a\": \"authors\",\n    u\"組織\": \"organization\",\n    u\"住所\": \"address\",\n    u\"連絡先\": \"contact\",\n    u\"バージョン\": \"version\",\n    u\"リビジョン\": \"revision\",\n    u\"ステータス\": \"status\",",
        "detail": "mid-range.ja",
        "documentation": {}
    },
    {
        "label": "author_separators",
        "kind": 5,
        "importPath": "mid-range.ja",
        "description": "mid-range.ja",
        "peekOfCode": "author_separators = [\";\", \",\"]\n\"\"\"List of separator strings for the 'Authors' bibliographic field. Tried in\norder.\"\"\"",
        "detail": "mid-range.ja",
        "documentation": {}
    },
    {
        "label": "jaccard_similariy",
        "kind": 2,
        "importPath": "mid-range.jaccard_similarity",
        "description": "mid-range.jaccard_similarity",
        "peekOfCode": "def jaccard_similariy(setA, setB, alternativeUnion=False):\n    \"\"\"\n    Finds the jaccard similarity between two sets.\n    Essentially, its intersection over union.\n    The alternative way to calculate this is to take union as sum of the\n    number of items in the two sets. This will lead to jaccard similarity\n    of a set with itself be 1/2 instead of 1. [MMDS 2nd Edition, Page 77]\n    Parameters:\n        :setA (set,list,tuple): A non-empty set/list\n        :setB (set,list,tuple): A non-empty set/list",
        "detail": "mid-range.jaccard_similarity",
        "documentation": {}
    },
    {
        "label": "jaro_winkler",
        "kind": 2,
        "importPath": "mid-range.jaro_winkler",
        "description": "mid-range.jaro_winkler",
        "peekOfCode": "def jaro_winkler(str1: str, str2: str) -> float:\n    \"\"\"\n    Jaro–Winkler distance is a string metric measuring an edit distance between two\n    sequences.\n    Output value is between 0.0 and 1.0.\n    >>> jaro_winkler(\"martha\", \"marhta\")\n    0.9611111111111111\n    >>> jaro_winkler(\"CRATE\", \"TRACE\")\n    0.7333333333333334\n    >>> jaro_winkler(\"test\", \"dbdbdbdb\")",
        "detail": "mid-range.jaro_winkler",
        "documentation": {}
    },
    {
        "label": "get_app",
        "kind": 2,
        "importPath": "mid-range.JARVIS",
        "description": "mid-range.JARVIS",
        "peekOfCode": "def get_app(Q):\n    if Q == \"time\":  # Show the time\n        print(datetime.now())\n    elif Q == \"notepad\":  # open the notepad\n        subprocess.call([\"Notepad.exe\"])\n    elif Q == \"calculator\":  # open the window calculator\n        subprocess.call([\"calc.exe\"])\n    elif Q == \"shell\":  # open the admin shell\n        subprocess.call([\"powershell.exe\"])\n    elif Q == \"paint\":  # open the MS-paint",
        "detail": "mid-range.JARVIS",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "mid-range.JARVIS",
        "description": "mid-range.JARVIS",
        "peekOfCode": "__author__ = \"Gautam Kumar Jaiswal <gautamjaiswal030@gmail.com>\"\n__version__ = \"v1.0\"\n\"\"\"\nJARVIS: Control windows programs with your voice\n\"\"\"\n# import modules\nfrom datetime import (\n    datetime,\n)  # datetime module supplies classes for manipulating dates and times\nimport subprocess  # subprocess module allows you to spawn new processes",
        "detail": "mid-range.JARVIS",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "mid-range.JARVIS",
        "description": "mid-range.JARVIS",
        "peekOfCode": "__version__ = \"v1.0\"\n\"\"\"\nJARVIS: Control windows programs with your voice\n\"\"\"\n# import modules\nfrom datetime import (\n    datetime,\n)  # datetime module supplies classes for manipulating dates and times\nimport subprocess  # subprocess module allows you to spawn new processes\nimport speech_recognition as sr  # speech_recognition Library for performing speech recognition with support for Google Speech Recognition, etc..",
        "detail": "mid-range.JARVIS",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "mid-range.JARVIS",
        "description": "mid-range.JARVIS",
        "peekOfCode": "engine = pyttsx3.init()\n# obtain audio from the microphone\nr = sr.Recognizer()\nwith sr.Microphone() as source:\n    engine.say(\"Say something\")\n    engine.runAndWait()\n    audio = r.listen(source)\n# recognize speech using Google Speech Recognition\nQuery = r.recognize_google(audio)\nprint(Query)",
        "detail": "mid-range.JARVIS",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "mid-range.JARVIS",
        "description": "mid-range.JARVIS",
        "peekOfCode": "r = sr.Recognizer()\nwith sr.Microphone() as source:\n    engine.say(\"Say something\")\n    engine.runAndWait()\n    audio = r.listen(source)\n# recognize speech using Google Speech Recognition\nQuery = r.recognize_google(audio)\nprint(Query)\n# Run Application with Voice Command Function\ndef get_app(Q):",
        "detail": "mid-range.JARVIS",
        "documentation": {}
    },
    {
        "label": "Query",
        "kind": 5,
        "importPath": "mid-range.JARVIS",
        "description": "mid-range.JARVIS",
        "peekOfCode": "Query = r.recognize_google(audio)\nprint(Query)\n# Run Application with Voice Command Function\ndef get_app(Q):\n    if Q == \"time\":  # Show the time\n        print(datetime.now())\n    elif Q == \"notepad\":  # open the notepad\n        subprocess.call([\"Notepad.exe\"])\n    elif Q == \"calculator\":  # open the window calculator\n        subprocess.call([\"calc.exe\"])",
        "detail": "mid-range.JARVIS",
        "documentation": {}
    },
    {
        "label": "csnakeltjazzy",
        "kind": 2,
        "importPath": "mid-range.jazzy",
        "description": "mid-range.jazzy",
        "peekOfCode": "def csnakeltjazzy(chords):\nnewchords - []\nfor chord in chords: [\nif chord.isdigit(): ‘\nj newchords.appendEchordfl\nelif len(chords) -- 9:\nreturn []\nelse:\naddSeven - chord\naddSeven - addSeven[e:] + \"7\"",
        "detail": "mid-range.jazzy",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Jewels_and_Stones",
        "description": "mid-range.Jewels_and_Stones",
        "peekOfCode": "class Solution:\n    def numJewelsInStones(self, J, S):\n        \"\"\"\n        :type J: str\n        :type S: str\n        :rtype: int\n        \"\"\"\n        count = 0\n        for i in J:\n            for j in S:",
        "detail": "mid-range.Jewels_and_Stones",
        "documentation": {}
    },
    {
        "label": "jimOrders",
        "kind": 2,
        "importPath": "mid-range.Jim-and-the-Orders",
        "description": "mid-range.Jim-and-the-Orders",
        "peekOfCode": "def jimOrders(orders):\n    res = []\n    for i in range(len(orders)):\n        orders[i].append(i + 1)\n    orders = sorted(orders, key=lambda x: x[0] + x[1])\n    for i in range(len(orders)):\n        res.append(orders[i][2])\n    return res\nif __name__ == \"__main__\":\n    fptr = open(os.environ[\"OUTPUT_PATH\"], \"w\")",
        "detail": "mid-range.Jim-and-the-Orders",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "mid-range.joblib",
        "description": "mid-range.joblib",
        "peekOfCode": "def register(name=\"ipyparallel\", make_default=False):\n    \"\"\"Register the default ipyparallel Client as a joblib backend\n    See joblib.parallel.register_parallel_backend for details.\n    \"\"\"\n    return register_parallel_backend(\n        name, IPythonParallelBackend, make_default=make_default\n    )",
        "detail": "mid-range.joblib",
        "documentation": {}
    },
    {
        "label": "jobSeq",
        "kind": 2,
        "importPath": "mid-range.job_seqquencing",
        "description": "mid-range.job_seqquencing",
        "peekOfCode": "def jobSeq(profit, deadline):\n    \"\"\"\n    :param profit: sorted list represents the profit gained from each task if done.\n    :param deadline: unsorted list represents the deadline for each task.\n    :return: max profit possible from a set of tasks given their deadline\n    \"\"\"\n    free_slots = max(deadline)\n    slots = [0] * free_slots\n    ans = 0\n    for i in range(len(profit)):",
        "detail": "mid-range.job_seqquencing",
        "documentation": {}
    },
    {
        "label": "profit",
        "kind": 5,
        "importPath": "mid-range.job_seqquencing",
        "description": "mid-range.job_seqquencing",
        "peekOfCode": "profit = [35, 40, 25, 20, 15, 10]\ndeadline = [3, 4, 4, 2, 3, 1]\nprint(jobSeq(profit, deadline))",
        "detail": "mid-range.job_seqquencing",
        "documentation": {}
    },
    {
        "label": "deadline",
        "kind": 5,
        "importPath": "mid-range.job_seqquencing",
        "description": "mid-range.job_seqquencing",
        "peekOfCode": "deadline = [3, 4, 4, 2, 3, 1]\nprint(jobSeq(profit, deadline))",
        "detail": "mid-range.job_seqquencing",
        "documentation": {}
    },
    {
        "label": "josephus_problem_recur",
        "kind": 2,
        "importPath": "mid-range.josephus_problem_recur",
        "description": "mid-range.josephus_problem_recur",
        "peekOfCode": "def josephus_problem_recur(n: int, k: int) -> int:\n    \"\"\"1-indexed, k-skips, Josephus problem, recursively.\"\"\"\n    if n == 1:\n        return 1\n    return (josephus_problem_recur(n - 1, k) + k - 1) % n + 1",
        "detail": "mid-range.josephus_problem_recur",
        "documentation": {}
    },
    {
        "label": "JoyStick",
        "kind": 6,
        "importPath": "mid-range.joystick",
        "description": "mid-range.joystick",
        "peekOfCode": "class JoyStick:\n    def __init__(self, eventFile):\n        self.eventFile = eventFile\n        self.buttonHandler = None\n        self.joyLeftHandler = None\n        self.joyRightHandler = None\n    def setButtonHandler(self, buttonHandler):\n        self.buttonHandler = buttonHandler\n    def setJoyLeftHandler(self, joyLeftHandler):\n        self.joyLeftHandler = joyLeftHandler",
        "detail": "mid-range.joystick",
        "documentation": {}
    },
    {
        "label": "BUTTON_A",
        "kind": 5,
        "importPath": "mid-range.joystick",
        "description": "mid-range.joystick",
        "peekOfCode": "BUTTON_A = 305\nBUTTON_B = 304\nBUTTON_X = 307\nBUTTON_Y = 306\nBUTTON_PLUS = 313\nBUTTON_MINUS = 312\nBUTTON_START = 317\nBUTTON_HOME = 316\nclass JoyStick:\n    def __init__(self, eventFile):",
        "detail": "mid-range.joystick",
        "documentation": {}
    },
    {
        "label": "BUTTON_B",
        "kind": 5,
        "importPath": "mid-range.joystick",
        "description": "mid-range.joystick",
        "peekOfCode": "BUTTON_B = 304\nBUTTON_X = 307\nBUTTON_Y = 306\nBUTTON_PLUS = 313\nBUTTON_MINUS = 312\nBUTTON_START = 317\nBUTTON_HOME = 316\nclass JoyStick:\n    def __init__(self, eventFile):\n        self.eventFile = eventFile",
        "detail": "mid-range.joystick",
        "documentation": {}
    },
    {
        "label": "BUTTON_X",
        "kind": 5,
        "importPath": "mid-range.joystick",
        "description": "mid-range.joystick",
        "peekOfCode": "BUTTON_X = 307\nBUTTON_Y = 306\nBUTTON_PLUS = 313\nBUTTON_MINUS = 312\nBUTTON_START = 317\nBUTTON_HOME = 316\nclass JoyStick:\n    def __init__(self, eventFile):\n        self.eventFile = eventFile\n        self.buttonHandler = None",
        "detail": "mid-range.joystick",
        "documentation": {}
    },
    {
        "label": "BUTTON_Y",
        "kind": 5,
        "importPath": "mid-range.joystick",
        "description": "mid-range.joystick",
        "peekOfCode": "BUTTON_Y = 306\nBUTTON_PLUS = 313\nBUTTON_MINUS = 312\nBUTTON_START = 317\nBUTTON_HOME = 316\nclass JoyStick:\n    def __init__(self, eventFile):\n        self.eventFile = eventFile\n        self.buttonHandler = None\n        self.joyLeftHandler = None",
        "detail": "mid-range.joystick",
        "documentation": {}
    },
    {
        "label": "BUTTON_PLUS",
        "kind": 5,
        "importPath": "mid-range.joystick",
        "description": "mid-range.joystick",
        "peekOfCode": "BUTTON_PLUS = 313\nBUTTON_MINUS = 312\nBUTTON_START = 317\nBUTTON_HOME = 316\nclass JoyStick:\n    def __init__(self, eventFile):\n        self.eventFile = eventFile\n        self.buttonHandler = None\n        self.joyLeftHandler = None\n        self.joyRightHandler = None",
        "detail": "mid-range.joystick",
        "documentation": {}
    },
    {
        "label": "BUTTON_MINUS",
        "kind": 5,
        "importPath": "mid-range.joystick",
        "description": "mid-range.joystick",
        "peekOfCode": "BUTTON_MINUS = 312\nBUTTON_START = 317\nBUTTON_HOME = 316\nclass JoyStick:\n    def __init__(self, eventFile):\n        self.eventFile = eventFile\n        self.buttonHandler = None\n        self.joyLeftHandler = None\n        self.joyRightHandler = None\n    def setButtonHandler(self, buttonHandler):",
        "detail": "mid-range.joystick",
        "documentation": {}
    },
    {
        "label": "BUTTON_START",
        "kind": 5,
        "importPath": "mid-range.joystick",
        "description": "mid-range.joystick",
        "peekOfCode": "BUTTON_START = 317\nBUTTON_HOME = 316\nclass JoyStick:\n    def __init__(self, eventFile):\n        self.eventFile = eventFile\n        self.buttonHandler = None\n        self.joyLeftHandler = None\n        self.joyRightHandler = None\n    def setButtonHandler(self, buttonHandler):\n        self.buttonHandler = buttonHandler",
        "detail": "mid-range.joystick",
        "documentation": {}
    },
    {
        "label": "BUTTON_HOME",
        "kind": 5,
        "importPath": "mid-range.joystick",
        "description": "mid-range.joystick",
        "peekOfCode": "BUTTON_HOME = 316\nclass JoyStick:\n    def __init__(self, eventFile):\n        self.eventFile = eventFile\n        self.buttonHandler = None\n        self.joyLeftHandler = None\n        self.joyRightHandler = None\n    def setButtonHandler(self, buttonHandler):\n        self.buttonHandler = buttonHandler\n    def setJoyLeftHandler(self, joyLeftHandler):",
        "detail": "mid-range.joystick",
        "documentation": {}
    },
    {
        "label": "dumps",
        "kind": 2,
        "importPath": "mid-range.jsonapi",
        "description": "mid-range.jsonapi",
        "peekOfCode": "def dumps(o: Any, **kwargs) -> bytes:\n    \"\"\"Serialize object to JSON bytes (utf-8).\n    Keyword arguments are passed along to :py:func:`json.dumps`.\n    \"\"\"\n    return json.dumps(o, **kwargs).encode(\"utf8\")\ndef loads(s: Union[bytes, str], **kwargs) -> Union[Dict, List, str, int, float]:\n    \"\"\"Load object from JSON bytes (utf-8).\n    Keyword arguments are passed along to :py:func:`json.loads`.\n    \"\"\"\n    if isinstance(s, bytes):",
        "detail": "mid-range.jsonapi",
        "documentation": {}
    },
    {
        "label": "loads",
        "kind": 2,
        "importPath": "mid-range.jsonapi",
        "description": "mid-range.jsonapi",
        "peekOfCode": "def loads(s: Union[bytes, str], **kwargs) -> Union[Dict, List, str, int, float]:\n    \"\"\"Load object from JSON bytes (utf-8).\n    Keyword arguments are passed along to :py:func:`json.loads`.\n    \"\"\"\n    if isinstance(s, bytes):\n        s = s.decode(\"utf8\")\n    return json.loads(s, **kwargs)\n__all__ = [\"dumps\", \"loads\"]",
        "detail": "mid-range.jsonapi",
        "documentation": {}
    },
    {
        "label": "jsonmod",
        "kind": 5,
        "importPath": "mid-range.jsonapi",
        "description": "mid-range.jsonapi",
        "peekOfCode": "jsonmod = json\ndef dumps(o: Any, **kwargs) -> bytes:\n    \"\"\"Serialize object to JSON bytes (utf-8).\n    Keyword arguments are passed along to :py:func:`json.dumps`.\n    \"\"\"\n    return json.dumps(o, **kwargs).encode(\"utf8\")\ndef loads(s: Union[bytes, str], **kwargs) -> Union[Dict, List, str, int, float]:\n    \"\"\"Load object from JSON bytes (utf-8).\n    Keyword arguments are passed along to :py:func:`json.loads`.\n    \"\"\"",
        "detail": "mid-range.jsonapi",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.jsonapi",
        "description": "mid-range.jsonapi",
        "peekOfCode": "__all__ = [\"dumps\", \"loads\"]",
        "detail": "mid-range.jsonapi",
        "documentation": {}
    },
    {
        "label": "SphinxJSONEncoder",
        "kind": 6,
        "importPath": "mid-range.jsonimpl",
        "description": "mid-range.jsonimpl",
        "peekOfCode": "class SphinxJSONEncoder(json.JSONEncoder):\n    \"\"\"JSONEncoder subclass that forces translation proxies.\"\"\"\n    def default(self, obj):\n        # type: (Any) -> str\n        if isinstance(obj, UserString):\n            return str(obj)\n        return super().default(obj)\ndef dump(obj, fp, *args, **kwds):\n    # type: (Any, IO, Any, Any) -> None\n    kwds[\"cls\"] = SphinxJSONEncoder",
        "detail": "mid-range.jsonimpl",
        "documentation": {}
    },
    {
        "label": "dump",
        "kind": 2,
        "importPath": "mid-range.jsonimpl",
        "description": "mid-range.jsonimpl",
        "peekOfCode": "def dump(obj, fp, *args, **kwds):\n    # type: (Any, IO, Any, Any) -> None\n    kwds[\"cls\"] = SphinxJSONEncoder\n    json.dump(obj, fp, *args, **kwds)\ndef dumps(obj, *args, **kwds):\n    # type: (Any, Any, Any) -> str\n    kwds[\"cls\"] = SphinxJSONEncoder\n    return json.dumps(obj, *args, **kwds)\ndef load(*args, **kwds):\n    # type: (Any, Any) -> Any",
        "detail": "mid-range.jsonimpl",
        "documentation": {}
    },
    {
        "label": "dumps",
        "kind": 2,
        "importPath": "mid-range.jsonimpl",
        "description": "mid-range.jsonimpl",
        "peekOfCode": "def dumps(obj, *args, **kwds):\n    # type: (Any, Any, Any) -> str\n    kwds[\"cls\"] = SphinxJSONEncoder\n    return json.dumps(obj, *args, **kwds)\ndef load(*args, **kwds):\n    # type: (Any, Any) -> Any\n    return json.load(*args, **kwds)\ndef loads(*args, **kwds):\n    # type: (Any, Any) -> Any\n    return json.loads(*args, **kwds)",
        "detail": "mid-range.jsonimpl",
        "documentation": {}
    },
    {
        "label": "load",
        "kind": 2,
        "importPath": "mid-range.jsonimpl",
        "description": "mid-range.jsonimpl",
        "peekOfCode": "def load(*args, **kwds):\n    # type: (Any, Any) -> Any\n    return json.load(*args, **kwds)\ndef loads(*args, **kwds):\n    # type: (Any, Any) -> Any\n    return json.loads(*args, **kwds)",
        "detail": "mid-range.jsonimpl",
        "documentation": {}
    },
    {
        "label": "loads",
        "kind": 2,
        "importPath": "mid-range.jsonimpl",
        "description": "mid-range.jsonimpl",
        "peekOfCode": "def loads(*args, **kwds):\n    # type: (Any, Any) -> Any\n    return json.loads(*args, **kwds)",
        "detail": "mid-range.jsonimpl",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.json_compact_encoding",
        "description": "mid-range.json_compact_encoding",
        "peekOfCode": "data = [{\"a\": \"A\", \"b\": (2, 4), \"c\": 3.0}]\nprint(\"DATA:\", repr(data))\nprint(\"repr(data)             :\", len(repr(data)))\nplain_dump = json.dumps(data)\nprint(\"dumps(data)            :\", len(plain_dump))\nsmall_indent = json.dumps(data, indent=2)\nprint(\"dumps(data, indent=2)  :\", len(small_indent))\nwith_separators = json.dumps(data, separators=(\",\", \":\"))\nprint(\"dumps(data, separators):\", len(with_separators))",
        "detail": "mid-range.json_compact_encoding",
        "documentation": {}
    },
    {
        "label": "plain_dump",
        "kind": 5,
        "importPath": "mid-range.json_compact_encoding",
        "description": "mid-range.json_compact_encoding",
        "peekOfCode": "plain_dump = json.dumps(data)\nprint(\"dumps(data)            :\", len(plain_dump))\nsmall_indent = json.dumps(data, indent=2)\nprint(\"dumps(data, indent=2)  :\", len(small_indent))\nwith_separators = json.dumps(data, separators=(\",\", \":\"))\nprint(\"dumps(data, separators):\", len(with_separators))",
        "detail": "mid-range.json_compact_encoding",
        "documentation": {}
    },
    {
        "label": "small_indent",
        "kind": 5,
        "importPath": "mid-range.json_compact_encoding",
        "description": "mid-range.json_compact_encoding",
        "peekOfCode": "small_indent = json.dumps(data, indent=2)\nprint(\"dumps(data, indent=2)  :\", len(small_indent))\nwith_separators = json.dumps(data, separators=(\",\", \":\"))\nprint(\"dumps(data, separators):\", len(with_separators))",
        "detail": "mid-range.json_compact_encoding",
        "documentation": {}
    },
    {
        "label": "with_separators",
        "kind": 5,
        "importPath": "mid-range.json_compact_encoding",
        "description": "mid-range.json_compact_encoding",
        "peekOfCode": "with_separators = json.dumps(data, separators=(\",\", \":\"))\nprint(\"dumps(data, separators):\", len(with_separators))",
        "detail": "mid-range.json_compact_encoding",
        "documentation": {}
    },
    {
        "label": "JsonSchemaValidator",
        "kind": 6,
        "importPath": "mid-range.json_compat",
        "description": "mid-range.json_compat",
        "peekOfCode": "class JsonSchemaValidator:\n    name = \"jsonschema\"\n    def __init__(self, schema):\n        self._schema = schema\n        self._default_validator = _JsonSchemaValidator(schema)  # Default\n        self._validator = self._default_validator\n    def validate(self, data):\n        self._default_validator.validate(data)\n    def iter_errors(self, data, schema=None):\n        return self._default_validator.iter_errors(data, schema)",
        "detail": "mid-range.json_compat",
        "documentation": {}
    },
    {
        "label": "FastJsonSchemaValidator",
        "kind": 6,
        "importPath": "mid-range.json_compat",
        "description": "mid-range.json_compat",
        "peekOfCode": "class FastJsonSchemaValidator(JsonSchemaValidator):\n    name = \"fastjsonschema\"\n    def __init__(self, schema):\n        super().__init__(schema)\n        self._validator = fastjsonschema.compile(schema)\n    def validate(self, data):\n        try:\n            self._validator(data)\n        except _JsonSchemaException as error:\n            raise ValidationError(error.message, schema_path=error.path)",
        "detail": "mid-range.json_compat",
        "documentation": {}
    },
    {
        "label": "get_current_validator",
        "kind": 2,
        "importPath": "mid-range.json_compat",
        "description": "mid-range.json_compat",
        "peekOfCode": "def get_current_validator():\n    \"\"\"\n    Return the default validator based on the value of an environment variable.\n    \"\"\"\n    validator_name = os.environ.get(\"NBFORMAT_VALIDATOR\", \"jsonschema\")\n    return _validator_for_name(validator_name)",
        "detail": "mid-range.json_compat",
        "documentation": {}
    },
    {
        "label": "_VALIDATOR_MAP",
        "kind": 5,
        "importPath": "mid-range.json_compat",
        "description": "mid-range.json_compat",
        "peekOfCode": "_VALIDATOR_MAP = [\n    (\"fastjsonschema\", fastjsonschema, FastJsonSchemaValidator),\n    (\"jsonschema\", jsonschema, JsonSchemaValidator),\n]\nVALIDATORS = [item[0] for item in _VALIDATOR_MAP]\ndef _validator_for_name(validator_name):\n    if validator_name not in VALIDATORS:\n        raise ValueError(\n            \"Invalid validator '{0}' value!\\nValid values are: {1}\".format(\n                validator_name, VALIDATORS",
        "detail": "mid-range.json_compat",
        "documentation": {}
    },
    {
        "label": "VALIDATORS",
        "kind": 5,
        "importPath": "mid-range.json_compat",
        "description": "mid-range.json_compat",
        "peekOfCode": "VALIDATORS = [item[0] for item in _VALIDATOR_MAP]\ndef _validator_for_name(validator_name):\n    if validator_name not in VALIDATORS:\n        raise ValueError(\n            \"Invalid validator '{0}' value!\\nValid values are: {1}\".format(\n                validator_name, VALIDATORS\n            )\n        )\n    for (name, module, validator_cls) in _VALIDATOR_MAP:\n        if module and validator_name == name:",
        "detail": "mid-range.json_compat",
        "documentation": {}
    },
    {
        "label": "MyDecoder",
        "kind": 6,
        "importPath": "mid-range.json_decoder_object_hook",
        "description": "mid-range.json_decoder_object_hook",
        "peekOfCode": "class MyDecoder(json.JSONDecoder):\n    def __init__(self):\n        json.JSONDecoder.__init__(self, object_hook=self.dict_to_object)\n    def dict_to_object(self, d):\n        if \"__class__\" in d:\n            class_name = d.pop(\"__class__\")\n            module_name = d.pop(\"__module__\")\n            module = __import__(module_name)\n            print(\"MODULE:\", module.__name__)\n            class_ = getattr(module, class_name)",
        "detail": "mid-range.json_decoder_object_hook",
        "documentation": {}
    },
    {
        "label": "encoded_object",
        "kind": 5,
        "importPath": "mid-range.json_decoder_object_hook",
        "description": "mid-range.json_decoder_object_hook",
        "peekOfCode": "encoded_object = \"\"\"\n[{\"s\": \"instance value goes here\",\n  \"__module__\": \"json_myobj\", \"__class__\": \"MyObj\"}]\n\"\"\"\nmyobj_instance = MyDecoder().decode(encoded_object)\nprint(myobj_instance)",
        "detail": "mid-range.json_decoder_object_hook",
        "documentation": {}
    },
    {
        "label": "myobj_instance",
        "kind": 5,
        "importPath": "mid-range.json_decoder_object_hook",
        "description": "mid-range.json_decoder_object_hook",
        "peekOfCode": "myobj_instance = MyDecoder().decode(encoded_object)\nprint(myobj_instance)",
        "detail": "mid-range.json_decoder_object_hook",
        "documentation": {}
    },
    {
        "label": "convert_to_builtin_type",
        "kind": 2,
        "importPath": "mid-range.json_dump_default",
        "description": "mid-range.json_dump_default",
        "peekOfCode": "def convert_to_builtin_type(obj):\n    print(\"default(\", repr(obj), \")\")\n    # Convert objects to a dictionary of their representation\n    d = {\"__class__\": obj.__class__.__name__, \"__module__\": obj.__module__}\n    d.update(obj.__dict__)\n    return d\nprint()\nprint(\"With default\")\nprint(json.dumps(obj, default=convert_to_builtin_type))",
        "detail": "mid-range.json_dump_default",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "mid-range.json_dump_default",
        "description": "mid-range.json_dump_default",
        "peekOfCode": "obj = json_myobj.MyObj(\"instance value goes here\")\nprint(\"First attempt\")\ntry:\n    print(json.dumps(obj))\nexcept TypeError as err:\n    print(\"ERROR:\", err)\ndef convert_to_builtin_type(obj):\n    print(\"default(\", repr(obj), \")\")\n    # Convert objects to a dictionary of their representation\n    d = {\"__class__\": obj.__class__.__name__, \"__module__\": obj.__module__}",
        "detail": "mid-range.json_dump_default",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.json_dump_file",
        "description": "mid-range.json_dump_file",
        "peekOfCode": "data = [{\"a\": \"A\", \"b\": (2, 4), \"c\": 3.0}]\nf = io.StringIO()\njson.dump(data, f)\nprint(f.getvalue())",
        "detail": "mid-range.json_dump_file",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "mid-range.json_dump_file",
        "description": "mid-range.json_dump_file",
        "peekOfCode": "f = io.StringIO()\njson.dump(data, f)\nprint(f.getvalue())",
        "detail": "mid-range.json_dump_file",
        "documentation": {}
    },
    {
        "label": "MyEncoder",
        "kind": 6,
        "importPath": "mid-range.json_encoder_default",
        "description": "mid-range.json_encoder_default",
        "peekOfCode": "class MyEncoder(json.JSONEncoder):\n    def default(self, obj):\n        print(\"default(\", repr(obj), \")\")\n        # Convert objects to a dictionary of their representation\n        d = {\"__class__\": obj.__class__.__name__, \"__module__\": obj.__module__}\n        d.update(obj.__dict__)\n        return d\nobj = json_myobj.MyObj(\"internal data\")\nprint(obj)\nprint(MyEncoder().encode(obj))",
        "detail": "mid-range.json_encoder_default",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "mid-range.json_encoder_default",
        "description": "mid-range.json_encoder_default",
        "peekOfCode": "obj = json_myobj.MyObj(\"internal data\")\nprint(obj)\nprint(MyEncoder().encode(obj))",
        "detail": "mid-range.json_encoder_default",
        "documentation": {}
    },
    {
        "label": "encoder",
        "kind": 5,
        "importPath": "mid-range.json_encoder_iterable",
        "description": "mid-range.json_encoder_iterable",
        "peekOfCode": "encoder = json.JSONEncoder()\ndata = [{\"a\": \"A\", \"b\": (2, 4), \"c\": 3.0}]\nfor part in encoder.iterencode(data):\n    print(\"PART:\", part)",
        "detail": "mid-range.json_encoder_iterable",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.json_encoder_iterable",
        "description": "mid-range.json_encoder_iterable",
        "peekOfCode": "data = [{\"a\": \"A\", \"b\": (2, 4), \"c\": 3.0}]\nfor part in encoder.iterencode(data):\n    print(\"PART:\", part)",
        "detail": "mid-range.json_encoder_iterable",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.json_indent",
        "description": "mid-range.json_indent",
        "peekOfCode": "data = [{\"a\": \"A\", \"b\": (2, 4), \"c\": 3.0}]\nprint(\"DATA:\", repr(data))\nprint(\"NORMAL:\", json.dumps(data, sort_keys=True))\nprint(\"INDENT:\", json.dumps(data, sort_keys=True, indent=2))",
        "detail": "mid-range.json_indent",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "mid-range.json_load_file",
        "description": "mid-range.json_load_file",
        "peekOfCode": "f = io.StringIO('[{\"a\": \"A\", \"c\": 3.0, \"b\": [2, 4]}]')\nprint(json.load(f))",
        "detail": "mid-range.json_load_file",
        "documentation": {}
    },
    {
        "label": "dict_to_object",
        "kind": 2,
        "importPath": "mid-range.json_load_object_hook",
        "description": "mid-range.json_load_object_hook",
        "peekOfCode": "def dict_to_object(d):\n    if \"__class__\" in d:\n        class_name = d.pop(\"__class__\")\n        module_name = d.pop(\"__module__\")\n        module = __import__(module_name)\n        print(\"MODULE:\", module.__name__)\n        class_ = getattr(module, class_name)\n        print(\"CLASS:\", class_)\n        args = {key: value for key, value in d.items()}\n        print(\"INSTANCE ARGS:\", args)",
        "detail": "mid-range.json_load_object_hook",
        "documentation": {}
    },
    {
        "label": "encoded_object",
        "kind": 5,
        "importPath": "mid-range.json_load_object_hook",
        "description": "mid-range.json_load_object_hook",
        "peekOfCode": "encoded_object = \"\"\"\n    [{\"s\": \"instance value goes here\",\n      \"__module__\": \"json_myobj\", \"__class__\": \"MyObj\"}]\n    \"\"\"\nmyobj_instance = json.loads(encoded_object, object_hook=dict_to_object)\nprint(myobj_instance)",
        "detail": "mid-range.json_load_object_hook",
        "documentation": {}
    },
    {
        "label": "myobj_instance",
        "kind": 5,
        "importPath": "mid-range.json_load_object_hook",
        "description": "mid-range.json_load_object_hook",
        "peekOfCode": "myobj_instance = json.loads(encoded_object, object_hook=dict_to_object)\nprint(myobj_instance)",
        "detail": "mid-range.json_load_object_hook",
        "documentation": {}
    },
    {
        "label": "get_decoded_and_remainder",
        "kind": 2,
        "importPath": "mid-range.json_mixed_data",
        "description": "mid-range.json_mixed_data",
        "peekOfCode": "def get_decoded_and_remainder(input_data):\n    obj, end = decoder.raw_decode(input_data)\n    remaining = input_data[end:]\n    return (obj, end, remaining)\nencoded_object = '[{\"a\": \"A\", \"c\": 3.0, \"b\": [2, 4]}]'\nextra_text = \"This text is not JSON.\"\nprint(\"JSON first:\")\ndata = \" \".join([encoded_object, extra_text])\nobj, end, remaining = get_decoded_and_remainder(data)\nprint(\"Object              :\", obj)",
        "detail": "mid-range.json_mixed_data",
        "documentation": {}
    },
    {
        "label": "decoder",
        "kind": 5,
        "importPath": "mid-range.json_mixed_data",
        "description": "mid-range.json_mixed_data",
        "peekOfCode": "decoder = json.JSONDecoder()\ndef get_decoded_and_remainder(input_data):\n    obj, end = decoder.raw_decode(input_data)\n    remaining = input_data[end:]\n    return (obj, end, remaining)\nencoded_object = '[{\"a\": \"A\", \"c\": 3.0, \"b\": [2, 4]}]'\nextra_text = \"This text is not JSON.\"\nprint(\"JSON first:\")\ndata = \" \".join([encoded_object, extra_text])\nobj, end, remaining = get_decoded_and_remainder(data)",
        "detail": "mid-range.json_mixed_data",
        "documentation": {}
    },
    {
        "label": "encoded_object",
        "kind": 5,
        "importPath": "mid-range.json_mixed_data",
        "description": "mid-range.json_mixed_data",
        "peekOfCode": "encoded_object = '[{\"a\": \"A\", \"c\": 3.0, \"b\": [2, 4]}]'\nextra_text = \"This text is not JSON.\"\nprint(\"JSON first:\")\ndata = \" \".join([encoded_object, extra_text])\nobj, end, remaining = get_decoded_and_remainder(data)\nprint(\"Object              :\", obj)\nprint(\"End of parsed input :\", end)\nprint(\"Remaining text      :\", repr(remaining))\nprint()\nprint(\"JSON embedded:\")",
        "detail": "mid-range.json_mixed_data",
        "documentation": {}
    },
    {
        "label": "extra_text",
        "kind": 5,
        "importPath": "mid-range.json_mixed_data",
        "description": "mid-range.json_mixed_data",
        "peekOfCode": "extra_text = \"This text is not JSON.\"\nprint(\"JSON first:\")\ndata = \" \".join([encoded_object, extra_text])\nobj, end, remaining = get_decoded_and_remainder(data)\nprint(\"Object              :\", obj)\nprint(\"End of parsed input :\", end)\nprint(\"Remaining text      :\", repr(remaining))\nprint()\nprint(\"JSON embedded:\")\ntry:",
        "detail": "mid-range.json_mixed_data",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.json_mixed_data",
        "description": "mid-range.json_mixed_data",
        "peekOfCode": "data = \" \".join([encoded_object, extra_text])\nobj, end, remaining = get_decoded_and_remainder(data)\nprint(\"Object              :\", obj)\nprint(\"End of parsed input :\", end)\nprint(\"Remaining text      :\", repr(remaining))\nprint()\nprint(\"JSON embedded:\")\ntry:\n    data = \" \".join([extra_text, encoded_object, extra_text])\n    obj, end, remaining = get_decoded_and_remainder(data)",
        "detail": "mid-range.json_mixed_data",
        "documentation": {}
    },
    {
        "label": "MyObj",
        "kind": 6,
        "importPath": "mid-range.json_myobj",
        "description": "mid-range.json_myobj",
        "peekOfCode": "class MyObj:\n    def __init__(self, s):\n        self.s = s\n    def __repr__(self):\n        return \"<MyObj({})>\".format(self.s)",
        "detail": "mid-range.json_myobj",
        "documentation": {}
    },
    {
        "label": "JSONReporter",
        "kind": 6,
        "importPath": "mid-range.json_reporter",
        "description": "mid-range.json_reporter",
        "peekOfCode": "class JSONReporter(BaseReporter):\n    \"\"\"Report messages and layouts in JSON.\"\"\"\n    __implements__ = IReporter\n    name = \"json\"\n    extension = \"json\"\n    def display_messages(self, layout):\n        \"\"\"Launch layouts display\"\"\"\n        json_dumpable = [\n            {\n                \"type\": msg.category,",
        "detail": "mid-range.json_reporter",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "mid-range.json_reporter",
        "description": "mid-range.json_reporter",
        "peekOfCode": "def register(linter):\n    \"\"\"Register the reporter classes with the linter.\"\"\"\n    linter.register_reporter(JSONReporter)",
        "detail": "mid-range.json_reporter",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.json_simple_types",
        "description": "mid-range.json_simple_types",
        "peekOfCode": "data = [{\"a\": \"A\", \"b\": (2, 4), \"c\": 3.0}]\nprint(\"DATA:\", repr(data))\ndata_string = json.dumps(data)\nprint(\"JSON:\", data_string)",
        "detail": "mid-range.json_simple_types",
        "documentation": {}
    },
    {
        "label": "data_string",
        "kind": 5,
        "importPath": "mid-range.json_simple_types",
        "description": "mid-range.json_simple_types",
        "peekOfCode": "data_string = json.dumps(data)\nprint(\"JSON:\", data_string)",
        "detail": "mid-range.json_simple_types",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.json_simple_types_decode",
        "description": "mid-range.json_simple_types_decode",
        "peekOfCode": "data = [{\"a\": \"A\", \"b\": (2, 4), \"c\": 3.0}]\nprint(\"DATA   :\", data)\ndata_string = json.dumps(data)\nprint(\"ENCODED:\", data_string)\ndecoded = json.loads(data_string)\nprint(\"DECODED:\", decoded)\nprint(\"ORIGINAL:\", type(data[0][\"b\"]))\nprint(\"DECODED :\", type(decoded[0][\"b\"]))",
        "detail": "mid-range.json_simple_types_decode",
        "documentation": {}
    },
    {
        "label": "data_string",
        "kind": 5,
        "importPath": "mid-range.json_simple_types_decode",
        "description": "mid-range.json_simple_types_decode",
        "peekOfCode": "data_string = json.dumps(data)\nprint(\"ENCODED:\", data_string)\ndecoded = json.loads(data_string)\nprint(\"DECODED:\", decoded)\nprint(\"ORIGINAL:\", type(data[0][\"b\"]))\nprint(\"DECODED :\", type(decoded[0][\"b\"]))",
        "detail": "mid-range.json_simple_types_decode",
        "documentation": {}
    },
    {
        "label": "decoded",
        "kind": 5,
        "importPath": "mid-range.json_simple_types_decode",
        "description": "mid-range.json_simple_types_decode",
        "peekOfCode": "decoded = json.loads(data_string)\nprint(\"DECODED:\", decoded)\nprint(\"ORIGINAL:\", type(data[0][\"b\"]))\nprint(\"DECODED :\", type(decoded[0][\"b\"]))",
        "detail": "mid-range.json_simple_types_decode",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.json_skipkeys",
        "description": "mid-range.json_skipkeys",
        "peekOfCode": "data = [{\"a\": \"A\", \"b\": (2, 4), \"c\": 3.0, (\"d\",): \"D tuple\"}]\nprint(\"First attempt\")\ntry:\n    print(json.dumps(data))\nexcept TypeError as err:\n    print(\"ERROR:\", err)\nprint()\nprint(\"Second attempt\")\nprint(json.dumps(data, skipkeys=True))",
        "detail": "mid-range.json_skipkeys",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.json_sort_keys",
        "description": "mid-range.json_sort_keys",
        "peekOfCode": "data = [{\"a\": \"A\", \"b\": (2, 4), \"c\": 3.0}]\nprint(\"DATA:\", repr(data))\nunsorted = json.dumps(data)\nprint(\"JSON:\", json.dumps(data))\nprint(\"SORT:\", json.dumps(data, sort_keys=True))\nfirst = json.dumps(data, sort_keys=True)\nsecond = json.dumps(data, sort_keys=True)\nprint(\"UNSORTED MATCH:\", unsorted == first)\nprint(\"SORTED MATCH  :\", first == second)",
        "detail": "mid-range.json_sort_keys",
        "documentation": {}
    },
    {
        "label": "unsorted",
        "kind": 5,
        "importPath": "mid-range.json_sort_keys",
        "description": "mid-range.json_sort_keys",
        "peekOfCode": "unsorted = json.dumps(data)\nprint(\"JSON:\", json.dumps(data))\nprint(\"SORT:\", json.dumps(data, sort_keys=True))\nfirst = json.dumps(data, sort_keys=True)\nsecond = json.dumps(data, sort_keys=True)\nprint(\"UNSORTED MATCH:\", unsorted == first)\nprint(\"SORTED MATCH  :\", first == second)",
        "detail": "mid-range.json_sort_keys",
        "documentation": {}
    },
    {
        "label": "first",
        "kind": 5,
        "importPath": "mid-range.json_sort_keys",
        "description": "mid-range.json_sort_keys",
        "peekOfCode": "first = json.dumps(data, sort_keys=True)\nsecond = json.dumps(data, sort_keys=True)\nprint(\"UNSORTED MATCH:\", unsorted == first)\nprint(\"SORTED MATCH  :\", first == second)",
        "detail": "mid-range.json_sort_keys",
        "documentation": {}
    },
    {
        "label": "second",
        "kind": 5,
        "importPath": "mid-range.json_sort_keys",
        "description": "mid-range.json_sort_keys",
        "peekOfCode": "second = json.dumps(data, sort_keys=True)\nprint(\"UNSORTED MATCH:\", unsorted == first)\nprint(\"SORTED MATCH  :\", first == second)",
        "detail": "mid-range.json_sort_keys",
        "documentation": {}
    },
    {
        "label": "jumping_numbers",
        "kind": 2,
        "importPath": "mid-range.jumping_numbers",
        "description": "mid-range.jumping_numbers",
        "peekOfCode": "def jumping_numbers(x):\n    result = []\n    # take all 9 possible starting combinations\n    for i in range(1, 10):\n        jumping_num(i, x, result)\n    return result\ndef jumping_num(num, x, result):\n    if num > x:\n        return\n    result.append(num)",
        "detail": "mid-range.jumping_numbers",
        "documentation": {}
    },
    {
        "label": "jumping_num",
        "kind": 2,
        "importPath": "mid-range.jumping_numbers",
        "description": "mid-range.jumping_numbers",
        "peekOfCode": "def jumping_num(num, x, result):\n    if num > x:\n        return\n    result.append(num)\n    last_digit = num % 10\n    next_num = num * 10\n    # decrease the last digit by one\n    if last_digit != 0:\n        jumping_num(next_num + last_digit - 1, x, result)\n    # increase the last digit by one",
        "detail": "mid-range.jumping_numbers",
        "documentation": {}
    },
    {
        "label": "jumpingOnClouds",
        "kind": 2,
        "importPath": "mid-range.Jumping_on_the_Clouds",
        "description": "mid-range.Jumping_on_the_Clouds",
        "peekOfCode": "def jumpingOnClouds(c):\n    i = counter = 0\n    length = len(c)\n    while i < length - 1:\n        if c[i + 2] == 0:\n            i += 2\n        else:\n            i += 1\n        counter += 1\n    return counter",
        "detail": "mid-range.Jumping_on_the_Clouds",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.Jumping_on_the_Clouds",
        "description": "mid-range.Jumping_on_the_Clouds",
        "peekOfCode": "arr = [0, 0, 0, 0, 1, 0]\nprint(jumpingOnClouds(arr))",
        "detail": "mid-range.Jumping_on_the_Clouds",
        "documentation": {}
    },
    {
        "label": "can_jump",
        "kind": 2,
        "importPath": "mid-range.jump_game",
        "description": "mid-range.jump_game",
        "peekOfCode": "def can_jump(nums):\n    n = len(nums)\n    if n == 0:\n        return False\n    max_jump = 0\n    for i in range(n):\n        # if this field isn't reachable return False\n        if max_jump < i:\n            return False\n        this_jump = i + nums[i]",
        "detail": "mid-range.jump_game",
        "documentation": {}
    },
    {
        "label": "min_jumps_1",
        "kind": 2,
        "importPath": "mid-range.jump_game_2",
        "description": "mid-range.jump_game_2",
        "peekOfCode": "def min_jumps_1(nums):\n    n = len(nums)\n    if n <= 1:\n        return 0\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(n):\n        this_jump = i + nums[i]\n        jumps = dp[i] + 1\n        if this_jump >= n - 1:",
        "detail": "mid-range.jump_game_2",
        "documentation": {}
    },
    {
        "label": "min_jumps_2",
        "kind": 2,
        "importPath": "mid-range.jump_game_2",
        "description": "mid-range.jump_game_2",
        "peekOfCode": "def min_jumps_2(nums):\n    n = len(nums)\n    if n <= 1:\n        return 0\n    jumps = 0\n    max_jump = 0\n    new_max_jump = 0\n    for i in range(n):\n        if max_jump < i:\n            max_jump = new_max_jump",
        "detail": "mid-range.jump_game_2",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "mid-range.jump_game_2",
        "description": "mid-range.jump_game_2",
        "peekOfCode": "nums = [2, 3, 1, 1, 4]\nprint(min_jumps_1(nums))\nprint(min_jumps_2(nums))",
        "detail": "mid-range.jump_game_2",
        "documentation": {}
    },
    {
        "label": "jump_search",
        "kind": 2,
        "importPath": "mid-range.jump_search",
        "description": "mid-range.jump_search",
        "peekOfCode": "def jump_search(arr, x):\n    n = len(arr)\n    step = int(math.floor(math.sqrt(n)))\n    prev = 0\n    while arr[min(step, n) - 1] < x:\n        prev = step\n        step += int(math.floor(math.sqrt(n)))\n        if prev >= n:\n            return -1\n    while arr[prev] < x:",
        "detail": "mid-range.jump_search",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.jump_search",
        "description": "mid-range.jump_search",
        "peekOfCode": "arr = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]\nx = 55\nindex = jump_search(arr, x)\nprint(\"\\nNumber \" + str(x) + \" is at index \" + str(index))",
        "detail": "mid-range.jump_search",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.jump_search",
        "description": "mid-range.jump_search",
        "peekOfCode": "x = 55\nindex = jump_search(arr, x)\nprint(\"\\nNumber \" + str(x) + \" is at index \" + str(index))",
        "detail": "mid-range.jump_search",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "mid-range.jump_search",
        "description": "mid-range.jump_search",
        "peekOfCode": "index = jump_search(arr, x)\nprint(\"\\nNumber \" + str(x) + \" is at index \" + str(index))",
        "detail": "mid-range.jump_search",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "mid-range.jupyter",
        "description": "mid-range.jupyter",
        "peekOfCode": "__version__ = \"1.0.0\"\nif __name__ == \"__main__\":\n    from runpy import run_module\n    run_module(\"jupyter_core\")",
        "detail": "mid-range.jupyter",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "mid-range.jupyter_nbconvert_config",
        "description": "mid-range.jupyter_nbconvert_config",
        "peekOfCode": "c = get_config()\n# Export all the notebooks in the current directory to the sphinx_howto format.\nc.NbConvertApp.notebooks = [\"notebook1.ipynb\"]\nc.NbConvertApp.export_format = \"python\"",
        "detail": "mid-range.jupyter_nbconvert_config",
        "documentation": {}
    },
    {
        "label": "c.NbConvertApp.notebooks",
        "kind": 5,
        "importPath": "mid-range.jupyter_nbconvert_config",
        "description": "mid-range.jupyter_nbconvert_config",
        "peekOfCode": "c.NbConvertApp.notebooks = [\"notebook1.ipynb\"]\nc.NbConvertApp.export_format = \"python\"",
        "detail": "mid-range.jupyter_nbconvert_config",
        "documentation": {}
    },
    {
        "label": "c.NbConvertApp.export_format",
        "kind": 5,
        "importPath": "mid-range.jupyter_nbconvert_config",
        "description": "mid-range.jupyter_nbconvert_config",
        "peekOfCode": "c.NbConvertApp.export_format = \"python\"",
        "detail": "mid-range.jupyter_nbconvert_config",
        "documentation": {}
    },
    {
        "label": "juror",
        "kind": 2,
        "importPath": "mid-range.jury",
        "description": "mid-range.jury",
        "peekOfCode": "def juror():\n    global guilty\n    guilty += 1\nwith ProcessPoolExecutor() as pool:\n    for _ in repeat(None, 12):\n        pool.submit(juror)\nprint(guilty)",
        "detail": "mid-range.jury",
        "documentation": {}
    },
    {
        "label": "guilty",
        "kind": 5,
        "importPath": "mid-range.jury",
        "description": "mid-range.jury",
        "peekOfCode": "guilty = 0\ndef juror():\n    global guilty\n    guilty += 1\nwith ProcessPoolExecutor() as pool:\n    for _ in repeat(None, 12):\n        pool.submit(juror)\nprint(guilty)",
        "detail": "mid-range.jury",
        "documentation": {}
    },
    {
        "label": "PyJWKClient",
        "kind": 6,
        "importPath": "mid-range.jwks_client",
        "description": "mid-range.jwks_client",
        "peekOfCode": "class PyJWKClient:\n    def __init__(self, uri: str, cache_keys: bool = True, max_cached_keys: int = 16):\n        self.uri = uri\n        if cache_keys:\n            # Cache signing keys\n            # Ignore mypy (https://github.com/python/mypy/issues/2427)\n            self.get_signing_key = lru_cache(maxsize=max_cached_keys)(\n                self.get_signing_key\n            )  # type: ignore\n    def fetch_data(self) -> Any:",
        "detail": "mid-range.jwks_client",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.k-diff-pairs-in-an-array",
        "description": "mid-range.k-diff-pairs-in-an-array",
        "peekOfCode": "class Solution(object):\n    def findPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k < 0:\n            return 0\n        nums.sort()",
        "detail": "mid-range.k-diff-pairs-in-an-array",
        "documentation": {}
    },
    {
        "label": "find_clusters",
        "kind": 2,
        "importPath": "mid-range.k-means",
        "description": "mid-range.k-means",
        "peekOfCode": "def find_clusters(X, n_clusters, rseed=2):\n    # randomly choose clusters\n    rng = np.random.RandomState(rseed)\n    i = rng.permutation(X.shape[0])[:n_clusters]\n    centers = X[i]\n    while True:\n        labels = pairwise_distances_argmin(X, centers)\n        new_centers = np.array(X[labels == i].mean(0) for i in range(n_clusters))\n        if np.all(new_centers == centers):\n            break",
        "detail": "mid-range.k-means",
        "documentation": {}
    },
    {
        "label": "kmeans",
        "kind": 2,
        "importPath": "mid-range.k-means",
        "description": "mid-range.k-means",
        "peekOfCode": "def kmeans(X, n_cluster, rseed):\n    rng = np.random.RandomState(rseed)\n    i = rng.permutation(X)[:n_cluster]\n    centers = X[i]\n    while True:\n        labels = pairwise_distances_argmin(X, centers)\n        new_centers = np.array(X[labels == i].mean(0) for i in range(new_centers))\n        if centers == new_centers:\n            break\n        centers = new_centers",
        "detail": "mid-range.k-means",
        "documentation": {}
    },
    {
        "label": "kmeans",
        "kind": 5,
        "importPath": "mid-range.k-means",
        "description": "mid-range.k-means",
        "peekOfCode": "kmeans = KMeans(n_clusters=4)\nkmeans.fit(X)\ny_kmeans = kmeans.predict(X)\n# Implement from scratch\nfrom sklearn.metrics import pairwise_distances_argmin\ndef find_clusters(X, n_clusters, rseed=2):\n    # randomly choose clusters\n    rng = np.random.RandomState(rseed)\n    i = rng.permutation(X.shape[0])[:n_clusters]\n    centers = X[i]",
        "detail": "mid-range.k-means",
        "documentation": {}
    },
    {
        "label": "y_kmeans",
        "kind": 5,
        "importPath": "mid-range.k-means",
        "description": "mid-range.k-means",
        "peekOfCode": "y_kmeans = kmeans.predict(X)\n# Implement from scratch\nfrom sklearn.metrics import pairwise_distances_argmin\ndef find_clusters(X, n_clusters, rseed=2):\n    # randomly choose clusters\n    rng = np.random.RandomState(rseed)\n    i = rng.permutation(X.shape[0])[:n_clusters]\n    centers = X[i]\n    while True:\n        labels = pairwise_distances_argmin(X, centers)",
        "detail": "mid-range.k-means",
        "documentation": {}
    },
    {
        "label": "negative_exist",
        "kind": 2,
        "importPath": "mid-range.kadanes",
        "description": "mid-range.kadanes",
        "peekOfCode": "def negative_exist(arr: list) -> int:\n    \"\"\"\n    >>> negative_exist([-2,-8,-9])\n    -2\n    >>> [negative_exist(arr) for arr in test_data]\n    [-2, 0, 0, 0, 0]\n    \"\"\"\n    arr = arr or [0]\n    max = arr[0]\n    for i in arr:",
        "detail": "mid-range.kadanes",
        "documentation": {}
    },
    {
        "label": "kadanes",
        "kind": 2,
        "importPath": "mid-range.kadanes",
        "description": "mid-range.kadanes",
        "peekOfCode": "def kadanes(arr: list) -> int:\n    \"\"\"\n    If negative_exist() returns 0 than this function will execute\n    else it will return the value return by negative_exist function\n    For example: arr = [2, 3, -9, 8, -2]\n        Initially we set value of max_sum to 0 and max_till_element to 0 than when\n        max_sum is less than max_till particular element it will assign that value to\n        max_sum and when value of max_till_sum is less than 0 it will assign 0 to i\n        and after that whole process, return the max_sum\n    So the output for above arr is 8",
        "detail": "mid-range.kadanes",
        "documentation": {}
    },
    {
        "label": "longestDistance",
        "kind": 2,
        "importPath": "mid-range.kahns_algorithm_long",
        "description": "mid-range.kahns_algorithm_long",
        "peekOfCode": "def longestDistance(graph):\n    indegree = [0] * len(graph)\n    queue = []\n    longDist = [1] * len(graph)\n    for key, values in graph.items():\n        for i in values:\n            indegree[i] += 1\n    for i in range(len(indegree)):\n        if indegree[i] == 0:\n            queue.append(i)",
        "detail": "mid-range.kahns_algorithm_long",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "mid-range.kahns_algorithm_long",
        "description": "mid-range.kahns_algorithm_long",
        "peekOfCode": "graph = {0: [2, 3, 4], 1: [2, 7], 2: [5], 3: [5, 7], 4: [7], 5: [6], 6: [7], 7: []}\nlongestDistance(graph)",
        "detail": "mid-range.kahns_algorithm_long",
        "documentation": {}
    },
    {
        "label": "topologicalSort",
        "kind": 2,
        "importPath": "mid-range.kahns_algorithm_topo",
        "description": "mid-range.kahns_algorithm_topo",
        "peekOfCode": "def topologicalSort(graph):\n    \"\"\"\n    Kahn's Algorithm is used to find Topological ordering of Directed Acyclic Graph\n    using BFS\n    \"\"\"\n    indegree = [0] * len(graph)\n    queue = []\n    topo = []\n    cnt = 0\n    for key, values in graph.items():",
        "detail": "mid-range.kahns_algorithm_topo",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "mid-range.kahns_algorithm_topo",
        "description": "mid-range.kahns_algorithm_topo",
        "peekOfCode": "graph = {0: [1, 2], 1: [3], 2: [3], 3: [4, 5], 4: [], 5: []}\ntopologicalSort(graph)",
        "detail": "mid-range.kahns_algorithm_topo",
        "documentation": {}
    },
    {
        "label": "karatsuba",
        "kind": 2,
        "importPath": "mid-range.karatsuba",
        "description": "mid-range.karatsuba",
        "peekOfCode": "def karatsuba(a, b):\n    \"\"\"\n    >>> karatsuba(15463, 23489) == 15463 * 23489\n    True\n    >>> karatsuba(3, 9) == 3 * 9\n    True\n    \"\"\"\n    if len(str(a)) == 1 or len(str(b)) == 1:\n        return a * b\n    else:",
        "detail": "mid-range.karatsuba",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mid-range.karatsuba",
        "description": "mid-range.karatsuba",
        "peekOfCode": "def main():\n    print(karatsuba(15463, 23489))\nif __name__ == \"__main__\":\n    main()",
        "detail": "mid-range.karatsuba",
        "documentation": {}
    },
    {
        "label": "partition_graph",
        "kind": 2,
        "importPath": "mid-range.karger",
        "description": "mid-range.karger",
        "peekOfCode": "def partition_graph(graph: dict[str, list[str]]) -> set[tuple[str, str]]:\n    \"\"\"\n    Partitions a graph using Karger's Algorithm. Implemented from\n    pseudocode found here:\n    https://en.wikipedia.org/wiki/Karger%27s_algorithm.\n    This function involves random choices, meaning it will not give\n    consistent outputs.\n    Args:\n        graph: A dictionary containing adacency lists for the graph.\n            Nodes must be strings.",
        "detail": "mid-range.karger",
        "documentation": {}
    },
    {
        "label": "TEST_GRAPH",
        "kind": 5,
        "importPath": "mid-range.karger",
        "description": "mid-range.karger",
        "peekOfCode": "TEST_GRAPH = {\n    \"1\": [\"2\", \"3\", \"4\", \"5\"],\n    \"2\": [\"1\", \"3\", \"4\", \"5\"],\n    \"3\": [\"1\", \"2\", \"4\", \"5\", \"10\"],\n    \"4\": [\"1\", \"2\", \"3\", \"5\", \"6\"],\n    \"5\": [\"1\", \"2\", \"3\", \"4\", \"7\"],\n    \"6\": [\"7\", \"8\", \"9\", \"10\", \"4\"],\n    \"7\": [\"6\", \"8\", \"9\", \"10\", \"5\"],\n    \"8\": [\"6\", \"7\", \"9\", \"10\"],\n    \"9\": [\"6\", \"7\", \"8\", \"10\"],",
        "detail": "mid-range.karger",
        "documentation": {}
    },
    {
        "label": "kay_sort",
        "kind": 2,
        "importPath": "mid-range.kay_sort",
        "description": "mid-range.kay_sort",
        "peekOfCode": "def kay_sort(array):\n\tprint \"Orignal List : {}\".format(array)\n\tfor i in range(len(array)):\n\t\tfor n in range(len(array) - 1):\n\t\t\ta = array[n]\n\t\t\tif (a > array[i]):\n\t\t\t\ttem = array[i]\n\t\t\t\tarray[i] = a \n\t\t\t\tarray[n] = tem \n\treturn \"Sorted List : {}\".format(array)\t\t\t",
        "detail": "mid-range.kay_sort",
        "documentation": {}
    },
    {
        "label": "\t\t\ta",
        "kind": 5,
        "importPath": "mid-range.kay_sort",
        "description": "mid-range.kay_sort",
        "peekOfCode": "\t\t\ta = array[n]\n\t\t\tif (a > array[i]):\n\t\t\t\ttem = array[i]\n\t\t\t\tarray[i] = a \n\t\t\t\tarray[n] = tem \n\treturn \"Sorted List : {}\".format(array)\t\t\t\nprint kay_sort([123, 4, 123, 4])",
        "detail": "mid-range.kay_sort",
        "documentation": {}
    },
    {
        "label": "\t\t\t\ttem",
        "kind": 5,
        "importPath": "mid-range.kay_sort",
        "description": "mid-range.kay_sort",
        "peekOfCode": "\t\t\t\ttem = array[i]\n\t\t\t\tarray[i] = a \n\t\t\t\tarray[n] = tem \n\treturn \"Sorted List : {}\".format(array)\t\t\t\nprint kay_sort([123, 4, 123, 4])",
        "detail": "mid-range.kay_sort",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tarray[i]",
        "kind": 5,
        "importPath": "mid-range.kay_sort",
        "description": "mid-range.kay_sort",
        "peekOfCode": "\t\t\t\tarray[i] = a \n\t\t\t\tarray[n] = tem \n\treturn \"Sorted List : {}\".format(array)\t\t\t\nprint kay_sort([123, 4, 123, 4])",
        "detail": "mid-range.kay_sort",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tarray[n]",
        "kind": 5,
        "importPath": "mid-range.kay_sort",
        "description": "mid-range.kay_sort",
        "peekOfCode": "\t\t\t\tarray[n] = tem \n\treturn \"Sorted List : {}\".format(array)\t\t\t\nprint kay_sort([123, 4, 123, 4])",
        "detail": "mid-range.kay_sort",
        "documentation": {}
    },
    {
        "label": "KernelApp",
        "kind": 6,
        "importPath": "mid-range.kernelapp",
        "description": "mid-range.kernelapp",
        "peekOfCode": "class KernelApp(JupyterApp):\n    \"\"\"Launch a kernel by name in a local subprocess.\"\"\"\n    version = __version__\n    description = \"Run a kernel locally in a subprocess\"\n    classes = [KernelManager, KernelSpecManager]\n    aliases = {\"kernel\": \"KernelApp.kernel_name\", \"ip\": \"KernelManager.ip\"}\n    flags = {\"debug\": base_flags[\"debug\"]}\n    kernel_name = Unicode(\n        NATIVE_KERNEL_NAME, help=\"The name of a kernel type to start\"\n    ).tag(config=True)",
        "detail": "mid-range.kernelapp",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 5,
        "importPath": "mid-range.kernelapp",
        "description": "mid-range.kernelapp",
        "peekOfCode": "main = KernelApp.launch_instance",
        "detail": "mid-range.kernelapp",
        "documentation": {}
    },
    {
        "label": "QtKernelRestarterMixin",
        "kind": 6,
        "importPath": "mid-range.kernel_mixins",
        "description": "mid-range.kernel_mixins",
        "peekOfCode": "class QtKernelRestarterMixin(\n    MetaQObjectHasTraits(\"NewBase\", (HasTraits, SuperQObject), {})\n):\n    _timer = None\nclass QtKernelManagerMixin(\n    MetaQObjectHasTraits(\"NewBase\", (HasTraits, SuperQObject), {})\n):\n    \"\"\" A KernelClient that provides signals and slots.\n    \"\"\"\n    kernel_restarted = QtCore.Signal()",
        "detail": "mid-range.kernel_mixins",
        "documentation": {}
    },
    {
        "label": "QtKernelManagerMixin",
        "kind": 6,
        "importPath": "mid-range.kernel_mixins",
        "description": "mid-range.kernel_mixins",
        "peekOfCode": "class QtKernelManagerMixin(\n    MetaQObjectHasTraits(\"NewBase\", (HasTraits, SuperQObject), {})\n):\n    \"\"\" A KernelClient that provides signals and slots.\n    \"\"\"\n    kernel_restarted = QtCore.Signal()\nclass QtKernelClientMixin(\n    MetaQObjectHasTraits(\"NewBase\", (HasTraits, SuperQObject), {})\n):\n    \"\"\" A KernelClient that provides signals and slots.",
        "detail": "mid-range.kernel_mixins",
        "documentation": {}
    },
    {
        "label": "QtKernelClientMixin",
        "kind": 6,
        "importPath": "mid-range.kernel_mixins",
        "description": "mid-range.kernel_mixins",
        "peekOfCode": "class QtKernelClientMixin(\n    MetaQObjectHasTraits(\"NewBase\", (HasTraits, SuperQObject), {})\n):\n    \"\"\" A KernelClient that provides signals and slots.\n    \"\"\"\n    # Emitted when the kernel client has started listening.\n    started_channels = QtCore.Signal()\n    # Emitted when the kernel client has stopped listening.\n    stopped_channels = QtCore.Signal()\n    # ---------------------------------------------------------------------------",
        "detail": "mid-range.kernel_mixins",
        "documentation": {}
    },
    {
        "label": "Keylogger",
        "kind": 6,
        "importPath": "mid-range.keylogger",
        "description": "mid-range.keylogger",
        "peekOfCode": "class Keylogger:\n    def __init__(self, time_interval, email, password):\n        self.log = \"Keylogger started\"\n        self.interval = time_interval\n        self.email = email\n        self.password = password\n    def append_to_log(self, string):\n        self.log = self.log + string\n    def process_key_press(self, key):\n        try:",
        "detail": "mid-range.keylogger",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "mid-range.keylogger",
        "description": "mid-range.keylogger",
        "peekOfCode": "log = \"\"\nclass Keylogger:\n    def __init__(self, time_interval, email, password):\n        self.log = \"Keylogger started\"\n        self.interval = time_interval\n        self.email = email\n        self.password = password\n    def append_to_log(self, string):\n        self.log = self.log + string\n    def process_key_press(self, key):",
        "detail": "mid-range.keylogger",
        "documentation": {}
    },
    {
        "label": "pythonKeywords",
        "kind": 5,
        "importPath": "mid-range.keywords",
        "description": "mid-range.keywords",
        "peekOfCode": "pythonKeywords = keyword.kwlist\ngetToCheck = str(input(\"Keyword to check : \"))\ncheck = keyword.iskeyword(getToCheck)\nif check == True:\n    print(getToCheck + \" is a python keyword.\")\nelse:\n    print(getToCheck + \" is not a python keyword.\")\nprint(\"\\nShowing all keywords in python : \\n\")\nprint(pythonKeywords)\n# remember to test the code",
        "detail": "mid-range.keywords",
        "documentation": {}
    },
    {
        "label": "getToCheck",
        "kind": 5,
        "importPath": "mid-range.keywords",
        "description": "mid-range.keywords",
        "peekOfCode": "getToCheck = str(input(\"Keyword to check : \"))\ncheck = keyword.iskeyword(getToCheck)\nif check == True:\n    print(getToCheck + \" is a python keyword.\")\nelse:\n    print(getToCheck + \" is not a python keyword.\")\nprint(\"\\nShowing all keywords in python : \\n\")\nprint(pythonKeywords)\n# remember to test the code",
        "detail": "mid-range.keywords",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 5,
        "importPath": "mid-range.keywords",
        "description": "mid-range.keywords",
        "peekOfCode": "check = keyword.iskeyword(getToCheck)\nif check == True:\n    print(getToCheck + \" is a python keyword.\")\nelse:\n    print(getToCheck + \" is not a python keyword.\")\nprint(\"\\nShowing all keywords in python : \\n\")\nprint(pythonKeywords)\n# remember to test the code",
        "detail": "mid-range.keywords",
        "documentation": {}
    },
    {
        "label": "kidsWithCandies",
        "kind": 2,
        "importPath": "mid-range.Kids With the Greatest Number of Candies",
        "description": "mid-range.Kids With the Greatest Number of Candies",
        "peekOfCode": "def kidsWithCandies(candies, extraCandies):\n    temp_array = []\n    max_element = max(candies)\n    for i in candies:\n        temp = i + extraCandies\n        if max_element <= temp:\n            temp_array.append(True)\n        else:\n            temp_array.append(False)\n    return temp_array",
        "detail": "mid-range.Kids With the Greatest Number of Candies",
        "documentation": {}
    },
    {
        "label": "candies",
        "kind": 5,
        "importPath": "mid-range.Kids With the Greatest Number of Candies",
        "description": "mid-range.Kids With the Greatest Number of Candies",
        "peekOfCode": "candies = [2, 3, 5, 1, 3]\nextraCandies = 3\nprint(kidsWithCandies(candies, extraCandies))",
        "detail": "mid-range.Kids With the Greatest Number of Candies",
        "documentation": {}
    },
    {
        "label": "extraCandies",
        "kind": 5,
        "importPath": "mid-range.Kids With the Greatest Number of Candies",
        "description": "mid-range.Kids With the Greatest Number of Candies",
        "peekOfCode": "extraCandies = 3\nprint(kidsWithCandies(candies, extraCandies))",
        "detail": "mid-range.Kids With the Greatest Number of Candies",
        "documentation": {}
    },
    {
        "label": "kidsWithCandies",
        "kind": 2,
        "importPath": "mid-range.Kids_With_the_Greatest_Number_of_Candies",
        "description": "mid-range.Kids_With_the_Greatest_Number_of_Candies",
        "peekOfCode": "def kidsWithCandies(candies, extraCandies):\n    temp_array = []\n    max_element = max(candies)\n    for i in candies:\n        temp = i + extraCandies\n        if max_element <= temp:\n            temp_array.append(True)\n        else:\n            temp_array.append(False)\n    return temp_array",
        "detail": "mid-range.Kids_With_the_Greatest_Number_of_Candies",
        "documentation": {}
    },
    {
        "label": "candies",
        "kind": 5,
        "importPath": "mid-range.Kids_With_the_Greatest_Number_of_Candies",
        "description": "mid-range.Kids_With_the_Greatest_Number_of_Candies",
        "peekOfCode": "candies = [2, 3, 5, 1, 3]\nextraCandies = 3\nprint(kidsWithCandies(candies, extraCandies))",
        "detail": "mid-range.Kids_With_the_Greatest_Number_of_Candies",
        "documentation": {}
    },
    {
        "label": "extraCandies",
        "kind": 5,
        "importPath": "mid-range.Kids_With_the_Greatest_Number_of_Candies",
        "description": "mid-range.Kids_With_the_Greatest_Number_of_Candies",
        "peekOfCode": "extraCandies = 3\nprint(kidsWithCandies(candies, extraCandies))",
        "detail": "mid-range.Kids_With_the_Greatest_Number_of_Candies",
        "documentation": {}
    },
    {
        "label": "kill",
        "kind": 2,
        "importPath": "mid-range.killproc",
        "description": "mid-range.killproc",
        "peekOfCode": "def kill(pid):\n    \"\"\" kill process by id. \"\"\"\n    dokill(pid)",
        "detail": "mid-range.killproc",
        "documentation": {}
    },
    {
        "label": "knapsack_solver",
        "kind": 2,
        "importPath": "mid-range.knapsack",
        "description": "mid-range.knapsack",
        "peekOfCode": "def knapsack_solver(items, capacity):\n    pass\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1:\n        capacity = int(sys.argv[2])\n        file_location = sys.argv[1].strip()\n        file_contents = open(file_location, \"r\")\n        items = []\n        for line in file_contents.readlines():\n            data = line.rstrip().split()",
        "detail": "mid-range.knapsack",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 5,
        "importPath": "mid-range.knapsack",
        "description": "mid-range.knapsack",
        "peekOfCode": "Item = namedtuple(\"Item\", [\"index\", \"size\", \"value\"])\ndef knapsack_solver(items, capacity):\n    pass\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1:\n        capacity = int(sys.argv[2])\n        file_location = sys.argv[1].strip()\n        file_contents = open(file_location, \"r\")\n        items = []\n        for line in file_contents.readlines():",
        "detail": "mid-range.knapsack",
        "documentation": {}
    },
    {
        "label": "knapsackLight",
        "kind": 2,
        "importPath": "mid-range.knapsack_light",
        "description": "mid-range.knapsack_light",
        "peekOfCode": "def knapsackLight(value1, weight1, value2, weight2, maxW):\n    val = 0\n    if value2 > value1:\n        val = value1\n        value1 = value2\n        value2 = val\n        val = weight1\n        weight1 = weight2\n        weight2 = val\n    val = 0",
        "detail": "mid-range.knapsack_light",
        "documentation": {}
    },
    {
        "label": "knapsack_simple",
        "kind": 2,
        "importPath": "mid-range.knapsack_simple",
        "description": "mid-range.knapsack_simple",
        "peekOfCode": "def knapsack_simple(weights: Sequence[int], values: Sequence[int], capacity: int):\n    \"\"\"0-1 knapsack problem. Just return the max value.\"\"\"\n    # Each index is a sub-capacity and each value the best value for that sub-capacity so far.\n    best_values = [0] * (capacity + 1)\n    for weight, value in zip(weights, values):\n        # Iterate backwards so we don't take things twice. Forwards would be the unbounded version of the problem.\n        for sub_capacity in range(capacity, 0, -1):\n            if weight <= sub_capacity:\n                # These three lines can be refactored to one, or a slightly more efficient if instead of max.\n                take_value = value + best_values[sub_capacity - weight]",
        "detail": "mid-range.knapsack_simple",
        "documentation": {}
    },
    {
        "label": "move_Knight",
        "kind": 2,
        "importPath": "mid-range.knight's_tour",
        "description": "mid-range.knight's_tour",
        "peekOfCode": "def move_Knight(n, pos, move, ans, step):\n    x, y = pos\n    # Base Case\n    if step == n * n:\n        return ans\n    for i in move:\n        r = x + i[0]\n        c = y + i[1]\n        if 0 <= r < n and 0 <= c < n and not ans[r][c]:\n            ans[r][c] = step + 1",
        "detail": "mid-range.knight's_tour",
        "documentation": {}
    },
    {
        "label": "Knight_Tour",
        "kind": 2,
        "importPath": "mid-range.knight's_tour",
        "description": "mid-range.knight's_tour",
        "peekOfCode": "def Knight_Tour(n, pos):\n    x, y = pos\n    # All valid moves that a Knight can make\n    move = [[2, 1], [2, -1], [-2, 1], [-2, -1], [1, 2], [1, -2], [-1, 2], [-1, -2]]\n    # To keep a track of already visited cells and\n    # Answer Matrix\n    answer = [[0] * n for i in range(n)]\n    # To mark (X, Y) cell as visited\n    answer[x][y] = 1\n    return move_Knight(n, pos, move, answer, 1)",
        "detail": "mid-range.knight's_tour",
        "documentation": {}
    },
    {
        "label": "chessKnight",
        "kind": 2,
        "importPath": "mid-range.Knight",
        "description": "mid-range.Knight",
        "peekOfCode": "def chessKnight(cell):\n    knight_dir = list(t.permutations([1, 2, -1, -2], 2))\n    knight_dir1 = []\n    valid_moves = 0\n    for i in range(len(knight_dir)):\n        if sum(knight_dir[i]) != 0:\n            knight_dir1.append(knight_dir[i])\n    for x, y in knight_dir1:\n        if (97 <= ord(cell[0]) + x <= 104) and (1 <= int(cell[1]) + y <= 8):\n            valid_moves += 1",
        "detail": "mid-range.Knight",
        "documentation": {}
    },
    {
        "label": "get_valid_pos",
        "kind": 2,
        "importPath": "mid-range.knight_tour",
        "description": "mid-range.knight_tour",
        "peekOfCode": "def get_valid_pos(position: Tuple[int, int], n: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    Find all the valid positions a knight can move to from the current position.\n    >>> get_valid_pos((1, 3), 4)\n    [(2, 1), (0, 1), (3, 2)]\n    \"\"\"\n    y, x = position\n    positions = [\n        (y + 1, x + 2),\n        (y - 1, x + 2),",
        "detail": "mid-range.knight_tour",
        "documentation": {}
    },
    {
        "label": "is_complete",
        "kind": 2,
        "importPath": "mid-range.knight_tour",
        "description": "mid-range.knight_tour",
        "peekOfCode": "def is_complete(board: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the board (matrix) has been completely filled with non-zero values.\n    >>> is_complete([[1]])\n    True\n    >>> is_complete([[1, 2], [3, 0]])\n    False\n    \"\"\"\n    return not any(elem == 0 for row in board for elem in row)\ndef open_knight_tour_helper(",
        "detail": "mid-range.knight_tour",
        "documentation": {}
    },
    {
        "label": "open_knight_tour_helper",
        "kind": 2,
        "importPath": "mid-range.knight_tour",
        "description": "mid-range.knight_tour",
        "peekOfCode": "def open_knight_tour_helper(\n    board: List[List[int]], pos: Tuple[int, int], curr: int\n) -> bool:\n    \"\"\"\n    Helper function to solve knight tour problem.\n    \"\"\"\n    if is_complete(board):\n        return True\n    for position in get_valid_pos(pos, len(board)):\n        y, x = position",
        "detail": "mid-range.knight_tour",
        "documentation": {}
    },
    {
        "label": "open_knight_tour",
        "kind": 2,
        "importPath": "mid-range.knight_tour",
        "description": "mid-range.knight_tour",
        "peekOfCode": "def open_knight_tour(n: int) -> List[List[int]]:\n    \"\"\"\n    Find the solution for the knight tour problem for a board of size n. Raises\n    ValueError if the tour cannot be performed for the given size.\n    >>> open_knight_tour(1)\n    [[1]]\n    >>> open_knight_tour(2)\n    Traceback (most recent call last):\n    ...\n    ValueError: Open Kight Tour cannot be performed on a board of size 2",
        "detail": "mid-range.knight_tour",
        "documentation": {}
    },
    {
        "label": "iris",
        "kind": 5,
        "importPath": "mid-range.knn_sklearn",
        "description": "mid-range.knn_sklearn",
        "peekOfCode": "iris = load_iris()\niris.keys()\nprint(f\"Target names: \\n {iris.target_names} \")\nprint(f\"\\n Features: \\n {iris.feature_names}\")\n# Train set e Test set\nX_train, X_test, y_train, y_test = train_test_split(\n    iris[\"data\"], iris[\"target\"], random_state=4\n)\n# KNN\nknn = KNeighborsClassifier(n_neighbors=1)",
        "detail": "mid-range.knn_sklearn",
        "documentation": {}
    },
    {
        "label": "knn",
        "kind": 5,
        "importPath": "mid-range.knn_sklearn",
        "description": "mid-range.knn_sklearn",
        "peekOfCode": "knn = KNeighborsClassifier(n_neighbors=1)\nknn.fit(X_train, y_train)\n# new array to test\nX_new = [[1, 2, 1, 4], [2, 3, 4, 5]]\nprediction = knn.predict(X_new)\nprint(\n    f\"\\nNew array: \\n {X_new}\\n\\nTarget Names Prediction: \\n\"\n    f\" {iris['target_names'][prediction]}\"\n)",
        "detail": "mid-range.knn_sklearn",
        "documentation": {}
    },
    {
        "label": "X_new",
        "kind": 5,
        "importPath": "mid-range.knn_sklearn",
        "description": "mid-range.knn_sklearn",
        "peekOfCode": "X_new = [[1, 2, 1, 4], [2, 3, 4, 5]]\nprediction = knn.predict(X_new)\nprint(\n    f\"\\nNew array: \\n {X_new}\\n\\nTarget Names Prediction: \\n\"\n    f\" {iris['target_names'][prediction]}\"\n)",
        "detail": "mid-range.knn_sklearn",
        "documentation": {}
    },
    {
        "label": "prediction",
        "kind": 5,
        "importPath": "mid-range.knn_sklearn",
        "description": "mid-range.knn_sklearn",
        "peekOfCode": "prediction = knn.predict(X_new)\nprint(\n    f\"\\nNew array: \\n {X_new}\\n\\nTarget Names Prediction: \\n\"\n    f\" {iris['target_names'][prediction]}\"\n)",
        "detail": "mid-range.knn_sklearn",
        "documentation": {}
    },
    {
        "label": "kmp",
        "kind": 2,
        "importPath": "mid-range.knuth-morris-pratt",
        "description": "mid-range.knuth-morris-pratt",
        "peekOfCode": "def kmp(pattern, text):\n    \"\"\"\n    The Knuth-Morris-Pratt Algorithm for finding a pattern within a piece of text\n    with complexity O(n + m)\n    1) Preprocess pattern to identify any suffixes that are identical to prefixes\n        This tells us where to continue from if we get a mismatch between a character in our pattern\n        and the text.\n    2) Step through the text one character at a time and compare it to a character in the pattern\n        updating our location within the pattern if necessary\n    \"\"\"",
        "detail": "mid-range.knuth-morris-pratt",
        "documentation": {}
    },
    {
        "label": "get_failure_array",
        "kind": 2,
        "importPath": "mid-range.knuth-morris-pratt",
        "description": "mid-range.knuth-morris-pratt",
        "peekOfCode": "def get_failure_array(pattern):\n    \"\"\"\n    Calculates the new index we should go to if we fail a comparison\n    :param pattern:\n    :return:\n    \"\"\"\n    failure = [0]\n    i = 0\n    j = 1\n    while j < len(pattern):",
        "detail": "mid-range.knuth-morris-pratt",
        "documentation": {}
    },
    {
        "label": "kmp",
        "kind": 2,
        "importPath": "mid-range.knuth_morris_pratt",
        "description": "mid-range.knuth_morris_pratt",
        "peekOfCode": "def kmp(pattern: str, text: str) -> bool:\n    \"\"\"\n    The Knuth-Morris-Pratt Algorithm for finding a pattern within a piece of text\n    with complexity O(n + m)\n    1) Preprocess pattern to identify any suffixes that are identical to prefixes\n        This tells us where to continue from if we get a mismatch between a character\n        in our pattern and the text.\n    2) Step through the text one character at a time and compare it to a character in\n        the pattern updating our location within the pattern if necessary\n    \"\"\"",
        "detail": "mid-range.knuth_morris_pratt",
        "documentation": {}
    },
    {
        "label": "get_failure_array",
        "kind": 2,
        "importPath": "mid-range.knuth_morris_pratt",
        "description": "mid-range.knuth_morris_pratt",
        "peekOfCode": "def get_failure_array(pattern: str) -> List[int]:\n    \"\"\"\n    Calculates the new index we should go to if we fail a comparison\n    :param pattern:\n    :return:\n    \"\"\"\n    failure = [0]\n    i = 0\n    j = 1\n    while j < len(pattern):",
        "detail": "mid-range.knuth_morris_pratt",
        "documentation": {}
    },
    {
        "label": "__docformat__",
        "kind": 5,
        "importPath": "mid-range.ko",
        "description": "mid-range.ko",
        "peekOfCode": "__docformat__ = \"reStructuredText\"\nlabels = {\n    # fixed: language-dependent\n    \"author\": u\"저자\",\n    \"authors\": u\"저자들\",\n    \"organization\": u\"조직\",\n    \"address\": u\"주소\",\n    \"contact\": u\"연락처\",\n    \"version\": u\"버전\",\n    \"revision\": u\"리비전\",",
        "detail": "mid-range.ko",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "mid-range.ko",
        "description": "mid-range.ko",
        "peekOfCode": "labels = {\n    # fixed: language-dependent\n    \"author\": u\"저자\",\n    \"authors\": u\"저자들\",\n    \"organization\": u\"조직\",\n    \"address\": u\"주소\",\n    \"contact\": u\"연락처\",\n    \"version\": u\"버전\",\n    \"revision\": u\"리비전\",\n    \"status\": u\"상태\",",
        "detail": "mid-range.ko",
        "documentation": {}
    },
    {
        "label": "bibliographic_fields",
        "kind": 5,
        "importPath": "mid-range.ko",
        "description": "mid-range.ko",
        "peekOfCode": "bibliographic_fields = {\n    # language-dependent: fixed\n    u\"저자\": \"author\",\n    u\"저자들\": \"authors\",\n    u\"조직\": \"organization\",\n    u\"주소\": \"address\",\n    u\"연락처\": \"contact\",\n    u\"버전\": \"version\",\n    u\"리비전\": \"revision\",\n    u\"상태\": \"status\",",
        "detail": "mid-range.ko",
        "documentation": {}
    },
    {
        "label": "author_separators",
        "kind": 5,
        "importPath": "mid-range.ko",
        "description": "mid-range.ko",
        "peekOfCode": "author_separators = [\";\", \",\"]\n\"\"\"List of separator strings for the 'Authors' bibliographic field. Tried in\norder.\"\"\"",
        "detail": "mid-range.ko",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "mid-range.krishnamurthy_number",
        "description": "mid-range.krishnamurthy_number",
        "peekOfCode": "def factorial(digit: int) -> int:\n    \"\"\"\n    >>> factorial(3)\n    6\n    >>> factorial(0)\n    1\n    >>> factorial(5)\n    120\n    \"\"\"\n    return 1 if digit in (0, 1) else (digit * factorial(digit - 1))",
        "detail": "mid-range.krishnamurthy_number",
        "documentation": {}
    },
    {
        "label": "krishnamurthy",
        "kind": 2,
        "importPath": "mid-range.krishnamurthy_number",
        "description": "mid-range.krishnamurthy_number",
        "peekOfCode": "def krishnamurthy(number: int) -> bool:\n    \"\"\"\n    >>> krishnamurthy(145)\n    True\n    >>> krishnamurthy(240)\n    False\n    >>> krishnamurthy(1)\n    True\n    \"\"\"\n    factSum = 0",
        "detail": "mid-range.krishnamurthy_number",
        "documentation": {}
    },
    {
        "label": "kthSmallest",
        "kind": 2,
        "importPath": "mid-range.Kth smallest element",
        "description": "mid-range.Kth smallest element",
        "peekOfCode": "def kthSmallest(arr, l, r, k):\n    if k > 0 and k <= r - l + 1:\n        pos = randomPartition(arr, l, r)\n        if pos - l == k - 1:\n            return arr[pos]\n        if pos - l > k - 1:\n            return kthSmallest(arr, l, pos - 1, k)\n        return kthSmallest(arr, pos + 1, r, k - pos + l - 1)\n    return 999999999999\ndef swap(arr, a, b):",
        "detail": "mid-range.Kth smallest element",
        "documentation": {}
    },
    {
        "label": "swap",
        "kind": 2,
        "importPath": "mid-range.Kth smallest element",
        "description": "mid-range.Kth smallest element",
        "peekOfCode": "def swap(arr, a, b):\n    temp = arr[a]\n    arr[a] = arr[b]\n    arr[b] = temp\ndef partition(arr, l, r):\n    x = arr[r]\n    i = l\n    for j in range(l, r):\n        if arr[j] <= x:\n            swap(arr, i, j)",
        "detail": "mid-range.Kth smallest element",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "mid-range.Kth smallest element",
        "description": "mid-range.Kth smallest element",
        "peekOfCode": "def partition(arr, l, r):\n    x = arr[r]\n    i = l\n    for j in range(l, r):\n        if arr[j] <= x:\n            swap(arr, i, j)\n            i += 1\n    swap(arr, i, r)\n    return i\ndef randomPartition(arr, l, r):",
        "detail": "mid-range.Kth smallest element",
        "documentation": {}
    },
    {
        "label": "randomPartition",
        "kind": 2,
        "importPath": "mid-range.Kth smallest element",
        "description": "mid-range.Kth smallest element",
        "peekOfCode": "def randomPartition(arr, l, r):\n    n = r - l + 1\n    pivot = int(random.random() % n)\n    swap(arr, l + pivot, r)\n    return partition(arr, l, r)",
        "detail": "mid-range.Kth smallest element",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.kthmost",
        "description": "mid-range.kthmost",
        "peekOfCode": "class Solution(object):\n    def topKFrequent(self, nums, k):\n        number_frequency = {}\n        frequency_list = {}\n        for i in nums:\n            if i not in number_frequency:\n                number_frequency[i] = 1\n            else:\n                number_frequency[i] += 1\n        for key, value in number_frequency.items():",
        "detail": "mid-range.kthmost",
        "documentation": {}
    },
    {
        "label": "ob1",
        "kind": 5,
        "importPath": "mid-range.kthmost",
        "description": "mid-range.kthmost",
        "peekOfCode": "ob1 = Solution()\nprint(ob1.topKFrequent([1, 1, 1, 1, 2, 2, 3, 3, 3], 2))",
        "detail": "mid-range.kthmost",
        "documentation": {}
    },
    {
        "label": "kthSmallestInBST",
        "kind": 2,
        "importPath": "mid-range.kthSmallestInBST",
        "description": "mid-range.kthSmallestInBST",
        "peekOfCode": "def kthSmallestInBST(t, k):\n    def inorder(r):\n        return inorder(r.left) + [r.value] + inorder(r.right) if r else []\n    return inorder(t)[k - 1]",
        "detail": "mid-range.kthSmallestInBST",
        "documentation": {}
    },
    {
        "label": "kth_array",
        "kind": 2,
        "importPath": "mid-range.kth_largest",
        "description": "mid-range.kth_largest",
        "peekOfCode": "def kth_array(arr, n):\n    arr.sort(reverse=True)\n    for i in range(n):\n        print(arr[i])\narr = [1, 23, 12, 9, 30, 2, 50]\nkth_array(arr, 3)",
        "detail": "mid-range.kth_largest",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "mid-range.kth_largest",
        "description": "mid-range.kth_largest",
        "peekOfCode": "arr = [1, 23, 12, 9, 30, 2, 50]\nkth_array(arr, 3)",
        "detail": "mid-range.kth_largest",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Kth_Largest_Array_Quick_Select",
        "description": "mid-range.Kth_Largest_Array_Quick_Select",
        "peekOfCode": "class Solution:\n    def quickSelect(self, nums, k):\n        k = len(nums) - k\n        return self.helper(nums, 0, len(nums) - 1, k)\n    def helper(self, nums, left, right, k):\n        while True:\n            pivot = left\n            leftIdx = left + 1\n            rightIdx = right\n            while leftIdx <= rightIdx:",
        "detail": "mid-range.Kth_Largest_Array_Quick_Select",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.kth_largest_in_unsorted_array",
        "description": "mid-range.kth_largest_in_unsorted_array",
        "peekOfCode": "class Solution:\n    def klargest(self, nums, k):\n        heap = []\n        for num in nums:\n            heapq.heappush(heap, num)\n            if len(heap) > k:\n                heapq.heappop(heap)\n        return heap[0]\nif __name__ == \"__main__\":\n    arr = [3, 2, 3, 1, 2, 4, 5, 5, 6]",
        "detail": "mid-range.kth_largest_in_unsorted_array",
        "documentation": {}
    },
    {
        "label": "kthPermutation",
        "kind": 2,
        "importPath": "mid-range.kth_lexicographic_permutation",
        "description": "mid-range.kth_lexicographic_permutation",
        "peekOfCode": "def kthPermutation(k, n):\n    \"\"\"\n    Finds k'th lexicographic permutation (in increasing order) of\n    0,1,2,...n-1 in O(n^2) time.\n    Examples:\n    First permutation is always 0,1,2,...n\n    >>> kthPermutation(0,5)\n    [0, 1, 2, 3, 4]\n    The order of permutation of 0,1,2,3 is [0,1,2,3], [0,1,3,2], [0,2,1,3],\n    [0,2,3,1], [0,3,1,2], [0,3,2,1], [1,0,2,3], [1,0,3,2], [1,2,0,3],",
        "detail": "mid-range.kth_lexicographic_permutation",
        "documentation": {}
    },
    {
        "label": "random_pivot",
        "kind": 2,
        "importPath": "mid-range.kth_order_statistic",
        "description": "mid-range.kth_order_statistic",
        "peekOfCode": "def random_pivot(lst):\n    \"\"\"\n    Choose a random pivot for the list.\n    We can use a more sophisticated algorithm here, such as the median-of-medians\n    algorithm.\n    \"\"\"\n    return choice(lst)\ndef kth_number(lst: List[int], k: int) -> int:\n    \"\"\"\n    Return the kth smallest number in lst.",
        "detail": "mid-range.kth_order_statistic",
        "documentation": {}
    },
    {
        "label": "kth_number",
        "kind": 2,
        "importPath": "mid-range.kth_order_statistic",
        "description": "mid-range.kth_order_statistic",
        "peekOfCode": "def kth_number(lst: List[int], k: int) -> int:\n    \"\"\"\n    Return the kth smallest number in lst.\n    >>> kth_number([2, 1, 3, 4, 5], 3)\n    3\n    >>> kth_number([2, 1, 3, 4, 5], 1)\n    1\n    >>> kth_number([2, 1, 3, 4, 5], 5)\n    5\n    >>> kth_number([3, 2, 5, 6, 7, 8], 2)",
        "detail": "mid-range.kth_order_statistic",
        "documentation": {}
    },
    {
        "label": "kthSmallest",
        "kind": 2,
        "importPath": "mid-range.Kth_smallest_element",
        "description": "mid-range.Kth_smallest_element",
        "peekOfCode": "def kthSmallest(arr, l, r, k):\n    if k > 0 and k <= r - l + 1:\n        pos = randomPartition(arr, l, r)\n        if pos - l == k - 1:\n            return arr[pos]\n        if pos - l > k - 1:\n            return kthSmallest(arr, l, pos - 1, k)\n        return kthSmallest(arr, pos + 1, r, k - pos + l - 1)\n    return 999999999999\ndef swap(arr, a, b):",
        "detail": "mid-range.Kth_smallest_element",
        "documentation": {}
    },
    {
        "label": "swap",
        "kind": 2,
        "importPath": "mid-range.Kth_smallest_element",
        "description": "mid-range.Kth_smallest_element",
        "peekOfCode": "def swap(arr, a, b):\n    temp = arr[a]\n    arr[a] = arr[b]\n    arr[b] = temp\ndef partition(arr, l, r):\n    x = arr[r]\n    i = l\n    for j in range(l, r):\n        if arr[j] <= x:\n            swap(arr, i, j)",
        "detail": "mid-range.Kth_smallest_element",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "mid-range.Kth_smallest_element",
        "description": "mid-range.Kth_smallest_element",
        "peekOfCode": "def partition(arr, l, r):\n    x = arr[r]\n    i = l\n    for j in range(l, r):\n        if arr[j] <= x:\n            swap(arr, i, j)\n            i += 1\n    swap(arr, i, r)\n    return i\ndef randomPartition(arr, l, r):",
        "detail": "mid-range.Kth_smallest_element",
        "documentation": {}
    },
    {
        "label": "randomPartition",
        "kind": 2,
        "importPath": "mid-range.Kth_smallest_element",
        "description": "mid-range.Kth_smallest_element",
        "peekOfCode": "def randomPartition(arr, l, r):\n    n = r - l + 1\n    pivot = int(random.random() % n)\n    swap(arr, l + pivot, r)\n    return partition(arr, l, r)",
        "detail": "mid-range.Kth_smallest_element",
        "documentation": {}
    },
    {
        "label": "print_scores",
        "kind": 2,
        "importPath": "mid-range.kw_args",
        "description": "mid-range.kw_args",
        "peekOfCode": "def print_scores(**kw):\n    print(\"      Name  Score\")\n    print(\"------------------\")\n    for name, score in kw.items():\n        print(\"%10s  %d\" % (name, score))\n    print()\nprint_scores(Adam=99, Lisa=88, Bart=77)\ndata = {\"Adam Lee\": 99, \"Lisa S\": 88, \"F.Bart\": 77}\nprint_scores(**data)\ndef print_info(name, *, gender, city=\"Beijing\", age):",
        "detail": "mid-range.kw_args",
        "documentation": {}
    },
    {
        "label": "print_info",
        "kind": 2,
        "importPath": "mid-range.kw_args",
        "description": "mid-range.kw_args",
        "peekOfCode": "def print_info(name, *, gender, city=\"Beijing\", age):\n    print(\"Personal Info\")\n    print(\"---------------\")\n    print(\"   Name: %s\" % name)\n    print(\" Gender: %s\" % gender)\n    print(\"   City: %s\" % city)\n    print(\"    Age: %s\" % age)\n    print()\nprint_info(\"Bob\", gender=\"male\", age=20)\nprint_info(\"Lisa\", gender=\"female\", city=\"Shanghai\", age=18)",
        "detail": "mid-range.kw_args",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.kw_args",
        "description": "mid-range.kw_args",
        "peekOfCode": "data = {\"Adam Lee\": 99, \"Lisa S\": 88, \"F.Bart\": 77}\nprint_scores(**data)\ndef print_info(name, *, gender, city=\"Beijing\", age):\n    print(\"Personal Info\")\n    print(\"---------------\")\n    print(\"   Name: %s\" % name)\n    print(\" Gender: %s\" % gender)\n    print(\"   City: %s\" % city)\n    print(\"    Age: %s\" % age)\n    print()",
        "detail": "mid-range.kw_args",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.K_closest_points_to_Origin",
        "description": "mid-range.K_closest_points_to_Origin",
        "peekOfCode": "class Solution:\n    def kclosest(self, points, k):\n        heap = []\n        for point in points:\n            d = (point[0] * point[0]) + (point[1] * point[1])\n            heapq.heappush(heap, (d, point))\n        res = []\n        for i in range(k):\n            res.append(heapq.heappop(heap)[1])\n        return res",
        "detail": "mid-range.K_closest_points_to_Origin",
        "documentation": {}
    },
    {
        "label": "euclidean_distance",
        "kind": 2,
        "importPath": "mid-range.k_nearest_neighbours",
        "description": "mid-range.k_nearest_neighbours",
        "peekOfCode": "def euclidean_distance(a, b):\n    \"\"\"\n    Gives the euclidean distance between two points\n    >>> euclidean_distance([0, 0], [3, 4])\n    5.0\n    >>> euclidean_distance([1, 2, 3], [1, 8, 11])\n    10.0\n    \"\"\"\n    return np.linalg.norm(np.array(a) - np.array(b))\ndef classifier(train_data, train_target, classes, point, k=5):",
        "detail": "mid-range.k_nearest_neighbours",
        "documentation": {}
    },
    {
        "label": "classifier",
        "kind": 2,
        "importPath": "mid-range.k_nearest_neighbours",
        "description": "mid-range.k_nearest_neighbours",
        "peekOfCode": "def classifier(train_data, train_target, classes, point, k=5):\n    \"\"\"\n    Classifies the point using the KNN algorithm\n    k closest points are found (ranked in ascending order of euclidean distance)\n    Params:\n    :train_data: Set of points that are classified into two or more classes\n    :train_target: List of classes in the order of train_data points\n    :classes: Labels of the classes\n    :point: The data point that needs to be classified\n    >>> X_train = [[0, 0], [1, 0], [0, 1], [0.5, 0.5], [3, 3], [2, 3], [3, 2]]",
        "detail": "mid-range.k_nearest_neighbours",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mid-range.k_nearest_neighbours",
        "description": "mid-range.k_nearest_neighbours",
        "peekOfCode": "data = datasets.load_iris()\nX = np.array(data[\"data\"])\ny = np.array(data[\"target\"])\nclasses = data[\"target_names\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y)\ndef euclidean_distance(a, b):\n    \"\"\"\n    Gives the euclidean distance between two points\n    >>> euclidean_distance([0, 0], [3, 4])\n    5.0",
        "detail": "mid-range.k_nearest_neighbours",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "mid-range.k_nearest_neighbours",
        "description": "mid-range.k_nearest_neighbours",
        "peekOfCode": "X = np.array(data[\"data\"])\ny = np.array(data[\"target\"])\nclasses = data[\"target_names\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y)\ndef euclidean_distance(a, b):\n    \"\"\"\n    Gives the euclidean distance between two points\n    >>> euclidean_distance([0, 0], [3, 4])\n    5.0\n    >>> euclidean_distance([1, 2, 3], [1, 8, 11])",
        "detail": "mid-range.k_nearest_neighbours",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "mid-range.k_nearest_neighbours",
        "description": "mid-range.k_nearest_neighbours",
        "peekOfCode": "y = np.array(data[\"target\"])\nclasses = data[\"target_names\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y)\ndef euclidean_distance(a, b):\n    \"\"\"\n    Gives the euclidean distance between two points\n    >>> euclidean_distance([0, 0], [3, 4])\n    5.0\n    >>> euclidean_distance([1, 2, 3], [1, 8, 11])\n    10.0",
        "detail": "mid-range.k_nearest_neighbours",
        "documentation": {}
    },
    {
        "label": "classes",
        "kind": 5,
        "importPath": "mid-range.k_nearest_neighbours",
        "description": "mid-range.k_nearest_neighbours",
        "peekOfCode": "classes = data[\"target_names\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y)\ndef euclidean_distance(a, b):\n    \"\"\"\n    Gives the euclidean distance between two points\n    >>> euclidean_distance([0, 0], [3, 4])\n    5.0\n    >>> euclidean_distance([1, 2, 3], [1, 8, 11])\n    10.0\n    \"\"\"",
        "detail": "mid-range.k_nearest_neighbours",
        "documentation": {}
    },
    {
        "label": "laddus",
        "kind": 2,
        "importPath": "mid-range.Laddu",
        "description": "mid-range.Laddu",
        "peekOfCode": "def laddus(n, origin, activities):\n    score = 0\n    for i in range(n):\n        if \"TOP_CONTRIBUTOR\" in activities[i]:\n            score += 300\n        elif \"CONTEST_HOSTED\" in activities[i]:\n            score += 50\n        elif \"CONTEST_WON\" in activities[i]:\n            rank = int(activities[i].split()[1])\n            if rank > 20:",
        "detail": "mid-range.Laddu",
        "documentation": {}
    },
    {
        "label": "LaheyFCompiler",
        "kind": 6,
        "importPath": "mid-range.lahey",
        "description": "mid-range.lahey",
        "peekOfCode": "class LaheyFCompiler(FCompiler):\n    compiler_type = \"lahey\"\n    description = \"Lahey/Fujitsu Fortran 95 Compiler\"\n    version_pattern = r\"Lahey/Fujitsu Fortran 95 Compiler Release (?P<version>[^\\s*]*)\"\n    executables = {\n        \"version_cmd\": [\"<F90>\", \"--version\"],\n        \"compiler_f77\": [\"lf95\", \"--fix\"],\n        \"compiler_fix\": [\"lf95\", \"--fix\"],\n        \"compiler_f90\": [\"lf95\"],\n        \"linker_so\": [\"lf95\", \"-shared\"],",
        "detail": "mid-range.lahey",
        "documentation": {}
    },
    {
        "label": "compilers",
        "kind": 5,
        "importPath": "mid-range.lahey",
        "description": "mid-range.lahey",
        "peekOfCode": "compilers = [\"LaheyFCompiler\"]\nclass LaheyFCompiler(FCompiler):\n    compiler_type = \"lahey\"\n    description = \"Lahey/Fujitsu Fortran 95 Compiler\"\n    version_pattern = r\"Lahey/Fujitsu Fortran 95 Compiler Release (?P<version>[^\\s*]*)\"\n    executables = {\n        \"version_cmd\": [\"<F90>\", \"--version\"],\n        \"compiler_f77\": [\"lf95\", \"--fix\"],\n        \"compiler_fix\": [\"lf95\", \"--fix\"],\n        \"compiler_f90\": [\"lf95\"],",
        "detail": "mid-range.lahey",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "mid-range.Lapindromes",
        "description": "mid-range.Lapindromes",
        "peekOfCode": "T = int(input())\nwhile T:\n    s = input()\n    n = len(s)\n    if n % 2 == 0:\n        print(\"YES\") if Counter(s[0 : n // 2]) == Counter(s[(n // 2) : n]) else print(\n            \"NO\"\n        )\n    else:\n        print(\"YES\") if Counter(s[0 : n // 2]) == Counter(",
        "detail": "mid-range.Lapindromes",
        "documentation": {}
    },
    {
        "label": "LargeFileManager",
        "kind": 6,
        "importPath": "mid-range.largefilemanager",
        "description": "mid-range.largefilemanager",
        "peekOfCode": "class LargeFileManager(FileContentsManager):\n    \"\"\"Handle large file upload.\"\"\"\n    def save(self, model, path=\"\"):\n        \"\"\"Save the file model and return the model with no content.\"\"\"\n        chunk = model.get(\"chunk\", None)\n        if chunk is not None:\n            path = path.strip(\"/\")\n            if \"type\" not in model:\n                raise web.HTTPError(400, u\"No file type provided\")\n            if model[\"type\"] != \"file\":",
        "detail": "mid-range.largefilemanager",
        "documentation": {}
    },
    {
        "label": "largest_continuous_sum",
        "kind": 2,
        "importPath": "mid-range.largest-continuous-sum",
        "description": "mid-range.largest-continuous-sum",
        "peekOfCode": "def largest_continuous_sum(arr):\n    \"\"\"returns the highest sum of a continuous sequence in a given list\"\"\"\n    largest = 0\n    queue = []\n    for num in arr:\n        if len(queue) > 0 and queue[-1] + 1 != num:\n            sum = reduce(lambda x, y: x + y, queue)\n            if largest < sum:\n                largest = sum\n            queue = []",
        "detail": "mid-range.largest-continuous-sum",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Largest-Number",
        "description": "mid-range.Largest-Number",
        "peekOfCode": "class Solution:\n    # @param A : tuple of integers\n    # @return a strings\n    def largestNumber(self, A):\n        A = [str(item) for item in A]\n        A = sorted(A, key=lambda s: s * 9)[::-1]\n        return str(int(\"\".join(A)))",
        "detail": "mid-range.Largest-Number",
        "documentation": {}
    },
    {
        "label": "largestPermutation",
        "kind": 2,
        "importPath": "mid-range.Largest-Permutation",
        "description": "mid-range.Largest-Permutation",
        "peekOfCode": "def largestPermutation(k, arr):\n    N = len(arr)\n    dic = {arr[x]: x for x in range(N)}\n    swaps = 0\n    for x in range(N, 0, -1):\n        if dic[x] == N - x:\n            continue\n        else:\n            dic[arr[N - x]] = dic[x]\n            arr[dic[x]] = arr[N - x]",
        "detail": "mid-range.Largest-Permutation",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 2,
        "importPath": "mid-range.largest_of_very_large_numbers",
        "description": "mid-range.largest_of_very_large_numbers",
        "peekOfCode": "def res(x, y):\n    if 0 not in (x, y):\n        # We use the relation x^y = y*log10(x), where 10 is the base.\n        return y * math.log10(x)\n    else:\n        if x == 0:  # 0 raised to any number is 0\n            return 0\n        elif y == 0:\n            return 1  # any number raised to 0 is 1\nif __name__ == \"__main__\":  # Main function",
        "detail": "mid-range.largest_of_very_large_numbers",
        "documentation": {}
    },
    {
        "label": "max_sub_array_sum",
        "kind": 2,
        "importPath": "mid-range.largest_subarray_sum",
        "description": "mid-range.largest_subarray_sum",
        "peekOfCode": "def max_sub_array_sum(a: list, size: int = 0):\n    \"\"\"\n    >>> max_sub_array_sum([-13, -3, -25, -20, -3, -16, -23, -12, -5, -22, -15, -4, -7])\n    -3\n    \"\"\"\n    size = size or len(a)\n    max_so_far = -maxsize - 1\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]",
        "detail": "mid-range.largest_subarray_sum",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.LastStoneWeight",
        "description": "mid-range.LastStoneWeight",
        "peekOfCode": "class Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        while len(stones) != 1 and len(stones) != 0:\n            stones = sorted(stones)\n            t = abs(stones[-1] - stones[-2])\n            if t != 0:\n                stones.pop()\n                stones[-1] = t\n            else:\n                stones.pop()",
        "detail": "mid-range.LastStoneWeight",
        "documentation": {}
    },
    {
        "label": "lastIndex",
        "kind": 2,
        "importPath": "mid-range.last_index",
        "description": "mid-range.last_index",
        "peekOfCode": "def lastIndex(arr, si, x):\n    l = len(arr)\n    if si == l:  # if the start index is greater than size of array.\n        return -1\n    smallerListOutput = lastIndex(arr, si + 1, x)  # recirsion\n    if smallerListOutput != -1:\n        return (\n            smallerListOutput\n        )  # if the element is found in the second part of array return index+1\n    else:",
        "detail": "mid-range.last_index",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "mid-range.last_index",
        "description": "mid-range.last_index",
        "peekOfCode": "n = int(input(\"Enter size of array : \"))\na = []\nfor i in range(n):\n    ele = int(input())\n    a.append(ele)\nx = int(input(\"Enter element whose last index is to be found : \"))\nprint(lastIndex(a, 0, x))\n# Example\n# Input 5\n# 2 1 2 1 3",
        "detail": "mid-range.last_index",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.last_index",
        "description": "mid-range.last_index",
        "peekOfCode": "a = []\nfor i in range(n):\n    ele = int(input())\n    a.append(ele)\nx = int(input(\"Enter element whose last index is to be found : \"))\nprint(lastIndex(a, 0, x))\n# Example\n# Input 5\n# 2 1 2 1 3\n# 1",
        "detail": "mid-range.last_index",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.last_index",
        "description": "mid-range.last_index",
        "peekOfCode": "x = int(input(\"Enter element whose last index is to be found : \"))\nprint(lastIndex(a, 0, x))\n# Example\n# Input 5\n# 2 1 2 1 3\n# 1\n# Output\n# 3",
        "detail": "mid-range.last_index",
        "documentation": {}
    },
    {
        "label": "lastStoneWeight",
        "kind": 2,
        "importPath": "mid-range.last_stone_weight",
        "description": "mid-range.last_stone_weight",
        "peekOfCode": "def lastStoneWeight(stones):\n    def getLast(arr):\n        # get the index of the max num\n        ind = arr.index(max(arr))\n        # swap the max with the last element to make the deletion process efficient (O(n) time and O(1) space)\n        arr[-1], arr[ind] = arr[ind], arr[-1]\n        return arr.pop()\n    while len(stones) > 1:\n        # delete the largest ele from the stones list\n        largest = getLast(stones)",
        "detail": "mid-range.last_stone_weight",
        "documentation": {}
    },
    {
        "label": "escape_latex",
        "kind": 2,
        "importPath": "mid-range.latex",
        "description": "mid-range.latex",
        "peekOfCode": "def escape_latex(text):\n    \"\"\"\n    Escape characters that may conflict with latex.\n    Parameters\n    ----------\n    text : str\n        Text containing characters that may conflict with Latex\n    \"\"\"\n    text = \"\".join(LATEX_SUBS.get(c, c) for c in text)\n    for pattern, replacement in LATEX_RE_SUBS:",
        "detail": "mid-range.latex",
        "documentation": {}
    },
    {
        "label": "LATEX_RE_SUBS",
        "kind": 5,
        "importPath": "mid-range.latex",
        "description": "mid-range.latex",
        "peekOfCode": "LATEX_RE_SUBS = ((re.compile(r\"\\.\\.\\.+\"), r\"{\\\\ldots}\"),)\n# Latex substitutions for escaping latex.\n# see: http://stackoverflow.com/questions/16259923/how-can-i-escape-latex-special-characters-inside-django-templates\nLATEX_SUBS = {\n    \"&\": r\"\\&\",\n    \"%\": r\"\\%\",\n    \"$\": r\"\\$\",\n    \"#\": r\"\\#\",\n    \"_\": r\"\\_\",\n    \"{\": r\"\\{\",",
        "detail": "mid-range.latex",
        "documentation": {}
    },
    {
        "label": "LATEX_SUBS",
        "kind": 5,
        "importPath": "mid-range.latex",
        "description": "mid-range.latex",
        "peekOfCode": "LATEX_SUBS = {\n    \"&\": r\"\\&\",\n    \"%\": r\"\\%\",\n    \"$\": r\"\\$\",\n    \"#\": r\"\\#\",\n    \"_\": r\"\\_\",\n    \"{\": r\"\\{\",\n    \"}\": r\"\\}\",\n    \"~\": r\"\\textasciitilde{}\",\n    \"^\": r\"\\^{}\",",
        "detail": "mid-range.latex",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "mid-range.latex",
        "description": "mid-range.latex",
        "peekOfCode": "__all__ = [\"escape_latex\"]\ndef escape_latex(text):\n    \"\"\"\n    Escape characters that may conflict with latex.\n    Parameters\n    ----------\n    text : str\n        Text containing characters that may conflict with Latex\n    \"\"\"\n    text = \"\".join(LATEX_SUBS.get(c, c) for c in text)",
        "detail": "mid-range.latex",
        "documentation": {}
    },
    {
        "label": "lateRide",
        "kind": 2,
        "importPath": "mid-range.late_ride",
        "description": "mid-range.late_ride",
        "peekOfCode": "def lateRide(n):\n\t\"\"\"\n\tReturn sum of hours and minutes past 00:00\n\t\"\"\"\n    hours = str(n // 60)\n    minutes = str(n % 60)\n    total = 0\n    for digit in hours:\n        total += int(digit)\n    for digit in minutes:",
        "detail": "mid-range.late_ride",
        "documentation": {}
    },
    {
        "label": "alterWords",
        "kind": 2,
        "importPath": "mid-range.Latin",
        "description": "mid-range.Latin",
        "peekOfCode": "def alterWords():\n    wordToAlter = str(input(\"Word To Translate : \"))\n    alteredWord = (\n        wordToAlter[1:] + wordToAlter[0:2] + \"y\"\n    )  # translating word to pig latin\n    if len(wordToAlter) < 46:\n        print(alteredWord)\n    else:\n        print(\"Too Big . Biggest Word in English Contains 45 characters.\")\n# main interaction code",
        "detail": "mid-range.Latin",
        "documentation": {}
    },
    {
        "label": "check_mat",
        "kind": 2,
        "importPath": "mid-range.lat_mat",
        "description": "mid-range.lat_mat",
        "peekOfCode": "def check_mat(m):\n    d_sum = 0\n    r_rows = 0\n    r_col = 0\n    c_rep = {}\n    for i in range(len(m)):\n        rep = {}\n        for j in range(len(m)):\n            ele = m[i][j]\n            if i == j:",
        "detail": "mid-range.lat_mat",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "mid-range.lat_mat",
        "description": "mid-range.lat_mat",
        "peekOfCode": "t = int(input())  # read a line with a single integer\nfor i in range(1, t + 1):\n    m = []\n    rows = int(input())\n    for i in range(1, rows + 1):\n        m.append([int(s) for s in input().split(\" \")])",
        "detail": "mid-range.lat_mat",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "mid-range.launch",
        "description": "mid-range.launch",
        "peekOfCode": "def run():\n    \"\"\"\n    Run the script in sys.argv[1] as if it had\n    been invoked naturally.\n    \"\"\"\n    __builtins__\n    script_name = sys.argv[1]\n    namespace = dict(__file__=script_name, __name__=\"__main__\", __doc__=None)\n    sys.argv[:] = sys.argv[1:]\n    open_ = getattr(tokenize, \"open\", open)",
        "detail": "mid-range.launch",
        "documentation": {}
    },
    {
        "label": "AbstractLazyValue",
        "kind": 6,
        "importPath": "mid-range.lazy_value",
        "description": "mid-range.lazy_value",
        "peekOfCode": "class AbstractLazyValue:\n    def __init__(self, data, min=1, max=1):\n        self.data = data\n        self.min = min\n        self.max = max\n    def __repr__(self):\n        return \"<%s: %s>\" % (self.__class__.__name__, self.data)\n    def infer(self):\n        raise NotImplementedError\nclass LazyKnownValue(AbstractLazyValue):",
        "detail": "mid-range.lazy_value",
        "documentation": {}
    },
    {
        "label": "LazyKnownValue",
        "kind": 6,
        "importPath": "mid-range.lazy_value",
        "description": "mid-range.lazy_value",
        "peekOfCode": "class LazyKnownValue(AbstractLazyValue):\n    \"\"\"data is a Value.\"\"\"\n    def infer(self):\n        return ValueSet([self.data])\nclass LazyKnownValues(AbstractLazyValue):\n    \"\"\"data is a ValueSet.\"\"\"\n    def infer(self):\n        return self.data\nclass LazyUnknownValue(AbstractLazyValue):\n    def __init__(self, min=1, max=1):",
        "detail": "mid-range.lazy_value",
        "documentation": {}
    },
    {
        "label": "LazyKnownValues",
        "kind": 6,
        "importPath": "mid-range.lazy_value",
        "description": "mid-range.lazy_value",
        "peekOfCode": "class LazyKnownValues(AbstractLazyValue):\n    \"\"\"data is a ValueSet.\"\"\"\n    def infer(self):\n        return self.data\nclass LazyUnknownValue(AbstractLazyValue):\n    def __init__(self, min=1, max=1):\n        super().__init__(None, min, max)\n    def infer(self):\n        return NO_VALUES\nclass LazyTreeValue(AbstractLazyValue):",
        "detail": "mid-range.lazy_value",
        "documentation": {}
    },
    {
        "label": "LazyUnknownValue",
        "kind": 6,
        "importPath": "mid-range.lazy_value",
        "description": "mid-range.lazy_value",
        "peekOfCode": "class LazyUnknownValue(AbstractLazyValue):\n    def __init__(self, min=1, max=1):\n        super().__init__(None, min, max)\n    def infer(self):\n        return NO_VALUES\nclass LazyTreeValue(AbstractLazyValue):\n    def __init__(self, context, node, min=1, max=1):\n        super().__init__(node, min, max)\n        self.context = context\n        # We need to save the predefined names. It's an unfortunate side effect",
        "detail": "mid-range.lazy_value",
        "documentation": {}
    },
    {
        "label": "LazyTreeValue",
        "kind": 6,
        "importPath": "mid-range.lazy_value",
        "description": "mid-range.lazy_value",
        "peekOfCode": "class LazyTreeValue(AbstractLazyValue):\n    def __init__(self, context, node, min=1, max=1):\n        super().__init__(node, min, max)\n        self.context = context\n        # We need to save the predefined names. It's an unfortunate side effect\n        # that needs to be tracked otherwise results will be wrong.\n        self._predefined_names = dict(context.predefined_names)\n    def infer(self):\n        with monkeypatch(self.context, \"predefined_names\", self._predefined_names):\n            return self.context.infer_node(self.data)",
        "detail": "mid-range.lazy_value",
        "documentation": {}
    },
    {
        "label": "MergedLazyValues",
        "kind": 6,
        "importPath": "mid-range.lazy_value",
        "description": "mid-range.lazy_value",
        "peekOfCode": "class MergedLazyValues(AbstractLazyValue):\n    \"\"\"data is a list of lazy values.\"\"\"\n    def infer(self):\n        return ValueSet.from_sets(l.infer() for l in self.data)",
        "detail": "mid-range.lazy_value",
        "documentation": {}
    },
    {
        "label": "get_merged_lazy_value",
        "kind": 2,
        "importPath": "mid-range.lazy_value",
        "description": "mid-range.lazy_value",
        "peekOfCode": "def get_merged_lazy_value(lazy_values):\n    if len(lazy_values) > 1:\n        return MergedLazyValues(lazy_values)\n    else:\n        return lazy_values[0]\nclass MergedLazyValues(AbstractLazyValue):\n    \"\"\"data is a list of lazy values.\"\"\"\n    def infer(self):\n        return ValueSet.from_sets(l.infer() for l in self.data)",
        "detail": "mid-range.lazy_value",
        "documentation": {}
    },
    {
        "label": "findLcm",
        "kind": 2,
        "importPath": "mid-range.lcm",
        "description": "mid-range.lcm",
        "peekOfCode": "def findLcm(i, v):\n    if i > v:\n        x = i\n    else:\n        x = v\n    while True:\n        if (x % i == 0) and (x % v == 0):\n            lcm = x\n            return x\n            break",
        "detail": "mid-range.lcm",
        "documentation": {}
    },
    {
        "label": "gcd",
        "kind": 2,
        "importPath": "mid-range.lcm_using_gcd",
        "description": "mid-range.lcm_using_gcd",
        "peekOfCode": "def gcd(x, y):\n    \"\"\"\n    Function to find gcm (greatest common divisor) of two numbers\n    :param x: first number\n    :param y: second number\n    :return: gcd of x and y\n    \"\"\"\n    while y != 0:\n        (x, y) = (y, x % y)\n    return x",
        "detail": "mid-range.lcm_using_gcd",
        "documentation": {}
    },
    {
        "label": "lcm_using_gcd",
        "kind": 2,
        "importPath": "mid-range.lcm_using_gcd",
        "description": "mid-range.lcm_using_gcd",
        "peekOfCode": "def lcm_using_gcd(_list):\n    \"\"\"\n    function to find LCM for given list of elements\n    :param _list: _list of which LCM is to be found out\n    \"\"\"\n    lcm = _list[0]\n    for element in _list:\n        lcm = lcm * element / gcd(lcm, element)\n    return lcm\ndef get_code():",
        "detail": "mid-range.lcm_using_gcd",
        "documentation": {}
    },
    {
        "label": "get_code",
        "kind": 2,
        "importPath": "mid-range.lcm_using_gcd",
        "description": "mid-range.lcm_using_gcd",
        "peekOfCode": "def get_code():\n    \"\"\"\n    returns the code for the gcd function\n    \"\"\"\n    return inspect.getsource(lcm_using_gcd)",
        "detail": "mid-range.lcm_using_gcd",
        "documentation": {}
    },
    {
        "label": "LCP",
        "kind": 6,
        "importPath": "mid-range.lcp",
        "description": "mid-range.lcp",
        "peekOfCode": "class LCP(object):\n\tdef __init__(self, s):\n\t\tself.s = s\n\t\tself.lcp_array = []\n\t\tself.suffix_array = SuffixArray(s)\n\t\tself.suffix_array.create_suffix_array()\n\tdef lcp_w_suffix_str(self):\n\t\tN = len(self.suffix_array.suffix_array)\n\t\tarray = self.suffix_array.suffix_array\n\t\tself.lcp_array = [0]*N",
        "detail": "mid-range.lcp",
        "documentation": {}
    },
    {
        "label": "\t\tself.s",
        "kind": 5,
        "importPath": "mid-range.lcp",
        "description": "mid-range.lcp",
        "peekOfCode": "\t\tself.s = s\n\t\tself.lcp_array = []\n\t\tself.suffix_array = SuffixArray(s)\n\t\tself.suffix_array.create_suffix_array()\n\tdef lcp_w_suffix_str(self):\n\t\tN = len(self.suffix_array.suffix_array)\n\t\tarray = self.suffix_array.suffix_array\n\t\tself.lcp_array = [0]*N\n\t\tinv_suffix = [0]*N\n\t\tfor index in range(N):",
        "detail": "mid-range.lcp",
        "documentation": {}
    },
    {
        "label": "\t\tself.lcp_array",
        "kind": 5,
        "importPath": "mid-range.lcp",
        "description": "mid-range.lcp",
        "peekOfCode": "\t\tself.lcp_array = []\n\t\tself.suffix_array = SuffixArray(s)\n\t\tself.suffix_array.create_suffix_array()\n\tdef lcp_w_suffix_str(self):\n\t\tN = len(self.suffix_array.suffix_array)\n\t\tarray = self.suffix_array.suffix_array\n\t\tself.lcp_array = [0]*N\n\t\tinv_suffix = [0]*N\n\t\tfor index in range(N):\n\t\t\tinv_suffix[array[index].index] = index",
        "detail": "mid-range.lcp",
        "documentation": {}
    },
    {
        "label": "\t\tself.suffix_array",
        "kind": 5,
        "importPath": "mid-range.lcp",
        "description": "mid-range.lcp",
        "peekOfCode": "\t\tself.suffix_array = SuffixArray(s)\n\t\tself.suffix_array.create_suffix_array()\n\tdef lcp_w_suffix_str(self):\n\t\tN = len(self.suffix_array.suffix_array)\n\t\tarray = self.suffix_array.suffix_array\n\t\tself.lcp_array = [0]*N\n\t\tinv_suffix = [0]*N\n\t\tfor index in range(N):\n\t\t\tinv_suffix[array[index].index] = index\n\t\tmaxLen = 0",
        "detail": "mid-range.lcp",
        "documentation": {}
    },
    {
        "label": "\t\tN",
        "kind": 5,
        "importPath": "mid-range.lcp",
        "description": "mid-range.lcp",
        "peekOfCode": "\t\tN = len(self.suffix_array.suffix_array)\n\t\tarray = self.suffix_array.suffix_array\n\t\tself.lcp_array = [0]*N\n\t\tinv_suffix = [0]*N\n\t\tfor index in range(N):\n\t\t\tinv_suffix[array[index].index] = index\n\t\tmaxLen = 0\n\t\tfor index in range(N):\n\t\t\tif inv_suffix[index] == N-1:\n\t\t\t\tmaxLen = 0",
        "detail": "mid-range.lcp",
        "documentation": {}
    },
    {
        "label": "\t\tarray",
        "kind": 5,
        "importPath": "mid-range.lcp",
        "description": "mid-range.lcp",
        "peekOfCode": "\t\tarray = self.suffix_array.suffix_array\n\t\tself.lcp_array = [0]*N\n\t\tinv_suffix = [0]*N\n\t\tfor index in range(N):\n\t\t\tinv_suffix[array[index].index] = index\n\t\tmaxLen = 0\n\t\tfor index in range(N):\n\t\t\tif inv_suffix[index] == N-1:\n\t\t\t\tmaxLen = 0\n\t\t\t\tcontinue",
        "detail": "mid-range.lcp",
        "documentation": {}
    },
    {
        "label": "\t\tself.lcp_array",
        "kind": 5,
        "importPath": "mid-range.lcp",
        "description": "mid-range.lcp",
        "peekOfCode": "\t\tself.lcp_array = [0]*N\n\t\tinv_suffix = [0]*N\n\t\tfor index in range(N):\n\t\t\tinv_suffix[array[index].index] = index\n\t\tmaxLen = 0\n\t\tfor index in range(N):\n\t\t\tif inv_suffix[index] == N-1:\n\t\t\t\tmaxLen = 0\n\t\t\t\tcontinue\n\t\t\tindex_j = array[inv_suffix[index]+1].index",
        "detail": "mid-range.lcp",
        "documentation": {}
    },
    {
        "label": "\t\tinv_suffix",
        "kind": 5,
        "importPath": "mid-range.lcp",
        "description": "mid-range.lcp",
        "peekOfCode": "\t\tinv_suffix = [0]*N\n\t\tfor index in range(N):\n\t\t\tinv_suffix[array[index].index] = index\n\t\tmaxLen = 0\n\t\tfor index in range(N):\n\t\t\tif inv_suffix[index] == N-1:\n\t\t\t\tmaxLen = 0\n\t\t\t\tcontinue\n\t\t\tindex_j = array[inv_suffix[index]+1].index\n\t\t\twhile(index+maxLen < N and index_j+maxLen < N and self.s[index+maxLen] == self.s[index_j+maxLen]):",
        "detail": "mid-range.lcp",
        "documentation": {}
    },
    {
        "label": "\t\t\tinv_suffix[array[index].index]",
        "kind": 5,
        "importPath": "mid-range.lcp",
        "description": "mid-range.lcp",
        "peekOfCode": "\t\t\tinv_suffix[array[index].index] = index\n\t\tmaxLen = 0\n\t\tfor index in range(N):\n\t\t\tif inv_suffix[index] == N-1:\n\t\t\t\tmaxLen = 0\n\t\t\t\tcontinue\n\t\t\tindex_j = array[inv_suffix[index]+1].index\n\t\t\twhile(index+maxLen < N and index_j+maxLen < N and self.s[index+maxLen] == self.s[index_j+maxLen]):\n\t\t\t\tmaxLen += 1\n\t\t\tself.lcp_array[inv_suffix[index]] = maxLen",
        "detail": "mid-range.lcp",
        "documentation": {}
    },
    {
        "label": "\t\tmaxLen",
        "kind": 5,
        "importPath": "mid-range.lcp",
        "description": "mid-range.lcp",
        "peekOfCode": "\t\tmaxLen = 0\n\t\tfor index in range(N):\n\t\t\tif inv_suffix[index] == N-1:\n\t\t\t\tmaxLen = 0\n\t\t\t\tcontinue\n\t\t\tindex_j = array[inv_suffix[index]+1].index\n\t\t\twhile(index+maxLen < N and index_j+maxLen < N and self.s[index+maxLen] == self.s[index_j+maxLen]):\n\t\t\t\tmaxLen += 1\n\t\t\tself.lcp_array[inv_suffix[index]] = maxLen\n\t\t\tif maxLen > 0:",
        "detail": "mid-range.lcp",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tmaxLen",
        "kind": 5,
        "importPath": "mid-range.lcp",
        "description": "mid-range.lcp",
        "peekOfCode": "\t\t\t\tmaxLen = 0\n\t\t\t\tcontinue\n\t\t\tindex_j = array[inv_suffix[index]+1].index\n\t\t\twhile(index+maxLen < N and index_j+maxLen < N and self.s[index+maxLen] == self.s[index_j+maxLen]):\n\t\t\t\tmaxLen += 1\n\t\t\tself.lcp_array[inv_suffix[index]] = maxLen\n\t\t\tif maxLen > 0:\n\t\t\t\tmaxLen -= 1\n\t\treturn self.lcp_array\nif __name__ == '__main__':",
        "detail": "mid-range.lcp",
        "documentation": {}
    },
    {
        "label": "\t\t\tindex_j",
        "kind": 5,
        "importPath": "mid-range.lcp",
        "description": "mid-range.lcp",
        "peekOfCode": "\t\t\tindex_j = array[inv_suffix[index]+1].index\n\t\t\twhile(index+maxLen < N and index_j+maxLen < N and self.s[index+maxLen] == self.s[index_j+maxLen]):\n\t\t\t\tmaxLen += 1\n\t\t\tself.lcp_array[inv_suffix[index]] = maxLen\n\t\t\tif maxLen > 0:\n\t\t\t\tmaxLen -= 1\n\t\treturn self.lcp_array\nif __name__ == '__main__':\n\tlcp = LCP(\"banana\")\n\tlcp.lcp_w_suffix_str()",
        "detail": "mid-range.lcp",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.lcp_array[inv_suffix[index]]",
        "kind": 5,
        "importPath": "mid-range.lcp",
        "description": "mid-range.lcp",
        "peekOfCode": "\t\t\tself.lcp_array[inv_suffix[index]] = maxLen\n\t\t\tif maxLen > 0:\n\t\t\t\tmaxLen -= 1\n\t\treturn self.lcp_array\nif __name__ == '__main__':\n\tlcp = LCP(\"banana\")\n\tlcp.lcp_w_suffix_str()\n\tprint lcp.lcp_array",
        "detail": "mid-range.lcp",
        "documentation": {}
    },
    {
        "label": "\tlcp",
        "kind": 5,
        "importPath": "mid-range.lcp",
        "description": "mid-range.lcp",
        "peekOfCode": "\tlcp = LCP(\"banana\")\n\tlcp.lcp_w_suffix_str()\n\tprint lcp.lcp_array",
        "detail": "mid-range.lcp",
        "documentation": {}
    },
    {
        "label": "longest_common_subsequence",
        "kind": 2,
        "importPath": "mid-range.lcs",
        "description": "mid-range.lcs",
        "peekOfCode": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    :param s1: string\n    :param s2: string\n    :return: int\n    \"\"\"\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1)] * (m + 1)\n    \"\"\"\n    dp[i][j] : contains length of LCS of s1[0..i-1] and s2[0..j-1]",
        "detail": "mid-range.lcs",
        "documentation": {}
    },
    {
        "label": "LCSlength",
        "kind": 2,
        "importPath": "mid-range.lcs_recursive",
        "description": "mid-range.lcs_recursive",
        "peekOfCode": "def LCSlength(X, Y, lx, ly):  # Parameters are the two strings and their lengths\n    if lx == 0 or ly == 0:\n        return 0\n    if X[lx - 1] == Y[ly - 1]:\n        return LCSlength(X, Y, lx - 1, ly - 1) + 1\n    return max(LCSlength(X, Y, lx - 1, ly), LCSlength(X, Y, lx, ly - 1))\nprint(\"Enter the first string : \\n\")\nX = input()\nprint(\"Enter the second string: \\n\")\nY = input()",
        "detail": "mid-range.lcs_recursive",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "mid-range.lcs_recursive",
        "description": "mid-range.lcs_recursive",
        "peekOfCode": "X = input()\nprint(\"Enter the second string: \\n\")\nY = input()\nprint(\"The length of the LCS is : {}\".format(LCSlength(X, Y, len(X), len(Y))))\n# This solution has a time complexity of o(2^(lx+ly))\n# Also, this LCS problem has overlapping subproblems",
        "detail": "mid-range.lcs_recursive",
        "documentation": {}
    },
    {
        "label": "Y",
        "kind": 5,
        "importPath": "mid-range.lcs_recursive",
        "description": "mid-range.lcs_recursive",
        "peekOfCode": "Y = input()\nprint(\"The length of the LCS is : {}\".format(LCSlength(X, Y, len(X), len(Y))))\n# This solution has a time complexity of o(2^(lx+ly))\n# Also, this LCS problem has overlapping subproblems",
        "detail": "mid-range.lcs_recursive",
        "documentation": {}
    },
    {
        "label": "TestLeastCommonMultiple",
        "kind": 6,
        "importPath": "mid-range.least_common_multiple",
        "description": "mid-range.least_common_multiple",
        "peekOfCode": "class TestLeastCommonMultiple(unittest.TestCase):\n    test_inputs = [\n        (10, 20),\n        (13, 15),\n        (4, 31),\n        (10, 42),\n        (43, 34),\n        (5, 12),\n        (12, 25),\n        (10, 25),",
        "detail": "mid-range.least_common_multiple",
        "documentation": {}
    },
    {
        "label": "least_common_multiple_slow",
        "kind": 2,
        "importPath": "mid-range.least_common_multiple",
        "description": "mid-range.least_common_multiple",
        "peekOfCode": "def least_common_multiple_slow(first_num: int, second_num: int) -> int:\n    \"\"\"\n    Find the least common multiple of two numbers.\n    Learn more: https://en.wikipedia.org/wiki/Least_common_multiple\n    >>> least_common_multiple_slow(5, 2)\n    10\n    >>> least_common_multiple_slow(12, 76)\n    228\n    \"\"\"\n    max_num = first_num if first_num >= second_num else second_num",
        "detail": "mid-range.least_common_multiple",
        "documentation": {}
    },
    {
        "label": "greatest_common_divisor",
        "kind": 2,
        "importPath": "mid-range.least_common_multiple",
        "description": "mid-range.least_common_multiple",
        "peekOfCode": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate Greatest Common Divisor (GCD).\n    see greatest_common_divisor.py\n    >>> greatest_common_divisor(24, 40)\n    8\n    >>> greatest_common_divisor(1, 1)\n    1\n    >>> greatest_common_divisor(1, 800)\n    1",
        "detail": "mid-range.least_common_multiple",
        "documentation": {}
    },
    {
        "label": "least_common_multiple_fast",
        "kind": 2,
        "importPath": "mid-range.least_common_multiple",
        "description": "mid-range.least_common_multiple",
        "peekOfCode": "def least_common_multiple_fast(first_num: int, second_num: int) -> int:\n    \"\"\"\n    Find the least common multiple of two numbers.\n    https://en.wikipedia.org/wiki/Least_common_multiple#Using_the_greatest_common_divisor\n    >>> least_common_multiple_fast(5,2)\n    10\n    >>> least_common_multiple_fast(12,76)\n    228\n    \"\"\"\n    return first_num // greatest_common_divisor(first_num, second_num) * second_num",
        "detail": "mid-range.least_common_multiple",
        "documentation": {}
    },
    {
        "label": "benchmark",
        "kind": 2,
        "importPath": "mid-range.least_common_multiple",
        "description": "mid-range.least_common_multiple",
        "peekOfCode": "def benchmark():\n    setup = (\n        \"from __main__ import least_common_multiple_slow, least_common_multiple_fast\"\n    )\n    print(\n        \"least_common_multiple_slow():\",\n        timeit(\"least_common_multiple_slow(1000, 999)\", setup=setup),\n    )\n    print(\n        \"least_common_multiple_fast():\",",
        "detail": "mid-range.least_common_multiple",
        "documentation": {}
    },
    {
        "label": "LRUCache",
        "kind": 6,
        "importPath": "mid-range.least_recently_used",
        "description": "mid-range.least_recently_used",
        "peekOfCode": "class LRUCache:\n    \"\"\"Page Replacement Algorithm, Least Recently Used (LRU) Caching.\"\"\"\n    dq_store = object()  # Cache store of keys\n    key_reference_map = object()  # References of the keys in cache\n    _MAX_CAPACITY: int = 10  # Maximum capacity of cache\n    @abstractmethod\n    def __init__(self, n: int):\n        \"\"\"Creates an empty store and map for the keys.\n        The LRUCache is set the size n.\n        \"\"\"",
        "detail": "mid-range.least_recently_used",
        "documentation": {}
    },
    {
        "label": "anagrams",
        "kind": 2,
        "importPath": "mid-range.lecture-scratch-pad",
        "description": "mid-range.lecture-scratch-pad",
        "peekOfCode": "def anagrams(w):\n    sig = \"\".join(sorted(w.lower()))\n    if sig not in anagram:\n        return []\n    else:\n        return anagram[sig]\nprint(anagrams(\"iceman\"))",
        "detail": "mid-range.lecture-scratch-pad",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "mid-range.lecture-scratch-pad",
        "description": "mid-range.lecture-scratch-pad",
        "peekOfCode": "f = open(\"words.txt\", \"r\")\nwords = f.read().split(\"\\n\")\nwords = [w.lower() for w in words]\nf.close()\nanagram = {}\n# GENERATE ALL SETS OF ANAGRAMS\nfor word in words:\n    # convert list to string\n    signature = \"\".join(sorted(word.lower()))\n    if signature not in anagram:",
        "detail": "mid-range.lecture-scratch-pad",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "mid-range.lecture-scratch-pad",
        "description": "mid-range.lecture-scratch-pad",
        "peekOfCode": "words = f.read().split(\"\\n\")\nwords = [w.lower() for w in words]\nf.close()\nanagram = {}\n# GENERATE ALL SETS OF ANAGRAMS\nfor word in words:\n    # convert list to string\n    signature = \"\".join(sorted(word.lower()))\n    if signature not in anagram:\n        anagram[signature] = []",
        "detail": "mid-range.lecture-scratch-pad",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "mid-range.lecture-scratch-pad",
        "description": "mid-range.lecture-scratch-pad",
        "peekOfCode": "words = [w.lower() for w in words]\nf.close()\nanagram = {}\n# GENERATE ALL SETS OF ANAGRAMS\nfor word in words:\n    # convert list to string\n    signature = \"\".join(sorted(word.lower()))\n    if signature not in anagram:\n        anagram[signature] = []\n    anagram[signature].append(word)",
        "detail": "mid-range.lecture-scratch-pad",
        "documentation": {}
    },
    {
        "label": "anagram",
        "kind": 5,
        "importPath": "mid-range.lecture-scratch-pad",
        "description": "mid-range.lecture-scratch-pad",
        "peekOfCode": "anagram = {}\n# GENERATE ALL SETS OF ANAGRAMS\nfor word in words:\n    # convert list to string\n    signature = \"\".join(sorted(word.lower()))\n    if signature not in anagram:\n        anagram[signature] = []\n    anagram[signature].append(word)\ndef anagrams(w):\n    sig = \"\".join(sorted(w.lower()))",
        "detail": "mid-range.lecture-scratch-pad",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.leet70",
        "description": "mid-range.leet70",
        "peekOfCode": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        dp = [0] * n\n        dp[0], dp[1] = 1, 2",
        "detail": "mid-range.leet70",
        "documentation": {}
    },
    {
        "label": "addTwoNumbers",
        "kind": 2,
        "importPath": "mid-range.leet_1",
        "description": "mid-range.leet_1",
        "peekOfCode": "def addTwoNumbers(l1, l2):\n    l1.reverse()\n    l2.reverse()\n    con_1 = \"\"\n    con_2 = \"\"\n    for i in l1:\n        con_1 += str(i)\n    for i in l2:\n        con_2 += str(i)\n    result = int(con_1) + int(con_2)",
        "detail": "mid-range.leet_1",
        "documentation": {}
    },
    {
        "label": "l1",
        "kind": 5,
        "importPath": "mid-range.leet_1",
        "description": "mid-range.leet_1",
        "peekOfCode": "l1 = [2, 4, 3]\nl2 = [5, 6, 4]\nresult = addTwoNumbers(l1, l2)\nprint(result)",
        "detail": "mid-range.leet_1",
        "documentation": {}
    },
    {
        "label": "l2",
        "kind": 5,
        "importPath": "mid-range.leet_1",
        "description": "mid-range.leet_1",
        "peekOfCode": "l2 = [5, 6, 4]\nresult = addTwoNumbers(l1, l2)\nprint(result)",
        "detail": "mid-range.leet_1",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "mid-range.leet_1",
        "description": "mid-range.leet_1",
        "peekOfCode": "result = addTwoNumbers(l1, l2)\nprint(result)",
        "detail": "mid-range.leet_1",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.leet_code_108",
        "description": "mid-range.leet_code_108",
        "peekOfCode": "class TreeNode(object):\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef sortedArrayToBST(nums):\n    \"\"\"\n  :type nums: List[int]\n  :rtype: TreeNode\n  \"\"\"",
        "detail": "mid-range.leet_code_108",
        "documentation": {}
    },
    {
        "label": "sortedArrayToBST",
        "kind": 2,
        "importPath": "mid-range.leet_code_108",
        "description": "mid-range.leet_code_108",
        "peekOfCode": "def sortedArrayToBST(nums):\n    \"\"\"\n  :type nums: List[int]\n  :rtype: TreeNode\n  \"\"\"\nbst_root = sortedArrayToBST([-10, -3, 0, 5, 9])\nprint(bst_root.val)  # 0\n# print(bst_root.left.val)          # -3\n# print(bst_root.left.left.val)     # -10\n# print(bst_root.right.val)         # 9",
        "detail": "mid-range.leet_code_108",
        "documentation": {}
    },
    {
        "label": "bst_root",
        "kind": 5,
        "importPath": "mid-range.leet_code_108",
        "description": "mid-range.leet_code_108",
        "peekOfCode": "bst_root = sortedArrayToBST([-10, -3, 0, 5, 9])\nprint(bst_root.val)  # 0\n# print(bst_root.left.val)          # -3\n# print(bst_root.left.left.val)     # -10\n# print(bst_root.right.val)         # 9\n# print(bst_root.right.left.val)    # 5\n# Returns the root of the following binary search tree:\n#       0\n#      / \\\n#    -3   9",
        "detail": "mid-range.leet_code_108",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "mid-range.leet_code_110",
        "description": "mid-range.leet_code_110",
        "peekOfCode": "class TreeNode(object):\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef isBalanced(root):\n    \"\"\"\n  :type root: TreeNode\n  :rtype: bool\n  \"\"\"",
        "detail": "mid-range.leet_code_110",
        "documentation": {}
    },
    {
        "label": "isBalanced",
        "kind": 2,
        "importPath": "mid-range.leet_code_110",
        "description": "mid-range.leet_code_110",
        "peekOfCode": "def isBalanced(root):\n    \"\"\"\n  :type root: TreeNode\n  :rtype: bool\n  \"\"\"\n# Tree: [3,9,20,null,null,15,7]\n#   3\n#  / \\\n# 9  20\n#   /  \\",
        "detail": "mid-range.leet_code_110",
        "documentation": {}
    },
    {
        "label": "node_3",
        "kind": 5,
        "importPath": "mid-range.leet_code_110",
        "description": "mid-range.leet_code_110",
        "peekOfCode": "node_3 = TreeNode(3)\nnode_20 = TreeNode(20)\nnode_3.left = TreeNode(9)\nnode_3.right = node_20\nnode_20.left = TreeNode(15)\nnode_20.right = TreeNode(7)\nprint(isBalanced(node_3))  # True\n# Tree: [1,2,2,3,3,null,null,4,4]\n#        1\n#       / \\",
        "detail": "mid-range.leet_code_110",
        "documentation": {}
    },
    {
        "label": "node_20",
        "kind": 5,
        "importPath": "mid-range.leet_code_110",
        "description": "mid-range.leet_code_110",
        "peekOfCode": "node_20 = TreeNode(20)\nnode_3.left = TreeNode(9)\nnode_3.right = node_20\nnode_20.left = TreeNode(15)\nnode_20.right = TreeNode(7)\nprint(isBalanced(node_3))  # True\n# Tree: [1,2,2,3,3,null,null,4,4]\n#        1\n#       / \\\n#      2   2",
        "detail": "mid-range.leet_code_110",
        "documentation": {}
    },
    {
        "label": "node_3.left",
        "kind": 5,
        "importPath": "mid-range.leet_code_110",
        "description": "mid-range.leet_code_110",
        "peekOfCode": "node_3.left = TreeNode(9)\nnode_3.right = node_20\nnode_20.left = TreeNode(15)\nnode_20.right = TreeNode(7)\nprint(isBalanced(node_3))  # True\n# Tree: [1,2,2,3,3,null,null,4,4]\n#        1\n#       / \\\n#      2   2\n#     / \\",
        "detail": "mid-range.leet_code_110",
        "documentation": {}
    },
    {
        "label": "node_3.right",
        "kind": 5,
        "importPath": "mid-range.leet_code_110",
        "description": "mid-range.leet_code_110",
        "peekOfCode": "node_3.right = node_20\nnode_20.left = TreeNode(15)\nnode_20.right = TreeNode(7)\nprint(isBalanced(node_3))  # True\n# Tree: [1,2,2,3,3,null,null,4,4]\n#        1\n#       / \\\n#      2   2\n#     / \\\n#    3   3",
        "detail": "mid-range.leet_code_110",
        "documentation": {}
    },
    {
        "label": "node_20.left",
        "kind": 5,
        "importPath": "mid-range.leet_code_110",
        "description": "mid-range.leet_code_110",
        "peekOfCode": "node_20.left = TreeNode(15)\nnode_20.right = TreeNode(7)\nprint(isBalanced(node_3))  # True\n# Tree: [1,2,2,3,3,null,null,4,4]\n#        1\n#       / \\\n#      2   2\n#     / \\\n#    3   3\n#   / \\",
        "detail": "mid-range.leet_code_110",
        "documentation": {}
    },
    {
        "label": "node_20.right",
        "kind": 5,
        "importPath": "mid-range.leet_code_110",
        "description": "mid-range.leet_code_110",
        "peekOfCode": "node_20.right = TreeNode(7)\nprint(isBalanced(node_3))  # True\n# Tree: [1,2,2,3,3,null,null,4,4]\n#        1\n#       / \\\n#      2   2\n#     / \\\n#    3   3\n#   / \\\n#  4   4",
        "detail": "mid-range.leet_code_110",
        "documentation": {}
    },
    {
        "label": "node_1",
        "kind": 5,
        "importPath": "mid-range.leet_code_110",
        "description": "mid-range.leet_code_110",
        "peekOfCode": "node_1 = TreeNode(1)\nnode_2a = TreeNode(2)\nnode_2b = TreeNode(2)\nnode_1.left = node_2a\nnode_1.right = node_2b\nnode_3a = TreeNode(3)\nnode_3b = TreeNode(3)\nnode_2a.left = node_3a\nnode_2a.right = node_3b\nnode_4a = TreeNode(4)",
        "detail": "mid-range.leet_code_110",
        "documentation": {}
    },
    {
        "label": "node_2a",
        "kind": 5,
        "importPath": "mid-range.leet_code_110",
        "description": "mid-range.leet_code_110",
        "peekOfCode": "node_2a = TreeNode(2)\nnode_2b = TreeNode(2)\nnode_1.left = node_2a\nnode_1.right = node_2b\nnode_3a = TreeNode(3)\nnode_3b = TreeNode(3)\nnode_2a.left = node_3a\nnode_2a.right = node_3b\nnode_4a = TreeNode(4)\nnode_4b = TreeNode(4)",
        "detail": "mid-range.leet_code_110",
        "documentation": {}
    },
    {
        "label": "node_2b",
        "kind": 5,
        "importPath": "mid-range.leet_code_110",
        "description": "mid-range.leet_code_110",
        "peekOfCode": "node_2b = TreeNode(2)\nnode_1.left = node_2a\nnode_1.right = node_2b\nnode_3a = TreeNode(3)\nnode_3b = TreeNode(3)\nnode_2a.left = node_3a\nnode_2a.right = node_3b\nnode_4a = TreeNode(4)\nnode_4b = TreeNode(4)\nnode_3a.left = node_4a",
        "detail": "mid-range.leet_code_110",
        "documentation": {}
    },
    {
        "label": "node_1.left",
        "kind": 5,
        "importPath": "mid-range.leet_code_110",
        "description": "mid-range.leet_code_110",
        "peekOfCode": "node_1.left = node_2a\nnode_1.right = node_2b\nnode_3a = TreeNode(3)\nnode_3b = TreeNode(3)\nnode_2a.left = node_3a\nnode_2a.right = node_3b\nnode_4a = TreeNode(4)\nnode_4b = TreeNode(4)\nnode_3a.left = node_4a\nnode_3a.right = node_4b",
        "detail": "mid-range.leet_code_110",
        "documentation": {}
    },
    {
        "label": "node_1.right",
        "kind": 5,
        "importPath": "mid-range.leet_code_110",
        "description": "mid-range.leet_code_110",
        "peekOfCode": "node_1.right = node_2b\nnode_3a = TreeNode(3)\nnode_3b = TreeNode(3)\nnode_2a.left = node_3a\nnode_2a.right = node_3b\nnode_4a = TreeNode(4)\nnode_4b = TreeNode(4)\nnode_3a.left = node_4a\nnode_3a.right = node_4b\nprint(isBalanced(node_1))  # False",
        "detail": "mid-range.leet_code_110",
        "documentation": {}
    },
    {
        "label": "node_3a",
        "kind": 5,
        "importPath": "mid-range.leet_code_110",
        "description": "mid-range.leet_code_110",
        "peekOfCode": "node_3a = TreeNode(3)\nnode_3b = TreeNode(3)\nnode_2a.left = node_3a\nnode_2a.right = node_3b\nnode_4a = TreeNode(4)\nnode_4b = TreeNode(4)\nnode_3a.left = node_4a\nnode_3a.right = node_4b\nprint(isBalanced(node_1))  # False",
        "detail": "mid-range.leet_code_110",
        "documentation": {}
    },
    {
        "label": "node_3b",
        "kind": 5,
        "importPath": "mid-range.leet_code_110",
        "description": "mid-range.leet_code_110",
        "peekOfCode": "node_3b = TreeNode(3)\nnode_2a.left = node_3a\nnode_2a.right = node_3b\nnode_4a = TreeNode(4)\nnode_4b = TreeNode(4)\nnode_3a.left = node_4a\nnode_3a.right = node_4b\nprint(isBalanced(node_1))  # False",
        "detail": "mid-range.leet_code_110",
        "documentation": {}
    },
    {
        "label": "node_2a.left",
        "kind": 5,
        "importPath": "mid-range.leet_code_110",
        "description": "mid-range.leet_code_110",
        "peekOfCode": "node_2a.left = node_3a\nnode_2a.right = node_3b\nnode_4a = TreeNode(4)\nnode_4b = TreeNode(4)\nnode_3a.left = node_4a\nnode_3a.right = node_4b\nprint(isBalanced(node_1))  # False",
        "detail": "mid-range.leet_code_110",
        "documentation": {}
    },
    {
        "label": "node_2a.right",
        "kind": 5,
        "importPath": "mid-range.leet_code_110",
        "description": "mid-range.leet_code_110",
        "peekOfCode": "node_2a.right = node_3b\nnode_4a = TreeNode(4)\nnode_4b = TreeNode(4)\nnode_3a.left = node_4a\nnode_3a.right = node_4b\nprint(isBalanced(node_1))  # False",
        "detail": "mid-range.leet_code_110",
        "documentation": {}
    },
    {
        "label": "node_4a",
        "kind": 5,
        "importPath": "mid-range.leet_code_110",
        "description": "mid-range.leet_code_110",
        "peekOfCode": "node_4a = TreeNode(4)\nnode_4b = TreeNode(4)\nnode_3a.left = node_4a\nnode_3a.right = node_4b\nprint(isBalanced(node_1))  # False",
        "detail": "mid-range.leet_code_110",
        "documentation": {}
    },
    {
        "label": "node_4b",
        "kind": 5,
        "importPath": "mid-range.leet_code_110",
        "description": "mid-range.leet_code_110",
        "peekOfCode": "node_4b = TreeNode(4)\nnode_3a.left = node_4a\nnode_3a.right = node_4b\nprint(isBalanced(node_1))  # False",
        "detail": "mid-range.leet_code_110",
        "documentation": {}
    },
    {
        "label": "node_3a.left",
        "kind": 5,
        "importPath": "mid-range.leet_code_110",
        "description": "mid-range.leet_code_110",
        "peekOfCode": "node_3a.left = node_4a\nnode_3a.right = node_4b\nprint(isBalanced(node_1))  # False",
        "detail": "mid-range.leet_code_110",
        "documentation": {}
    },
    {
        "label": "node_3a.right",
        "kind": 5,
        "importPath": "mid-range.leet_code_110",
        "description": "mid-range.leet_code_110",
        "peekOfCode": "node_3a.right = node_4b\nprint(isBalanced(node_1))  # False",
        "detail": "mid-range.leet_code_110",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.Lemonade-Change",
        "description": "mid-range.Lemonade-Change",
        "peekOfCode": "class Solution:\n    def lemonadeChange(self, bills: List[int]) -> bool:\n        denom = {5: 0, 10: 0, 20: 0}\n        for i in range(len(bills)):\n            denom[bills[i]] += 1\n            if bills[i] > 5:\n                bal = bills[i] - 5\n                if bal % 5 == 0 and bal % 10 != 0:\n                    if denom[5] > 0:\n                        denom[5] -= 1",
        "detail": "mid-range.Lemonade-Change",
        "documentation": {}
    },
    {
        "label": "length",
        "kind": 2,
        "importPath": "mid-range.length",
        "description": "mid-range.length",
        "peekOfCode": "def length(ar, is_ap=False, is_gp=False, big_data=False, data_outline=[]):\n    # Length of data if it is an arithmetic progression\n    # using derived formula, n = (tn - a) / d + 1\n    if is_ap:\n        return ((ar[-1] - ar[0]) / (ar[1] - ar[0])) + 1\n    # Length of data if it is an geometric progression\n    # using derived formula, n = ((log base 10 an / a1) / log 10 r) + 1\n    elif is_gp:\n        # length is never a float\n        return int(math.log10((ar[-1] / ar[0])) / math.log10((ar[1] / ar[0])) + 1)",
        "detail": "mid-range.length",
        "documentation": {}
    },
    {
        "label": "compareMore",
        "kind": 2,
        "importPath": "mid-range.lessThanMoreThan",
        "description": "mid-range.lessThanMoreThan",
        "peekOfCode": "def compareMore(a):\n    for x in nums:\n        if x > a:\n            c = finalNums.append(x)\ndef compareLess(d):\n    for x in nums:\n        if x < d:\n            c = moreFinalNums.append(x)\nget = int(input(\"To Compare More Than : \"))\ngetAgain = int(input(\"To Compare Less Than : \"))",
        "detail": "mid-range.lessThanMoreThan",
        "documentation": {}
    },
    {
        "label": "compareLess",
        "kind": 2,
        "importPath": "mid-range.lessThanMoreThan",
        "description": "mid-range.lessThanMoreThan",
        "peekOfCode": "def compareLess(d):\n    for x in nums:\n        if x < d:\n            c = moreFinalNums.append(x)\nget = int(input(\"To Compare More Than : \"))\ngetAgain = int(input(\"To Compare Less Than : \"))\nprint(\"\\nMore Than Values : \")\nprint(compareMore(get))\nprint(finalNums, \"\\n\")\nprint(\"\\nLess Than Values : \")",
        "detail": "mid-range.lessThanMoreThan",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "mid-range.lessThanMoreThan",
        "description": "mid-range.lessThanMoreThan",
        "peekOfCode": "nums = [12, 34, 65, 43, 21, 97, 13, 57, 10, 32]\nfinalNums = []\nmoreFinalNums = []\ndef compareMore(a):\n    for x in nums:\n        if x > a:\n            c = finalNums.append(x)\ndef compareLess(d):\n    for x in nums:\n        if x < d:",
        "detail": "mid-range.lessThanMoreThan",
        "documentation": {}
    },
    {
        "label": "finalNums",
        "kind": 5,
        "importPath": "mid-range.lessThanMoreThan",
        "description": "mid-range.lessThanMoreThan",
        "peekOfCode": "finalNums = []\nmoreFinalNums = []\ndef compareMore(a):\n    for x in nums:\n        if x > a:\n            c = finalNums.append(x)\ndef compareLess(d):\n    for x in nums:\n        if x < d:\n            c = moreFinalNums.append(x)",
        "detail": "mid-range.lessThanMoreThan",
        "documentation": {}
    },
    {
        "label": "moreFinalNums",
        "kind": 5,
        "importPath": "mid-range.lessThanMoreThan",
        "description": "mid-range.lessThanMoreThan",
        "peekOfCode": "moreFinalNums = []\ndef compareMore(a):\n    for x in nums:\n        if x > a:\n            c = finalNums.append(x)\ndef compareLess(d):\n    for x in nums:\n        if x < d:\n            c = moreFinalNums.append(x)\nget = int(input(\"To Compare More Than : \"))",
        "detail": "mid-range.lessThanMoreThan",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 5,
        "importPath": "mid-range.lessThanMoreThan",
        "description": "mid-range.lessThanMoreThan",
        "peekOfCode": "get = int(input(\"To Compare More Than : \"))\ngetAgain = int(input(\"To Compare Less Than : \"))\nprint(\"\\nMore Than Values : \")\nprint(compareMore(get))\nprint(finalNums, \"\\n\")\nprint(\"\\nLess Than Values : \")\nprint(compareLess(getAgain))\nprint(moreFinalNums, \"\\n\")",
        "detail": "mid-range.lessThanMoreThan",
        "documentation": {}
    },
    {
        "label": "getAgain",
        "kind": 5,
        "importPath": "mid-range.lessThanMoreThan",
        "description": "mid-range.lessThanMoreThan",
        "peekOfCode": "getAgain = int(input(\"To Compare Less Than : \"))\nprint(\"\\nMore Than Values : \")\nprint(compareMore(get))\nprint(finalNums, \"\\n\")\nprint(\"\\nLess Than Values : \")\nprint(compareLess(getAgain))\nprint(moreFinalNums, \"\\n\")",
        "detail": "mid-range.lessThanMoreThan",
        "documentation": {}
    },
    {
        "label": "letter_combinations",
        "kind": 2,
        "importPath": "mid-range.letter_combinations",
        "description": "mid-range.letter_combinations",
        "peekOfCode": "def letter_combinations(digits):\n    if len(digits) == 0:\n        return []\n    mappings = {\n        \"2\": [\"a\", \"b\", \"c\"],\n        \"3\": [\"d\", \"e\", \"f\"],\n        \"4\": [\"g\", \"h\", \"i\"],\n        \"5\": [\"j\", \"k\", \"l\"],\n        \"6\": [\"m\", \"n\", \"o\"],\n        \"7\": [\"p\", \"q\", \"r\", \"s\"],",
        "detail": "mid-range.letter_combinations",
        "documentation": {}
    },
    {
        "label": "letter_count",
        "kind": 2,
        "importPath": "mid-range.letter_count",
        "description": "mid-range.letter_count",
        "peekOfCode": "def letter_count(s):\n    pass\ndef print_sorted_letter_count(s):\n    pass\nprint_sorted_letter_count(\"aaabbc\")\n# print_sorted_letter_count(\"Hello!\")\n# print_sorted_letter_count(\"The quick brown fox jumps over the lazy dogs\")",
        "detail": "mid-range.letter_count",
        "documentation": {}
    },
    {
        "label": "print_sorted_letter_count",
        "kind": 2,
        "importPath": "mid-range.letter_count",
        "description": "mid-range.letter_count",
        "peekOfCode": "def print_sorted_letter_count(s):\n    pass\nprint_sorted_letter_count(\"aaabbc\")\n# print_sorted_letter_count(\"Hello!\")\n# print_sorted_letter_count(\"The quick brown fox jumps over the lazy dogs\")",
        "detail": "mid-range.letter_count",
        "documentation": {}
    },
    {
        "label": "levenshtein_distance",
        "kind": 2,
        "importPath": "mid-range.levenshtein_distance",
        "description": "mid-range.levenshtein_distance",
        "peekOfCode": "def levenshtein_distance(first_word: str, second_word: str) -> int:\n    \"\"\"Implementation of the levenshtein distance in Python.\n    :param first_word: the first word to measure the difference.\n    :param second_word: the second word to measure the difference.\n    :return: the levenshtein distance between the two words.\n    Examples:\n    >>> levenshtein_distance(\"planet\", \"planetary\")\n    3\n    >>> levenshtein_distance(\"\", \"test\")\n    4",
        "detail": "mid-range.levenshtein_distance",
        "documentation": {}
    },
    {
        "label": "DistutilsRefactoringTool",
        "kind": 6,
        "importPath": "mid-range.lib2to3_ex",
        "description": "mid-range.lib2to3_ex",
        "peekOfCode": "class DistutilsRefactoringTool(RefactoringTool):\n    def log_error(self, msg, *args, **kw):\n        log.error(msg, *args)\n    def log_message(self, msg, *args):\n        log.info(msg, *args)\n    def log_debug(self, msg, *args):\n        log.debug(msg, *args)\nclass Mixin2to3(_Mixin2to3):\n    def run_2to3(self, files, doctests=False):\n        # See of the distribution option has been set, otherwise check the",
        "detail": "mid-range.lib2to3_ex",
        "documentation": {}
    },
    {
        "label": "Mixin2to3",
        "kind": 6,
        "importPath": "mid-range.lib2to3_ex",
        "description": "mid-range.lib2to3_ex",
        "peekOfCode": "class Mixin2to3(_Mixin2to3):\n    def run_2to3(self, files, doctests=False):\n        # See of the distribution option has been set, otherwise check the\n        # setuptools default.\n        if self.distribution.use_2to3 is not True:\n            return\n        if not files:\n            return\n        warnings.warn(\n            \"2to3 support is deprecated. If the project still \"",
        "detail": "mid-range.lib2to3_ex",
        "documentation": {}
    },
    {
        "label": "dragonFreak",
        "kind": 2,
        "importPath": "mid-range.Libs",
        "description": "mid-range.Libs",
        "peekOfCode": "def dragonFreak():\n    colorDrag = raw_input(\"Color : \")\n    superLatDrag = raw_input(\"Superlative (ending in est) : \")\n    adj1Drag = raw_input(\"Adjective : \")\n    bodyDragPlu = raw_input(\"Body Part Plural : \")\n    bodyDrag = raw_input(\"Body Part : \")\n    nounDrag = raw_input(\"Noun : \")\n    animalDrag = raw_input(\"Animal(Plural) : \")\n    adj2Drag = raw_input(\"Adjective : \")\n    adj3Drag = raw_input(\"Adjective : \")",
        "detail": "mid-range.Libs",
        "documentation": {}
    },
    {
        "label": "excuses",
        "kind": 2,
        "importPath": "mid-range.Libs",
        "description": "mid-range.Libs",
        "peekOfCode": "def excuses():\n    place = raw_input(\"Place : \")\n    adjExcuse = raw_input(\"Adjective : \")\n    bodyPart = raw_input(\"Bodypart : \")\n    fMadLib = \"\"\"\n    I cannot come to %s ,\n    because there is %s %s flu\n    \"\"\" % (\n        place,\n        adjExcuse,",
        "detail": "mid-range.Libs",
        "documentation": {}
    },
    {
        "label": "libs",
        "kind": 5,
        "importPath": "mid-range.Libs",
        "description": "mid-range.Libs",
        "peekOfCode": "libs = [\"Dragon Freak\", \"Excuses\"]\n# precode\ndef dragonFreak():\n    colorDrag = raw_input(\"Color : \")\n    superLatDrag = raw_input(\"Superlative (ending in est) : \")\n    adj1Drag = raw_input(\"Adjective : \")\n    bodyDragPlu = raw_input(\"Body Part Plural : \")\n    bodyDrag = raw_input(\"Body Part : \")\n    nounDrag = raw_input(\"Noun : \")\n    animalDrag = raw_input(\"Animal(Plural) : \")",
        "detail": "mid-range.Libs",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.License_Key_Formatting",
        "description": "mid-range.License_Key_Formatting",
        "peekOfCode": "class Solution:\n    def licence_key_formatting(self, S, K):\n        strs = S.replace(\"-\", \"\")\n        first = len(strs) % K\n        first_part = S[:first]\n        licence_key = \"\"\n        for i in range(first, len(strs), K):\n            licence_key = licence_key + strs[i : i + K] + \"-\"\n        if len(first_part) > 0:\n            licence_key = first_part + \"-\" + licence_key[:-1]",
        "detail": "mid-range.License_Key_Formatting",
        "documentation": {}
    },
    {
        "label": "knapsackLight",
        "kind": 2,
        "importPath": "mid-range.Light",
        "description": "mid-range.Light",
        "peekOfCode": "def knapsackLight(value1, weight1, value2, weight2, maxW):\n    if weight1 > maxW and weight2 > maxW and weight1 + weight2 > maxW:\n        return 0\n    if weight1 + weight2 <= maxW:\n        return value1 + value2\n    if value1 < value2:\n        if weight2 > maxW:\n            return value1\n        else:\n            return value2",
        "detail": "mid-range.Light",
        "documentation": {}
    },
    {
        "label": "LightSource",
        "kind": 6,
        "importPath": "mid-range.lightsource",
        "description": "mid-range.lightsource",
        "peekOfCode": "class LightSource(Item):\n    def __init__(self, name):\n        Item.__init__(self, name)\n    def on_take(self):\n        pass\n    def on_drop(self):\n        print(\n            \"\\nEnable night vision. no wait we don't have night vision! Lets not drop that light!\"\n        )",
        "detail": "mid-range.lightsource",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "mid-range.linear",
        "description": "mid-range.linear",
        "peekOfCode": "x = [2, 4, 6, 8, 10, 12]\ny = [2, 4, 6, 8, 10, 12]\nplt.plot(x, y, \"b\")\nplt.xlabel(\"Inputs\")\nplt.ylabel(\"Steps\")\nplt.title(\"Linear Complexity\")\nplt.show()",
        "detail": "mid-range.linear",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "mid-range.linear",
        "description": "mid-range.linear",
        "peekOfCode": "y = [2, 4, 6, 8, 10, 12]\nplt.plot(x, y, \"b\")\nplt.xlabel(\"Inputs\")\nplt.ylabel(\"Steps\")\nplt.title(\"Linear Complexity\")\nplt.show()",
        "detail": "mid-range.linear",
        "documentation": {}
    },
    {
        "label": "LinearCongruentialGenerator",
        "kind": 6,
        "importPath": "mid-range.LinearCongruentialGenerator",
        "description": "mid-range.LinearCongruentialGenerator",
        "peekOfCode": "class LinearCongruentialGenerator(object):\n    \"\"\"\n    A pseudorandom number generator.\n    \"\"\"\n    def __init__(self, multiplier, increment, modulo, seed=int(time())):\n        \"\"\"\n        These parameters are saved and used when nextNumber() is called.\n        modulo is the largest number that can be generated (exclusive). The most\n        efficent values are powers of 2. 2^32 is a common value.\n        \"\"\"",
        "detail": "mid-range.LinearCongruentialGenerator",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "mid-range.LinearCongruentialGenerator",
        "description": "mid-range.LinearCongruentialGenerator",
        "peekOfCode": "__author__ = \"Tobias Carryer\"\nfrom time import time\nclass LinearCongruentialGenerator(object):\n    \"\"\"\n    A pseudorandom number generator.\n    \"\"\"\n    def __init__(self, multiplier, increment, modulo, seed=int(time())):\n        \"\"\"\n        These parameters are saved and used when nextNumber() is called.\n        modulo is the largest number that can be generated (exclusive). The most",
        "detail": "mid-range.LinearCongruentialGenerator",
        "documentation": {}
    },
    {
        "label": "raw_data",
        "kind": 5,
        "importPath": "mid-range.linearRegression",
        "description": "mid-range.linearRegression",
        "peekOfCode": "raw_data = pd.read_csv(\"linear.csv\")\n# Removes rows with NaN in them\nfiltered_data = raw_data[~np.isnan(raw_data[\"y\"])] \nx_y = np.array(filtered_data)\nx, y = x_y[:,0], x_y[:,1]\n# Reshaping\nx, y = x.reshape(-1,1), y.reshape(-1, 1)\n# Linear Regression Object \nlin_regression = LinearRegression()\n# Fitting linear model to the data",
        "detail": "mid-range.linearRegression",
        "documentation": {}
    },
    {
        "label": "filtered_data",
        "kind": 5,
        "importPath": "mid-range.linearRegression",
        "description": "mid-range.linearRegression",
        "peekOfCode": "filtered_data = raw_data[~np.isnan(raw_data[\"y\"])] \nx_y = np.array(filtered_data)\nx, y = x_y[:,0], x_y[:,1]\n# Reshaping\nx, y = x.reshape(-1,1), y.reshape(-1, 1)\n# Linear Regression Object \nlin_regression = LinearRegression()\n# Fitting linear model to the data\nlin_regression.fit(x,y)\n# Get slope of fitted line",
        "detail": "mid-range.linearRegression",
        "documentation": {}
    },
    {
        "label": "x_y",
        "kind": 5,
        "importPath": "mid-range.linearRegression",
        "description": "mid-range.linearRegression",
        "peekOfCode": "x_y = np.array(filtered_data)\nx, y = x_y[:,0], x_y[:,1]\n# Reshaping\nx, y = x.reshape(-1,1), y.reshape(-1, 1)\n# Linear Regression Object \nlin_regression = LinearRegression()\n# Fitting linear model to the data\nlin_regression.fit(x,y)\n# Get slope of fitted line\nm = lin_regression.coef_",
        "detail": "mid-range.linearRegression",
        "documentation": {}
    },
    {
        "label": "lin_regression",
        "kind": 5,
        "importPath": "mid-range.linearRegression",
        "description": "mid-range.linearRegression",
        "peekOfCode": "lin_regression = LinearRegression()\n# Fitting linear model to the data\nlin_regression.fit(x,y)\n# Get slope of fitted line\nm = lin_regression.coef_\n# Get y-Intercept of the Line\nb = lin_regression.intercept_\n# Get Predictions for original x values\n# you can also get predictions for new data\npredictions = lin_regression.predict(x)",
        "detail": "mid-range.linearRegression",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "mid-range.linearRegression",
        "description": "mid-range.linearRegression",
        "peekOfCode": "m = lin_regression.coef_\n# Get y-Intercept of the Line\nb = lin_regression.intercept_\n# Get Predictions for original x values\n# you can also get predictions for new data\npredictions = lin_regression.predict(x)\n# following slope intercept form \nprint \"formula: y = {0}x + {1}\".format(m, b) \n# Plot the Original Model (Black) and Predictions (Blue)\nplt.scatter(x, y,  color='black')",
        "detail": "mid-range.linearRegression",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "mid-range.linearRegression",
        "description": "mid-range.linearRegression",
        "peekOfCode": "b = lin_regression.intercept_\n# Get Predictions for original x values\n# you can also get predictions for new data\npredictions = lin_regression.predict(x)\n# following slope intercept form \nprint \"formula: y = {0}x + {1}\".format(m, b) \n# Plot the Original Model (Black) and Predictions (Blue)\nplt.scatter(x, y,  color='black')\nplt.plot(x, predictions, color='blue',linewidth=3)\nplt.show()",
        "detail": "mid-range.linearRegression",
        "documentation": {}
    },
    {
        "label": "predictions",
        "kind": 5,
        "importPath": "mid-range.linearRegression",
        "description": "mid-range.linearRegression",
        "peekOfCode": "predictions = lin_regression.predict(x)\n# following slope intercept form \nprint \"formula: y = {0}x + {1}\".format(m, b) \n# Plot the Original Model (Black) and Predictions (Blue)\nplt.scatter(x, y,  color='black')\nplt.plot(x, predictions, color='blue',linewidth=3)\nplt.show()",
        "detail": "mid-range.linearRegression",
        "documentation": {}
    },
    {
        "label": "LinearCongruentialGenerator",
        "kind": 6,
        "importPath": "mid-range.linear_congruential_generator",
        "description": "mid-range.linear_congruential_generator",
        "peekOfCode": "class LinearCongruentialGenerator:\n    \"\"\"\n    A pseudorandom number generator.\n    \"\"\"\n    def __init__(self, multiplier, increment, modulo, seed=int(time())):\n        \"\"\"\n        These parameters are saved and used when nextNumber() is called.\n        modulo is the largest number that can be generated (exclusive). The most\n        efficient values are powers of 2. 2^32 is a common value.\n        \"\"\"",
        "detail": "mid-range.linear_congruential_generator",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "mid-range.linear_congruential_generator",
        "description": "mid-range.linear_congruential_generator",
        "peekOfCode": "__author__ = \"Tobias Carryer\"\nfrom time import time\nclass LinearCongruentialGenerator:\n    \"\"\"\n    A pseudorandom number generator.\n    \"\"\"\n    def __init__(self, multiplier, increment, modulo, seed=int(time())):\n        \"\"\"\n        These parameters are saved and used when nextNumber() is called.\n        modulo is the largest number that can be generated (exclusive). The most",
        "detail": "mid-range.linear_congruential_generator",
        "documentation": {}
    },
    {
        "label": "linear_search",
        "kind": 2,
        "importPath": "mid-range.linear_search",
        "description": "mid-range.linear_search",
        "peekOfCode": "def linear_search(array, query):\n    for i in range(len(array)):\n        if array[i] == query:\n            return i\n    return -1",
        "detail": "mid-range.linear_search",
        "documentation": {}
    },
    {
        "label": "make_tempfile",
        "kind": 2,
        "importPath": "mid-range.linecache_data",
        "description": "mid-range.linecache_data",
        "peekOfCode": "def make_tempfile():\n    fd, temp_file_name = tempfile.mkstemp()\n    os.close(fd)\n    with open(temp_file_name, \"wt\") as f:\n        f.write(lorem)\n    return temp_file_name\ndef cleanup(filename):\n    os.unlink(filename)",
        "detail": "mid-range.linecache_data",
        "documentation": {}
    },
    {
        "label": "cleanup",
        "kind": 2,
        "importPath": "mid-range.linecache_data",
        "description": "mid-range.linecache_data",
        "peekOfCode": "def cleanup(filename):\n    os.unlink(filename)",
        "detail": "mid-range.linecache_data",
        "documentation": {}
    },
    {
        "label": "lorem",
        "kind": 5,
        "importPath": "mid-range.linecache_data",
        "description": "mid-range.linecache_data",
        "peekOfCode": "lorem = \"\"\"Lorem ipsum dolor sit amet, consectetuer\nadipiscing elit.  Vivamus eget elit. In posuere mi non\nrisus. Mauris id quam posuere lectus sollicitudin\nvarius. Praesent at mi. Nunc eu velit. Sed augue massa,\nfermentum id, nonummy a, nonummy sit amet, ligula. Curabitur\neros pede, egestas at, ultricies ac, apellentesque eu,\ntellus.\nSed sed odio sed mi luctus mollis. Integer et nulla ac augue\nconvallis accumsan. Ut felis. Donec lectus sapien, elementum\nnec, condimentum ac, interdum non, tellus. Aenean viverra,",
        "detail": "mid-range.linecache_data",
        "documentation": {}
    },
    {
        "label": "filename",
        "kind": 5,
        "importPath": "mid-range.linecache_empty_line",
        "description": "mid-range.linecache_empty_line",
        "peekOfCode": "filename = make_tempfile()\n# Blank lines include the newline\nprint(\"BLANK : {!r}\".format(linecache.getline(filename, 8)))\ncleanup(filename)",
        "detail": "mid-range.linecache_empty_line",
        "documentation": {}
    },
    {
        "label": "lorem",
        "kind": 5,
        "importPath": "mid-range.linecache_example",
        "description": "mid-range.linecache_example",
        "peekOfCode": "lorem = \"\"\"Lorem ipsum dolor sit amet, consectetuer\nadipiscing elit.  Vivamus eget elit. In posuere mi non\nrisus. Mauris id quam posuere lectus sollicitudin\nvarius. Praesent at mi. Nunc eu velit. Sed augue massa,\nfermentum id, nonummy a, nonummy sit amet, ligula. Curabitur\neros pede, egestas at, ultricies ac, apellentesque eu,\ntellus.\nSed sed odio sed mi luctus mollis. Integer et nulla ac augue\nconvallis accumsan. Ut felis. Donec lectus sapien, elementum\nnec, condimentum ac, interdum non, tellus. Aenean viverra,",
        "detail": "mid-range.linecache_example",
        "documentation": {}
    },
    {
        "label": "not_there",
        "kind": 5,
        "importPath": "mid-range.linecache_example",
        "description": "mid-range.linecache_example",
        "peekOfCode": "not_there = linecache.getline(temp_file_name, 500)\nprint(\"\\nNOT THERE: {!r} includes {} characters\".format(not_there, len(not_there)))\n# Errors are even hidden if linecache cannot find the file\nno_such_file = linecache.getline(\"this_file_does_not_exist.txt\", 1)\nprint(\"\\nNO FILE: \", no_such_file)\n# Look for the linecache module, using\n# the built in sys.path search.\nmodule_line = linecache.getline(\"linecache.py\", 3)\nprint(\"\\nMODULE : \", module_line)\n# Clean up",
        "detail": "mid-range.linecache_example",
        "documentation": {}
    },
    {
        "label": "no_such_file",
        "kind": 5,
        "importPath": "mid-range.linecache_example",
        "description": "mid-range.linecache_example",
        "peekOfCode": "no_such_file = linecache.getline(\"this_file_does_not_exist.txt\", 1)\nprint(\"\\nNO FILE: \", no_such_file)\n# Look for the linecache module, using\n# the built in sys.path search.\nmodule_line = linecache.getline(\"linecache.py\", 3)\nprint(\"\\nMODULE : \", module_line)\n# Clean up\nos.unlink(temp_file_name)",
        "detail": "mid-range.linecache_example",
        "documentation": {}
    },
    {
        "label": "module_line",
        "kind": 5,
        "importPath": "mid-range.linecache_example",
        "description": "mid-range.linecache_example",
        "peekOfCode": "module_line = linecache.getline(\"linecache.py\", 3)\nprint(\"\\nMODULE : \", module_line)\n# Clean up\nos.unlink(temp_file_name)",
        "detail": "mid-range.linecache_example",
        "documentation": {}
    },
    {
        "label": "filename",
        "kind": 5,
        "importPath": "mid-range.linecache_getline",
        "description": "mid-range.linecache_getline",
        "peekOfCode": "filename = make_tempfile()\n# Pick out the same line from source and cache.\n# (Notice that linecache counts from 1)\nprint(\"SOURCE:\")\nprint(\"{!r}\".format(lorem.split(\"\\n\")[4]))\nprint()\nprint(\"CACHE:\")\nprint(\"{!r}\".format(linecache.getline(filename, 5)))\ncleanup(filename)",
        "detail": "mid-range.linecache_getline",
        "documentation": {}
    },
    {
        "label": "no_such_file",
        "kind": 5,
        "importPath": "mid-range.linecache_missing_file",
        "description": "mid-range.linecache_missing_file",
        "peekOfCode": "no_such_file = linecache.getline(\"this_file_does_not_exist.txt\", 1)\nprint(\"NO FILE: {!r}\".format(no_such_file))",
        "detail": "mid-range.linecache_missing_file",
        "documentation": {}
    },
    {
        "label": "filename",
        "kind": 5,
        "importPath": "mid-range.linecache_out_of_range",
        "description": "mid-range.linecache_out_of_range",
        "peekOfCode": "filename = make_tempfile()\n# The cache always returns a string, and uses\n# an empty string to indicate a line which does\n# not exist.\nnot_there = linecache.getline(filename, 500)\nprint(\"NOT THERE: {!r} includes {} characters\".format(not_there, len(not_there)))\ncleanup(filename)",
        "detail": "mid-range.linecache_out_of_range",
        "documentation": {}
    },
    {
        "label": "not_there",
        "kind": 5,
        "importPath": "mid-range.linecache_out_of_range",
        "description": "mid-range.linecache_out_of_range",
        "peekOfCode": "not_there = linecache.getline(filename, 500)\nprint(\"NOT THERE: {!r} includes {} characters\".format(not_there, len(not_there)))\ncleanup(filename)",
        "detail": "mid-range.linecache_out_of_range",
        "documentation": {}
    },
    {
        "label": "module_line",
        "kind": 5,
        "importPath": "mid-range.linecache_path_search",
        "description": "mid-range.linecache_path_search",
        "peekOfCode": "module_line = linecache.getline(\"linecache.py\", 3)\nprint(\"MODULE:\")\nprint(repr(module_line))\n# Look at the linecache module source directly.\nfile_src = linecache.__file__\nif file_src.endswith(\".pyc\"):\n    file_src = file_src[:-1]\nprint(\"\\nFILE:\")\nwith open(file_src, \"r\") as f:\n    file_line = f.readlines()[2]",
        "detail": "mid-range.linecache_path_search",
        "documentation": {}
    },
    {
        "label": "file_src",
        "kind": 5,
        "importPath": "mid-range.linecache_path_search",
        "description": "mid-range.linecache_path_search",
        "peekOfCode": "file_src = linecache.__file__\nif file_src.endswith(\".pyc\"):\n    file_src = file_src[:-1]\nprint(\"\\nFILE:\")\nwith open(file_src, \"r\") as f:\n    file_line = f.readlines()[2]\nprint(repr(file_line))",
        "detail": "mid-range.linecache_path_search",
        "documentation": {}
    },
    {
        "label": "lineEncoding",
        "kind": 2,
        "importPath": "mid-range.line_encoding",
        "description": "mid-range.line_encoding",
        "peekOfCode": "def lineEncoding(s):\n    encoding, character_count = \"\", 1\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            character_count += 1\n        else:\n            if character_count > 1:\n                encoding += str(character_count) + s[i]  # Add substring to encoding\n                character_count = 1  # Reset character count\n            else:",
        "detail": "mid-range.line_encoding",
        "documentation": {}
    },
    {
        "label": "dos2unix",
        "kind": 2,
        "importPath": "mid-range.line_endings",
        "description": "mid-range.line_endings",
        "peekOfCode": "def dos2unix(file):\n    \"Replace CRLF with LF in argument files.  Print names of changed files.\"\n    if os.path.isdir(file):\n        print(file, \"Directory!\")\n        return\n    with open(file, \"rb\") as fp:\n        data = fp.read()\n    if \"\\0\" in data:\n        print(file, \"Binary!\")\n        return",
        "detail": "mid-range.line_endings",
        "documentation": {}
    },
    {
        "label": "dos2unix_one_dir",
        "kind": 2,
        "importPath": "mid-range.line_endings",
        "description": "mid-range.line_endings",
        "peekOfCode": "def dos2unix_one_dir(modified_files, dir_name, file_names):\n    for file in file_names:\n        full_path = os.path.join(dir_name, file)\n        file = dos2unix(full_path)\n        if file is not None:\n            modified_files.append(file)\ndef dos2unix_dir(dir_name):\n    modified_files = []\n    os.path.walk(dir_name, dos2unix_one_dir, modified_files)\n    return modified_files",
        "detail": "mid-range.line_endings",
        "documentation": {}
    },
    {
        "label": "dos2unix_dir",
        "kind": 2,
        "importPath": "mid-range.line_endings",
        "description": "mid-range.line_endings",
        "peekOfCode": "def dos2unix_dir(dir_name):\n    modified_files = []\n    os.path.walk(dir_name, dos2unix_one_dir, modified_files)\n    return modified_files\n# ----------------------------------\ndef unix2dos(file):\n    \"Replace LF with CRLF in argument files.  Print names of changed files.\"\n    if os.path.isdir(file):\n        print(file, \"Directory!\")\n        return",
        "detail": "mid-range.line_endings",
        "documentation": {}
    },
    {
        "label": "unix2dos",
        "kind": 2,
        "importPath": "mid-range.line_endings",
        "description": "mid-range.line_endings",
        "peekOfCode": "def unix2dos(file):\n    \"Replace LF with CRLF in argument files.  Print names of changed files.\"\n    if os.path.isdir(file):\n        print(file, \"Directory!\")\n        return\n    with open(file, \"rb\") as fp:\n        data = fp.read()\n    if \"\\0\" in data:\n        print(file, \"Binary!\")\n        return",
        "detail": "mid-range.line_endings",
        "documentation": {}
    },
    {
        "label": "unix2dos_one_dir",
        "kind": 2,
        "importPath": "mid-range.line_endings",
        "description": "mid-range.line_endings",
        "peekOfCode": "def unix2dos_one_dir(modified_files, dir_name, file_names):\n    for file in file_names:\n        full_path = os.path.join(dir_name, file)\n        unix2dos(full_path)\n        if file is not None:\n            modified_files.append(file)\ndef unix2dos_dir(dir_name):\n    modified_files = []\n    os.path.walk(dir_name, unix2dos_one_dir, modified_files)\n    return modified_files",
        "detail": "mid-range.line_endings",
        "documentation": {}
    },
    {
        "label": "unix2dos_dir",
        "kind": 2,
        "importPath": "mid-range.line_endings",
        "description": "mid-range.line_endings",
        "peekOfCode": "def unix2dos_dir(dir_name):\n    modified_files = []\n    os.path.walk(dir_name, unix2dos_one_dir, modified_files)\n    return modified_files\nif __name__ == \"__main__\":\n    dos2unix_dir(sys.argv[1])",
        "detail": "mid-range.line_endings",
        "documentation": {}
    },
    {
        "label": "line_length",
        "kind": 2,
        "importPath": "mid-range.line_length",
        "description": "mid-range.line_length",
        "peekOfCode": "def line_length(\n    fnc: Callable[[Union[int, float]], Union[int, float]],\n    x_start: Union[int, float],\n    x_end: Union[int, float],\n    steps: int = 100,\n) -> float:\n    \"\"\"\n    Approximates the arc length of a line segment by treating the curve as a\n    sequence of linear lines and summing their lengths\n    :param fnc: a function which defines a curve",
        "detail": "mid-range.line_length",
        "documentation": {}
    },
    {
        "label": "LineNumbers",
        "kind": 6,
        "importPath": "mid-range.line_numbers",
        "description": "mid-range.line_numbers",
        "peekOfCode": "class LineNumbers(object):\n    \"\"\"\n  Class to convert between character offsets in a text string, and pairs (line, column) of 1-based\n  line and 0-based column numbers, as used by tokens and AST nodes.\n  This class expects unicode for input and stores positions in unicode. But it supports\n  translating to and from utf8 offsets, which are used by ast parsing.\n  \"\"\"\n    def __init__(self, text):\n        # A list of character offsets of each line's first character.\n        self._line_offsets = [m.start(0) for m in _line_start_re.finditer(text)]",
        "detail": "mid-range.line_numbers",
        "documentation": {}
    },
    {
        "label": "_line_start_re",
        "kind": 5,
        "importPath": "mid-range.line_numbers",
        "description": "mid-range.line_numbers",
        "peekOfCode": "_line_start_re = re.compile(r\"^\", re.M)\nclass LineNumbers(object):\n    \"\"\"\n  Class to convert between character offsets in a text string, and pairs (line, column) of 1-based\n  line and 0-based column numbers, as used by tokens and AST nodes.\n  This class expects unicode for input and stores positions in unicode. But it supports\n  translating to and from utf8 offsets, which are used by ast parsing.\n  \"\"\"\n    def __init__(self, text):\n        # A list of character offsets of each line's first character.",
        "detail": "mid-range.line_numbers",
        "documentation": {}
    },
    {
        "label": "LinkcodeError",
        "kind": 6,
        "importPath": "mid-range.linkcode",
        "description": "mid-range.linkcode",
        "peekOfCode": "class LinkcodeError(SphinxError):\n    category = \"linkcode error\"\ndef doctree_read(app: Sphinx, doctree: Node) -> None:\n    env = app.builder.env\n    resolve_target = getattr(env.config, \"linkcode_resolve\", None)\n    if not callable(env.config.linkcode_resolve):\n        raise LinkcodeError(\"Function `linkcode_resolve` is not given in conf.py\")\n    domain_keys = {\n        \"py\": [\"module\", \"fullname\"],\n        \"c\": [\"names\"],",
        "detail": "mid-range.linkcode",
        "documentation": {}
    },
    {
        "label": "doctree_read",
        "kind": 2,
        "importPath": "mid-range.linkcode",
        "description": "mid-range.linkcode",
        "peekOfCode": "def doctree_read(app: Sphinx, doctree: Node) -> None:\n    env = app.builder.env\n    resolve_target = getattr(env.config, \"linkcode_resolve\", None)\n    if not callable(env.config.linkcode_resolve):\n        raise LinkcodeError(\"Function `linkcode_resolve` is not given in conf.py\")\n    domain_keys = {\n        \"py\": [\"module\", \"fullname\"],\n        \"c\": [\"names\"],\n        \"cpp\": [\"names\"],\n        \"js\": [\"object\", \"fullname\"],",
        "detail": "mid-range.linkcode",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "mid-range.linkcode",
        "description": "mid-range.linkcode",
        "peekOfCode": "def setup(app: Sphinx) -> Dict[str, Any]:\n    app.connect(\"doctree-read\", doctree_read)\n    app.add_config_value(\"linkcode_resolve\", None, \"\")\n    return {\"version\": sphinx.__display_version__, \"parallel_read_safe\": True}",
        "detail": "mid-range.linkcode",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "mid-range.linked-list",
        "description": "mid-range.linked-list",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, data=None, next=None):\n        self.data = data\n        self.next = next\nclass LinkedList:\n    def __init__(self, head=None):\n        self.head = head\n    def append(self, data):\n        new_node = LinkedListNode(data)\n        if self.head:",
        "detail": "mid-range.linked-list",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "kind": 6,
        "importPath": "mid-range.linked-list",
        "description": "mid-range.linked-list",
        "peekOfCode": "class LinkedList:\n    def __init__(self, head=None):\n        self.head = head\n    def append(self, data):\n        new_node = LinkedListNode(data)\n        if self.head:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_node",
        "detail": "mid-range.linked-list",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "mid-range.linked-list",
        "description": "mid-range.linked-list",
        "peekOfCode": "a = LinkedListNode(1)\nmy_ll = LinkedList(a)\nmy_ll.append(2)\nmy_ll.append(3)\nmy_ll.head.data\nmy_ll.head.next.data\nmy_ll.head.next.next.data\nprint(\"my_ll = LinkedList(a):\", my_ll)\nprint(\"my_ll.append(2):\", my_ll)\nprint(\"my_ll.append(3):\", my_ll)",
        "detail": "mid-range.linked-list",
        "documentation": {}
    },
    {
        "label": "my_ll",
        "kind": 5,
        "importPath": "mid-range.linked-list",
        "description": "mid-range.linked-list",
        "peekOfCode": "my_ll = LinkedList(a)\nmy_ll.append(2)\nmy_ll.append(3)\nmy_ll.head.data\nmy_ll.head.next.data\nmy_ll.head.next.next.data\nprint(\"my_ll = LinkedList(a):\", my_ll)\nprint(\"my_ll.append(2):\", my_ll)\nprint(\"my_ll.append(3):\", my_ll)\nprint(\"my_ll.head.data:\", my_ll.head.data)",
        "detail": "mid-range.linked-list",
        "documentation": {}
    },
    {
        "label": "print(\"my_ll",
        "kind": 5,
        "importPath": "mid-range.linked-list",
        "description": "mid-range.linked-list",
        "peekOfCode": "print(\"my_ll = LinkedList(a):\", my_ll)\nprint(\"my_ll.append(2):\", my_ll)\nprint(\"my_ll.append(3):\", my_ll)\nprint(\"my_ll.head.data:\", my_ll.head.data)\nprint(\"my_ll.head.next.data:\", my_ll.head.next.data)\nprint(\"my_ll.head.next.next.data:\", my_ll.head.next.next.data)",
        "detail": "mid-range.linked-list",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "mid-range.linked_list",
        "description": "mid-range.linked_list",
        "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    def PrintList(self):\n        if self.head is not None:\n            itr = self.head",
        "detail": "mid-range.linked_list",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "kind": 6,
        "importPath": "mid-range.linked_list",
        "description": "mid-range.linked_list",
        "peekOfCode": "class LinkedList:\n    def __init__(self):\n        self.head = None\n    def PrintList(self):\n        if self.head is not None:\n            itr = self.head\n            while itr:\n                print(itr.data, end=\"-->\")\n                itr = itr.next\nif __name__ == \"__main__\":",
        "detail": "mid-range.linked_list",
        "documentation": {}
    },
    {
        "label": "Element",
        "kind": 6,
        "importPath": "mid-range.linked_lists",
        "description": "mid-range.linked_lists",
        "peekOfCode": "class Element(object):\n    def __init__(self, value):\n        self.value = value\n        self.next = None\nclass LinkedList(object):\n    def __init__(self, head=None):\n        self.head = head\n    def append(self, new_element):\n        current = self.head\n        if self.head:",
        "detail": "mid-range.linked_lists",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "kind": 6,
        "importPath": "mid-range.linked_lists",
        "description": "mid-range.linked_lists",
        "peekOfCode": "class LinkedList(object):\n    def __init__(self, head=None):\n        self.head = head\n    def append(self, new_element):\n        current = self.head\n        if self.head:\n            while current.next:\n                current = current.next\n            current.next = new_element\n        else:",
        "detail": "mid-range.linked_lists",
        "documentation": {}
    },
    {
        "label": "e1",
        "kind": 5,
        "importPath": "mid-range.linked_lists",
        "description": "mid-range.linked_lists",
        "peekOfCode": "e1 = Element(1)\ne2 = Element(2)\ne3 = Element(3)\ne4 = Element(4)\n# Start setting up a LinkedList\nll = LinkedList(e1)\nll.append(e2)\nll.append(e3)\n# Test get_position\n# Should print 3",
        "detail": "mid-range.linked_lists",
        "documentation": {}
    },
    {
        "label": "e2",
        "kind": 5,
        "importPath": "mid-range.linked_lists",
        "description": "mid-range.linked_lists",
        "peekOfCode": "e2 = Element(2)\ne3 = Element(3)\ne4 = Element(4)\n# Start setting up a LinkedList\nll = LinkedList(e1)\nll.append(e2)\nll.append(e3)\n# Test get_position\n# Should print 3\nprint ll.head.next.next.value",
        "detail": "mid-range.linked_lists",
        "documentation": {}
    },
    {
        "label": "e3",
        "kind": 5,
        "importPath": "mid-range.linked_lists",
        "description": "mid-range.linked_lists",
        "peekOfCode": "e3 = Element(3)\ne4 = Element(4)\n# Start setting up a LinkedList\nll = LinkedList(e1)\nll.append(e2)\nll.append(e3)\n# Test get_position\n# Should print 3\nprint ll.head.next.next.value\n# Should also print 3",
        "detail": "mid-range.linked_lists",
        "documentation": {}
    },
    {
        "label": "e4",
        "kind": 5,
        "importPath": "mid-range.linked_lists",
        "description": "mid-range.linked_lists",
        "peekOfCode": "e4 = Element(4)\n# Start setting up a LinkedList\nll = LinkedList(e1)\nll.append(e2)\nll.append(e3)\n# Test get_position\n# Should print 3\nprint ll.head.next.next.value\n# Should also print 3\nprint ll.get_position(3).value",
        "detail": "mid-range.linked_lists",
        "documentation": {}
    },
    {
        "label": "ll",
        "kind": 5,
        "importPath": "mid-range.linked_lists",
        "description": "mid-range.linked_lists",
        "peekOfCode": "ll = LinkedList(e1)\nll.append(e2)\nll.append(e3)\n# Test get_position\n# Should print 3\nprint ll.head.next.next.value\n# Should also print 3\nprint ll.get_position(3).value\n# Test insert\nll.insert(e4,3)",
        "detail": "mid-range.linked_lists",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.lintcode138",
        "description": "mid-range.lintcode138",
        "peekOfCode": "class Solution:\n    \"\"\"\n    @param nums: A list of integers\n    @return: A list of integers includes the index of the first number and the index of the last number\n    \"\"\"\n    def subarraySum(self, nums):\n        d = {0: -1}\n        prefix_sum = 0\n        for i, v in enumerate(nums):\n            prefix_sum += v",
        "detail": "mid-range.lintcode138",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.lintcode215",
        "description": "mid-range.lintcode215",
        "peekOfCode": "class Solution:\n    \"\"\"\n    @param: timestamp: the current timestamp\n    @param: event: the string to distinct different event\n    @param: rate: the format is [integer]/[s/m/h/d]\n    @param: increment: whether we should increase the counter\n    @return: true or false to indicate the event is limited or not\n    \"\"\"\n    def __init__(self):\n        self.logs = {}",
        "detail": "mid-range.lintcode215",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.lintcode22",
        "description": "mid-range.lintcode22",
        "peekOfCode": "class Solution(object):\n    # @param nestedList a list, each element in the list\n    # can be a list or integer, for example [1,2,[1,2]]\n    # @return {int[]} a list of integer\n    def flatten(self, nestedList):\n        stack = [nestedList]\n        result = []\n        while stack:\n            top = stack.pop()\n            if isinstance(top, list):",
        "detail": "mid-range.lintcode22",
        "documentation": {}
    },
    {
        "label": "Comparator",
        "kind": 6,
        "importPath": "mid-range.lintcode399",
        "description": "mid-range.lintcode399",
        "peekOfCode": "class Comparator:\n    def cmp(self, a, b)\nYou can use Compare.cmp(a, b) to compare nuts \"a\" and bolts \"b\",\nif \"a\" is bigger than \"b\", it will return 1, else if they are equal,\nit will return 0, else if \"a\" is smaller than \"b\", it will return -1.\nWhen \"a\" is not a nut or \"b\" is not a bolt, it will return 2, which is not valid.\n\"\"\"\nclass Solution:\n    # @param nuts: a list of integers\n    # @param bolts: a list of integers",
        "detail": "mid-range.lintcode399",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.lintcode399",
        "description": "mid-range.lintcode399",
        "peekOfCode": "class Solution:\n    # @param nuts: a list of integers\n    # @param bolts: a list of integers\n    # @param compare: a instance of Comparator\n    # @return: nothing\n    def sortNutsAndBolts(self, nuts, bolts, compare):\n        if not nuts or not bolts or len(nuts) != len(bolts):\n            return\n        self.qsort(nuts, bolts, compare, 0, len(nuts) - 1)\n    def qsort(self, nuts, bolts, compare, l, u):",
        "detail": "mid-range.lintcode399",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.lintcode402",
        "description": "mid-range.lintcode402",
        "peekOfCode": "class Solution:\n    \"\"\"\n    @param: A: An integer array\n    @return: A list of integers includes the index of the first number and the index of the last number\n    \"\"\"\n    def continuousSubarraySum(self, A):\n        result = float(\"-inf\")\n        sum = 0\n        start, end = 0, -1\n        output = None",
        "detail": "mid-range.lintcode402",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.lintcode405",
        "description": "mid-range.lintcode405",
        "peekOfCode": "class Solution:\n    \"\"\"\n    @param: matrix: an integer matrix\n    @return: the coordinate of the left-up and right-down number\n    \"\"\"\n    def submatrixSum(self, matrix):\n        if not matrix or not matrix[0]:\n            return None\n        m, n = len(matrix), len(matrix[0])\n        for top in range(m):",
        "detail": "mid-range.lintcode405",
        "documentation": {}
    },
    {
        "label": "WordCount",
        "kind": 6,
        "importPath": "mid-range.lintcode499",
        "description": "mid-range.lintcode499",
        "peekOfCode": "class WordCount:\n    # @param {str} line a text, for example \"Bye Bye see you next\"\n    def mapper(self, _, line):\n        # Write your code here\n        # Please use 'yield key, value'\n        for word in line.split():\n            yield word, 1\n    # @param key is from mapper\n    # @param values is a set of value with the same key\n    def reducer(self, key, values):",
        "detail": "mid-range.lintcode499",
        "documentation": {}
    },
    {
        "label": "Tweet",
        "kind": 6,
        "importPath": "mid-range.lintcode501",
        "description": "mid-range.lintcode501",
        "peekOfCode": "class Tweet:\n    @classmethod\n    def create(cls, user_id, tweet_text):\n         # This will create a new tweet object,\n         # and auto fill id\n\"\"\"\nclass MiniTwitter:\n    def __init__(self):\n        self.order = 0\n        self.users_tweets = {}",
        "detail": "mid-range.lintcode501",
        "documentation": {}
    },
    {
        "label": "MiniTwitter",
        "kind": 6,
        "importPath": "mid-range.lintcode501",
        "description": "mid-range.lintcode501",
        "peekOfCode": "class MiniTwitter:\n    def __init__(self):\n        self.order = 0\n        self.users_tweets = {}\n        self.friends = {}\n    \"\"\"\n    @param: user_id: An integer\n    @param: tweet_text: a string\n    @return: a tweet\n    \"\"\"",
        "detail": "mid-range.lintcode501",
        "documentation": {}
    },
    {
        "label": "Column",
        "kind": 6,
        "importPath": "mid-range.lintcode502",
        "description": "mid-range.lintcode502",
        "peekOfCode": "class Column:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n\"\"\"\nclass MiniCassandra:\n    def __init__(self):\n        self.memory = {}\n    \"\"\"\n    @param: row_key: a string",
        "detail": "mid-range.lintcode502",
        "documentation": {}
    },
    {
        "label": "MiniCassandra",
        "kind": 6,
        "importPath": "mid-range.lintcode502",
        "description": "mid-range.lintcode502",
        "peekOfCode": "class MiniCassandra:\n    def __init__(self):\n        self.memory = {}\n    \"\"\"\n    @param: row_key: a string\n    @param: column_key: An integer\n    @param: value: a string\n    @return: nothing\n    \"\"\"\n    def insert(self, row_key, column_key, value):",
        "detail": "mid-range.lintcode502",
        "documentation": {}
    },
    {
        "label": "Anagram",
        "kind": 6,
        "importPath": "mid-range.lintcode503",
        "description": "mid-range.lintcode503",
        "peekOfCode": "class Anagram:\n    # @param {str} line a text, for example \"Bye Bye see you next\"\n    def mapper(self, _, line):\n        # Write your code here\n        # Please use 'yield key, value' here\n        for word in line.split():\n            yield \"\".join(sorted(list(word))), word\n    # @param key is from mapper\n    # @param values is a set of value with the same key\n    def reducer(self, key, values):",
        "detail": "mid-range.lintcode503",
        "documentation": {}
    },
    {
        "label": "Document",
        "kind": 6,
        "importPath": "mid-range.lintcode504",
        "description": "mid-range.lintcode504",
        "peekOfCode": "class Document:\n    def __init__(self, id, cotent):\n        self.id = id\n        self.content = content\n\"\"\"\nclass InvertedIndex:\n    # @param {Document} value is a document\n    def mapper(self, _, value):\n        # Write your code here\n        # Please use 'yield key, value' here",
        "detail": "mid-range.lintcode504",
        "documentation": {}
    },
    {
        "label": "InvertedIndex",
        "kind": 6,
        "importPath": "mid-range.lintcode504",
        "description": "mid-range.lintcode504",
        "peekOfCode": "class InvertedIndex:\n    # @param {Document} value is a document\n    def mapper(self, _, value):\n        # Write your code here\n        # Please use 'yield key, value' here\n        for word in value.content.split():\n            yield word, value.id\n    # @param key is from mapper\n    # @param values is a set of value with the same key\n    def reducer(self, key, values):",
        "detail": "mid-range.lintcode504",
        "documentation": {}
    },
    {
        "label": "WebLogger",
        "kind": 6,
        "importPath": "mid-range.lintcode505",
        "description": "mid-range.lintcode505",
        "peekOfCode": "class WebLogger:\n    def __init__(self):\n        self.queue = []\n    \"\"\"\n    @param: timestamp: An integer\n    @return: nothing\n    \"\"\"\n    def hit(self, timestamp):\n        self.queue.append(timestamp)\n    \"\"\"",
        "detail": "mid-range.lintcode505",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.lintcode519",
        "description": "mid-range.lintcode519",
        "peekOfCode": "class Solution:\n    \"\"\"\n    @param: n: a positive integer\n    @return: n x 3 matrix\n    \"\"\"\n    def consistentHashing(self, n):\n        results = [[0, 359, 1]]\n        for i in range(1, n):\n            index = 0\n            for j in range(i):",
        "detail": "mid-range.lintcode519",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.lintcode520",
        "description": "mid-range.lintcode520",
        "peekOfCode": "class Solution:\n    \"\"\"\n    @param {int} n a positive integer\n    @param {int} k a positive integer\n    @return {Solution} a Solution object\n    \"\"\"\n    @classmethod\n    def create(cls, n, k):\n        solution = cls()\n        solution.ids = {}",
        "detail": "mid-range.lintcode520",
        "documentation": {}
    },
    {
        "label": "TinyUrl2",
        "kind": 6,
        "importPath": "mid-range.lintcode522",
        "description": "mid-range.lintcode522",
        "peekOfCode": "class TinyUrl2:\n    def __init__(self):\n        self.long2short = {}\n        self.short2long = {}\n    \"\"\"\n    @param: long_url: a long url\n    @param: key: a short key\n    @return: a short url starts with http://tiny.url/\n    \"\"\"\n    def createCustom(self, long_url, key):",
        "detail": "mid-range.lintcode522",
        "documentation": {}
    },
    {
        "label": "Trip",
        "kind": 6,
        "importPath": "mid-range.lintcode525",
        "description": "mid-range.lintcode525",
        "peekOfCode": "class Trip:\n    self.id; # trip's id, primary key\n    self.driver_id, self.rider_id; # foreign key\n    self.lat, self.lng; # pick up location\n    def __init__(self, rider_id, lat, lng):\nDefinition of Helper\nclass Helper:\n    @classmethod\n    def get_distance(cls, lat1, lng1, lat2, lng2):\n        # return calculate the distance between (lat1, lng1) and (lat2, lng2)",
        "detail": "mid-range.lintcode525",
        "documentation": {}
    },
    {
        "label": "Helper",
        "kind": 6,
        "importPath": "mid-range.lintcode525",
        "description": "mid-range.lintcode525",
        "peekOfCode": "class Helper:\n    @classmethod\n    def get_distance(cls, lat1, lng1, lat2, lng2):\n        # return calculate the distance between (lat1, lng1) and (lat2, lng2)\n\"\"\"\nfrom Trip import Trip, Helper\nclass Location:\n    def __init__(self, lat, lng):\n        self.lat = lat\n        self.lng = lng",
        "detail": "mid-range.lintcode525",
        "documentation": {}
    },
    {
        "label": "Location",
        "kind": 6,
        "importPath": "mid-range.lintcode525",
        "description": "mid-range.lintcode525",
        "peekOfCode": "class Location:\n    def __init__(self, lat, lng):\n        self.lat = lat\n        self.lng = lng\nclass MiniUber:\n    def __init__(self):\n        self.driver2location = {}\n        self.driver2trip = {}\n    # @param {int} driver_id an integer\n    # @param {double} lat, lng driver's location",
        "detail": "mid-range.lintcode525",
        "documentation": {}
    },
    {
        "label": "MiniUber",
        "kind": 6,
        "importPath": "mid-range.lintcode525",
        "description": "mid-range.lintcode525",
        "peekOfCode": "class MiniUber:\n    def __init__(self):\n        self.driver2location = {}\n        self.driver2trip = {}\n    # @param {int} driver_id an integer\n    # @param {double} lat, lng driver's location\n    # return {trip} matched trip information if there have matched rider or null\n    def report(self, driver_id, lat, lng):\n        if driver_id in self.driver2trip:\n            return self.driver2trip[driver_id]",
        "detail": "mid-range.lintcode525",
        "documentation": {}
    },
    {
        "label": "LoadBalancer",
        "kind": 6,
        "importPath": "mid-range.lintcode526",
        "description": "mid-range.lintcode526",
        "peekOfCode": "class LoadBalancer:\n    def __init__(self):\n        self.cluster = []\n        self.id2index = {}\n    \"\"\"\n    @param: server_id: add a new server to the cluster\n    @return: nothing\n    \"\"\"\n    def add(self, server_id):\n        if server_id in self.id2index:",
        "detail": "mid-range.lintcode526",
        "documentation": {}
    },
    {
        "label": "GeoHash",
        "kind": 6,
        "importPath": "mid-range.lintcode529",
        "description": "mid-range.lintcode529",
        "peekOfCode": "class GeoHash:\n    \"\"\"\n    @param: latitude: one of a location coordinate pair\n    @param: longitude: one of a location coordinate pair\n    @param: precision: an integer between 1 to 12\n    @return: a base32 string\n    \"\"\"\n    def encode(self, latitude, longitude, precision):\n        _base32 = \"0123456789bcdefghjkmnpqrstuvwxyz\"\n        latitude_bin = self.get_bin(latitude, -90, 90)",
        "detail": "mid-range.lintcode529",
        "documentation": {}
    },
    {
        "label": "GeoHash",
        "kind": 6,
        "importPath": "mid-range.lintcode530",
        "description": "mid-range.lintcode530",
        "peekOfCode": "class GeoHash:\n    \"\"\"\n    @param: geohash: geohash a base32 string\n    @return: latitude and longitude a location coordinate pair\n    \"\"\"\n    def decode(self, geohash):\n        _base32 = \"0123456789bcdefghjkmnpqrstuvwxyz\"\n        b = \"\"\n        for c in geohash:\n            b += self.i2b(_base32.find(c))",
        "detail": "mid-range.lintcode530",
        "documentation": {}
    },
    {
        "label": "Data",
        "kind": 6,
        "importPath": "mid-range.lintcode538",
        "description": "mid-range.lintcode538",
        "peekOfCode": "class Data:\n    def __init__(self, val, expired):\n        self.val = val\n        self.expired = expired\nclass Memcache:\n    def __init__(self):\n        # do intialization if necessary\n        self.cache = {}\n    \"\"\"\n    @param: curtTime: An integer",
        "detail": "mid-range.lintcode538",
        "documentation": {}
    },
    {
        "label": "Memcache",
        "kind": 6,
        "importPath": "mid-range.lintcode538",
        "description": "mid-range.lintcode538",
        "peekOfCode": "class Memcache:\n    def __init__(self):\n        # do intialization if necessary\n        self.cache = {}\n    \"\"\"\n    @param: curtTime: An integer\n    @param: key: An integer\n    @return: An integer\n    \"\"\"\n    def get(self, curtTime, key):",
        "detail": "mid-range.lintcode538",
        "documentation": {}
    },
    {
        "label": "TrieNode",
        "kind": 6,
        "importPath": "mid-range.lintcode623",
        "description": "mid-range.lintcode623",
        "peekOfCode": "class TrieNode:\n    def __init__(self):\n        self.isWord = False\n        self.word = None\n        self.children = {}\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def insert(self, word):\n        node = self.root",
        "detail": "mid-range.lintcode623",
        "documentation": {}
    },
    {
        "label": "Trie",
        "kind": 6,
        "importPath": "mid-range.lintcode623",
        "description": "mid-range.lintcode623",
        "peekOfCode": "class Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def insert(self, word):\n        node = self.root\n        for c in word:\n            if c not in node.children:\n                node.children[c] = TrieNode()\n            node = node.children[c]\n        node.isWord = True",
        "detail": "mid-range.lintcode623",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.lintcode623",
        "description": "mid-range.lintcode623",
        "peekOfCode": "class Solution:\n    \"\"\"\n    @param words: a set of stirngs\n    @param target: a target string\n    @param k: An integer\n    @return: output all the strings that meet the requirements\n    \"\"\"\n    def kDistance(self, words, target, k):\n        trie = Trie()\n        for word in words:",
        "detail": "mid-range.lintcode623",
        "documentation": {}
    },
    {
        "label": "longest_increasing_subsequence",
        "kind": 2,
        "importPath": "mid-range.lis",
        "description": "mid-range.lis",
        "peekOfCode": "def longest_increasing_subsequence(_list):\n    \"\"\"\n    The Longest Increasing Subsequence (LIS) problem is to find the length of the longest subsequence of a\n    given sequence such that all elements of the subsequence are sorted in increasing order. For example,\n    the length of LIS for [10, 22, 9, 33, 21, 50, 41, 60, 80] is 6 and LIS is [10, 22, 33, 50, 60, 80].\n    :param _list: an array of elements\n    :return: returns a tuple of maximum length of lis and an array of the elements of lis\n    \"\"\"\n    # Initialize list with some value\n    lis = [1] * len(_list)",
        "detail": "mid-range.lis",
        "documentation": {}
    },
    {
        "label": "get_code",
        "kind": 2,
        "importPath": "mid-range.lis",
        "description": "mid-range.lis",
        "peekOfCode": "def get_code():\n    \"\"\"\n    returns the code for the longest_increasing_subsequence function\n    \"\"\"\n    return inspect.getsource(longest_increasing_subsequence)",
        "detail": "mid-range.lis",
        "documentation": {}
    },
    {
        "label": "gather_clone_urls",
        "kind": 2,
        "importPath": "mid-range.list-org-repositories",
        "description": "mid-range.list-org-repositories",
        "peekOfCode": "def gather_clone_urls(organization, no_forks=True):\n    all_repos = gh.repos.list(user=organization).all()\n    for repo in all_repos:\n        # Don't print the urls for repos that are forks.\n        if no_forks and repo.fork:\n            continue\n        yield repo.clone_url\nif __name__ == '__main__':\n    gh = pygithub3.Github()\n    clone_urls = gather_clone_urls(\"FOSSRIT\")",
        "detail": "mid-range.list-org-repositories",
        "documentation": {}
    },
    {
        "label": "gh",
        "kind": 5,
        "importPath": "mid-range.list-org-repositories",
        "description": "mid-range.list-org-repositories",
        "peekOfCode": "gh = None\ndef gather_clone_urls(organization, no_forks=True):\n    all_repos = gh.repos.list(user=organization).all()\n    for repo in all_repos:\n        # Don't print the urls for repos that are forks.\n        if no_forks and repo.fork:\n            continue\n        yield repo.clone_url\nif __name__ == '__main__':\n    gh = pygithub3.Github()",
        "detail": "mid-range.list-org-repositories",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "mid-range.list",
        "description": "mid-range.list",
        "peekOfCode": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass Solution:\n    def middleNode(self, head: ListNode) -> ListNode:\n        get_len = 0\n        current = head\n        while current:\n            get_len += 1",
        "detail": "mid-range.list",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "mid-range.list",
        "description": "mid-range.list",
        "peekOfCode": "class Solution:\n    def middleNode(self, head: ListNode) -> ListNode:\n        get_len = 0\n        current = head\n        while current:\n            get_len += 1\n            current = current.next\n        mid = get_len // 2\n        current = head\n        while mid > 0:",
        "detail": "mid-range.list",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "mid-range.ListExample",
        "description": "mid-range.ListExample",
        "peekOfCode": "my_list = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]\n# Output: p\nprint(my_list[0])\n# Output: t\nprint(my_list[2])\n# Output: o\nprint(my_list[4])\n# Error! Only integer can be used for indexing\n# my_list[4.0]\n# Nested List",
        "detail": "mid-range.ListExample",
        "documentation": {}
    },
    {
        "label": "n_list",
        "kind": 5,
        "importPath": "mid-range.ListExample",
        "description": "mid-range.ListExample",
        "peekOfCode": "n_list = [\"Happy\", [2, 0, 1, 5]]\n# Nested indexing\n# Output: a\nprint(n_list[0][1])\n# Output: 5\nprint(n_list[1][3])",
        "detail": "mid-range.ListExample",
        "documentation": {}
    },
    {
        "label": "numsAndAlphas",
        "kind": 5,
        "importPath": "mid-range.listOperations",
        "description": "mid-range.listOperations",
        "peekOfCode": "numsAndAlphas = [\"a\", 1, \"hello\", 3.14159265359, \"are you okay\", True, \"good\", False]\n# this is going to work\nprint(numsAndAlphas)\n# list accessing\n# You can access single items from the list similar to string indexing\n# if you dont know string indexing look for my program called stringOperations.py\nprint(numsAndAlphas[0])\nprint(numsAndAlphas[1:5])\nprint(numsAndAlphas[0:])\nprint(numsAndAlphas[:6])",
        "detail": "mid-range.listOperations",
        "documentation": {}
    },
    {
        "label": "list2",
        "kind": 5,
        "importPath": "mid-range.listOperations",
        "description": "mid-range.listOperations",
        "peekOfCode": "list2 = [2, 9, 16, 25, 36, 49, 64, 81, 100, 144]\nnewList = numsAndAlphas + list2",
        "detail": "mid-range.listOperations",
        "documentation": {}
    },
    {
        "label": "newList",
        "kind": 5,
        "importPath": "mid-range.listOperations",
        "description": "mid-range.listOperations",
        "peekOfCode": "newList = numsAndAlphas + list2",
        "detail": "mid-range.listOperations",
        "documentation": {}
    },
    {
        "label": "siliconValley",
        "kind": 5,
        "importPath": "mid-range.listOperationsMethods",
        "description": "mid-range.listOperationsMethods",
        "peekOfCode": "siliconValley = [\n    \"Google\",\n    \"Apple\",\n    \"Dropbox\",\n    \"Facebook\",\n    \"Cisco\",\n    \"Adobe\",\n    \"Oracle\",\n    \"Samsung\",\n]",
        "detail": "mid-range.listOperationsMethods",
        "documentation": {}
    },
    {
        "label": "poppedElement",
        "kind": 5,
        "importPath": "mid-range.listOperationsMethods",
        "description": "mid-range.listOperationsMethods",
        "peekOfCode": "poppedElement = siliconValley.pop(4)\nprint(\"Popped element is \" + poppedElement)\n# Oops I Samsung isnt in silicon valley, I have to remove Samsung from list\n# How am I gonna do thats\n# You have to enter the element in parenthesis and not it's index\nsiliconValley.remove(\"Samsung\")\nprint(siliconValley)\n# I want to sort the list in alphabetical order\n# How to do thats\n# simple",
        "detail": "mid-range.listOperationsMethods",
        "documentation": {}
    },
    {
        "label": "googleIndex",
        "kind": 5,
        "importPath": "mid-range.listOperationsMethods",
        "description": "mid-range.listOperationsMethods",
        "peekOfCode": "googleIndex = siliconValley.index(\"Google\")\nprint(siliconValley[googleIndex])\n# I am tired of watching those elements again and again\n# How I am going to do thats\n# easy\ndel siliconValley\nprint(siliconValley)  # this should probably give you an NameError",
        "detail": "mid-range.listOperationsMethods",
        "documentation": {}
    },
    {
        "label": "getLi",
        "kind": 5,
        "importPath": "mid-range.listReverse",
        "description": "mid-range.listReverse",
        "peekOfCode": "getLi = [12, 43, 7, 43, 87, 89, 56, 9809, 9878, 56, 78, 98, True, 56, 76]\nreverseList = getLi[::-1]  # [::-1] tells to step from end without difference\nprint(reverseList)",
        "detail": "mid-range.listReverse",
        "documentation": {}
    },
    {
        "label": "reverseList",
        "kind": 5,
        "importPath": "mid-range.listReverse",
        "description": "mid-range.listReverse",
        "peekOfCode": "reverseList = getLi[::-1]  # [::-1] tells to step from end without difference\nprint(reverseList)",
        "detail": "mid-range.listReverse",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l = []  # 5\n# real len = 10\n# logical len = 5\nl = [None] * 5\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l = [None] * 5\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl = [None] * 10\nl[0] = 10\nl[1] = 23",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[0]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl = [None] * 10\nl[0] = 10\nl[1] = 23\nl[2] = 3434",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[1]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl = [None] * 10\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[2]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl = [None] * 10\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[3]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[3] = 234234\nl[4] = 121\nl[5] = 3423\nl = [None] * 10\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[4]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[4] = 121\nl[5] = 3423\nl = [None] * 10\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[5]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[5] = 3423\nl = [None] * 10\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l = [None] * 10\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[0]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[1]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[2]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234\nl = [None] * 20",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[3]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234\nl = [None] * 20\nl[0] = 10",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[4]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234\nl = [None] * 20\nl[0] = 10\nl[1] = 23",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[5]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234\nl = [None] * 20\nl[0] = 10\nl[1] = 23\nl[2] = 3434",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[6]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234\nl = [None] * 20\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[7]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234\nl = [None] * 20\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[8]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[8] = 23\nl[9] = 3434\nl[10] = 234234\nl = [None] * 20\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[9]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[9] = 3434\nl[10] = 234234\nl = [None] * 20\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[10]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[10] = 234234\nl = [None] * 20\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l = [None] * 20\nl[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[0]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[0] = 10\nl[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[1]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[1] = 23\nl[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[2]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[2] = 3434\nl[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[3]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[3] = 234234\nl[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[4]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[4] = 121\nl[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[5]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[5] = 3423\nl[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[6]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[6] = 23\nl[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[7]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[7] = 10\nl[8] = 23\nl[9] = 3434\nl[10] = 234234",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[8]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[8] = 23\nl[9] = 3434\nl[10] = 234234",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[9]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[9] = 3434\nl[10] = 234234",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "l[10]",
        "kind": 5,
        "importPath": "mid-range.lists",
        "description": "mid-range.lists",
        "peekOfCode": "l[10] = 234234",
        "detail": "mid-range.lists",
        "documentation": {}
    },
    {
        "label": "list_of_even_squares",
        "kind": 5,
        "importPath": "mid-range.list_comprehensions",
        "description": "mid-range.list_comprehensions",
        "peekOfCode": "list_of_even_squares = [num ** 2 for num in range(0, 101, 2)]\nprint(list_of_even_squares, \"\\n\")\nlist_of_odd_squares = [num ** 2 for num in range(1, 102, 2)]\nprint(list_of_odd_squares, \"\\n\")\nlist_of_even_cubes = [num ** 3 for num in range(0, 101, 2)]\nprint(list_of_even_cubes, \"\\n\")\nlist_of_odd_cubes = [num ** 3 for num in range(1, 102, 2)]\nprint(list_of_odd_cubes, \"\\n\")",
        "detail": "mid-range.list_comprehensions",
        "documentation": {}
    },
    {
        "label": "list_of_odd_squares",
        "kind": 5,
        "importPath": "mid-range.list_comprehensions",
        "description": "mid-range.list_comprehensions",
        "peekOfCode": "list_of_odd_squares = [num ** 2 for num in range(1, 102, 2)]\nprint(list_of_odd_squares, \"\\n\")\nlist_of_even_cubes = [num ** 3 for num in range(0, 101, 2)]\nprint(list_of_even_cubes, \"\\n\")\nlist_of_odd_cubes = [num ** 3 for num in range(1, 102, 2)]\nprint(list_of_odd_cubes, \"\\n\")",
        "detail": "mid-range.list_comprehensions",
        "documentation": {}
    },
    {
        "label": "list_of_even_cubes",
        "kind": 5,
        "importPath": "mid-range.list_comprehensions",
        "description": "mid-range.list_comprehensions",
        "peekOfCode": "list_of_even_cubes = [num ** 3 for num in range(0, 101, 2)]\nprint(list_of_even_cubes, \"\\n\")\nlist_of_odd_cubes = [num ** 3 for num in range(1, 102, 2)]\nprint(list_of_odd_cubes, \"\\n\")",
        "detail": "mid-range.list_comprehensions",
        "documentation": {}
    },
    {
        "label": "list_of_odd_cubes",
        "kind": 5,
        "importPath": "mid-range.list_comprehensions",
        "description": "mid-range.list_comprehensions",
        "peekOfCode": "list_of_odd_cubes = [num ** 3 for num in range(1, 102, 2)]\nprint(list_of_odd_cubes, \"\\n\")",
        "detail": "mid-range.list_comprehensions",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "mid-range.List_Items_-_Data_Types__1.txt",
        "description": "mid-range.List_Items_-_Data_Types__1.txt",
        "peekOfCode": "list1 = [\"apple\", \"banana\", \"cherry\"]\nlist2 = [1, 5, 7, 9, 3]\nlist3 = [True, False, False]\nprint(list1)\nprint(list2)\nprint(list3)",
        "detail": "mid-range.List_Items_-_Data_Types__1.txt",
        "documentation": {}
    },
    {
        "label": "list2",
        "kind": 5,
        "importPath": "mid-range.List_Items_-_Data_Types__1.txt",
        "description": "mid-range.List_Items_-_Data_Types__1.txt",
        "peekOfCode": "list2 = [1, 5, 7, 9, 3]\nlist3 = [True, False, False]\nprint(list1)\nprint(list2)\nprint(list3)",
        "detail": "mid-range.List_Items_-_Data_Types__1.txt",
        "documentation": {}
    },
    {
        "label": "list3",
        "kind": 5,
        "importPath": "mid-range.List_Items_-_Data_Types__1.txt",
        "description": "mid-range.List_Items_-_Data_Types__1.txt",
        "peekOfCode": "list3 = [True, False, False]\nprint(list1)\nprint(list2)\nprint(list3)",
        "detail": "mid-range.List_Items_-_Data_Types__1.txt",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "mid-range.list_regex_match",
        "description": "mid-range.list_regex_match",
        "peekOfCode": "text = {\n    '\"version_name\"': '\"8.5.2\"',\n    '\"abi\"': '\"arm64-v8a\"',\n    '\"x_dpi\"': \"515.1539916992188\",\n    '\"environment\"': '{\"sdk_version\"',\n    '\"time_zone\"': '\"America\\\\/Wash\"',\n    '\"user\"': \"{}}\",\n    '\"density_default\"': \"560}}\",\n    '\"resolution_width\"': \"1440\",\n    '\"package_name\"': '\"com.okcupid.okcupid\"',",
        "detail": "mid-range.list_regex_match",
        "documentation": {}
    },
    {
        "label": "Keywords",
        "kind": 5,
        "importPath": "mid-range.list_regex_match",
        "description": "mid-range.list_regex_match",
        "peekOfCode": "Keywords = [\n    \"37abc5afce16xxx\",\n    \"867686022684243\",\n    \"ffffffff-f336-7a7a-0f06-65f40033c587\",\n    \"long\",\n    \"Lat\",\n    \"uuid\",\n    \"WIFI\",\n    \"advertiser\",\n    \"d44bcbfb-873454-4917-9e02-2066d6605d9f\",",
        "detail": "mid-range.list_regex_match",
        "documentation": {}
    },
    {
        "label": "AR",
        "kind": 5,
        "importPath": "mid-range.literal",
        "description": "mid-range.literal",
        "peekOfCode": "AR = np.array(0)\nAR.setflags(write=False)\nKACF = frozenset({None, \"K\", \"A\", \"C\", \"F\"})\nACF = frozenset({None, \"A\", \"C\", \"F\"})\nCF = frozenset({None, \"C\", \"F\"})\norder_list: List[Tuple[frozenset, Callable]] = [\n    (KACF, partial(np.ndarray, 1)),\n    (KACF, AR.tobytes),\n    (KACF, partial(AR.astype, int)),\n    (KACF, AR.copy),",
        "detail": "mid-range.literal",
        "documentation": {}
    },
    {
        "label": "KACF",
        "kind": 5,
        "importPath": "mid-range.literal",
        "description": "mid-range.literal",
        "peekOfCode": "KACF = frozenset({None, \"K\", \"A\", \"C\", \"F\"})\nACF = frozenset({None, \"A\", \"C\", \"F\"})\nCF = frozenset({None, \"C\", \"F\"})\norder_list: List[Tuple[frozenset, Callable]] = [\n    (KACF, partial(np.ndarray, 1)),\n    (KACF, AR.tobytes),\n    (KACF, partial(AR.astype, int)),\n    (KACF, AR.copy),\n    (ACF, partial(AR.reshape, 1)),\n    (KACF, AR.flatten),",
        "detail": "mid-range.literal",
        "documentation": {}
    },
    {
        "label": "ACF",
        "kind": 5,
        "importPath": "mid-range.literal",
        "description": "mid-range.literal",
        "peekOfCode": "ACF = frozenset({None, \"A\", \"C\", \"F\"})\nCF = frozenset({None, \"C\", \"F\"})\norder_list: List[Tuple[frozenset, Callable]] = [\n    (KACF, partial(np.ndarray, 1)),\n    (KACF, AR.tobytes),\n    (KACF, partial(AR.astype, int)),\n    (KACF, AR.copy),\n    (ACF, partial(AR.reshape, 1)),\n    (KACF, AR.flatten),\n    (KACF, AR.ravel),",
        "detail": "mid-range.literal",
        "documentation": {}
    },
    {
        "label": "CF",
        "kind": 5,
        "importPath": "mid-range.literal",
        "description": "mid-range.literal",
        "peekOfCode": "CF = frozenset({None, \"C\", \"F\"})\norder_list: List[Tuple[frozenset, Callable]] = [\n    (KACF, partial(np.ndarray, 1)),\n    (KACF, AR.tobytes),\n    (KACF, partial(AR.astype, int)),\n    (KACF, AR.copy),\n    (ACF, partial(AR.reshape, 1)),\n    (KACF, AR.flatten),\n    (KACF, AR.ravel),\n    (KACF, partial(np.array, 1)),",
        "detail": "mid-range.literal",
        "documentation": {}
    },
    {
        "label": "load_lib_and_attach",
        "kind": 2,
        "importPath": "mid-range.lldb_prepare",
        "description": "mid-range.lldb_prepare",
        "peekOfCode": "def load_lib_and_attach(debugger, command, result, internal_dict):\n    import shlex\n    args = shlex.split(command)\n    dll = args[0]\n    is_debug = args[1]\n    python_code = args[2]\n    show_debug_info = args[3]\n    import lldb\n    options = lldb.SBExpressionOptions()\n    options.SetFetchDynamicValue()",
        "detail": "mid-range.lldb_prepare",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "mid-range.LLQ",
        "description": "mid-range.LLQ",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass Queue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n    def enqueue(self, item):\n        new_node = LinkedListNode(item)",
        "detail": "mid-range.LLQ",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "mid-range.LLQ",
        "description": "mid-range.LLQ",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n    def enqueue(self, item):\n        new_node = LinkedListNode(item)\n        # check if queue is empty\n        if self.rear is None:\n            self.front = new_node\n            self.rear = new_node",
        "detail": "mid-range.LLQ",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "mid-range.LLQ",
        "description": "mid-range.LLQ",
        "peekOfCode": "q = Queue()\nprint(q.is_empty())  # => True\nq.enqueue(12)\nprint(q.is_empty())  # => False\nq.dequeue()\nprint(q.is_empty())  # => True",
        "detail": "mid-range.LLQ",
        "documentation": {}
    },
    {
        "label": "LinkedListNode",
        "kind": 6,
        "importPath": "mid-range.LLSTACK",
        "description": "mid-range.LLSTACK",
        "peekOfCode": "class LinkedListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass Stack:\n    def __init__(self):\n        self.top = None\n    def push(self, data):\n        # create new node with data\n        new_node = LinkedListNode(data)",
        "detail": "mid-range.LLSTACK",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "mid-range.LLSTACK",
        "description": "mid-range.LLSTACK",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.top = None\n    def push(self, data):\n        # create new node with data\n        new_node = LinkedListNode(data)\n        # set current top to new node's next\n        new_node.next = self.top\n        # reset the top pointer to the new node\n        self.top = new_node",
        "detail": "mid-range.LLSTACK",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "mid-range.ll_helpers",
        "description": "mid-range.ll_helpers",
        "peekOfCode": "class ListNode:\n    def __init__(self, x, n=None):\n        \"\"\"Definition for singly-linked list.\"\"\"\n        self.val = x\n        self.next = n\ndef build_ll(arr):\n    \"\"\"Builds a linked list from array. Used for testing.\"\"\"\n    res = ListNode(None)\n    pt = res\n    for num in arr:",
        "detail": "mid-range.ll_helpers",
        "documentation": {}
    },
    {
        "label": "build_ll",
        "kind": 2,
        "importPath": "mid-range.ll_helpers",
        "description": "mid-range.ll_helpers",
        "peekOfCode": "def build_ll(arr):\n    \"\"\"Builds a linked list from array. Used for testing.\"\"\"\n    res = ListNode(None)\n    pt = res\n    for num in arr:\n        pt.next = ListNode(num)\n        pt = pt.next\n    return res.next\ndef print_ll(head):\n    \"\"\"Prints a linked list in this format: x -> y -> z. Used for testing.\"\"\"",
        "detail": "mid-range.ll_helpers",
        "documentation": {}
    },
    {
        "label": "print_ll",
        "kind": 2,
        "importPath": "mid-range.ll_helpers",
        "description": "mid-range.ll_helpers",
        "peekOfCode": "def print_ll(head):\n    \"\"\"Prints a linked list in this format: x -> y -> z. Used for testing.\"\"\"\n    res = []\n    while head != None:\n        res.append(str(head.val))\n        head = head.next\n    print(\" -> \".join(res))",
        "detail": "mid-range.ll_helpers",
        "documentation": {}
    }
]