{
  "expireTime": 9007200887118514000,
  "key": "transformer-remark-markdown-html-8d60545bdf134864675b2bb3805ce45b-gatsby-remark-autolink-headersgatsby-remark-prismjs-",
  "val": "<h1 id=\"semver7----the-semantic-versioner-for-npm\" style=\"position:relative;\"><a href=\"#semver7----the-semantic-versioner-for-npm\" aria-label=\"semver7    the semantic versioner for npm permalink\" class=\"header-link-class before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>semver(7) -- The semantic versioner for npm</h1>\n<h2 id=\"install\" style=\"position:relative;\"><a href=\"#install\" aria-label=\"install permalink\" class=\"header-link-class before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save semver</code></pre></div>\n<h2 id=\"usage\" style=\"position:relative;\"><a href=\"#usage\" aria-label=\"usage permalink\" class=\"header-link-class before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage</h2>\n<p>As a node module:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> semver <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"semver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsemver<span class=\"token punctuation\">.</span><span class=\"token function\">valid</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.2.3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '1.2.3'</span>\nsemver<span class=\"token punctuation\">.</span><span class=\"token function\">valid</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.b.c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\nsemver<span class=\"token punctuation\">.</span><span class=\"token function\">clean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"  =v1.2.3   \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '1.2.3'</span>\nsemver<span class=\"token punctuation\">.</span><span class=\"token function\">satisfies</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.2.3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1.x || >=2.5.0 || 5.0.0 - 7.2.3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nsemver<span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.2.3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"9.8.7\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nsemver<span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.2.3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"9.8.7\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nsemver<span class=\"token punctuation\">.</span><span class=\"token function\">minVersion</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">=1.0.0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '1.0.0'</span>\nsemver<span class=\"token punctuation\">.</span><span class=\"token function\">valid</span><span class=\"token punctuation\">(</span>semver<span class=\"token punctuation\">.</span><span class=\"token function\">coerce</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '2.0.0'</span>\nsemver<span class=\"token punctuation\">.</span><span class=\"token function\">valid</span><span class=\"token punctuation\">(</span>semver<span class=\"token punctuation\">.</span><span class=\"token function\">coerce</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"42.6.7.9.3-alpha\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '42.6.7'</span></code></pre></div>\n<p>As a command-line utility:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ semver -h\n\nA JavaScript implementation of the https://semver.org/ specification\nCopyright Isaac Z. Schlueter\n\nUsage: semver [options] &lt;version&gt; [&lt;version&gt; [...]]\nPrints valid versions sorted by SemVer precedence\n\nOptions:\n-r --range &lt;range&gt;\n        Print versions that match the specified range.\n\n-i --increment [&lt;level&gt;]\n        Increment a version by the specified level.  Level can\n        be one of: major, minor, patch, premajor, preminor,\n        prepatch, or prerelease.  Default level is &#39;patch&#39;.\n        Only one version may be specified.\n\n--preid &lt;identifier&gt;\n        Identifier to be used to prefix premajor, preminor,\n        prepatch or prerelease version increments.\n\n-l --loose\n        Interpret versions and ranges loosely\n\n-p --include-prerelease\n        Always include prerelease versions in range matching\n\n-c --coerce\n        Coerce a string into SemVer if possible\n        (does not imply --loose)\n\nProgram exits successfully if any valid version satisfies\nall supplied ranges, and prints all satisfying versions.\n\nIf no satisfying versions are found, then exits failure.\n\nVersions are printed in ascending order, so supplying\nmultiple versions to the utility will just sort them.</code></pre></div>\n<h2 id=\"versions\" style=\"position:relative;\"><a href=\"#versions\" aria-label=\"versions permalink\" class=\"header-link-class before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Versions</h2>\n<p>A \"version\" is described by the <code class=\"language-text\">v2.0.0</code> specification found at\n<a href=\"https://semver.org/\">https://semver.org/</a>.</p>\n<p>A leading <code class=\"language-text\">&quot;=&quot;</code> or <code class=\"language-text\">&quot;v&quot;</code> character is stripped off and ignored.</p>\n<h2 id=\"ranges\" style=\"position:relative;\"><a href=\"#ranges\" aria-label=\"ranges permalink\" class=\"header-link-class before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ranges</h2>\n<p>A <code class=\"language-text\">version range</code> is a set of <code class=\"language-text\">comparators</code> which specify versions\nthat satisfy the range.</p>\n<p>A <code class=\"language-text\">comparator</code> is composed of an <code class=\"language-text\">operator</code> and a <code class=\"language-text\">version</code>. The set\nof primitive <code class=\"language-text\">operators</code> is:</p>\n<ul>\n<li><code class=\"language-text\">&lt;</code> Less than</li>\n<li><code class=\"language-text\">&lt;=</code> Less than or equal to</li>\n<li><code class=\"language-text\">&gt;</code> Greater than</li>\n<li><code class=\"language-text\">&gt;=</code> Greater than or equal to</li>\n<li><code class=\"language-text\">=</code> Equal. If no operator is specified, then equality is assumed,\nso this operator is optional, but MAY be included.</li>\n</ul>\n<p>For example, the comparator <code class=\"language-text\">&gt;=1.2.7</code> would match the versions\n<code class=\"language-text\">1.2.7</code>, <code class=\"language-text\">1.2.8</code>, <code class=\"language-text\">2.5.3</code>, and <code class=\"language-text\">1.3.9</code>, but not the versions <code class=\"language-text\">1.2.6</code>\nor <code class=\"language-text\">1.1.0</code>.</p>\n<p>Comparators can be joined by whitespace to form a <code class=\"language-text\">comparator set</code>,\nwhich is satisfied by the <strong>intersection</strong> of all of the comparators\nit includes.</p>\n<p>A range is composed of one or more comparator sets, joined by <code class=\"language-text\">||</code>. A\nversion matches a range if and only if every comparator in at least\none of the <code class=\"language-text\">||</code>-separated comparator sets is satisfied by the version.</p>\n<p>For example, the range <code class=\"language-text\">&gt;=1.2.7 &lt;1.3.0</code> would match the versions\n<code class=\"language-text\">1.2.7</code>, <code class=\"language-text\">1.2.8</code>, and <code class=\"language-text\">1.2.99</code>, but not the versions <code class=\"language-text\">1.2.6</code>, <code class=\"language-text\">1.3.0</code>,\nor <code class=\"language-text\">1.1.0</code>.</p>\n<p>The range <code class=\"language-text\">1.2.7 || &gt;=1.2.9 &lt;2.0.0</code> would match the versions <code class=\"language-text\">1.2.7</code>,\n<code class=\"language-text\">1.2.9</code>, and <code class=\"language-text\">1.4.6</code>, but not the versions <code class=\"language-text\">1.2.8</code> or <code class=\"language-text\">2.0.0</code>.</p>\n<h3 id=\"prerelease-tags\" style=\"position:relative;\"><a href=\"#prerelease-tags\" aria-label=\"prerelease tags permalink\" class=\"header-link-class before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerelease Tags</h3>\n<p>If a version has a prerelease tag (for example, <code class=\"language-text\">1.2.3-alpha.3</code>) then\nit will only be allowed to satisfy comparator sets if at least one\ncomparator with the same <code class=\"language-text\">[major, minor, patch]</code> tuple also has a\nprerelease tag.</p>\n<p>For example, the range <code class=\"language-text\">&gt;1.2.3-alpha.3</code> would be allowed to match the\nversion <code class=\"language-text\">1.2.3-alpha.7</code>, but it would <em>not</em> be satisfied by\n<code class=\"language-text\">3.4.5-alpha.9</code>, even though <code class=\"language-text\">3.4.5-alpha.9</code> is technically \"greater\nthan\" <code class=\"language-text\">1.2.3-alpha.3</code> according to the SemVer sort rules. The version\nrange only accepts prerelease tags on the <code class=\"language-text\">1.2.3</code> version. The\nversion <code class=\"language-text\">3.4.5</code> <em>would</em> satisfy the range, because it does not have a\nprerelease flag, and <code class=\"language-text\">3.4.5</code> is greater than <code class=\"language-text\">1.2.3-alpha.7</code>.</p>\n<p>The purpose for this behavior is twofold. First, prerelease versions\nfrequently are updated very quickly, and contain many breaking changes\nthat are (by the author's design) not yet fit for public consumption.\nTherefore, by default, they are excluded from range matching\nsemantics.</p>\n<p>Second, a user who has opted into using a prerelease version has\nclearly indicated the intent to use <em>that specific</em> set of\nalpha/beta/rc versions. By including a prerelease tag in the range,\nthe user is indicating that they are aware of the risk. However, it\nis still not appropriate to assume that they have opted into taking a\nsimilar risk on the <em>next</em> set of prerelease versions.</p>\n<p>Note that this behavior can be suppressed (treating all prerelease\nversions as if they were normal versions, for the purpose of range\nmatching) by setting the <code class=\"language-text\">includePrerelease</code> flag on the options\nobject to any\n<a href=\"https://github.com/npm/node-semver#functions\">functions</a> that do\nrange matching.</p>\n<h4 id=\"prerelease-identifiers\" style=\"position:relative;\"><a href=\"#prerelease-identifiers\" aria-label=\"prerelease identifiers permalink\" class=\"header-link-class before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerelease Identifiers</h4>\n<p>The method <code class=\"language-text\">.inc</code> takes an additional <code class=\"language-text\">identifier</code> string argument that\nwill append the value of the string as a prerelease identifier:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">semver<span class=\"token punctuation\">.</span><span class=\"token function\">inc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.2.3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"prerelease\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"beta\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// '1.2.4-beta.0'</span></code></pre></div>\n<p>command-line example:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ semver <span class=\"token number\">1.2</span>.3 -i prerelease --preid beta\n<span class=\"token number\">1.2</span>.4-beta.0</code></pre></div>\n<p>Which then can be used to increment further:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ semver <span class=\"token number\">1.2</span>.4-beta.0 -i prerelease\n<span class=\"token number\">1.2</span>.4-beta.1</code></pre></div>\n<h3 id=\"advanced-range-syntax\" style=\"position:relative;\"><a href=\"#advanced-range-syntax\" aria-label=\"advanced range syntax permalink\" class=\"header-link-class before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Advanced Range Syntax</h3>\n<p>Advanced range syntax desugars to primitive comparators in\ndeterministic ways.</p>\n<p>Advanced ranges may be combined in the same way as primitive\ncomparators using white space or <code class=\"language-text\">||</code>.</p>\n<h4 id=\"hyphen-ranges-xyz---abc\" style=\"position:relative;\"><a href=\"#hyphen-ranges-xyz---abc\" aria-label=\"hyphen ranges xyz   abc permalink\" class=\"header-link-class before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hyphen Ranges <code class=\"language-text\">X.Y.Z - A.B.C</code></h4>\n<p>Specifies an inclusive set.</p>\n<ul>\n<li><code class=\"language-text\">1.2.3 - 2.3.4</code> := <code class=\"language-text\">&gt;=1.2.3 &lt;=2.3.4</code></li>\n</ul>\n<p>If a partial version is provided as the first version in the inclusive\nrange, then the missing pieces are replaced with zeroes.</p>\n<ul>\n<li><code class=\"language-text\">1.2 - 2.3.4</code> := <code class=\"language-text\">&gt;=1.2.0 &lt;=2.3.4</code></li>\n</ul>\n<p>If a partial version is provided as the second version in the\ninclusive range, then all versions that start with the supplied parts\nof the tuple are accepted, but nothing that would be greater than the\nprovided tuple parts.</p>\n<ul>\n<li><code class=\"language-text\">1.2.3 - 2.3</code> := <code class=\"language-text\">&gt;=1.2.3 &lt;2.4.0</code></li>\n<li><code class=\"language-text\">1.2.3 - 2</code> := <code class=\"language-text\">&gt;=1.2.3 &lt;3.0.0</code></li>\n</ul>\n<h4 id=\"x-ranges-12x-1x-12-\" style=\"position:relative;\"><a href=\"#x-ranges-12x-1x-12-\" aria-label=\"x ranges 12x 1x 12  permalink\" class=\"header-link-class before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>X-Ranges <code class=\"language-text\">1.2.x</code> <code class=\"language-text\">1.X</code> <code class=\"language-text\">1.2.*</code> <code class=\"language-text\">*</code></h4>\n<p>Any of <code class=\"language-text\">X</code>, <code class=\"language-text\">x</code>, or <code class=\"language-text\">*</code> may be used to \"stand in\" for one of the\nnumeric values in the <code class=\"language-text\">[major, minor, patch]</code> tuple.</p>\n<ul>\n<li><code class=\"language-text\">*</code> := <code class=\"language-text\">&gt;=0.0.0</code> (Any version satisfies)</li>\n<li><code class=\"language-text\">1.x</code> := <code class=\"language-text\">&gt;=1.0.0 &lt;2.0.0</code> (Matching major version)</li>\n<li><code class=\"language-text\">1.2.x</code> := <code class=\"language-text\">&gt;=1.2.0 &lt;1.3.0</code> (Matching major and minor versions)</li>\n</ul>\n<p>A partial version range is treated as an X-Range, so the special\ncharacter is in fact optional.</p>\n<ul>\n<li><code class=\"language-text\">&quot;&quot;</code> (empty string) := <code class=\"language-text\">*</code> := <code class=\"language-text\">&gt;=0.0.0</code></li>\n<li><code class=\"language-text\">1</code> := <code class=\"language-text\">1.x.x</code> := <code class=\"language-text\">&gt;=1.0.0 &lt;2.0.0</code></li>\n<li><code class=\"language-text\">1.2</code> := <code class=\"language-text\">1.2.x</code> := <code class=\"language-text\">&gt;=1.2.0 &lt;1.3.0</code></li>\n</ul>\n<h4 id=\"tilde-ranges-123-12-1\" style=\"position:relative;\"><a href=\"#tilde-ranges-123-12-1\" aria-label=\"tilde ranges 123 12 1 permalink\" class=\"header-link-class before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tilde Ranges <code class=\"language-text\">~1.2.3</code> <code class=\"language-text\">~1.2</code> <code class=\"language-text\">~1</code></h4>\n<p>Allows patch-level changes if a minor version is specified on the\ncomparator. Allows minor-level changes if not.</p>\n<ul>\n<li><code class=\"language-text\">~1.2.3</code> := <code class=\"language-text\">&gt;=1.2.3 &lt;1.(2+1).0</code> := <code class=\"language-text\">&gt;=1.2.3 &lt;1.3.0</code></li>\n<li><code class=\"language-text\">~1.2</code> := <code class=\"language-text\">&gt;=1.2.0 &lt;1.(2+1).0</code> := <code class=\"language-text\">&gt;=1.2.0 &lt;1.3.0</code> (Same as <code class=\"language-text\">1.2.x</code>)</li>\n<li><code class=\"language-text\">~1</code> := <code class=\"language-text\">&gt;=1.0.0 &lt;(1+1).0.0</code> := <code class=\"language-text\">&gt;=1.0.0 &lt;2.0.0</code> (Same as <code class=\"language-text\">1.x</code>)</li>\n<li><code class=\"language-text\">~0.2.3</code> := <code class=\"language-text\">&gt;=0.2.3 &lt;0.(2+1).0</code> := <code class=\"language-text\">&gt;=0.2.3 &lt;0.3.0</code></li>\n<li><code class=\"language-text\">~0.2</code> := <code class=\"language-text\">&gt;=0.2.0 &lt;0.(2+1).0</code> := <code class=\"language-text\">&gt;=0.2.0 &lt;0.3.0</code> (Same as <code class=\"language-text\">0.2.x</code>)</li>\n<li><code class=\"language-text\">~0</code> := <code class=\"language-text\">&gt;=0.0.0 &lt;(0+1).0.0</code> := <code class=\"language-text\">&gt;=0.0.0 &lt;1.0.0</code> (Same as <code class=\"language-text\">0.x</code>)</li>\n<li><code class=\"language-text\">~1.2.3-beta.2</code> := <code class=\"language-text\">&gt;=1.2.3-beta.2 &lt;1.3.0</code> Note that prereleases in\nthe <code class=\"language-text\">1.2.3</code> version will be allowed, if they are greater than or\nequal to <code class=\"language-text\">beta.2</code>. So, <code class=\"language-text\">1.2.3-beta.4</code> would be allowed, but\n<code class=\"language-text\">1.2.4-beta.2</code> would not, because it is a prerelease of a\ndifferent <code class=\"language-text\">[major, minor, patch]</code> tuple.</li>\n</ul>\n<h4 id=\"caret-ranges-123-025-004\" style=\"position:relative;\"><a href=\"#caret-ranges-123-025-004\" aria-label=\"caret ranges 123 025 004 permalink\" class=\"header-link-class before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caret Ranges <code class=\"language-text\">^1.2.3</code> <code class=\"language-text\">^0.2.5</code> <code class=\"language-text\">^0.0.4</code></h4>\n<p>Allows changes that do not modify the left-most non-zero digit in the\n<code class=\"language-text\">[major, minor, patch]</code> tuple. In other words, this allows patch and\nminor updates for versions <code class=\"language-text\">1.0.0</code> and above, patch updates for\nversions <code class=\"language-text\">0.X &gt;=0.1.0</code>, and <em>no</em> updates for versions <code class=\"language-text\">0.0.X</code>.</p>\n<p>Many authors treat a <code class=\"language-text\">0.x</code> version as if the <code class=\"language-text\">x</code> were the major\n\"breaking-change\" indicator.</p>\n<p>Caret ranges are ideal when an author may make breaking changes\nbetween <code class=\"language-text\">0.2.4</code> and <code class=\"language-text\">0.3.0</code> releases, which is a common practice.\nHowever, it presumes that there will <em>not</em> be breaking changes between\n<code class=\"language-text\">0.2.4</code> and <code class=\"language-text\">0.2.5</code>. It allows for changes that are presumed to be\nadditive (but non-breaking), according to commonly observed practices.</p>\n<ul>\n<li><code class=\"language-text\">^1.2.3</code> := <code class=\"language-text\">&gt;=1.2.3 &lt;2.0.0</code></li>\n<li><code class=\"language-text\">^0.2.3</code> := <code class=\"language-text\">&gt;=0.2.3 &lt;0.3.0</code></li>\n<li><code class=\"language-text\">^0.0.3</code> := <code class=\"language-text\">&gt;=0.0.3 &lt;0.0.4</code></li>\n<li><code class=\"language-text\">^1.2.3-beta.2</code> := <code class=\"language-text\">&gt;=1.2.3-beta.2 &lt;2.0.0</code> Note that prereleases in\nthe <code class=\"language-text\">1.2.3</code> version will be allowed, if they are greater than or\nequal to <code class=\"language-text\">beta.2</code>. So, <code class=\"language-text\">1.2.3-beta.4</code> would be allowed, but\n<code class=\"language-text\">1.2.4-beta.2</code> would not, because it is a prerelease of a\ndifferent <code class=\"language-text\">[major, minor, patch]</code> tuple.</li>\n<li><code class=\"language-text\">^0.0.3-beta</code> := <code class=\"language-text\">&gt;=0.0.3-beta &lt;0.0.4</code> Note that prereleases in the\n<code class=\"language-text\">0.0.3</code> version <em>only</em> will be allowed, if they are greater than or\nequal to <code class=\"language-text\">beta</code>. So, <code class=\"language-text\">0.0.3-pr.2</code> would be allowed.</li>\n</ul>\n<p>When parsing caret ranges, a missing <code class=\"language-text\">patch</code> value desugars to the\nnumber <code class=\"language-text\">0</code>, but will allow flexibility within that value, even if the\nmajor and minor versions are both <code class=\"language-text\">0</code>.</p>\n<ul>\n<li><code class=\"language-text\">^1.2.x</code> := <code class=\"language-text\">&gt;=1.2.0 &lt;2.0.0</code></li>\n<li><code class=\"language-text\">^0.0.x</code> := <code class=\"language-text\">&gt;=0.0.0 &lt;0.1.0</code></li>\n<li><code class=\"language-text\">^0.0</code> := <code class=\"language-text\">&gt;=0.0.0 &lt;0.1.0</code></li>\n</ul>\n<p>A missing <code class=\"language-text\">minor</code> and <code class=\"language-text\">patch</code> values will desugar to zero, but also\nallow flexibility within those values, even if the major version is\nzero.</p>\n<ul>\n<li><code class=\"language-text\">^1.x</code> := <code class=\"language-text\">&gt;=1.0.0 &lt;2.0.0</code></li>\n<li><code class=\"language-text\">^0.x</code> := <code class=\"language-text\">&gt;=0.0.0 &lt;1.0.0</code></li>\n</ul>\n<h3 id=\"range-grammar\" style=\"position:relative;\"><a href=\"#range-grammar\" aria-label=\"range grammar permalink\" class=\"header-link-class before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Range Grammar</h3>\n<p>Putting all this together, here is a Backus-Naur grammar for ranges,\nfor the benefit of parser authors:</p>\n<div class=\"gatsby-highlight\" data-language=\"bnf\"><pre class=\"language-bnf\"><code class=\"language-bnf\">range-set  <span class=\"token operator\">::=</span> range <span class=\"token operator\">(</span> logical-or range <span class=\"token operator\">)</span> <span class=\"token operator\">*</span>\nlogical-or <span class=\"token operator\">::=</span> <span class=\"token operator\">(</span> <span class=\"token string\">' '</span> <span class=\"token operator\">)</span> <span class=\"token operator\">*</span> <span class=\"token string\">'||'</span> <span class=\"token operator\">(</span> <span class=\"token string\">' '</span> <span class=\"token operator\">)</span> <span class=\"token operator\">*</span>\nrange      <span class=\"token operator\">::=</span> hyphen <span class=\"token operator\">|</span> simple <span class=\"token operator\">(</span> <span class=\"token string\">' '</span> simple <span class=\"token operator\">)</span> <span class=\"token operator\">*</span> <span class=\"token operator\">|</span> <span class=\"token string\">''</span>\nhyphen     <span class=\"token operator\">::=</span> partial <span class=\"token string\">' - '</span> partial\nsimple     <span class=\"token operator\">::=</span> primitive <span class=\"token operator\">|</span> partial <span class=\"token operator\">|</span> tilde <span class=\"token operator\">|</span> caret\nprimitive  <span class=\"token operator\">::=</span> <span class=\"token operator\">(</span> <span class=\"token string\">'&lt;'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'>'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'>='</span> <span class=\"token operator\">|</span> <span class=\"token string\">'&lt;='</span> <span class=\"token operator\">|</span> <span class=\"token string\">'='</span> <span class=\"token operator\">)</span> partial\npartial    <span class=\"token operator\">::=</span> xr <span class=\"token operator\">(</span> <span class=\"token string\">'.'</span> xr <span class=\"token operator\">(</span> <span class=\"token string\">'.'</span> xr qualifier <span class=\"token operator\">?</span> <span class=\"token operator\">)</span><span class=\"token operator\">?</span> <span class=\"token operator\">)</span><span class=\"token operator\">?</span>\nxr         <span class=\"token operator\">::=</span> <span class=\"token string\">'x'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'X'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'*'</span> <span class=\"token operator\">|</span> nr\nnr         <span class=\"token operator\">::=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">|</span> <span class=\"token operator\">[</span><span class=\"token string\">'1'</span>-<span class=\"token string\">'9'</span><span class=\"token operator\">]</span> <span class=\"token operator\">(</span> <span class=\"token operator\">[</span><span class=\"token string\">'0'</span>-<span class=\"token string\">'9'</span><span class=\"token operator\">]</span> <span class=\"token operator\">)</span> <span class=\"token operator\">*</span>\ntilde      <span class=\"token operator\">::=</span> <span class=\"token string\">'~'</span> partial\ncaret      <span class=\"token operator\">::=</span> <span class=\"token string\">'^'</span> partial\nqualifier  <span class=\"token operator\">::=</span> <span class=\"token operator\">(</span> <span class=\"token string\">'-'</span> pre <span class=\"token operator\">)</span><span class=\"token operator\">?</span> <span class=\"token operator\">(</span> <span class=\"token string\">'+'</span> build <span class=\"token operator\">)</span><span class=\"token operator\">?</span>\npre        <span class=\"token operator\">::=</span> parts\nbuild      <span class=\"token operator\">::=</span> parts\nparts      <span class=\"token operator\">::=</span> part <span class=\"token operator\">(</span> <span class=\"token string\">'.'</span> part <span class=\"token operator\">)</span> <span class=\"token operator\">*</span>\npart       <span class=\"token operator\">::=</span> nr <span class=\"token operator\">|</span> <span class=\"token operator\">[</span>-0-9A-Za-z<span class=\"token operator\">]</span><span class=\"token operator\">+</span></code></pre></div>\n<h2 id=\"functions\" style=\"position:relative;\"><a href=\"#functions\" aria-label=\"functions permalink\" class=\"header-link-class before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functions</h2>\n<p>All methods and classes take a final <code class=\"language-text\">options</code> object argument. All\noptions in this object are <code class=\"language-text\">false</code> by default. The options supported\nare:</p>\n<ul>\n<li><code class=\"language-text\">loose</code> Be more forgiving about not-quite-valid semver strings.\n(Any resulting output will always be 100% strict compliant, of\ncourse.) For backwards compatibility reasons, if the <code class=\"language-text\">options</code>\nargument is a boolean value instead of an object, it is interpreted\nto be the <code class=\"language-text\">loose</code> param.</li>\n<li><code class=\"language-text\">includePrerelease</code> Set to suppress the <a href=\"https://github.com/npm/node-semver#prerelease-tags\">default\nbehavior</a> of\nexcluding prerelease tagged versions from ranges unless they are\nexplicitly opted into.</li>\n</ul>\n<p>Strict-mode Comparators and Ranges will be strict about the SemVer\nstrings that they parse.</p>\n<ul>\n<li><code class=\"language-text\">valid(v)</code>: Return the parsed version, or null if it's not valid.</li>\n<li>\n<p><code class=\"language-text\">inc(v, release)</code>: Return the version incremented by the release\ntype (<code class=\"language-text\">major</code>, <code class=\"language-text\">premajor</code>, <code class=\"language-text\">minor</code>, <code class=\"language-text\">preminor</code>, <code class=\"language-text\">patch</code>,\n<code class=\"language-text\">prepatch</code>, or <code class=\"language-text\">prerelease</code>), or null if it's not valid</p>\n<ul>\n<li><code class=\"language-text\">premajor</code> in one call will bump the version up to the next major\nversion and down to a prerelease of that major version.\n<code class=\"language-text\">preminor</code>, and <code class=\"language-text\">prepatch</code> work the same way.</li>\n<li>If called from a non-prerelease version, the <code class=\"language-text\">prerelease</code> will work the\nsame as <code class=\"language-text\">prepatch</code>. It increments the patch version, then makes a\nprerelease. If the input version is already a prerelease it simply\nincrements it.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">prerelease(v)</code>: Returns an array of prerelease components, or null\nif none exist. Example: <code class=\"language-text\">prerelease(&#39;1.2.3-alpha.1&#39;) -&gt; [&#39;alpha&#39;, 1]</code></li>\n<li><code class=\"language-text\">major(v)</code>: Return the major version number.</li>\n<li><code class=\"language-text\">minor(v)</code>: Return the minor version number.</li>\n<li><code class=\"language-text\">patch(v)</code>: Return the patch version number.</li>\n<li><code class=\"language-text\">intersects(r1, r2, loose)</code>: Return true if the two supplied ranges\nor comparators intersect.</li>\n<li><code class=\"language-text\">parse(v)</code>: Attempt to parse a string as a semantic version, returning either\na <code class=\"language-text\">SemVer</code> object or <code class=\"language-text\">null</code>.</li>\n</ul>\n<h3 id=\"comparison\" style=\"position:relative;\"><a href=\"#comparison\" aria-label=\"comparison permalink\" class=\"header-link-class before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comparison</h3>\n<ul>\n<li><code class=\"language-text\">gt(v1, v2)</code>: <code class=\"language-text\">v1 &gt; v2</code></li>\n<li><code class=\"language-text\">gte(v1, v2)</code>: <code class=\"language-text\">v1 &gt;= v2</code></li>\n<li><code class=\"language-text\">lt(v1, v2)</code>: <code class=\"language-text\">v1 &lt; v2</code></li>\n<li><code class=\"language-text\">lte(v1, v2)</code>: <code class=\"language-text\">v1 &lt;= v2</code></li>\n<li><code class=\"language-text\">eq(v1, v2)</code>: <code class=\"language-text\">v1 == v2</code> This is true if they're logically equivalent,\neven if they're not the exact same string. You already know how to\ncompare strings.</li>\n<li><code class=\"language-text\">neq(v1, v2)</code>: <code class=\"language-text\">v1 != v2</code> The opposite of <code class=\"language-text\">eq</code>.</li>\n<li><code class=\"language-text\">cmp(v1, comparator, v2)</code>: Pass in a comparison string, and it'll call\nthe corresponding function above. <code class=\"language-text\">&quot;===&quot;</code> and <code class=\"language-text\">&quot;!==&quot;</code> do simple\nstring comparison, but are included for completeness. Throws if an\ninvalid comparison string is provided.</li>\n<li><code class=\"language-text\">compare(v1, v2)</code>: Return <code class=\"language-text\">0</code> if <code class=\"language-text\">v1 == v2</code>, or <code class=\"language-text\">1</code> if <code class=\"language-text\">v1</code> is greater, or <code class=\"language-text\">-1</code> if\n<code class=\"language-text\">v2</code> is greater. Sorts in ascending order if passed to <code class=\"language-text\">Array.sort()</code>.</li>\n<li><code class=\"language-text\">rcompare(v1, v2)</code>: The reverse of compare. Sorts an array of versions\nin descending order when passed to <code class=\"language-text\">Array.sort()</code>.</li>\n<li><code class=\"language-text\">diff(v1, v2)</code>: Returns difference between two versions by the release type\n(<code class=\"language-text\">major</code>, <code class=\"language-text\">premajor</code>, <code class=\"language-text\">minor</code>, <code class=\"language-text\">preminor</code>, <code class=\"language-text\">patch</code>, <code class=\"language-text\">prepatch</code>, or <code class=\"language-text\">prerelease</code>),\nor null if the versions are the same.</li>\n</ul>\n<h3 id=\"comparators\" style=\"position:relative;\"><a href=\"#comparators\" aria-label=\"comparators permalink\" class=\"header-link-class before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comparators</h3>\n<ul>\n<li><code class=\"language-text\">intersects(comparator)</code>: Return true if the comparators intersect</li>\n</ul>\n<h3 id=\"ranges-1\" style=\"position:relative;\"><a href=\"#ranges-1\" aria-label=\"ranges 1 permalink\" class=\"header-link-class before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ranges</h3>\n<ul>\n<li><code class=\"language-text\">validRange(range)</code>: Return the valid range or null if it's not valid</li>\n<li><code class=\"language-text\">satisfies(version, range)</code>: Return true if the version satisfies the\nrange.</li>\n<li><code class=\"language-text\">maxSatisfying(versions, range)</code>: Return the highest version in the list\nthat satisfies the range, or <code class=\"language-text\">null</code> if none of them do.</li>\n<li><code class=\"language-text\">minSatisfying(versions, range)</code>: Return the lowest version in the list\nthat satisfies the range, or <code class=\"language-text\">null</code> if none of them do.</li>\n<li><code class=\"language-text\">minVersion(range)</code>: Return the lowest version that can possibly match\nthe given range.</li>\n<li><code class=\"language-text\">gtr(version, range)</code>: Return <code class=\"language-text\">true</code> if version is greater than all the\nversions possible in the range.</li>\n<li><code class=\"language-text\">ltr(version, range)</code>: Return <code class=\"language-text\">true</code> if version is less than all the\nversions possible in the range.</li>\n<li><code class=\"language-text\">outside(version, range, hilo)</code>: Return true if the version is outside\nthe bounds of the range in either the high or low direction. The\n<code class=\"language-text\">hilo</code> argument must be either the string <code class=\"language-text\">&#39;&gt;&#39;</code> or <code class=\"language-text\">&#39;&lt;&#39;</code>. (This is\nthe function called by <code class=\"language-text\">gtr</code> and <code class=\"language-text\">ltr</code>.)</li>\n<li><code class=\"language-text\">intersects(range)</code>: Return true if any of the ranges comparators intersect</li>\n</ul>\n<p>Note that, since ranges may be non-contiguous, a version might not be\ngreater than a range, less than a range, <em>or</em> satisfy a range! For\nexample, the range <code class=\"language-text\">1.2 &lt;1.2.9 || &gt;2.0.0</code> would have a hole from <code class=\"language-text\">1.2.9</code>\nuntil <code class=\"language-text\">2.0.0</code>, so the version <code class=\"language-text\">1.2.10</code> would not be greater than the\nrange (because <code class=\"language-text\">2.0.1</code> satisfies, which is higher), nor less than the\nrange (since <code class=\"language-text\">1.2.8</code> satisfies, which is lower), and it also does not\nsatisfy the range.</p>\n<p>If you want to know if a version satisfies or does not satisfy a\nrange, use the <code class=\"language-text\">satisfies(version, range)</code> function.</p>\n<h3 id=\"coercion\" style=\"position:relative;\"><a href=\"#coercion\" aria-label=\"coercion permalink\" class=\"header-link-class before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Coercion</h3>\n<ul>\n<li><code class=\"language-text\">coerce(version)</code>: Coerces a string to semver if possible</li>\n</ul>\n<p>This aims to provide a very forgiving translation of a non-semver string to\nsemver. It looks for the first digit in a string, and consumes all\nremaining characters which satisfy at least a partial semver (e.g., <code class=\"language-text\">1</code>,\n<code class=\"language-text\">1.2</code>, <code class=\"language-text\">1.2.3</code>) up to the max permitted length (256 characters). Longer\nversions are simply truncated (<code class=\"language-text\">4.6.3.9.2-alpha2</code> becomes <code class=\"language-text\">4.6.3</code>). All\nsurrounding text is simply ignored (<code class=\"language-text\">v3.4 replaces v3.3.1</code> becomes\n<code class=\"language-text\">3.4.0</code>). Only text which lacks digits will fail coercion (<code class=\"language-text\">version one</code>\nis not valid). The maximum length for any semver component considered for\ncoercion is 16 characters; longer components will be ignored\n(<code class=\"language-text\">10000000000000000.4.7.4</code> becomes <code class=\"language-text\">4.7.4</code>). The maximum value for any\nsemver component is <code class=\"language-text\">Number.MAX_SAFE_INTEGER || (2**53 - 1)</code>; higher value\ncomponents are invalid (<code class=\"language-text\">9999999999999999.4.7.4</code> is likely invalid).</p>"
}
